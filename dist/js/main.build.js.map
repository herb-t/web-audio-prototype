{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","app/index.js","main.build.js","app/config.js","app/libs/EffectComposer.js","app/libs/MaskPass.js","app/libs/OrbitControls.js","app/libs/RenderPass.js","app/libs/ShaderPass.js","app/modules/Scene.js","app/shaders/BadTv.js","app/shaders/CopyShader.js","app/shaders/DigitalGlitch.js","app/shaders/DotScreenShader.js","app/shaders/FilmShader.js","app/shaders/RGBShiftShader.js","app/vendor/TweenMax.min.js","node_modules/three/build/three.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","config","Scene","console","log","threeScene","init","./config","./modules/Scene","2","3","THREE","EffectComposer","renderer","renderTarget","this","undefined","parameters","minFilter","LinearFilter","magFilter","format","RGBAFormat","stencilBuffer","size","getSize","WebGLRenderTarget","width","height","renderTarget1","renderTarget2","clone","writeBuffer","readBuffer","passes","CopyShader","error","copyPass","ShaderPass","Object","assign","prototype","swapBuffers","tmp","addPass","pass","push","setSize","insertPass","index","splice","render","delta","maskActive","il","enabled","needsSwap","context","stencilFunc","NOTEQUAL","EQUAL","MaskPass","ClearMaskPass","reset","dispose","Pass","clear","renderToScreen","three","4","scene","camera","inverse","create","constructor","state","buffers","color","setMask","depth","setLocked","writeValue","clearValue","stencil","setTest","setOp","REPLACE","setFunc","ALWAYS","setClear","KEEP","5","OrbitControls","object","domElement","getAutoRotationAngle","Math","PI","scope","autoRotateSpeed","getZoomScale","pow","zoomSpeed","onMouseDown","event","preventDefault","button","noRotate","STATE","ROTATE","rotateStart","set","clientX","clientY","noZoom","DOLLY","dollyStart","noPan","PAN","panStart","addEventListener","onMouseMove","onMouseUp","element","document","body","rotateEnd","rotateDelta","subVectors","rotateLeft","x","clientWidth","rotateSpeed","rotateUp","y","clientHeight","copy","dollyEnd","dollyDelta","dollyIn","dollyOut","panEnd","panDelta","pan","update","removeEventListener","NONE","onMouseWheel","wheelDelta","detail","onKeyDown","noKeys","needUpdate","keyCode","keys","UP","Vector2","keyPanSpeed","BOTTOM","LEFT","RIGHT","touchstart","touches","TOUCH_ROTATE","pageX","pageY","TOUCH_DOLLY","dx","dy","distance","sqrt","TOUCH_PAN","touchmove","stopPropagation","touchend","target","Vector3","center","minDistance","maxDistance","Infinity","autoRotate","minPolarAngle","maxPolarAngle","EPS","phiDelta","thetaDelta","scale","lastPosition","changeEvent","type","angle","panLeft","panOffset","te","matrix","elements","multiplyScalar","add","panUp","fov","position","offset","sub","targetDistance","tan","top","right","left","bottom","warn","dollyScale","theta","atan2","z","phi","max","min","radius","sin","cos","lookAt","distanceTo","dispatchEvent","EventDispatcher","6","RenderPass","overrideMaterial","clearColor","clearAlpha","oldClearColor","oldClearAlpha","getClearColor","getHex","getClearAlpha","setClearColor","7","shader","textureID","ShaderMaterial","uniforms","material","UniformsUtils","defines","vertexShader","fragmentShader","OrthographicCamera","quad","Mesh","PlaneBufferGeometry","value","texture","8","WebGLRenderer","alpha","setPixelRatio","window","devicePixelRatio","innerWidth","innerHeight","appendChild","PerspectiveCamera","controls","getLights","getObjects","tempTimer","sphereElement","getShaders","getAudio","requestAnimationFrame","animate","bind","_onResize","TweenMax","to","querySelector","rotation","yoyo","repeat","ease","Power1","easeOut","time","Date","now","lastTime","partSystem","composer","updateVisual","array","Uint8Array","analyser","frequencyBinCount","visualElement","getObjectByName","visualElement2","getByteFrequencyData","average","_getAverageVolume","rgbEffect","dotEffect","glitchEffect","bgMesh","AudioContext","createAnalyser","smoothingTimeConstant","fftSize","analyser2","sourceNode","createBufferSource","splitter","createChannelSplitter","connect","destination","request","XMLHttpRequest","open","crossOrigin","responseType","songBuffer","onload","decodeAudioData","response","buffer","duration","start","loop","muted","_onError","send","Object3D","name","geometry","SphereGeometry","MeshPhongMaterial","shading","FlatShading","mesh","random","normalize","sphereGeometry","particleBlock","PointsMaterial","transparent","blending","AdditiveBlending","Points","softParticles","fog","Fog","AmbientLight","light","DirectionalLight","createBg","TextureLoader","load","MeshBasicMaterial","map","side","BackSide","DotScreenShader","FilmShader","badTVEffect","BadTVShader","RGBShiftShader","values","aspect","updateProjectionMatrix","../libs/EffectComposer.js","../libs/MaskPass.js","../libs/OrbitControls.js","../libs/RenderPass.js","../libs/ShaderPass.js","../shaders/BadTv.js","../shaders/CopyShader.js","../shaders/DigitalGlitch.js","../shaders/DotScreenShader.js","../shaders/FilmShader.js","../shaders/RGBShiftShader.js","../vendor/TweenMax.min.js","9","tDiffuse","distortion","distortion2","speed","rollSpeed","join","10","opacity","11","DigitalGlitch","tDisp","byp","amount","seed","seed_x","seed_y","distortion_x","distortion_y","col_s","12","tSize","13","nIntensity","sIntensity","sCount","grayscale","14","15","global","_gsScope","_gsQueue","_gsDefine","b","c","d","cycle","_cycle","_yoyo","vars","_repeat","_repeatDelay","repeatDelay","_dirty","g","h","_internals","isSelector","j","isArray","k","version","kill","_gc","killTweensOf","killDelayedCallsTo","getTweensOf","lagSmoothing","ticker","invalidate","_uncache","updateTo","ratio","immediateRender","_startTime","_timeline","_time","_enabled","insert","_delay","_initted","_notifyPluginsOfEnabled","_firstPT","_onPluginEvent","_duration","_totalTime","_init","_next","m","totalDuration","_totalDuration","p","q","_rawPrevTime","_ease","_calcEnd","getRatio","_reversed","autoRemoveChildren","lazy","data","_active","_easeType","_easePower","_onUpdate","_callback","lazyTweens","_lazy","_paused","_startAt","onStart","onRepeat","from","runBackwards","fromTo","startAt","staggerTo","allTo","onComplete","apply","onCompleteScope","arguments","callbackScope","v","w","selector","reverse","delay","staggerFrom","allFrom","staggerFromTo","allFromTo","delayedCall","onCompleteParams","onReverseComplete","onReverseCompleteParams","useFrames","overwrite","isTweening","_first","concat","getAllTweens","_rootTimeline","_rootFramesTimeline","killAll","totalTime","killChildTweensOf","tweenLookup","parentNode","tweens","paused","pauseAll","resumeAll","globalTimeScale","_timeScale","frame","progress","totalProgress","_labels","smoothChildTiming","_sortChildren","onUpdate","indexOf","_swapSelfInParams","align","stagger","lazyRender","globals","pauseCallback","_forcingPlayhead","_hasPause","_parseTimeOrLabel","exportRoot","_remove","Array","addLabel","rawTime","remove","_pauseTime","removeLabel","_last","append","insertMultiple","appendMultiple","addPause","getLabelTime","timeline","isNaN","parseInt","charAt","Number","substr","seek","stop","gotoAndPlay","play","gotoAndStop","pause","_hasPausedChild","_prev","endTime","getChildren","_contains","recent","_recent","shiftChildren","_kill","timeScale","usesFrames","addCallback","removeCallback","removePause","tweenTo","abs","tweenFromTo","_locked","A","B","C","getActive","isActive","getLabelAfter","getLabelsArray","getLabelBefore","sort","currentLabel","da","ca","ba","unshift","lengths","segments","plugin","propName","priority","API","_target","_func","_round","_props","_timeRes","timeResolution","orientToBezier","_autoRotate","_overwriteProps","parseFloat","_beziers","curviness","correlate","_segCount","_length","_lengths","_segments","_l1","_li","_s1","_si","_l2","_curSeg","_s2","_prec","_initialRotations","_startRatio","round","bezierThrough","cubicToQuadratic","_autoCSS","quadraticToCubic","_cssRegister","CSSPlugin","_parseToProxy","_setPluginRatio","CSSPropTween","_registerComplexSpecialProp","parser","end","pt","setRatio","_transform","_enableTransforms","_gsTransform","_onInitTween","proxy","_tween","_roundProps","bezier","_super","defaultTransformPerspective","defaultSkewType","defaultSmoothOrigin","suffixMap","fontSize","padding","margin","perspective","lineHeight","toUpperCase","D","E","F","G","H","I","J","K","L","createElementNS","createElement","M","N","O","_specialProps","P","navigator","userAgent","Q","exec","RegExp","$1","style","cssText","test","R","currentStyle","filter","S","T","U","V","toLowerCase","W","defaultView","getComputedStyle","X","getStyle","getPropertyValue","replace","Y","convertToPixels","_gsCache","removeChild","cacheWidths","Z","calculateOffset","$","za","ya","La","skewX","scaleX","scaleY","Ba","rotationX","rotationY","scaleZ","filters","_","oa","difs","firstMPT","aa","offsetWidth","offsetHeight","split","oxp","oyp","oxr","oyr","ox","oy","ea","fa","ga","ha","aqua","lime","silver","black","maroon","teal","blue","navy","white","fuchsia","olive","yellow","orange","gray","purple","green","red","pink","cyan","ia","ja","parseColor","match","ka","la","colorStringFilter","lastIndex","defaultStringFilter","ma","na","parse","xs0","xs1","pa","rxp","pr","qa","ra","parseComplex","appendXtra","xfirst","sa","ta","prefix","formatter","defaultValue","collapsible","multi","clrs","keyword","dflt","ua","va","com","greensock","plugins","registerSpecialProp","useSVGTransformAttr","wa","xa","Aa","Ca","Transform","force3D","defaultForce3D","Da","SVGElement","Ea","setAttributeNS","Fa","documentElement","Ga","chrome","getBoundingClientRect","Ha","Ka","xOrigin","yOrigin","getBBox","Ja","xOffset","yOffset","setAttribute","Ia","getCTM","svg","getAttribute","getTransform","zOrigin","Pa","removeAttribute","Ma","xPercent","yPercent","ieOffsetX","ieOffsetY","Na","set3DTransformRatio","setTransformRatio","tween","skewType","skewY","_lastParsedTransform","display","parseTransform","transform","transformPerspective","directionalRotation","shortRotation","rotationZ","shortRotationX","shortRotationY","transformOrigin","svgOrigin","smoothOrigin","_transformType","backgroundPositionX","backgroundPositionY","clipTop","clipRight","clipBottom","clipLeft","Oa","xn1","zoom","removeProperty","Qa","_gsClassPT","_classNamePT","Ra","nodeType","_vars","autoRound","zIndex","_addLazySet","className","WebkitBackfaceVisibility","_linkCSSP","pop","strictUnits","xs2","xn2","xs3","xn3","xs4","xn4","xs5","Sa","autoAlpha","visibility","Ta","slice","childNodes","cascadeTo","reservedProps","_targets","activate","blob","_onInitAllProps","roundProps","_propLookup","pg","_add","_addTween","finals","useRadians","GreenSockGlobals","_class","register","easeIn","easeInOut","next","prev","gap","_p1","_p2","_p","_p3","taper","points","randomize","clamp","template","strength","asin","find","SlowMo","TweenLite","toString","sc","gsClass","func","check","define","amd","GreenSockAMDPath","_type","_power","_params","easing","linear","Linear","swing","Quad","_listeners","_eventTarget","up","wake","cancelAnimationFrame","getTime","tick","sleep","clearTimeout","setTimeout","fps","useRAF","visibilityState","Ticker","events","reversed","resume","restart","eventCallback","startTime","jquery","_overwrite","defaultOverwrite","_siblings","css","_overwrittenProps","defaultEase","autoSleep","jQuery","querySelectorAll","getElementById","fp","blobDif","_plugins","onUpdateParams","onUpdateScope","onStartParams","onStartScope","onReverseCompleteScope","onRepeatParams","onRepeatScope","easeParams","autoCSS","onOverwrite","stringFilter","none","all","auto","concurrent","allOnStart","preexisting","true","false","_updateRoot","_gsTweenID","_initProps","_priority","_onDisable","_onEnable","_tempKill","_propName","overwriteProps","initAll","self","16","REVISION","EPSILON","sign","Function","defineProperty","get","TypeError","output","source","nextKey","hasOwnProperty","MOUSE","MIDDLE","CullFaceNone","CullFaceBack","CullFaceFront","CullFaceFrontBack","FrontFaceDirectionCW","FrontFaceDirectionCCW","BasicShadowMap","PCFShadowMap","PCFSoftShadowMap","FrontSide","DoubleSide","SmoothShading","NoColors","FaceColors","VertexColors","NoBlending","NormalBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","UVMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LinearMipMapNearestFilter","LinearMipMapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","AlphaFormat","RGBFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","LoopOnce","LoopRepeat","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroCurvatureEnding","ZeroSlopeEnding","WrapAroundEnding","TrianglesDrawMode","TriangleStripDrawMode","TriangleFanDrawMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","Color","setRGB","setHex","setStyle","setScalar","scalar","hex","floor","setHSL","hue2rgb","euclideanModulo","handleAlpha","string","components","ColorKeywords","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","getHexString","getHSL","optionalTarget","hue","saturation","hsl","lightness","offsetHSL","addColors","color1","color2","addScalar","multiply","lerp","equals","fromArray","toArray","aliceblue","antiquewhite","aquamarine","azure","beige","bisque","blanchedalmond","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","gainsboro","ghostwhite","gold","goldenrod","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","limegreen","linen","magenta","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","oldlace","olivedrab","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","plum","powderblue","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","thistle","tomato","turquoise","violet","wheat","whitesmoke","yellowgreen","Quaternion","_x","_y","_z","_w","onChangeCallback","quaternion","setFromEuler","euler","Euler","c1","c2","c3","s1","s2","s3","order","setFromAxisAngle","axis","halfAngle","setFromRotationMatrix","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","setFromUnitVectors","v1","vFrom","vTo","dot","crossVectors","conjugate","lengthSq","multiplyQuaternions","premultiply","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","slerp","qb","cosHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","onChange","callback","qm","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","len","tDir","setX","setY","setComponent","getComponent","addVectors","addScaledVector","subScalar","isFinite","divide","divideScalar","clampScalar","minVal","maxVal","clampLength","ceil","roundToZero","negate","lengthManhattan","distanceToSquared","setLength","lerpVectors","v2","fromAttribute","attribute","itemSize","rotateAround","setZ","multiplyVectors","applyEuler","applyQuaternion","applyAxisAngle","applyMatrix3","applyMatrix4","applyProjection","qx","qy","qz","qw","ix","iy","iz","iw","project","Matrix4","multiplyMatrices","projectionMatrix","getInverse","matrixWorld","unproject","transformDirection","cross","ax","ay","az","bx","by","bz","projectOnVector","vector","projectOnPlane","planeNormal","reflect","normal","angleTo","acos","dz","setFromSpherical","sinPhiRadius","setFromMatrixPosition","setFromMatrixColumn","setFromMatrixScale","sx","sy","sz","temp","Vector4","setW","setAxisAngleFromQuaternion","setAxisAngleFromRotationMatrix","epsilon","epsilon2","xx","yy","zz","xy","xz","yz","_order","DefaultOrder","RotationOrders","setFromQuaternion","makeRotationFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","Line3","line","result","distanceSq","at","closestPointToPointParameter","startP","startEnd","point","clampToLine","startEnd2","startEnd_startP","closestPointToPoint","Box2","setFromPoints","makeEmpty","expandByPoint","setFromCenterAndSize","halfSize","box","isEmpty","expandByVector","expandByScalar","containsPoint","containsBox","getParameter","intersectsBox","clampPoint","distanceToPoint","clampedPoint","intersect","union","translate","Box3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromObject","updateMatrixWorld","traverse","node","Geometry","vertices","BufferGeometry","attributes","positions","intersectsSphere","closestPoint","sphere","intersectsPlane","plane","constant","getBoundingSphere","Sphere","Matrix3","Float32Array","n11","n12","n13","n21","n22","n23","n31","n32","n33","identity","me","setFromMatrix4","applyToVector3Array","applyToBuffer","getX","getY","getZ","setXYZ","determinant","throwOnDegenerate","t11","t12","t13","det","msg","detInv","transpose","flattenToArrayOffset","getNormalMatrix","matrix4","transposeIntoArray","n14","n24","n34","n41","n42","n43","n44","copyPosition","extractBasis","xAxis","yAxis","zAxis","makeBasis","extractRotation","makeRotationFromEuler","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","x2","y2","z2","wx","wy","wz","eye","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","b41","b42","b43","b44","multiplyToArray","getPosition","setPosition","t14","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","tx","ty","makeScale","compose","decompose","invSX","invSY","invSZ","makeFrustum","near","far","makePerspective","ymax","DEG2RAD","ymin","xmin","xmax","makeOrthographic","Ray","origin","direction","ray","recast","directionDistance","distanceSqToPoint","distanceSqToSegment","segCenter","segDir","diff","v0","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","b1","invDet","intersectSphere","tca","d2","radius2","thc","t0","t1","distanceToPlane","denominator","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","edge1","edge2","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","optionalCenter","maxRadiusSq","empty","radiusSum","deltaLengthSq","getBoundingBox","Frustum","p0","p1","p2","p3","p4","p5","planes","Plane","frustum","setFromMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","setComponents","intersectsObject","boundingSphere","computeBoundingSphere","intersectsSprite","sprite","negRadius","d1","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","orthoPoint","perpendicularMagnitude","intersectLine","intersectsLine","startSign","endSign","coplanarPoint","m1","optionalNormalMatrix","referencePoint","normalMatrix","Spherical","other","makeSafe","vec3","RAD2DEG","generateUUID","chars","uuid","rnd","mapLinear","a1","a2","b2","smoothstep","smootherstep","random16","randInt","low","high","randFloat","randFloatSpread","range","degToRad","degrees","radToDeg","radians","isPowerOfTwo","nearestPowerOfTwo","LN2","nextPowerOfTwo","Spline","interpolate","t2","t3","intPoint","weight","w2","w3","pb","pc","pd","v3","initFromArray","getPoint","getControlPointsArray","coords","getLength","nSubDivisions","nSamples","oldIntPoint","oldPosition","tmpVec","chunkLengths","totalLength","chunks","total","reparametrizeByArcLength","samplingCoef","indexCurrent","indexNext","realDistance","sampling","newpoints","sl","Triangle","resultLengthSq","barycoordFromPoint","dot00","dot01","dot02","dot11","dot12","denom","invDenom","setFromPointsAndIndices","i0","i1","i2","triangle","area","midpoint","edgeList","projectedPoint","Interpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","_cachedIndex","valueSize","evaluate","pp","validate_interval","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","settings","DefaultSettings_","getSettings_","copySampleValue_","stride","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o1","o0","oP","oN","wP","wN","ppp","sP","sN","DiscreteInterpolant","LinearInterpolant","offset1","offset0","weight1","weight0","QuaternionLinearInterpolant","Clock","autoStart","oldTime","elapsedTime","running","performance","getElapsedTime","getDelta","newTime","listener","listeners","hasEventListener","listenerArray","Layers","mask","channel","enable","toggle","disable","layers","ascSort","intersectObject","raycaster","intersects","recursive","visible","raycast","children","Raycaster","params","Line","LOD","threshold","Sprite","defineProperties","PointCloud","linePrecision","setFromCamera","intersectObjects","objects","onRotationChange","onQuaternionChange","Object3DIdCount","parent","DefaultUp","enumerable","modelViewMatrix","matrixAutoUpdate","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","castShadow","receiveShadow","frustumCulled","renderOrder","userData","applyMatrix","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","q1","rotateX","rotateY","rotateZ","translateOnAxis","translateX","translateY","translateZ","localToWorld","worldToLocal","getObjectById","id","getObjectByProperty","child","getWorldPosition","getWorldQuaternion","getWorldRotation","getWorldScale","getWorldDirection","traverseVisible","traverseAncestors","updateMatrix","force","toJSON","meta","extractFromCache","cache","key","metadata","isRootObject","geometries","materials","textures","images","generator","JSON","stringify","Face3","materialIndex","vertexNormals","vertexColors","BufferAttribute","normalized","dynamic","updateRange","count","needsUpdate","setDynamic","copyAt","index1","index2","copyArray","copyColorsArray","colors","copyIndicesArray","indices","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","getW","setXY","setXYZW","Int8Attribute","Int8Array","Uint8Attribute","Uint8ClampedAttribute","Uint8ClampedArray","Int16Attribute","Int16Array","Uint16Attribute","Uint16Array","Int32Attribute","Int32Array","Uint32Attribute","Uint32Array","Float32Attribute","Float64Attribute","Float64Array","DynamicBufferAttribute","InstancedBufferAttribute","meshPerAttribute","InterleavedBuffer","InstancedInterleavedBuffer","InterleavedBufferAttribute","interleavedBuffer","GeometryIdCount","faces","faceVertexUvs","morphTargets","morphNormals","skinWeights","skinIndices","lineDistances","boundingBox","verticesNeedUpdate","elementsNeedUpdate","uvsNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","lineDistancesNeedUpdate","groupsNeedUpdate","vertex","face","jl","computeBoundingBox","obj","fromBufferGeometry","addFace","normals","tempNormals","uvs","tempUVs","uvs2","tempUVs2","uv","uv2","groups","group","computeFaceNormals","cb","ab","fl","vA","vB","vC","computeVertexNormals","areaWeighted","vl","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","faceNormal","dstNormalsFace","dstNormalsVertex","computeTangents","computeLineDistances","merge","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","uvs1","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","uvCopy","mergeMesh","mergeVertices","verticesMap","unique","changes","precisionPoints","precision","faceIndicesToRemove","dupIndex","idx","sortFacesByMaterialIndex","materialIndexSort","_id","newUvs1","newUvs2","setBit","getNormalIndex","hash","normalsHash","getColorIndex","colorsHash","getUvIndex","uvsHash","hasMaterial","hasFaceUv","hasFaceVertexUv","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","uvsCopy","kl","DirectGeometry","computeGroups","fromGeometry","morphTargetsPosition","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","morphTarget","morphNormal","morphAttributes","drawRange","getIndex","setIndex","addAttribute","addGroup","clearGroups","setDrawRange","updateFromObject","direct","__directGeometry","lineDistance","fromDirectGeometry","TypeArray","pA","pB","pC","normalizeNormals","attribute1","attributeArray1","attribute2","attributeArray2","attributeSize","toNonIndexed","geometry2","array2","MaxIndex","InstancedBufferGeometry","maxInstancedCount","instances","Uniform","onUpdateCallback","AnimationAction","_new","mixer","clip","localRoot","_mixer","_clip","_localRoot","tracks","nTracks","interpolants","interpolantSettings","interpolant","createInterpolant","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_effectiveTimeScale","_effectiveWeight","repetitions","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","setLoop","mode","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","action","halt","startTimeScale","endTimeScale","_lendControlInterpolant","times","timeScaleInterpolant","getMixer","getClip","getRoot","_root","_update","deltaTime","timeDirection","accuIndex","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","accumulate","interpolantValue","loopCount","_setEndings","handle_stop","pingPong","loopDelta","pending","atStart","atEnd","weightNow","weightThen","AnimationClip","resetDuration","trim","optimize","track","json","jsonTracks","frameTime","KeyframeTrack","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","AnimationUtils","getKeyframeOrder","sortedArray","NumberKeyframeTrack","findByName","objectOrClipArray","clipArray","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","parts","animationMorphTargets","clips","parseAnimation","animation","bones","nodeName","addNonemptyTrack","trackType","trackName","animationKeys","propertyName","destTracks","flattenJSON","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","VectorKeyframeTrack","QuaternionKeyframeTrack","AnimationMixer","root","_initMemoryManager","_accuIndex","clipAction","optionalRoot","rootUuid","clipObject","clipUuid","actionsForClip","_actionsByClip","prototypeAction","existingAction","actionByRoot","knownActions","newAction","_Action","_bindAction","_addInactiveAction","stopAllAction","actions","_actions","nActions","_nActiveActions","bindings","_bindings","nBindings","_nActiveBindings","useCount","uncacheClip","actionsByClip","actionsToRemove","cacheIndex","lastInactiveAction","_removeInactiveBindingsForAction","uncacheRoot","_removeInactiveAction","bindingsByRoot","_bindingsByRootAndName","bindingByName","binding","restoreOriginalState","_removeInactiveBinding","uncacheAction","bindingsByName","referenceCount","_addInactiveBinding","path","parsedPath","PropertyMixer","PropertyBinding","ValueTypeName","getValueSize","_lendBinding","saveOriginalState","_lendAction","_takeBackBinding","_takeBackAction","_controlInterpolants","_nActiveControlInterpolants","stats","inUse","controlInterpolants","knownActionsForClip","lastKnownAction","byClipCacheIndex","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","propBinding","rootNode","lastInactiveBinding","remove_empty_map","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","AnimationObjectGroup","var_args","_objects","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","bindingsPerObject","nObjects","nCachedObjects","indicesByUUID","paths","parsedPaths","knownObject","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","last","subscribe_","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","lastBindingsPath","arraySlice","isTypedArray","subarray","convertArray","forceClone","BYTES_PER_ELEMENT","ArrayBuffer","isView","DataView","compareTime","nValues","srcOffset","jsonKeys","valuePropertyName","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","validate","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","message","getInterpolation","shift","timeOffset","nKeys","valid","prevTime","currTime","writeIndex","keep","timeNext","offsetP","offsetN","readOffset","writeOffset","_getTrackTypeForValueTypeName","typeName","ColorKeyframeTrack","BooleanKeyframeTrack","StringKeyframeTrack","parseTrackName","findNode","getValue","targetArray","setValue","sourceArray","targetObject","objectName","propertyIndex","_getValue_unavailable","_setValue_unavailable","objectIndex","skeleton","nodeProperty","versioning","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","bindingType","BindingType","Direct","ArrayElement","resolvedProperty","HasFromToArray","EntireArray","GetterByBindingType","SetterByBindingTypeAndVersioning","unbind","_getValue_unbound","_setValue_unbound","dest","Composite","targetGroup","optionalParsedPath","_targetGroup","firstValidIndex","re","matches","results","searchSkeleton","bone","searchNodeSubtree","childNode","subTreeNode","mixFunction","bufferType","_slerp","_select","_lerp","_mixBufferRegion","cumulativeWeight","currentWeight","mix","originalValueOffset","Audio","onended","onEnded","gain","createGain","getInput","autoplay","playbackRate","isPlaying","hasPlaybackControl","sourceType","getOutput","setNodeSource","audioNode","setBuffer","audioBuffer","currentTime","disconnect","getFilters","setFilters","getFilter","setFilter","setPlaybackRate","getPlaybackRate","getLoop","getVolume","setVolume","AudioAnalyser","audio","getFrequencyData","getAverageFrequency","webkitAudioContext","PositionalAudio","panner","createPanner","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","setMaxDistance","AudioListener","removeFilter","getMasterVolume","setMasterVolume","orientation","setOrientation","Camera","matrixWorldInverse","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","options","WebGLRenderTargetCube","updateCubeMap","generateMipmaps","activeCubeFace","setRenderTarget","view","setViewOffset","fullWidth","fullHeight","offsetX","offsetY","clearViewOffset","cx","cy","zoomW","zoomH","scaleW","scaleH","focus","filmGauge","filmOffset","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","skew","StereoCamera","cameraL","cameraR","eyeRight","eyeLeft","eyeSep","eyeSepOnProjection","Light","intensity","groundColor","decay","penumbra","LightShadow","bias","mapSize","shadow","DirectionalLightShadow","HemisphereLight","skyColor","PointLight","power","SpotLight","SpotLightShadow","AudioLoader","manager","DefaultLoadingManager","url","onLoad","onProgress","onError","loader","XHRLoader","setResponseType","Cache","files","file","Loader","onLoadStart","onLoadProgress","onLoadComplete","extractUrlBase","initMaterials","texturePath","createMaterial","textureLoader","materialLoader","loadTexture","wrap","anisotropy","fullPath","Handlers","setCrossOrigin","wrapS","wrapT","MaterialLoader","specular","emissive","shininess","mapDiffuseRepeat","mapDiffuseOffset","mapDiffuseWrap","mapDiffuseAnisotropy","emissiveMap","mapEmissiveRepeat","mapEmissiveOffset","mapEmissiveWrap","mapEmissiveAnisotropy","lightMap","mapLightRepeat","mapLightOffset","mapLightWrap","mapLightAnisotropy","aoMap","mapAORepeat","mapAOOffset","mapAOWrap","mapAOAnisotropy","bumpMap","mapBumpRepeat","mapBumpOffset","mapBumpWrap","mapBumpAnisotropy","bumpScale","normalMap","mapNormalRepeat","mapNormalOffset","mapNormalWrap","mapNormalAnisotropy","normalScale","specularMap","mapSpecularRepeat","mapSpecularOffset","mapSpecularWrap","mapSpecularAnisotropy","metalnessMap","mapMetalnessRepeat","mapMetalnessOffset","mapMetalnessWrap","mapMetalnessAnisotropy","roughnessMap","mapRoughnessRepeat","mapRoughnessOffset","mapRoughnessWrap","mapRoughnessAnisotropy","alphaMap","mapAlphaRepeat","mapAlphaOffset","mapAlphaWrap","mapAlphaAnisotropy","setTextures","handlers","regex","cached","overrideMimeType","status","itemEnd","itemError","withCredentials","itemStart","setPath","setWithCredentials","FontLoader","text","substring","font","Font","ImageLoader","image","URL","revokeObjectURL","src","createObjectURL","JSONLoader","setTexturePath","parseModel","isBitSet","fi","zLength","colorIndex","normalIndex","uvIndex","isQuad","faceA","faceB","uvLayer","nUvLayers","parseSkin","influencesPerVertex","parseMorphing","dstVertices","srcVertices","morphColors","parseAnimations","outputAnimations","morphAnimationClips","LoadingManager","isLoading","itemsLoaded","itemsTotal","BufferGeometryLoader","TYPED_ARRAYS","typedArray","drawcalls","offsets","getTexture","roughness","metalness","alphaTest","depthTest","depthWrite","colorWrite","wireframe","wireframeLinewidth","sizeAttenuation","displacementMap","displacementScale","displacementBias","emissiveIntensity","envMap","combine","reflectivity","lightMapIntensity","aoMapIntensity","ObjectLoader","lastIndexOf","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","geometryLoader","bufferGeometryLoader","widthSegments","heightSegments","depthSegments","thetaStart","thetaLength","radiusTop","radiusBottom","radialSegments","openEnded","phiStart","phiLength","innerRadius","outerRadius","thetaSegments","phiSegments","tube","tubularSegments","arc","loadImage","parseConstant","Texture","mapping","getGeometry","getMaterial","SkinnedMesh","Group","levels","level","addLevel","CubeTextureLoader","urls","loaded","CubeTexture","DataTextureLoader","BinaryTextureLoader","_parser","DataTexture","texData","mipmaps","mipmapCount","CompressedTextureLoader","texDatas","CompressedTexture","isCubemap","Material","MaterialIdCount","lights","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","clippingPlanes","clipShadows","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","premultipliedAlpha","overdraw","_needsUpdate","setValues","newValue","currentValue","isRoot","srcPlanes","dstPlanes","LineBasicMaterial","linewidth","linecap","linejoin","LineDashedMaterial","dashSize","gapSize","refractionRatio","wireframeLinecap","wireframeLinejoin","skinning","MeshDepthMaterial","depthPacking","MeshLambertMaterial","MeshNormalMaterial","MeshStandardMaterial","STANDARD","envMapIntensity","MeshPhysicalMaterial","PHYSICAL","clearCoat","clearCoatRoughness","MultiMaterial","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","RawShaderMaterial","SpriteMaterial","ShadowMaterial","UniformsLib","ShaderChunk","encoding","TextureIdCount","sourceFile","DEFAULT_IMAGE","DEFAULT_MAPPING","premultiplyAlpha","flipY","unpackAlignment","getDataURL","canvas","toDataURL","getContext","drawImage","transformUv","DepthTexture","CanvasTexture","VideoTexture","video","readyState","HAVE_CURRENT_DATA","inverseMatrix","testPoint","rayPointDistanceSq","localThresholdSq","intersectPoint","distanceToRay","localThreshold","LineSegments","precisionSq","vStart","vEnd","interSegment","interRay","step","distSq","faceIndex","nbVertices","drawMode","updateMorphTargets","setDrawMode","morphTargetBase","morphTargetInfluences","morphTargetDictionary","ml","getMorphTargetIndexByName","uvIntersection","uv1","uv3","barycoord","checkIntersection","intersectionPointWorld","checkBufferGeometryIntersection","intersection","intersectionPoint","uvA","uvB","uvC","tempA","tempB","tempC","fvA","fvB","fvC","isFaceMaterial","faceMaterial","morphInfluences","tl","influence","targets","uvs_f","Bone","skin","Skeleton","boneInverses","useVertexTexture","identityMatrix","boneTextureWidth","boneTextureHeight","boneMatrices","boneTexture","calculateInverses","bl","pose","offsetMatrix","bindMode","bindMatrix","bindMatrixInverse","gbone","pos","rotq","scl","normalizeSkinWeights","sw","vec","skinWeight","getObjectForDistance","matrixPosition","guessSizeSq","LensFlare","lensFlares","positionScreen","customUpdateCallback","updateLensFlares","flare","vecX","vecY","wantedRotation","background","autoUpdate","FogExp2","density","merged","uniforms_src","uniforms_dst","parameter_src","common","diffuse","offsetRepeat","flipEnvMap","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","directionalLights","properties","shadowBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","spotShadowMap","spotShadowMatrix","pointLights","pointShadowMap","pointShadowMatrix","hemisphereLights","ShaderLib","basic","lambert","phong","standard","dashed","totalSize","cube","tCube","tFlip","equirect","tEquirect","distanceRGBA","lightPos","getTargetPixelRatio","_currentRenderTarget","_pixelRatio","glClearColor","_premultipliedAlpha","setDefaultGLState","scissor","_currentScissor","_scissor","viewport","_currentViewport","_viewport","_clearColor","_clearAlpha","resetGLState","_currentProgram","_currentCamera","_currentGeometryProgram","_currentMaterialId","onContextLost","onMaterialDispose","deallocateMaterial","releaseMaterialProgramReference","programInfo","program","programCache","releaseProgram","setupVertexAttributes","startIndex","extension","initAttributes","geometryAttributes","programAttributes","getAttributes","materialDefaultAttributeValues","programAttribute","geometryAttribute","_gl","FLOAT","UNSIGNED_SHORT","SHORT","UNSIGNED_INT","INT","BYTE","UNSIGNED_BYTE","getAttributeBuffer","enableAttributeAndDivisor","enableAttribute","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","disableUnusedAttributes","absNumericalSort","painterSortStable","reversePainterSortStable","pushRenderItem","transparentObjects","transparentObjectsLastIndex","opaqueObjects","opaqueObjectsLastIndex","renderItem","_vector3","isObjectViewable","_sphere","isSphereViewable","isSpriteViewable","_frustum","numPlanes","_clipping","_this","negRad","projectObject","sprites","ImmediateRenderObject","sortObjects","_projScreenMatrix","groupMaterial","renderObjects","renderList","setMaterial","setProgram","renderBufferImmediate","renderBufferDirect","initMaterial","materialProperties","getParameters","_lights","getProgramCode","programChange","shaderID","__webglShader","acquireProgram","numSupportedMorphTargets","maxMorphTargets","numSupportedMorphNormals","maxMorphNormals","numClippingPlanes","uniform","lightsHash","ambient","directional","spot","hemi","progUniforms","getUniforms","uniformsList","WebGLUniforms","seqWithValue","seq","dynamicUniforms","splitDynamic","CULL_FACE","setFlipSided","setBlending","setDepthFunc","setDepthTest","setDepthWrite","setColorWrite","setPolygonOffset","_usedTextureUnits","_clippingEnabled","_localClippingEnabled","useCache","setState","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","useProgram","capabilities","logarithmicDepthBuffer","uCamPos","cameraPosition","setOptional","floatVertexTextures","markUniformsLightsNeedsUpdate","refreshUniformsFog","refreshUniformsCommon","refreshUniformsLine","refreshUniformsDash","refreshUniformsPoints","refreshUniformsLambert","refreshUniformsPhong","refreshUniformsPhysical","refreshUniformsStandard","upload","dynUniforms","evalDynamic","uvScaleMap","_canvas","setupShadows","lightShadowsLength","shadows","setupLights","ll","shadowMap","viewMatrix","directionalLength","pointLength","spotLength","hemiLength","lightCache","allocTextureUnit","textureUnit","maxTextures","paramThreeToGL","REPEAT","CLAMP_TO_EDGE","MIRRORED_REPEAT","NEAREST","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT_OES","ALPHA","RGB","RGBA","LUMINANCE","LUMINANCE_ALPHA","DEPTH_COMPONENT","FUNC_ADD","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","ZERO","ONE","SRC_COLOR","ONE_MINUS_SRC_COLOR","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","DST_ALPHA","ONE_MINUS_DST_ALPHA","DST_COLOR","ONE_MINUS_DST_COLOR","SRC_ALPHA_SATURATE","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","MIN_EXT","MAX_EXT","_context","_alpha","_depth","_stencil","_antialias","antialias","_preserveDrawingBuffer","preserveDrawingBuffer","autoClear","autoClearColor","autoClearDepth","autoClearStencil","localClippingEnabled","gammaInput","gammaOutput","physicallyCorrectLights","toneMapping","toneMappingExposure","toneMappingWhitePoint","_currentFramebuffer","_currentScissorTest","_width","_height","_scissorTest","WebGLClipping","_infoRender","calls","info","memory","programs","getShaderPrecisionFormat","rangeMin","rangeMax","WebGLExtensions","WebGLCapabilities","WebGLState","WebGLProperties","WebGLTextures","WebGLObjects","WebGLPrograms","WebGLLights","bufferRenderer","WebGLBufferRenderer","indexedBufferRenderer","WebGLIndexedBufferRenderer","backgroundCamera","backgroundCamera2","backgroundPlaneMesh","backgroundBoxShader","backgroundBoxMesh","BoxBufferGeometry","WebGLShadowMap","spritePlugin","SpritePlugin","lensFlarePlugin","LensFlarePlugin","getContextAttributes","forceContextLoss","loseContext","getMaxAnisotropy","getPrecision","getPixelRatio","updateStyle","setViewport","setScissor","setScissorTest","boolean","setClearAlpha","bits","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","clearDepth","clearStencil","clearTarget","hasPositions","createBuffer","hasNormals","hasUvs","hasColors","bufferData","positionArray","DYNAMIC_DRAW","normalArray","nx","ny","nz","uvArray","colorArray","drawArrays","TRIANGLES","updateBuffers","geometryProgram","activeInfluences","getWireframeAttribute","ELEMENT_ARRAY_BUFFER","dataStart","dataCount","rangeStart","rangeCount","groupStart","groupCount","drawStart","drawEnd","drawCount","setLineWidth","setMode","LINES","TRIANGLE_STRIP","TRIANGLE_FAN","lineWidth","LINE_STRIP","POINTS","renderInstances","forceClear","beginShadows","endShadows","updateRenderTargetMipmap","setFaceCulling","cullFace","frontFaceDirection","setCullFace","setTexture2D","warned","slot","setTexture","setTextureCube","setTextureCubeDynamic","getCurrentRenderTarget","__webglFramebuffer","setupRenderTarget","framebuffer","isCube","renderTargetProperties","scissorTest","bindFramebuffer","FRAMEBUFFER","textureProperties","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_CUBE_MAP_POSITIVE_X","__webglTexture","activeMipMapLevel","readRenderTargetPixels","restore","IMPLEMENTATION_COLOR_READ_FORMAT","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","depthBuffer","depthTexture","drawArraysInstancedANGLE","resetGlobalState","globalState","numGlobalPlanes","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","viewNormalMatrix","i4","renderingShadows","enableLocalClipping","fromCache","nGlobal","lGlobal","clippingState","drawElements","drawElementsInstancedANGLE","gl","getExtension","maxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","getMaxPrecision","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","maxTextureSize","MAX_TEXTURE_SIZE","maxCubemapSize","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_ATTRIBS","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","vertexTextures","floatFragmentTextures","_maxPrecision","WebGLGeometries","onGeometryDispose","buffergeometry","_bufferGeometry","deleteAttribute","deleteAttributes","property","bufferproperty","__webglBuffer","deleteBuffer","removeAttributeBuffer","updateAttribute","attributeProperties","updateBuffer","usage","STATIC_DRAW","bufferSubData","edges","checkEdge","list","WebGLProgram","getEncodingComponents","getTexelDecodingFunction","functionName","getTexelEncodingFunction","getToneMappingFunction","toneMappingName","generateExtensions","rendererExtensions","envMapCubeUV","flatShading","filterEmptyLine","generateDefines","fetchAttributeLocations","identifiers","getProgramParameter","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","replaceLightNums","numDirLights","numSpotLights","numPointLights","numHemiLights","parseIncludes","include","unrollLoops","snippet","unroll","programIdCount","shadowMapTypeDefine","shadowMapType","envMapTypeDefine","envMapModeDefine","envMapBlendingDefine","prefixVertex","prefixFragment","gammaFactorDefine","customExtensions","customDefines","createProgram","supportsVertexTextures","maxBones","doubleSided","flipSided","shadowMapEnabled","useFog","fogExp","outputEncoding","mapEncoding","envMapEncoding","emissiveMapEncoding","vertexGlsl","fragmentGlsl","glVertexShader","WebGLShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","programLog","getProgramInfoLog","vertexLog","getShaderInfoLog","fragmentLog","runnable","haveDiagnostics","LINK_STATUS","getError","VALIDATE_STATUS","diagnostics","deleteShader","cachedUniforms","cachedAttributes","destroy","deleteProgram","usedTimes","allocateBones","nVertexUniforms","nVertexMatrices","getTextureEncodingFromMap","gammaOverrideLinear","shaderIDs","parameterNames","nClipPlanes","currentRenderTarget","envMapMode","pl","addLineNumbers","lines","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","_renderer","getDepthMaterial","isPointLight","lightPositionWorld","materialVariants","_depthMaterials","customMaterial","customDepthMaterial","_distanceMaterials","customDistanceMaterial","useMorphing","useSkinning","variantIndex","_MorphingFlag","_SkinningFlag","keyA","keyB","materialsForVariant","_materialCache","cachedMaterial","renderSingleSided","renderReverseSided","shadowCamera","_renderList","_state","_lightShadows","_shadowMapSize","_lookTarget","_lightPositionWorld","_NumberOfMaterialVariants","cubeDirections","cubeUps","cube2DViewPorts","depthMaterialTemplate","distanceShader","distanceUniforms","depthMaterial","distanceMaterial","USE_SHADOWMAP","BLEND","faceCount","vpWidth","vpHeight","pars","shadowMatrix","vpDimensions","createTexture","bindTexture","texParameteri","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","texImage2D","WebGLColorBuffer","WebGLDepthBuffer","WebGLStencilBuffer","maxVertexAttributes","newAttributes","enabledAttributes","attributeDivisors","compressedTextureFormats","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","currentScissorTest","currentTextureSlot","currentBoundTextures","currentScissor","currentViewport","emptyTextures","TEXTURE_2D","TEXTURE_CUBE_MAP","DEPTH_TEST","enableVertexAttribArray","vertexAttribDivisorANGLE","disableVertexAttribArray","getCompressedTextureFormats","formats","COMPRESSED_TEXTURE_FORMATS","blendEquationSeparate","blendFuncSeparate","blendFunc","setStencilTest","stencilTest","setStencilWrite","stencilWrite","setStencilFunc","stencilRef","stencilMask","setStencilOp","stencilFail","stencilZFail","stencilZPass","frontFace","CW","CCW","BACK","FRONT","FRONT_AND_BACK","factor","units","POLYGON_OFFSET_FILL","getScissorTest","SCISSOR_TEST","activeTexture","webglSlot","TEXTURE0","webglType","webglTexture","boundTexture","compressedTexImage2D","locked","currentColorMask","currentColorClear","colorMask","lock","currentDepthMask","currentDepthFunc","currentDepthClear","depthMask","NEVER","LESS","LEQUAL","GEQUAL","GREATER","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","STENCIL_TEST","stencilOp","clampToMaxSize","maxSize","makePowerOfTwo","HTMLImageElement","HTMLCanvasElement","textureNeedsPowerOfTwo","filterFallback","onTextureDispose","deallocateTexture","_infoMemory","onRenderTargetDispose","deallocateRenderTarget","__image__webglTextureCube","deleteTexture","__webglInit","deleteFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__version","complete","uploadTexture","pixelStorei","UNPACK_FLIP_Y_WEBGL","isCompressed","isDataTexture","cubeImage","isPowerOfTwoImage","glFormat","glType","setTextureParameters","mipmap","generateMipmap","textureType","TEXTURE_WRAP_S","TEXTURE_WRAP_T","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","internalFormat","_isWebGL2","DEPTH_COMPONENT32F","DEPTH_COMPONENT16","setupFrameBufferTexture","attachment","textureTarget","setupRenderBufferStorage","renderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL","DEPTH_STENCIL_ATTACHMENT","RGBA4","setupDepthTexture","webglDepthTexture","setupDepthRenderbuffer","createRenderbuffer","isTargetPowerOfTwo","createFramebuffer","WebGL2RenderingContext","emptyTexture","emptyCubeTexture","UniformContainer","arrayCacheF32","arrayCacheI32","flatten","nBlocks","blockSize","firstElem","allocTexUnits","setValue1f","uniform1f","addr","setValue1i","uniform1i","setValue2fv","uniform2fv","uniform2f","setValue3fv","uniform3f","uniform3fv","setValue4fv","uniform4fv","uniform4f","setValue2fm","uniformMatrix2fv","setValue3fm","uniformMatrix3fv","setValue4fm","uniformMatrix4fv","setValueT1","unit","setValueT6","setValue2iv","uniform2iv","setValue3iv","uniform3iv","setValue4iv","uniform4iv","getSingularSetter","setValue1fv","uniform1fv","setValue1iv","uniform1iv","setValueV2a","setValueV3a","setValueV4a","setValueM2a","setValueM3a","setValueM4a","setValueT1a","setValueT6a","getPureArraySetter","SingleUniform","activeInfo","PureArrayUniform","StructuredUniform","RePathPart","addUniform","container","uniformObject","parseUniform","pathLength","matchEnd","idIsIndex","subscript","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","flares","vertexBuffer","elementBuffer","tempTexture","occlusionTexture","renderType","occlusionMap","screenPosition","tempPosition","invAspect","halfViewportWidth","halfViewportHeight","screenPositionPixels","validArea","TEXTURE1","copyTexImage2D","uvOffset","uvScale","fogType","fillStyle","fillRect","spritePosition","spriteRotation","spriteScale","oldFogType","sceneFogType","Face4","LineStrip","LinePieces","MeshFaceMaterial","Particle","ParticleSystem","PointCloudMaterial","ParticleBasicMaterial","ParticleSystemMaterial","Vertex","isIntersectionBox","isIntersectionSphere","multiplyVector3","multiplyVector3Array","extractPosition","multiplyVector4","rotateAxis","crossVector","rotateByAxis","isIntersectionLine","isIntersectionPlane","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","getChildByName","renderDepth","eulerOrder","useQuaternion","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraNear","shadowCameraFar","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","addIndex","addDrawCall","indexOffset","clearDrawCalls","computeOffsets","wrapAround","wrapRGB","metal","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","shadowMapCullFace","audioLoader","getData","GeometryUtils","geometry1","ImageUtils","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","Projector","projectVector","unprojectVector","pickingRay","CanvasRenderer","CurveUtils","tangentQuadraticBezier","tangentCubicBezier","tangentSpline","h00","h10","h01","h11","SceneUtils","createMultiMaterialObject","detach","attach","ShapeUtils","contour","triangulate","snip","verts","px","py","aX","aY","bX","bY","cX","cY","apx","apy","bpx","bpy","cpx","cpy","cCROSSap","bCROSScp","aCROSSbp","vertIndices","nv","triangulateShape","holes","point_in_segment_2D_colin","inSegPt1","inSegPt2","inOtherPt","intersect_segments_2D","inSeg1Pt1","inSeg1Pt2","inSeg2Pt1","inSeg2Pt2","inExcludeAdjacentSegs","seg1dx","seg1dy","seg2dx","seg2dy","seg1seg2dx","seg1seg2dy","limit","perpSeg1","perpSeg2","factorSeg1","seg1Pt","seg2Pt","seg1min","seg1max","seg1minVal","seg1maxVal","seg2min","seg2max","seg2minVal","seg2maxVal","isPointInsideAngle","inVertex","inLegFromPt","inLegToPt","legFromPtX","legFromPtY","legToPtX","legToPtY","otherPtX","otherPtY","from2toAngle","from2otherAngle","other2toAngle","removeHoles","isCutLineInsideAngles","inShapeIdx","inHoleIdx","lastShapeIdx","shape","prevShapeIdx","nextShapeIdx","insideAngle","hole","lastHoleIdx","prevHoleIdx","nextHoleIdx","intersectsShapeEdge","inShapePt","inHolePt","sIdx","nextIdx","intersectsHoleEdge","ihIdx","chkHole","hIdx","indepHoles","holeIndex","shapeIndex","shapePt","holePt","holeIdx","cutKey","tmpShape1","tmpShape2","tmpHole1","tmpHole2","failedCuts","hl","minShapeIndex","counter","h2","allPointsMap","allpoints","shapeWithoutHoles","triangles","isClockWise","pts","b2p0","b2p1","b2p2","b3","b3p0","b3p1","b3p2","b3p3","Curve","getPointAt","getUtoTmapping","getPoints","divisions","getSpacedPoints","getLengths","cacheArcLengths","current","sum","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","lengthAfter","segmentLength","segmentFraction","getTangent","pt1","pt2","getTangentAt","getPointFunc","CurvePath","curves","autoClose","curve","closePath","startPoint","endPoint","LineCurve","curveLengths","getCurveLengths","lens","cacheLengths","sums","createPointsGeometry","createGeometry","createSpacedPointsGeometry","generateShapes","createPaths","String","resolution","ret","createPath","glyph","glyphs","cpx0","cpy0","cpx1","cpy1","cpx2","cpy2","laste","Path","outline","_cachedOutline","moveTo","lineTo","quadraticCurveTo","bezierCurveTo","shapes","toShapes","fromPoints","args","lastargs","aCPx","aCPy","QuadraticBezierCurve","aCP1x","aCP1y","aCP2x","aCP2y","CubicBezierCurve","splineThru","npts","SplineCurve","lastPoint","aRadius","aStartAngle","aEndAngle","aClockwise","absarc","absellipse","ellipse","xRadius","yRadius","aRotation","EllipseCurve","item","spts","spline","deltaAngle","tdivisions","isCCW","noHoles","extractSubpaths","inActions","subPaths","lastPath","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","Shape","isPointInsidePolygon","inPt","inPolygon","polyLen","inside","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","tmpPoints","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sLen","sho","ho","hole_unassigned","s2Idx","froms","tos","tmpHoles","extrude","ExtrudeGeometry","makeGeometry","ShapeGeometry","getPointsHoles","holesPts","extractAllPoints","extractPoints","tangent","point0","point1","point2","point3","ArcCurve","LineCurve3","QuadraticBezierCurve3","CubicBezierCurve3","SplineCurve3","CatmullRomCurve3","CubicPoly","pz","c0","initNonuniformCatmullRom","x3","dt0","dt1","dt2","initCatmullRom","tension","calc","closed","ClosedSplineCurve3","BoxGeometry","CubeGeometry","calculateVertexCount","calculateIndexCount","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","vertexBufferOffset","uvBufferOffset","numberOfVertices","indexBufferOffset","vertexCount","indexCount","CircleGeometry","CircleBufferGeometry","ii","segment","CylinderBufferGeometry","nbCap","generateTorso","tanTheta","indexRow","halfHeight","indexArray","i3","generateCap","centerIndexStart","centerIndexEnd","cosTheta","sinTheta","CylinderGeometry","ConeBufferGeometry","ConeGeometry","EdgesGeometry","thresholdAngle","sortFunction","thresholdDot","edge","vert1","vert2","face1","face2","addShapeList","addShape","scalePt2","getBevelVec","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","ptNextShift_x","ptNextShift_y","sf","v_trans_lensq","direction_eq","buildLidFaces","bevelEnabled","layer","vlen","flen","f3","steps","bevelSegments","buildSideFaces","layeroffset","sidewalls","ahole","slen1","slen2","f4","shapesOffset","uvgen","generateTopUV","wallContour","stepIndex","stepsLength","contourIndex1","contourIndex2","generateSideWallUV","extrudePts","splineTube","binormal","position2","bevelThickness","bevelSize","curveSegments","extrudePath","extrudeByPath","UVGenerator","WorldUVGenerator","frames","TubeGeometry","FrenetFrames","shapePoints","bs","vert","contourMovements","oneHoleMovements","holesMovements","verticesMovements","binormals","indexA","indexB","indexC","indexD","LatheBufferGeometry","base","inverseSegments","n1","n2","LatheGeometry","PlaneGeometry","width_half","height_half","segment_width","segment_height","offset2","RingBufferGeometry","radiusStep","thetaSegmentLevel","RingGeometry","SphereBufferGeometry","thetaEnd","verticesRow","v4","TextGeometry","TorusBufferGeometry","TorusGeometry","TorusKnotBufferGeometry","calculatePositionOnCurve","cu","su","quOverP","cs","P1","P2","TorusKnotGeometry","heightScale","NoTaper","ip","jp","uva","uvb","uvc","uvd","grid","numpoints","pos2","tangents","SinusoidalTaper","initialNormal3","smallest","MAX_VALUE","tz","mat","PolyhedronGeometry","prepare","that","azimuth","inclination","make","centroid","azi","correctUV","subdivide","cols","aj","bj","rows","DodecahedronGeometry","IcosahedronGeometry","OctahedronGeometry","TetrahedronGeometry","ParametricGeometry","slices","stacks","sliceCount","WireframeGeometry","numEdges","ol","numTris","AxisHelper","ArrowHelper","lineGeometry","coneGeometry","headLength","headWidth","cone","setDirection","setColor","BoxHelper","BoundingBoxHelper","CameraHelper","addLine","addPoint","pointMap","hexFrustum","hexCone","hexUp","hexTarget","hexCross","setPoint","DirectionalLightHelper","lightPlane","targetLine","EdgesHelper","FaceNormalsHelper","nNormals","objGeometry","GridHelper","setColors","HemisphereLightHelper","sphereSize","lightSphere","PointLightHelper","SkeletonHelper","getBoneList","boneList","matrixWorldInv","boneMatrix","SpotLightHelper","vector2","coneLength","coneWidth","VertexNormalsHelper","objPos","objNorm","WireframeHelper","renderCallback","MorphBlendMesh","animationsMap","animationsList","numFrames","startFrame","endFrame","createAnimation","setAnimationWeight","lastFrame","currentFrame","active","directionBackwards","mirroredLoop","autoCreateAnimations","firstAnimation","frameRanges","morph","setAnimationDirectionForward","setAnimationDirectionBackward","setAnimationFPS","setAnimationDuration","setAnimationTime","getAnimationTime","getAnimationDuration","playAnimation","stopAnimation","keyframe"],"mappings":"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","file":"main.build.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\r\n\r\nvar config = require('./config');\r\nvar Scene = require('./modules/Scene');\r\n// var Stage = require('./modules/Stage');\r\n\r\nconsole.log(config);\r\n\r\nvar threeScene = new Scene();\r\nthreeScene.init();\r\n\r\n// var stage = new Stage();\r\n// stage.init();\r\n\r\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\r\n\r\nvar config = require('./config');\r\nvar Scene = require('./modules/Scene');\r\n// var Stage = require('./modules/Stage');\r\n\r\nconsole.log(config);\r\n\r\nvar threeScene = new Scene();\r\nthreeScene.init();\r\n\r\n// var stage = new Stage();\r\n// stage.init();\r\n\r\n\n},{\"./config\":2,\"./modules/Scene\":8}],2:[function(require,module,exports){\n'use strict';\r\n\r\nvar config = {};\r\n\r\nmodule.exports = config;\r\n\n},{}],3:[function(require,module,exports){\n'use strict';\r\n\r\nvar THREE = require('three');\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.EffectComposer = function ( renderer, renderTarget ) {\r\n\r\n\tthis.renderer = renderer;\r\n\r\n\tif ( renderTarget === undefined ) {\r\n\r\n\t\tvar parameters = {\r\n\t\t\tminFilter: THREE.LinearFilter,\r\n\t\t\tmagFilter: THREE.LinearFilter,\r\n\t\t\tformat: THREE.RGBAFormat,\r\n\t\t\tstencilBuffer: false\r\n\t\t};\r\n\t\tvar size = renderer.getSize();\r\n\t\trenderTarget = new THREE.WebGLRenderTarget( size.width, size.height, parameters );\r\n\r\n\t}\r\n\r\n\tthis.renderTarget1 = renderTarget;\r\n\tthis.renderTarget2 = renderTarget.clone();\r\n\r\n\tthis.writeBuffer = this.renderTarget1;\r\n\tthis.readBuffer = this.renderTarget2;\r\n\r\n\tthis.passes = [];\r\n\r\n\tif ( THREE.CopyShader === undefined )\r\n\t\tconsole.error( \"THREE.EffectComposer relies on THREE.CopyShader\" );\r\n\r\n\tthis.copyPass = new THREE.ShaderPass( THREE.CopyShader );\r\n\r\n};\r\n\r\nObject.assign( THREE.EffectComposer.prototype, {\r\n\r\n\tswapBuffers: function() {\r\n\r\n\t\tvar tmp = this.readBuffer;\r\n\t\tthis.readBuffer = this.writeBuffer;\r\n\t\tthis.writeBuffer = tmp;\r\n\r\n\t},\r\n\r\n\taddPass: function ( pass ) {\r\n\r\n\t\tthis.passes.push( pass );\r\n\r\n\t\tvar size = this.renderer.getSize();\r\n\t\tpass.setSize( size.width, size.height );\r\n\r\n\t},\r\n\r\n\tinsertPass: function ( pass, index ) {\r\n\r\n\t\tthis.passes.splice( index, 0, pass );\r\n\r\n\t},\r\n\r\n\trender: function ( delta ) {\r\n\r\n\t\tvar maskActive = false;\r\n\r\n\t\tvar pass, i, il = this.passes.length;\r\n\r\n\t\tfor ( i = 0; i < il; i ++ ) {\r\n\r\n\t\t\tpass = this.passes[ i ];\r\n\r\n\t\t\tif ( pass.enabled === false ) continue;\r\n\r\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, delta, maskActive );\r\n\r\n\t\t\tif ( pass.needsSwap ) {\r\n\r\n\t\t\t\tif ( maskActive ) {\r\n\r\n\t\t\t\t\tvar context = this.renderer.context;\r\n\r\n\t\t\t\t\tcontext.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\r\n\r\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, delta );\r\n\r\n\t\t\t\t\tcontext.stencilFunc( context.EQUAL, 1, 0xffffffff );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.swapBuffers();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( THREE.MaskPass !== undefined ) {\r\n\r\n\t\t\t\tif ( pass instanceof THREE.MaskPass ) {\r\n\r\n\t\t\t\t\tmaskActive = true;\r\n\r\n\t\t\t\t} else if ( pass instanceof THREE.ClearMaskPass ) {\r\n\r\n\t\t\t\t\tmaskActive = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\treset: function ( renderTarget ) {\r\n\r\n\t\tif ( renderTarget === undefined ) {\r\n\r\n\t\t\tvar size = this.renderer.getSize();\r\n\r\n\t\t\trenderTarget = this.renderTarget1.clone();\r\n\t\t\trenderTarget.setSize( size.width, size.height );\r\n\r\n\t\t}\r\n\r\n\t\tthis.renderTarget1.dispose();\r\n\t\tthis.renderTarget2.dispose();\r\n\t\tthis.renderTarget1 = renderTarget;\r\n\t\tthis.renderTarget2 = renderTarget.clone();\r\n\r\n\t\tthis.writeBuffer = this.renderTarget1;\r\n\t\tthis.readBuffer = this.renderTarget2;\r\n\r\n\t},\r\n\r\n\tsetSize: function ( width, height ) {\r\n\r\n\t\tthis.renderTarget1.setSize( width, height );\r\n\t\tthis.renderTarget2.setSize( width, height );\r\n\r\n\t\tfor ( var i = 0; i < this.passes.length; i ++ ) {\r\n\r\n\t\t\tthis.passes[i].setSize( width, height );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\nTHREE.Pass = function () {\r\n\r\n\t// if set to true, the pass is processed by the composer\r\n\tthis.enabled = true;\r\n\r\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\r\n\tthis.needsSwap = true;\r\n\r\n\t// if set to true, the pass clears its buffer before rendering\r\n\tthis.clear = false;\r\n\r\n\t// if set to true, the result of the pass is rendered to screen\r\n\tthis.renderToScreen = false;\r\n\r\n};\r\n\r\nObject.assign( THREE.Pass.prototype, {\r\n\r\n\tsetSize: function( width, height ) {},\r\n\r\n\trender: function ( renderer, writeBuffer, readBuffer, delta, maskActive ) {\r\n\r\n\t\tconsole.error( \"THREE.Pass: .render() must be implemented in derived pass.\" );\r\n\r\n\t}\r\n\r\n} );\n},{\"three\":16}],4:[function(require,module,exports){\n'use strict';\r\n\r\nvar THREE = require('three');\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.MaskPass = function ( scene, camera ) {\r\n\r\n\tTHREE.Pass.call( this );\r\n\r\n\tthis.scene = scene;\r\n\tthis.camera = camera;\r\n\r\n\tthis.clear = true;\r\n\tthis.needsSwap = false;\r\n\r\n\tthis.inverse = false;\r\n\r\n};\r\n\r\nTHREE.MaskPass.prototype = Object.assign( Object.create( THREE.Pass.prototype ), {\r\n\r\n\tconstructor: THREE.MaskPass,\r\n\r\n\trender: function ( renderer, writeBuffer, readBuffer, delta, maskActive ) {\r\n\r\n\t\tvar context = renderer.context;\r\n\t\tvar state = renderer.state;\r\n\r\n\t\t// don't update color or depth\r\n\r\n\t\tstate.buffers.color.setMask( false );\r\n\t\tstate.buffers.depth.setMask( false );\r\n\r\n\t\t// lock buffers\r\n\r\n\t\tstate.buffers.color.setLocked( true );\r\n\t\tstate.buffers.depth.setLocked( true );\r\n\r\n\t\t// set up stencil\r\n\r\n\t\tvar writeValue, clearValue;\r\n\r\n\t\tif ( this.inverse ) {\r\n\r\n\t\t\twriteValue = 0;\r\n\t\t\tclearValue = 1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\twriteValue = 1;\r\n\t\t\tclearValue = 0;\r\n\r\n\t\t}\r\n\r\n\t\tstate.buffers.stencil.setTest( true );\r\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\r\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\r\n\t\tstate.buffers.stencil.setClear( clearValue );\r\n\r\n\t\t// draw into the stencil buffer\r\n\r\n\t\trenderer.render( this.scene, this.camera, readBuffer, this.clear );\r\n\t\trenderer.render( this.scene, this.camera, writeBuffer, this.clear );\r\n\r\n\t\t// unlock color and depth buffer for subsequent rendering\r\n\r\n\t\tstate.buffers.color.setLocked( false );\r\n\t\tstate.buffers.depth.setLocked( false );\r\n\r\n\t\t// only render where stencil is set to 1\r\n\r\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff );  // draw if == 1\r\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\nTHREE.ClearMaskPass = function () {\r\n\r\n\tTHREE.Pass.call( this );\r\n\r\n\tthis.needsSwap = false;\r\n\r\n};\r\n\r\nTHREE.ClearMaskPass.prototype = Object.create( THREE.Pass.prototype );\r\n\r\nObject.assign( THREE.ClearMaskPass.prototype, {\r\n\r\n\trender: function ( renderer, writeBuffer, readBuffer, delta, maskActive ) {\r\n\r\n\t\trenderer.state.buffers.stencil.setTest( false );\r\n\r\n\t}\r\n\r\n} );\n},{\"three\":16}],5:[function(require,module,exports){\n'use strict';\r\n\r\nvar THREE = require('three');\r\n\r\n/**\r\n * @author qiao / https://github.com/qiao\r\n * @author mrdoob / http://mrdoob.com\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author erich666 / http://erichaines.com\r\n */\r\n/*global THREE, console */\r\n\r\n// This set of controls performs orbiting, dollying (zooming), and panning. It maintains\r\n// the \"up\" direction as +Y, unlike the TrackballControls. Touch on tablet and phones is\r\n// supported.\r\n//\r\n//    Orbit - left mouse / touch: one finger move\r\n//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\r\n//    Pan - right mouse, or arrow keys / touch: three finter swipe\r\n//\r\n// This is a drop-in replacement for (most) TrackballControls used in examples.\r\n// That is, include this js file and wherever you see:\r\n//    \tcontrols = new THREE.TrackballControls( camera );\r\n//      controls.target.z = 150;\r\n// Simple substitute \"OrbitControls\" and the control should work as-is.\r\n\r\nTHREE.OrbitControls = function ( object, domElement ) {\r\n\r\n    this.object = object;\r\n    this.domElement = ( domElement !== undefined ) ? domElement : document;\r\n\r\n    // API\r\n\r\n    // Set to false to disable this control\r\n    this.enabled = true;\r\n\r\n    // \"target\" sets the location of focus, where the control orbits around\r\n    // and where it pans with respect to.\r\n    this.target = new THREE.Vector3();\r\n    // center is old, deprecated; use \"target\" instead\r\n    this.center = this.target;\r\n\r\n    // This option actually enables dollying in and out; left as \"zoom\" for\r\n    // backwards compatibility\r\n    this.noZoom = false;\r\n    this.zoomSpeed = 1.0;\r\n    // Limits to how far you can dolly in and out\r\n    this.minDistance = 0;\r\n    this.maxDistance = Infinity;\r\n\r\n    // Set to true to disable this control\r\n    this.noRotate = false;\r\n    this.rotateSpeed = 1.0;\r\n\r\n    // Set to true to disable this control\r\n    this.noPan = false;\r\n    this.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\r\n\r\n    // Set to true to automatically rotate around the target\r\n    this.autoRotate = false;\r\n    this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\r\n\r\n    // How far you can orbit vertically, upper and lower limits.\r\n    // Range is 0 to Math.PI radians.\r\n    this.minPolarAngle = 0; // radians\r\n    this.maxPolarAngle = Math.PI; // radians\r\n\r\n    // Set to true to disable use of the keys\r\n    this.noKeys = false;\r\n    // The four arrow keys\r\n    this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\r\n\r\n    ////////////\r\n    // internals\r\n\r\n    var scope = this;\r\n\r\n    var EPS = 0.000001;\r\n\r\n    var rotateStart = new THREE.Vector2();\r\n    var rotateEnd = new THREE.Vector2();\r\n    var rotateDelta = new THREE.Vector2();\r\n\r\n    var panStart = new THREE.Vector2();\r\n    var panEnd = new THREE.Vector2();\r\n    var panDelta = new THREE.Vector2();\r\n\r\n    var dollyStart = new THREE.Vector2();\r\n    var dollyEnd = new THREE.Vector2();\r\n    var dollyDelta = new THREE.Vector2();\r\n\r\n    var phiDelta = 0;\r\n    var thetaDelta = 0;\r\n    var scale = 1;\r\n    var pan = new THREE.Vector3();\r\n\r\n    var lastPosition = new THREE.Vector3();\r\n\r\n    var STATE = { NONE : -1, ROTATE : 0, DOLLY : 1, PAN : 2, TOUCH_ROTATE : 3, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };\r\n    var state = STATE.NONE;\r\n\r\n    // events\r\n\r\n    var changeEvent = { type: 'change' };\r\n\r\n\r\n    this.rotateLeft = function ( angle ) {\r\n\r\n        if ( angle === undefined ) {\r\n\r\n            angle = getAutoRotationAngle();\r\n\r\n        }\r\n\r\n        thetaDelta -= angle;\r\n\r\n    };\r\n\r\n    this.rotateUp = function ( angle ) {\r\n\r\n        if ( angle === undefined ) {\r\n\r\n            angle = getAutoRotationAngle();\r\n\r\n        }\r\n\r\n        phiDelta -= angle;\r\n\r\n    };\r\n\r\n    // pass in distance in world space to move left\r\n    this.panLeft = function ( distance ) {\r\n\r\n        var panOffset = new THREE.Vector3();\r\n        var te = this.object.matrix.elements;\r\n        // get X column of matrix\r\n        panOffset.set( te[0], te[1], te[2] );\r\n        panOffset.multiplyScalar(-distance);\r\n\r\n        pan.add( panOffset );\r\n\r\n    };\r\n\r\n    // pass in distance in world space to move up\r\n    this.panUp = function ( distance ) {\r\n\r\n        var panOffset = new THREE.Vector3();\r\n        var te = this.object.matrix.elements;\r\n        // get Y column of matrix\r\n        panOffset.set( te[4], te[5], te[6] );\r\n        panOffset.multiplyScalar(distance);\r\n\r\n        pan.add( panOffset );\r\n    };\r\n\r\n    // main entry point; pass in Vector2 of change desired in pixel space,\r\n    // right and down are positive\r\n    this.pan = function ( delta ) {\r\n\r\n        var element = scope.domElement === document ? scope.domElement.body : scope.domElement;\r\n\r\n        if ( scope.object.fov !== undefined ) {\r\n\r\n            // perspective\r\n            var position = scope.object.position;\r\n            var offset = position.clone().sub( scope.target );\r\n            var targetDistance = offset.length();\r\n\r\n            // half of the fov is center to top of screen\r\n            targetDistance *= Math.tan( (scope.object.fov/2) * Math.PI / 180.0 );\r\n            // we actually don't use screenWidth, since perspective camera is fixed to screen height\r\n            scope.panLeft( 2 * delta.x * targetDistance / element.clientHeight );\r\n            scope.panUp( 2 * delta.y * targetDistance / element.clientHeight );\r\n\r\n        } else if ( scope.object.top !== undefined ) {\r\n\r\n            // orthographic\r\n            scope.panLeft( delta.x * (scope.object.right - scope.object.left) / element.clientWidth );\r\n            scope.panUp( delta.y * (scope.object.top - scope.object.bottom) / element.clientHeight );\r\n\r\n        } else {\r\n\r\n            // camera neither orthographic or perspective - warn user\r\n            console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\r\n\r\n        }\r\n\r\n    };\r\n\r\n    this.dollyIn = function ( dollyScale ) {\r\n\r\n        if ( dollyScale === undefined ) {\r\n\r\n            dollyScale = getZoomScale();\r\n\r\n        }\r\n\r\n        scale /= dollyScale;\r\n\r\n    };\r\n\r\n    this.dollyOut = function ( dollyScale ) {\r\n\r\n        if ( dollyScale === undefined ) {\r\n\r\n            dollyScale = getZoomScale();\r\n\r\n        }\r\n\r\n        scale *= dollyScale;\r\n\r\n    };\r\n\r\n    this.update = function () {\r\n\r\n        var position = this.object.position;\r\n        var offset = position.clone().sub( this.target );\r\n\r\n        // angle from z-axis around y-axis\r\n\r\n        var theta = Math.atan2( offset.x, offset.z );\r\n\r\n        // angle from y-axis\r\n\r\n        var phi = Math.atan2( Math.sqrt( offset.x * offset.x + offset.z * offset.z ), offset.y );\r\n\r\n        if ( this.autoRotate ) {\r\n\r\n            this.rotateLeft( getAutoRotationAngle() );\r\n\r\n        }\r\n\r\n        theta += thetaDelta;\r\n        phi += phiDelta;\r\n\r\n        // restrict phi to be between desired limits\r\n        phi = Math.max( this.minPolarAngle, Math.min( this.maxPolarAngle, phi ) );\r\n\r\n        // restrict phi to be betwee EPS and PI-EPS\r\n        phi = Math.max( EPS, Math.min( Math.PI - EPS, phi ) );\r\n\r\n        var radius = offset.length() * scale;\r\n\r\n        // restrict radius to be between desired limits\r\n        radius = Math.max( this.minDistance, Math.min( this.maxDistance, radius ) );\r\n\r\n        // move target to panned location\r\n        this.target.add( pan );\r\n\r\n        offset.x = radius * Math.sin( phi ) * Math.sin( theta );\r\n        offset.y = radius * Math.cos( phi );\r\n        offset.z = radius * Math.sin( phi ) * Math.cos( theta );\r\n\r\n        position.copy( this.target ).add( offset );\r\n\r\n        this.object.lookAt( this.target );\r\n\r\n        thetaDelta = 0;\r\n        phiDelta = 0;\r\n        scale = 1;\r\n        pan.set(0,0,0);\r\n\r\n        if ( lastPosition.distanceTo( this.object.position ) > 0 ) {\r\n\r\n            this.dispatchEvent( changeEvent );\r\n\r\n            lastPosition.copy( this.object.position );\r\n\r\n        }\r\n\r\n    };\r\n\r\n\r\n    function getAutoRotationAngle() {\r\n\r\n        return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\r\n\r\n    }\r\n\r\n    function getZoomScale() {\r\n\r\n        return Math.pow( 0.95, scope.zoomSpeed );\r\n\r\n    }\r\n\r\n    function onMouseDown( event ) {\r\n\r\n        if ( scope.enabled === false ) { return; }\r\n        event.preventDefault();\r\n\r\n        if ( event.button === 0 ) {\r\n            if ( scope.noRotate === true ) { return; }\r\n\r\n            state = STATE.ROTATE;\r\n\r\n            rotateStart.set( event.clientX, event.clientY );\r\n\r\n        } else if ( event.button === 1 ) {\r\n            if ( scope.noZoom === true ) { return; }\r\n\r\n            state = STATE.DOLLY;\r\n\r\n            dollyStart.set( event.clientX, event.clientY );\r\n\r\n        } else if ( event.button === 2 ) {\r\n            if ( scope.noPan === true ) { return; }\r\n\r\n            state = STATE.PAN;\r\n\r\n            panStart.set( event.clientX, event.clientY );\r\n\r\n        }\r\n\r\n        // Greggman fix: https://github.com/greggman/three.js/commit/fde9f9917d6d8381f06bf22cdff766029d1761be\r\n        scope.domElement.addEventListener( 'mousemove', onMouseMove, false );\r\n        scope.domElement.addEventListener( 'mouseup', onMouseUp, false );\r\n\r\n    }\r\n\r\n    function onMouseMove( event ) {\r\n\r\n        if ( scope.enabled === false ) return;\r\n\r\n        event.preventDefault();\r\n\r\n        var element = scope.domElement === document ? scope.domElement.body : scope.domElement;\r\n\r\n        if ( state === STATE.ROTATE ) {\r\n\r\n            if ( scope.noRotate === true ) return;\r\n\r\n            rotateEnd.set( event.clientX, event.clientY );\r\n            rotateDelta.subVectors( rotateEnd, rotateStart );\r\n\r\n            // rotating across whole screen goes 360 degrees around\r\n            scope.rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\r\n            // rotating up and down along whole screen attempts to go 360, but limited to 180\r\n            scope.rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\r\n\r\n            rotateStart.copy( rotateEnd );\r\n\r\n        } else if ( state === STATE.DOLLY ) {\r\n\r\n            if ( scope.noZoom === true ) return;\r\n\r\n            dollyEnd.set( event.clientX, event.clientY );\r\n            dollyDelta.subVectors( dollyEnd, dollyStart );\r\n\r\n            if ( dollyDelta.y > 0 ) {\r\n\r\n                scope.dollyIn();\r\n\r\n            } else {\r\n\r\n                scope.dollyOut();\r\n\r\n            }\r\n\r\n            dollyStart.copy( dollyEnd );\r\n\r\n        } else if ( state === STATE.PAN ) {\r\n\r\n            if ( scope.noPan === true ) return;\r\n\r\n            panEnd.set( event.clientX, event.clientY );\r\n            panDelta.subVectors( panEnd, panStart );\r\n\r\n            scope.pan( panDelta );\r\n\r\n            panStart.copy( panEnd );\r\n\r\n        }\r\n\r\n        // Greggman fix: https://github.com/greggman/three.js/commit/fde9f9917d6d8381f06bf22cdff766029d1761be\r\n        scope.update();\r\n\r\n    }\r\n\r\n    function onMouseUp( /* event */ ) {\r\n\r\n        if ( scope.enabled === false ) return;\r\n\r\n        // Greggman fix: https://github.com/greggman/three.js/commit/fde9f9917d6d8381f06bf22cdff766029d1761be\r\n        scope.domElement.removeEventListener( 'mousemove', onMouseMove, false );\r\n        scope.domElement.removeEventListener( 'mouseup', onMouseUp, false );\r\n\r\n        state = STATE.NONE;\r\n\r\n    }\r\n\r\n    function onMouseWheel( event ) {\r\n\r\n        if ( scope.enabled === false || scope.noZoom === true ) return;\r\n\r\n        var delta = 0;\r\n\r\n        if ( event.wheelDelta ) { // WebKit / Opera / Explorer 9\r\n\r\n            delta = event.wheelDelta;\r\n\r\n        } else if ( event.detail ) { // Firefox\r\n\r\n            delta = - event.detail;\r\n\r\n        }\r\n\r\n        if ( delta > 0 ) {\r\n\r\n            scope.dollyOut();\r\n\r\n        } else {\r\n\r\n            scope.dollyIn();\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function onKeyDown( event ) {\r\n\r\n        if ( scope.enabled === false ) { return; }\r\n        if ( scope.noKeys === true ) { return; }\r\n        if ( scope.noPan === true ) { return; }\r\n\r\n        // pan a pixel - I guess for precise positioning?\r\n        // Greggman fix: https://github.com/greggman/three.js/commit/fde9f9917d6d8381f06bf22cdff766029d1761be\r\n        var needUpdate = false;\r\n\r\n        switch ( event.keyCode ) {\r\n\r\n            case scope.keys.UP:\r\n                scope.pan( new THREE.Vector2( 0, scope.keyPanSpeed ) );\r\n                needUpdate = true;\r\n                break;\r\n            case scope.keys.BOTTOM:\r\n                scope.pan( new THREE.Vector2( 0, -scope.keyPanSpeed ) );\r\n                needUpdate = true;\r\n                break;\r\n            case scope.keys.LEFT:\r\n                scope.pan( new THREE.Vector2( scope.keyPanSpeed, 0 ) );\r\n                needUpdate = true;\r\n                break;\r\n            case scope.keys.RIGHT:\r\n                scope.pan( new THREE.Vector2( -scope.keyPanSpeed, 0 ) );\r\n                needUpdate = true;\r\n                break;\r\n        }\r\n\r\n        // Greggman fix: https://github.com/greggman/three.js/commit/fde9f9917d6d8381f06bf22cdff766029d1761be\r\n        if ( needUpdate ) {\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function touchstart( event ) {\r\n\r\n        if ( scope.enabled === false ) { return; }\r\n\r\n        switch ( event.touches.length ) {\r\n\r\n            case 1:\t// one-fingered touch: rotate\r\n                if ( scope.noRotate === true ) { return; }\r\n\r\n                state = STATE.TOUCH_ROTATE;\r\n\r\n                rotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\r\n                break;\r\n\r\n            case 2:\t// two-fingered touch: dolly\r\n                if ( scope.noZoom === true ) { return; }\r\n\r\n                state = STATE.TOUCH_DOLLY;\r\n\r\n                var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\r\n                var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\r\n                var distance = Math.sqrt( dx * dx + dy * dy );\r\n                dollyStart.set( 0, distance );\r\n                break;\r\n\r\n            case 3: // three-fingered touch: pan\r\n                if ( scope.noPan === true ) { return; }\r\n\r\n                state = STATE.TOUCH_PAN;\r\n\r\n                panStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\r\n                break;\r\n\r\n            default:\r\n                state = STATE.NONE;\r\n\r\n        }\r\n    }\r\n\r\n    function touchmove( event ) {\r\n\r\n        if ( scope.enabled === false ) { return; }\r\n\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        var element = scope.domElement === document ? scope.domElement.body : scope.domElement;\r\n\r\n        switch ( event.touches.length ) {\r\n\r\n            case 1: // one-fingered touch: rotate\r\n                if ( scope.noRotate === true ) { return; }\r\n                if ( state !== STATE.TOUCH_ROTATE ) { return; }\r\n\r\n                rotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\r\n                rotateDelta.subVectors( rotateEnd, rotateStart );\r\n\r\n                // rotating across whole screen goes 360 degrees around\r\n                scope.rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\r\n                // rotating up and down along whole screen attempts to go 360, but limited to 180\r\n                scope.rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\r\n\r\n                rotateStart.copy( rotateEnd );\r\n                break;\r\n\r\n            case 2: // two-fingered touch: dolly\r\n                if ( scope.noZoom === true ) { return; }\r\n                if ( state !== STATE.TOUCH_DOLLY ) { return; }\r\n\r\n                var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\r\n                var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\r\n                var distance = Math.sqrt( dx * dx + dy * dy );\r\n\r\n                dollyEnd.set( 0, distance );\r\n                dollyDelta.subVectors( dollyEnd, dollyStart );\r\n\r\n                if ( dollyDelta.y > 0 ) {\r\n\r\n                    scope.dollyOut();\r\n\r\n                } else {\r\n\r\n                    scope.dollyIn();\r\n\r\n                }\r\n\r\n                dollyStart.copy( dollyEnd );\r\n                break;\r\n\r\n            case 3: // three-fingered touch: pan\r\n                if ( scope.noPan === true ) { return; }\r\n                if ( state !== STATE.TOUCH_PAN ) { return; }\r\n\r\n                panEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\r\n                panDelta.subVectors( panEnd, panStart );\r\n\r\n                scope.pan( panDelta );\r\n\r\n                panStart.copy( panEnd );\r\n                break;\r\n\r\n            default:\r\n                state = STATE.NONE;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function touchend( /* event */ ) {\r\n\r\n        if ( scope.enabled === false ) { return; }\r\n\r\n        state = STATE.NONE;\r\n    }\r\n\r\n    this.domElement.addEventListener( 'contextmenu', function ( event ) { event.preventDefault(); }, false );\r\n    this.domElement.addEventListener( 'mousedown', onMouseDown, false );\r\n    this.domElement.addEventListener( 'mousewheel', onMouseWheel, false );\r\n    this.domElement.addEventListener( 'DOMMouseScroll', onMouseWheel, false ); // firefox\r\n\r\n    this.domElement.addEventListener( 'keydown', onKeyDown, false );\r\n\r\n    this.domElement.addEventListener( 'touchstart', touchstart, false );\r\n    this.domElement.addEventListener( 'touchend', touchend, false );\r\n    this.domElement.addEventListener( 'touchmove', touchmove, false );\r\n\r\n};\r\n\r\nTHREE.OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\n},{\"three\":16}],6:[function(require,module,exports){\n'use strict';\r\n\r\nvar THREE = require('three');\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.RenderPass = function ( scene, camera, overrideMaterial, clearColor, clearAlpha ) {\r\n\r\n\tTHREE.Pass.call( this );\r\n\r\n\tthis.scene = scene;\r\n\tthis.camera = camera;\r\n\r\n\tthis.overrideMaterial = overrideMaterial;\r\n\r\n\tthis.clearColor = clearColor;\r\n\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;\r\n\r\n\tthis.clear = true;\r\n\tthis.needsSwap = false;\r\n\r\n};\r\n\r\nTHREE.RenderPass.prototype = Object.assign( Object.create( THREE.Pass.prototype ), {\r\n\r\n\tconstructor: THREE.RenderPass,\r\n\r\n\trender: function ( renderer, writeBuffer, readBuffer, delta, maskActive ) {\r\n\r\n\t\tthis.scene.overrideMaterial = this.overrideMaterial;\r\n\r\n\t\tvar oldClearColor, oldClearAlpha;\r\n\r\n\t\tif ( this.clearColor ) {\r\n\r\n\t\t\toldClearColor = renderer.getClearColor().getHex();\r\n\t\t\toldClearAlpha = renderer.getClearAlpha();\r\n\r\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\r\n\r\n\t\t}\r\n\r\n\t\trenderer.render( this.scene, this.camera, this.renderToScreen ? null : readBuffer, this.clear );\r\n\r\n\t\tif ( this.clearColor ) {\r\n\r\n\t\t\trenderer.setClearColor( oldClearColor, oldClearAlpha );\r\n\r\n\t\t}\r\n\r\n\t\tthis.scene.overrideMaterial = null;\r\n\r\n\t}\r\n\r\n} );\n},{\"three\":16}],7:[function(require,module,exports){\n'use strict';\r\n\r\nvar THREE = require('three');\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.ShaderPass = function ( shader, textureID ) {\r\n\r\n\tTHREE.Pass.call( this );\r\n\r\n\tthis.textureID = ( textureID !== undefined ) ? textureID : \"tDiffuse\";\r\n\r\n\tif ( shader instanceof THREE.ShaderMaterial ) {\r\n\r\n\t\tthis.uniforms = shader.uniforms;\r\n\r\n\t\tthis.material = shader;\r\n\r\n\t} else if ( shader ) {\r\n\r\n\t\tthis.uniforms = THREE.UniformsUtils.clone( shader.uniforms );\r\n\r\n\t\tthis.material = new THREE.ShaderMaterial( {\r\n\r\n\t\t\tdefines: shader.defines || {},\r\n\t\t\tuniforms: this.uniforms,\r\n\t\t\tvertexShader: shader.vertexShader,\r\n\t\t\tfragmentShader: shader.fragmentShader\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tthis.camera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\r\n\tthis.scene = new THREE.Scene();\r\n\r\n\tthis.quad = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), null );\r\n\tthis.scene.add( this.quad );\r\n\r\n};\r\n\r\nTHREE.ShaderPass.prototype = Object.assign( Object.create( THREE.Pass.prototype ), {\r\n\r\n\tconstructor: THREE.ShaderPass,\r\n\r\n\trender: function( renderer, writeBuffer, readBuffer, delta, maskActive ) {\r\n\r\n\t\tif ( this.uniforms[ this.textureID ] ) {\r\n\r\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\r\n\r\n\t\t}\r\n\r\n\t\tthis.quad.material = this.material;\r\n\r\n\t\tif ( this.renderToScreen ) {\r\n\r\n\t\t\trenderer.render( this.scene, this.camera );\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderer.render( this.scene, this.camera, writeBuffer, this.clear );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n} );\n},{\"three\":16}],8:[function(require,module,exports){\n'use strict';\r\n\r\nvar THREE = require('three');\r\nvar TweemMax = require('../vendor/TweenMax.min.js');\r\n\r\nvar OrbitControls = require('../libs/OrbitControls.js');\r\n\r\nvar CopyShader = require('../shaders/CopyShader.js');\r\nvar DotScreenShader = require('../shaders/DotScreenShader.js');\r\nvar RGBShiftShader = require('../shaders/RGBShiftShader.js');\r\nvar DigitalGlitch = require('../shaders/DigitalGlitch.js');\r\nvar FilmShader = require('../shaders/FilmShader.js');\r\nvar BadTv = require('../shaders/BadTv.js');\r\nvar FilmShader = require('../shaders/FilmShader.js');\r\n\r\nvar EffectComposer = require('../libs/EffectComposer.js');\r\nvar RenderPass = require('../libs/RenderPass.js');\r\nvar MaskPass = require('../libs/MaskPass.js');\r\nvar ShaderPass = require('../libs/ShaderPass.js');\r\n\r\nvar Scene = function() {\r\n  \r\n  this.renderer = new THREE.WebGLRenderer({alpha: true});\r\n  this.renderer.setPixelRatio(window.devicePixelRatio);\r\n  this.renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n  document.body.appendChild(this.renderer.domElement);\r\n\r\n  this.camera = new THREE.PerspectiveCamera(70, (window.innerWidth / window.innerHeight), 1, 1000);\r\n  //this.camera.position.z = 50;\r\n  this.camera.position.z = 400;\r\n\r\n  this.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);\r\n  this.controls.autoRotate = true;\r\n\r\n  this.getLights();\r\n  this.getObjects();\r\n  \r\n  this.tempTimer = 0;\r\n\r\n};\r\n\r\nScene.prototype.init = function() {\r\n  //this.createBg();\r\n  this.sphereElement();\r\n  this.getShaders();\r\n  this.getAudio();\r\n\r\n  requestAnimationFrame(this.animate.bind(this));\r\n\r\n  // on resize\r\n  window.addEventListener('resize', this._onResize.bind(this));\r\n\r\n  TweenMax.to(document.querySelector('.bg'), 2000, {\r\n    rotation: 1080,\r\n    yoyo: true,\r\n    repeat: -1,\r\n    ease: Power1.easeOut\r\n  });\r\n};\r\n\r\nScene.prototype.animate = function() {\r\n  requestAnimationFrame(this.animate.bind(this));\r\n  var time = Date.now();\r\n\r\n  this.update(time);\r\n\r\n  this.renderer.render(this.scene, this.camera);\r\n};\r\n\r\nScene.prototype.update = function(time) {\r\n  var diff = time - this.lastTime;\r\n  this.lastTime = time;\r\n\r\n  if (!this.lastTime) {\r\n    this.lastTime = time;\r\n    \r\n    return;\r\n  }  \r\n\r\n  this.object.rotation.x += 0.0025;\r\n  this.object.rotation.y += 0.001;\r\n  this.partSystem.rotation.y = time * 0.0005;\r\n\r\n  this.controls.update()\r\n  this.composer.render();\r\n  this.updateVisual();\r\n\r\n};\r\n\r\nScene.prototype.updateVisual = function() {\r\n  var array = new Uint8Array(this.analyser.frequencyBinCount);\r\n  var visualElement = this.scene.getObjectByName('particlez');\r\n  var visualElement2 = this.scene.getObjectByName('myScene');\r\n  this.analyser.getByteFrequencyData(array);\r\n  var average = this._getAverageVolume(array);\r\n\r\n  if (visualElement || visualElement2) {\r\n    visualElement.scale.y = average / 70;\r\n    visualElement.scale.x = average / 70;\r\n    visualElement.scale.z = average / 60;\r\n\r\n    this.rgbEffect.uniforms['amount'].value = average / 300;\r\n    this.rgbEffect.uniforms['angle'].value = average / 100;\r\n    this.dotEffect.uniforms['scale'].value = average / 20;\r\n    this.glitchEffect.uniforms['nIntensity'].value = average / 2000;\r\n    \r\n    this.bgMesh.rotation.z = average / 2000;\r\n    this.object.rotation.x = average / 2000;\r\n    this.object.rotation.y = average / 2000;\r\n  }\r\n\r\n};\r\n\r\nScene.prototype.getAudio = function() {\r\n  var context = new AudioContext();\r\n  this.analyser = context.createAnalyser();\r\n  this.analyser.smoothingTimeConstant = 0.4;\r\n  this.analyser.fftSize = 1024;\r\n\r\n  this.analyser2 = context.createAnalyser();\r\n  this.analyser2.smoothingTimeConstant = 0.4;\r\n  this.analyser2.fftSize = 1024;\r\n\r\n  var sourceNode = context.createBufferSource();\r\n  var splitter = context.createChannelSplitter();\r\n\r\n  sourceNode.connect(splitter);\r\n\r\n  splitter.connect(this.analyser, 0);\r\n  splitter.connect(this.analyser2, 1);\r\n\r\n  sourceNode.connect(context.destination);\r\n\r\n  var request = new XMLHttpRequest();\r\n  request.open('GET', 'audio/wham.mp3', true);\r\n  request.crossOrigin = 'anonymous';\r\n  request.responseType = 'arraybuffer';\r\n\r\n  var songBuffer;\r\n  \r\n  request.onload = function() {\r\n    context.decodeAudioData(request.response, function(buffer) {\r\n      songBuffer = buffer;\r\n\r\n      var dur = buffer.duration;\r\n\r\n      sourceNode.buffer = buffer;\r\n      sourceNode.start(0);\r\n      sourceNode.loop = true;\r\n      sourceNode.muted = true;\r\n\r\n    }, this._onError);\r\n  }.bind(this);\r\n\r\n  request.send();\r\n};\r\n\r\nScene.prototype.getObjects = function() {\r\n  this.object = new THREE.Object3D();\r\n  this.scene.add(this.object);\r\n\r\n  this.object.name = 'myScene';\r\n\r\n  var geometry = new THREE.SphereGeometry( 1, 32, 32 );\r\n  var material = new THREE.MeshPhongMaterial( { color: 0xffffff, shading: THREE.FlatShading } );\r\n\r\n  for ( var i = 0; i < 100; i ++ ) {\r\n\r\n    var mesh = new THREE.Mesh( geometry, material );\r\n    mesh.position.set( Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5 ).normalize();\r\n    mesh.position.multiplyScalar( Math.random() * 400 );\r\n    mesh.rotation.set( Math.random() * 2, Math.random() * 2, Math.random() * 2 );\r\n    mesh.scale.x = mesh.scale.y = mesh.scale.z = Math.random() * 50;\r\n    this.object.add( mesh );\r\n\r\n  }\r\n\r\n};\r\n\r\nScene.prototype.sphereElement = function() {\r\n  var sphereGeometry = new THREE.SphereGeometry(4, 12, 12);\r\n\r\n  var particleBlock = new THREE.PointsMaterial({\r\n    color: 0x665fc6,\r\n    size: 1.0,\r\n    transparent: true\r\n  });\r\n\r\n  particleBlock.blending = THREE.AdditiveBlending;\r\n  \r\n  this.partSystem = new THREE.Points(sphereGeometry, particleBlock);\r\n  this.partSystem.softParticles = true;\r\n  this.partSystem.name = 'particlez';\r\n  // this.partSystem.position.x = -2;\r\n  // this.partSystem.position.y = 2;\r\n  this.partSystem.position.set(0, 0, 100);\r\n  this.scene.add(this.partSystem);\r\n  document.body.appendChild(this.renderer.domElement);\r\n};\r\n\r\nScene.prototype.getLights = function() {\r\n  this.scene = new THREE.Scene();\r\n  this.scene.fog = new THREE.Fog(0x000000, 1, 1000);\r\n\r\n  this.scene.add(new THREE.AmbientLight(0x222222 ));\r\n\r\n  var light = new THREE.DirectionalLight(0xffffff);\r\n  light.position.set(1, 1, 1);\r\n  this.scene.add(light);\r\n};\r\n\r\nScene.prototype.createBg = function() {\r\n  var geometry = new THREE.SphereGeometry(150, 32, 32);\r\n  var texture = new THREE.TextureLoader().load('images/bg.jpg');\r\n  var material = new THREE.MeshBasicMaterial({\r\n    map: texture,\r\n    side: THREE.BackSide\r\n  });\r\n\r\n  this.bgMesh = new THREE.Mesh(geometry, material);\r\n\r\n  this.scene.add(this.bgMesh);\r\n};\r\n\r\n// postprocessing\r\nScene.prototype.getShaders = function() {\r\n  \r\n  this.composer = new THREE.EffectComposer(this.renderer);\r\n  this.composer.addPass( new THREE.RenderPass(this.scene, this.camera));\r\n\r\n  this.dotEffect = new THREE.ShaderPass(THREE.DotScreenShader);\r\n  this.dotEffect.uniforms['scale'].value = 4;\r\n  //this.dotEffect.uniforms['scale'].value = 200;\r\n  //this.dotEffect.renderToScreen = true;\r\n  this.composer.addPass(this.dotEffect);\r\n\r\n  this.glitchEffect = new THREE.ShaderPass(THREE.FilmShader);\r\n  this.glitchEffect.uniforms['nIntensity'].value = 0.5;\r\n  this.glitchEffect.uniforms['sIntensity'].value = 0.05;\r\n  //this.glitchEffect.renderToScreen = true;\r\n  this.composer.addPass(this.glitchEffect);\r\n\r\n  this.badTVEffect = new THREE.ShaderPass(THREE.BadTVShader);\r\n  this.badTVEffect.uniforms['speed'].value = 10;\r\n  this.badTVEffect.uniforms['rollSpeed'].value = 20;\r\n  //this.badTVEffect.renderToScreen = true;\r\n  this.composer.addPass(this.badTVEffect);\r\n\r\n  this.rgbEffect = new THREE.ShaderPass(THREE.RGBShiftShader);\r\n  this.rgbEffect.uniforms['amount'].value = 20;\r\n  this.rgbEffect.renderToScreen = true;\r\n  this.composer.addPass(this.rgbEffect);\r\n\r\n};\r\n\r\nScene.prototype._getAverageVolume = function(array) {\r\n  var values = 0;\r\n  var average;\r\n  var length = array.length;\r\n\r\n  for (var i = 0; i < length; i++) {\r\n    values += array[i];\r\n  }\r\n\r\n  average = values / length;\r\n\r\n  return average;\r\n};\r\n\r\nScene.prototype._onResize = function() {\r\n  this.camera.aspect = window.innerWidth / window.innerHeight;\r\n  this.camera.updateProjectionMatrix();\r\n  this.renderer.setSize( window.innerWidth, window.innerHeight );\r\n  this.composer.setSize( window.innerWidth, window.innerHeight );\r\n};\r\n\r\nScene.prototype._onError = function(e) {\r\n  console.log(e);\r\n};\r\n\r\nmodule.exports = Scene;\n},{\"../libs/EffectComposer.js\":3,\"../libs/MaskPass.js\":4,\"../libs/OrbitControls.js\":5,\"../libs/RenderPass.js\":6,\"../libs/ShaderPass.js\":7,\"../shaders/BadTv.js\":9,\"../shaders/CopyShader.js\":10,\"../shaders/DigitalGlitch.js\":11,\"../shaders/DotScreenShader.js\":12,\"../shaders/FilmShader.js\":13,\"../shaders/RGBShiftShader.js\":14,\"../vendor/TweenMax.min.js\":15,\"three\":16}],9:[function(require,module,exports){\n'use strict';\r\n\r\nvar THREE = require('three');\r\n\r\n/**\r\n * @author Felix Turner / www.airtight.cc / @felixturner\r\n *\r\n * Bad TV Shader\r\n * Simulates a bad TV via horizontal distortion and vertical roll\r\n * Uses Ashima WebGl Noise: https://github.com/ashima/webgl-noise\r\n *\r\n * time: steadily increasing float passed in\r\n * distortion: amount of thick distortion\r\n * distortion2: amount of fine grain distortion\r\n * speed: distortion vertical travel speed\r\n * rollSpeed: vertical roll speed\r\n *\r\n * The MIT License\r\n *\r\n * Copyright (c) 2014 Felix Turner\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n\r\nTHREE.BadTVShader = {\r\n  uniforms: {\r\n    \"tDiffuse\":    { type: \"t\", value: null },\r\n    \"time\":        { type: \"f\", value: 0.0 },\r\n    \"distortion\":  { type: \"f\", value: 0.5 },\r\n    \"distortion2\": { type: \"f\", value: 1.5 },\r\n    \"speed\":       { type: \"f\", value: 0.5 },\r\n    \"rollSpeed\":   { type: \"f\", value: 0.0 },\r\n  },\r\n\r\n  vertexShader: [\r\n    \"varying vec2 vUv;\",\r\n    \"void main() {\",\r\n    \"vUv = uv;\",\r\n    \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n    \"}\"\r\n\r\n  ].join(\"\\n\"),\r\n\r\n  fragmentShader: [\r\n\r\n    \"uniform sampler2D tDiffuse;\",\r\n    \"uniform float time;\",\r\n    \"uniform float distortion;\",\r\n    \"uniform float distortion2;\",\r\n    \"uniform float speed;\",\r\n    \"uniform float rollSpeed;\",\r\n    \"varying vec2 vUv;\",\r\n\r\n    // Start Ashima 2D Simplex Noise\r\n\r\n    \"vec3 mod289(vec3 x) {\",\r\n    \"  return x - floor(x * (1.0 / 289.0)) * 289.0;\",\r\n    \"}\",\r\n\r\n    \"vec2 mod289(vec2 x) {\",\r\n    \"  return x - floor(x * (1.0 / 289.0)) * 289.0;\",\r\n    \"}\",\r\n\r\n    \"vec3 permute(vec3 x) {\",\r\n    \"  return mod289(((x*34.0)+1.0)*x);\",\r\n    \"}\",\r\n\r\n    \"float snoise(vec2 v)\",\r\n    \"  {\",\r\n    \"  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\",\r\n    \"                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\",\r\n    \"                     -0.577350269189626,  // -1.0 + 2.0 * C.x\",\r\n    \"                      0.024390243902439); // 1.0 / 41.0\",\r\n    \"  vec2 i  = floor(v + dot(v, C.yy) );\",\r\n    \"  vec2 x0 = v -   i + dot(i, C.xx);\",\r\n\r\n    \"  vec2 i1;\",\r\n    \"  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\",\r\n    \"  vec4 x12 = x0.xyxy + C.xxzz;\",\r\n    \" x12.xy -= i1;\",\r\n\r\n    \"  i = mod289(i); // Avoid truncation effects in permutation\",\r\n    \"  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\",\r\n    \"   + i.x + vec3(0.0, i1.x, 1.0 ));\",\r\n\r\n    \"  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\",\r\n    \"  m = m*m ;\",\r\n    \"  m = m*m ;\",\r\n\r\n    \"  vec3 x = 2.0 * fract(p * C.www) - 1.0;\",\r\n    \"  vec3 h = abs(x) - 0.5;\",\r\n    \"  vec3 ox = floor(x + 0.5);\",\r\n    \"  vec3 a0 = x - ox;\",\r\n\r\n    \"  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\",\r\n\r\n    \"  vec3 g;\",\r\n    \"  g.x  = a0.x  * x0.x  + h.x  * x0.y;\",\r\n    \"  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\",\r\n    \"  return 130.0 * dot(m, g);\",\r\n    \"}\",\r\n\r\n    // End Ashima 2D Simplex Noise\r\n\r\n    \"void main() {\",\r\n\r\n      \"vec2 p = vUv;\",\r\n      \"float ty = time*speed;\",\r\n      \"float yt = p.y - ty;\",\r\n\r\n      //smooth distortion\r\n      \"float offset = snoise(vec2(yt*3.0,0.0))*0.2;\",\r\n      // boost distortion\r\n      \"offset = pow( offset*distortion,3.0)/distortion;\",\r\n      //add fine grain distortion\r\n      \"offset += snoise(vec2(yt*50.0,0.0))*distortion2*0.001;\",\r\n      //combine distortion on X with roll on Y\r\n      \"gl_FragColor = texture2D(tDiffuse,  vec2(fract(p.x + offset),fract(p.y-time*rollSpeed) ));\",\r\n\r\n    \"}\"\r\n\r\n  ].join(\"\\n\")\r\n\r\n};\n},{\"three\":16}],10:[function(require,module,exports){\n'use strict';\r\n\r\nvar THREE = require('three');\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * Full-screen textured quad shader\r\n */\r\n\r\nTHREE.CopyShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t\"tDiffuse\": { value: null },\r\n\t\t\"opacity\":  { value: 1.0 }\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\t\"vUv = uv;\",\r\n\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" ),\r\n\r\n\tfragmentShader: [\r\n\r\n\t\t\"uniform float opacity;\",\r\n\r\n\t\t\"uniform sampler2D tDiffuse;\",\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\t\"vec4 texel = texture2D( tDiffuse, vUv );\",\r\n\t\t\t\"gl_FragColor = opacity * texel;\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" )\r\n\r\n};\n},{\"three\":16}],11:[function(require,module,exports){\n'use strict';\n\nvar THREE = require('three');\n\n/**\n * @author felixturner / http://airtight.cc/\n *\n * RGB Shift Shader\n * Shifts red and blue channels from center in opposite directions\n * Ported from http://kriss.cx/tom/2009/05/rgb-shift/\n * by Tom Butterworth / http://kriss.cx/tom/\n *\n * amount: shift distance (1 is width of input)\n * angle: shift angle in radians\n */\n\nTHREE.DigitalGlitch = {\n\n\tuniforms: {\n\n\t\t\"tDiffuse\":\t\t{ value: null },//diffuse texture\n\t\t\"tDisp\":\t\t{ value: null },//displacement texture for digital glitch squares\n\t\t\"byp\":\t\t\t{ value: 0 },//apply the glitch ?\n\t\t\"amount\":\t\t{ value: 0.08 },\n\t\t\"angle\":\t\t{ value: 0.02 },\n\t\t\"seed\":\t\t\t{ value: 0.02 },\n\t\t\"seed_x\":\t\t{ value: 0.02 },//-1,1\n\t\t\"seed_y\":\t\t{ value: 0.02 },//-1,1\n\t\t\"distortion_x\":\t{ value: 0.5 },\n\t\t\"distortion_y\":\t{ value: 0.6 },\n\t\t\"col_s\":\t\t{ value: 0.05 }\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\t\t\"void main() {\",\n\t\t\t\"vUv = uv;\",\n\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\t\t\"}\"\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\t\t\"uniform int byp;\",//should we apply the glitch ?\n\t\t\n\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\"uniform sampler2D tDisp;\",\n\t\t\n\t\t\"uniform float amount;\",\n\t\t\"uniform float angle;\",\n\t\t\"uniform float seed;\",\n\t\t\"uniform float seed_x;\",\n\t\t\"uniform float seed_y;\",\n\t\t\"uniform float distortion_x;\",\n\t\t\"uniform float distortion_y;\",\n\t\t\"uniform float col_s;\",\n\t\t\t\n\t\t\"varying vec2 vUv;\",\n\t\t\n\t\t\n\t\t\"float rand(vec2 co){\",\n\t\t\t\"return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\",\n\t\t\"}\",\n\t\t\t\t\n\t\t\"void main() {\",\n\t\t\t\"if(byp<1) {\",\n\t\t\t\t\"vec2 p = vUv;\",\n\t\t\t\t\"float xs = floor(gl_FragCoord.x / 0.5);\",\n\t\t\t\t\"float ys = floor(gl_FragCoord.y / 0.5);\",\n\t\t\t\t//based on staffantans glitch shader for unity https://github.com/staffantan/unityglitch\n\t\t\t\t\"vec4 normal = texture2D (tDisp, p*seed*seed);\",\n\t\t\t\t\"if(p.y<distortion_x+col_s && p.y>distortion_x-col_s*seed) {\",\n\t\t\t\t\t\"if(seed_x>0.){\",\n\t\t\t\t\t\t\"p.y = 1. - (p.y + distortion_y);\",\n\t\t\t\t\t\"}\",\n\t\t\t\t\t\"else {\",\n\t\t\t\t\t\t\"p.y = distortion_y;\",\n\t\t\t\t\t\"}\",\n\t\t\t\t\"}\",\n\t\t\t\t\"if(p.x<distortion_y+col_s && p.x>distortion_y-col_s*seed) {\",\n\t\t\t\t\t\"if(seed_y>0.){\",\n\t\t\t\t\t\t\"p.x=distortion_x;\",\n\t\t\t\t\t\"}\",\n\t\t\t\t\t\"else {\",\n\t\t\t\t\t\t\"p.x = 1. - (p.x + distortion_x);\",\n\t\t\t\t\t\"}\",\n\t\t\t\t\"}\",\n\t\t\t\t\"p.x+=normal.x*seed_x*(seed/5.);\",\n\t\t\t\t\"p.y+=normal.y*seed_y*(seed/5.);\",\n\t\t\t\t//base from RGB shift shader\n\t\t\t\t\"vec2 offset = amount * vec2( cos(angle), sin(angle));\",\n\t\t\t\t\"vec4 cr = texture2D(tDiffuse, p + offset);\",\n\t\t\t\t\"vec4 cga = texture2D(tDiffuse, p);\",\n\t\t\t\t\"vec4 cb = texture2D(tDiffuse, p - offset);\",\n\t\t\t\t\"gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\",\n\t\t\t\t//add noise\n\t\t\t\t\"vec4 snow = 200.*amount*vec4(rand(vec2(xs * seed,ys * seed*50.))*0.2);\",\n\t\t\t\t\"gl_FragColor = gl_FragColor+ snow;\",\n\t\t\t\"}\",\n\t\t\t\"else {\",\n\t\t\t\t\"gl_FragColor=texture2D (tDiffuse, vUv);\",\n\t\t\t\"}\",\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n\n},{\"three\":16}],12:[function(require,module,exports){\n'use strict';\r\n\r\nvar THREE = require('three');\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * Dot screen shader\r\n * based on glfx.js sepia shader\r\n * https://github.com/evanw/glfx.js\r\n */\r\n\r\nTHREE.DotScreenShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t\"tDiffuse\": { value: null },\r\n\t\t\"tSize\":    { value: new THREE.Vector2( 256, 256 ) },\r\n\t\t\"center\":   { value: new THREE.Vector2( 0.5, 0.5 ) },\r\n\t\t\"angle\":    { value: 1.57 },\r\n\t\t\"scale\":    { value: 1.0 }\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\t\"vUv = uv;\",\r\n\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" ),\r\n\r\n\tfragmentShader: [\r\n\r\n\t\t\"uniform vec2 center;\",\r\n\t\t\"uniform float angle;\",\r\n\t\t\"uniform float scale;\",\r\n\t\t\"uniform vec2 tSize;\",\r\n\r\n\t\t\"uniform sampler2D tDiffuse;\",\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"float pattern() {\",\r\n\r\n\t\t\t\"float s = sin( angle ), c = cos( angle );\",\r\n\r\n\t\t\t\"vec2 tex = vUv * tSize - center;\",\r\n\t\t\t\"vec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;\",\r\n\r\n\t\t\t\"return ( sin( point.x ) * sin( point.y ) ) * 4.0;\",\r\n\r\n\t\t\"}\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\t\"vec4 color = texture2D( tDiffuse, vUv );\",\r\n\r\n\t\t\t\"float average = ( color.r + color.g + color.b ) / 3.0;\",\r\n\r\n\t\t\t\"gl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" )\r\n\r\n};\n},{\"three\":16}],13:[function(require,module,exports){\n'use strict';\n\nvar THREE = require('three');\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * Film grain & scanlines shader\n *\n * - ported from HLSL to WebGL / GLSL\n * http://www.truevision3d.com/forums/showcase/staticnoise_colorblackwhite_scanline_shaders-t18698.0.html\n *\n * Screen Space Static Postprocessor\n *\n * Produces an analogue noise overlay similar to a film grain / TV static\n *\n * Original implementation and noise algorithm\n * Pat 'Hawthorne' Shearon\n *\n * Optimized scanlines + noise version with intensity scaling\n * Georg 'Leviathan' Steinrohder\n *\n * This version is provided under a Creative Commons Attribution 3.0 License\n * http://creativecommons.org/licenses/by/3.0/\n */\n\nTHREE.FilmShader = {\n\n\tuniforms: {\n\n\t\t\"tDiffuse\":   { value: null },\n\t\t\"time\":       { value: 0.0 },\n\t\t\"nIntensity\": { value: 0.5 },\n\t\t\"sIntensity\": { value: 0.05 },\n\t\t\"sCount\":     { value: 4096 },\n\t\t\"grayscale\":  { value: 1 }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\t\"vUv = uv;\",\n\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"#include <common>\",\n\t\t\n\t\t// control parameter\n\t\t\"uniform float time;\",\n\n\t\t\"uniform bool grayscale;\",\n\n\t\t// noise effect intensity value (0 = no effect, 1 = full effect)\n\t\t\"uniform float nIntensity;\",\n\n\t\t// scanlines effect intensity value (0 = no effect, 1 = full effect)\n\t\t\"uniform float sIntensity;\",\n\n\t\t// scanlines effect count value (0 = no effect, 4096 = full effect)\n\t\t\"uniform float sCount;\",\n\n\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\t// sample the source\n\t\t\t\"vec4 cTextureScreen = texture2D( tDiffuse, vUv );\",\n\n\t\t\t// make some noise\n\t\t\t\"float dx = rand( vUv + time );\",\n\n\t\t\t// add noise\n\t\t\t\"vec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx, 0.0, 1.0 );\",\n\n\t\t\t// get us a sine and cosine\n\t\t\t\"vec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );\",\n\n\t\t\t// add scanlines\n\t\t\t\"cResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;\",\n\n\t\t\t// interpolate between source and result by intensity\n\t\t\t\"cResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );\",\n\n\t\t\t// convert to grayscale if desired\n\t\t\t\"if( grayscale ) {\",\n\n\t\t\t\t\"cResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );\",\n\n\t\t\t\"}\",\n\n\t\t\t\"gl_FragColor =  vec4( cResult, cTextureScreen.a );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n\n},{\"three\":16}],14:[function(require,module,exports){\n'use strict';\r\n\r\nvar THREE = require('three');\r\n\r\n/**\r\n * @author felixturner / http://airtight.cc/\r\n *\r\n * RGB Shift Shader\r\n * Shifts red and blue channels from center in opposite directions\r\n * Ported from http://kriss.cx/tom/2009/05/rgb-shift/\r\n * by Tom Butterworth / http://kriss.cx/tom/\r\n *\r\n * amount: shift distance (1 is width of input)\r\n * angle: shift angle in radians\r\n */\r\n\r\nTHREE.RGBShiftShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t\"tDiffuse\": { value: null },\r\n\t\t\"amount\":   { value: 0.005 },\r\n\t\t\"angle\":    { value: 0.0 }\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\t\"vUv = uv;\",\r\n\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" ),\r\n\r\n\tfragmentShader: [\r\n\r\n\t\t\"uniform sampler2D tDiffuse;\",\r\n\t\t\"uniform float amount;\",\r\n\t\t\"uniform float angle;\",\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\t\"vec2 offset = amount * vec2( cos(angle), sin(angle));\",\r\n\t\t\t\"vec4 cr = texture2D(tDiffuse, vUv + offset);\",\r\n\t\t\t\"vec4 cga = texture2D(tDiffuse, vUv);\",\r\n\t\t\t\"vec4 cb = texture2D(tDiffuse, vUv - offset);\",\r\n\t\t\t\"gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" )\r\n\r\n};\n},{\"three\":16}],15:[function(require,module,exports){\n(function (global){\n/*!\n * VERSION: 1.18.2\n * DATE: 2015-12-22\n * UPDATES AND DOCS AT: http://greensock.com\n * \n * Includes all of the following: TweenLite, TweenMax, TimelineLite, TimelineMax, EasePack, CSSPlugin, RoundPropsPlugin, BezierPlugin, AttrPlugin, DirectionalRotationPlugin\n *\n * @license Copyright (c) 2008-2016, GreenSock. All rights reserved.\n * This work is subject to the terms at http://greensock.com/standard-license or for\n * Club GreenSock members, the software agreement that was issued with your membership.\n * \n * @author: Jack Doyle, jack@greensock.com\n **/\nvar _gsScope=\"undefined\"!=typeof module&&module.exports&&\"undefined\"!=typeof global?global:this||window;(_gsScope._gsQueue||(_gsScope._gsQueue=[])).push(function(){\"use strict\";_gsScope._gsDefine(\"TweenMax\",[\"core.Animation\",\"core.SimpleTimeline\",\"TweenLite\"],function(a,b,c){var d=function(a){var b,c=[],d=a.length;for(b=0;b!==d;c.push(a[b++]));return c},e=function(a,b,c){var d,e,f=a.cycle;for(d in f)e=f[d],a[d]=\"function\"==typeof e?e.call(b[c],c):e[c%e.length];delete a.cycle},f=function(a,b,d){c.call(this,a,b,d),this._cycle=0,this._yoyo=this.vars.yoyo===!0,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._dirty=!0,this.render=f.prototype.render},g=1e-10,h=c._internals,i=h.isSelector,j=h.isArray,k=f.prototype=c.to({},.1,{}),l=[];f.version=\"1.18.2\",k.constructor=f,k.kill()._gc=!1,f.killTweensOf=f.killDelayedCallsTo=c.killTweensOf,f.getTweensOf=c.getTweensOf,f.lagSmoothing=c.lagSmoothing,f.ticker=c.ticker,f.render=c.render,k.invalidate=function(){return this._yoyo=this.vars.yoyo===!0,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),c.prototype.invalidate.call(this)},k.updateTo=function(a,b){var d,e=this.ratio,f=this.vars.immediateRender||a.immediateRender;b&&this._startTime<this._timeline._time&&(this._startTime=this._timeline._time,this._uncache(!1),this._gc?this._enabled(!0,!1):this._timeline.insert(this,this._startTime-this._delay));for(d in a)this.vars[d]=a[d];if(this._initted||f)if(b)this._initted=!1,f&&this.render(0,!0,!0);else if(this._gc&&this._enabled(!0,!1),this._notifyPluginsOfEnabled&&this._firstPT&&c._onPluginEvent(\"_onDisable\",this),this._time/this._duration>.998){var g=this._totalTime;this.render(0,!0,!1),this._initted=!1,this.render(g,!0,!1)}else if(this._initted=!1,this._init(),this._time>0||f)for(var h,i=1/(1-e),j=this._firstPT;j;)h=j.s+j.c,j.c*=i,j.s=h-j.c,j=j._next;return this},k.render=function(a,b,c){this._initted||0===this._duration&&this.vars.repeat&&this.invalidate();var d,e,f,i,j,k,l,m,n=this._dirty?this.totalDuration():this._totalDuration,o=this._time,p=this._totalTime,q=this._cycle,r=this._duration,s=this._rawPrevTime;if(a>=n-1e-7?(this._totalTime=n,this._cycle=this._repeat,this._yoyo&&0!==(1&this._cycle)?(this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0):(this._time=r,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1),this._reversed||(d=!0,e=\"onComplete\",c=c||this._timeline.autoRemoveChildren),0===r&&(this._initted||!this.vars.lazy||c)&&(this._startTime===this._timeline._duration&&(a=0),(0>s||0>=a&&a>=-1e-7||s===g&&\"isPause\"!==this.data)&&s!==a&&(c=!0,s>g&&(e=\"onReverseComplete\")),this._rawPrevTime=m=!b||a||s===a?a:g)):1e-7>a?(this._totalTime=this._time=this._cycle=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==p||0===r&&s>0)&&(e=\"onReverseComplete\",d=this._reversed),0>a&&(this._active=!1,0===r&&(this._initted||!this.vars.lazy||c)&&(s>=0&&(c=!0),this._rawPrevTime=m=!b||a||s===a?a:g)),this._initted||(c=!0)):(this._totalTime=this._time=a,0!==this._repeat&&(i=r+this._repeatDelay,this._cycle=this._totalTime/i>>0,0!==this._cycle&&this._cycle===this._totalTime/i&&this._cycle--,this._time=this._totalTime-this._cycle*i,this._yoyo&&0!==(1&this._cycle)&&(this._time=r-this._time),this._time>r?this._time=r:this._time<0&&(this._time=0)),this._easeType?(j=this._time/r,k=this._easeType,l=this._easePower,(1===k||3===k&&j>=.5)&&(j=1-j),3===k&&(j*=2),1===l?j*=j:2===l?j*=j*j:3===l?j*=j*j*j:4===l&&(j*=j*j*j*j),1===k?this.ratio=1-j:2===k?this.ratio=j:this._time/r<.5?this.ratio=j/2:this.ratio=1-j/2):this.ratio=this._ease.getRatio(this._time/r)),o===this._time&&!c&&q===this._cycle)return void(p!==this._totalTime&&this._onUpdate&&(b||this._callback(\"onUpdate\")));if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!c&&this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration))return this._time=o,this._totalTime=p,this._rawPrevTime=s,this._cycle=q,h.lazyTweens.push(this),void(this._lazy=[a,b]);this._time&&!d?this.ratio=this._ease.getRatio(this._time/r):d&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(this._lazy!==!1&&(this._lazy=!1),this._active||!this._paused&&this._time!==o&&a>=0&&(this._active=!0),0===p&&(2===this._initted&&a>0&&this._init(),this._startAt&&(a>=0?this._startAt.render(a,b,c):e||(e=\"_dummyGS\")),this.vars.onStart&&(0!==this._totalTime||0===r)&&(b||this._callback(\"onStart\"))),f=this._firstPT;f;)f.f?f.t[f.p](f.c*this.ratio+f.s):f.t[f.p]=f.c*this.ratio+f.s,f=f._next;this._onUpdate&&(0>a&&this._startAt&&this._startTime&&this._startAt.render(a,b,c),b||(this._totalTime!==p||d)&&this._callback(\"onUpdate\")),this._cycle!==q&&(b||this._gc||this.vars.onRepeat&&this._callback(\"onRepeat\")),e&&(!this._gc||c)&&(0>a&&this._startAt&&!this._onUpdate&&this._startTime&&this._startAt.render(a,b,c),d&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!b&&this.vars[e]&&this._callback(e),0===r&&this._rawPrevTime===g&&m!==g&&(this._rawPrevTime=0))},f.to=function(a,b,c){return new f(a,b,c)},f.from=function(a,b,c){return c.runBackwards=!0,c.immediateRender=0!=c.immediateRender,new f(a,b,c)},f.fromTo=function(a,b,c,d){return d.startAt=c,d.immediateRender=0!=d.immediateRender&&0!=c.immediateRender,new f(a,b,d)},f.staggerTo=f.allTo=function(a,b,g,h,k,m,n){h=h||0;var o,p,q,r,s=0,t=[],u=function(){g.onComplete&&g.onComplete.apply(g.onCompleteScope||this,arguments),k.apply(n||g.callbackScope||this,m||l)},v=g.cycle,w=g.startAt&&g.startAt.cycle;for(j(a)||(\"string\"==typeof a&&(a=c.selector(a)||a),i(a)&&(a=d(a))),a=a||[],0>h&&(a=d(a),a.reverse(),h*=-1),o=a.length-1,q=0;o>=q;q++){p={};for(r in g)p[r]=g[r];if(v&&e(p,a,q),w){w=p.startAt={};for(r in g.startAt)w[r]=g.startAt[r];e(p.startAt,a,q)}p.delay=s+(p.delay||0),q===o&&k&&(p.onComplete=u),t[q]=new f(a[q],b,p),s+=h}return t},f.staggerFrom=f.allFrom=function(a,b,c,d,e,g,h){return c.runBackwards=!0,c.immediateRender=0!=c.immediateRender,f.staggerTo(a,b,c,d,e,g,h)},f.staggerFromTo=f.allFromTo=function(a,b,c,d,e,g,h,i){return d.startAt=c,d.immediateRender=0!=d.immediateRender&&0!=c.immediateRender,f.staggerTo(a,b,d,e,g,h,i)},f.delayedCall=function(a,b,c,d,e){return new f(b,0,{delay:a,onComplete:b,onCompleteParams:c,callbackScope:d,onReverseComplete:b,onReverseCompleteParams:c,immediateRender:!1,useFrames:e,overwrite:0})},f.set=function(a,b){return new f(a,0,b)},f.isTweening=function(a){return c.getTweensOf(a,!0).length>0};var m=function(a,b){for(var d=[],e=0,f=a._first;f;)f instanceof c?d[e++]=f:(b&&(d[e++]=f),d=d.concat(m(f,b)),e=d.length),f=f._next;return d},n=f.getAllTweens=function(b){return m(a._rootTimeline,b).concat(m(a._rootFramesTimeline,b))};f.killAll=function(a,c,d,e){null==c&&(c=!0),null==d&&(d=!0);var f,g,h,i=n(0!=e),j=i.length,k=c&&d&&e;for(h=0;j>h;h++)g=i[h],(k||g instanceof b||(f=g.target===g.vars.onComplete)&&d||c&&!f)&&(a?g.totalTime(g._reversed?0:g.totalDuration()):g._enabled(!1,!1))},f.killChildTweensOf=function(a,b){if(null!=a){var e,g,k,l,m,n=h.tweenLookup;if(\"string\"==typeof a&&(a=c.selector(a)||a),i(a)&&(a=d(a)),j(a))for(l=a.length;--l>-1;)f.killChildTweensOf(a[l],b);else{e=[];for(k in n)for(g=n[k].target.parentNode;g;)g===a&&(e=e.concat(n[k].tweens)),g=g.parentNode;for(m=e.length,l=0;m>l;l++)b&&e[l].totalTime(e[l].totalDuration()),e[l]._enabled(!1,!1)}}};var o=function(a,c,d,e){c=c!==!1,d=d!==!1,e=e!==!1;for(var f,g,h=n(e),i=c&&d&&e,j=h.length;--j>-1;)g=h[j],(i||g instanceof b||(f=g.target===g.vars.onComplete)&&d||c&&!f)&&g.paused(a)};return f.pauseAll=function(a,b,c){o(!0,a,b,c)},f.resumeAll=function(a,b,c){o(!1,a,b,c)},f.globalTimeScale=function(b){var d=a._rootTimeline,e=c.ticker.time;return arguments.length?(b=b||g,d._startTime=e-(e-d._startTime)*d._timeScale/b,d=a._rootFramesTimeline,e=c.ticker.frame,d._startTime=e-(e-d._startTime)*d._timeScale/b,d._timeScale=a._rootTimeline._timeScale=b,b):d._timeScale},k.progress=function(a){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!==(1&this._cycle)?1-a:a)+this._cycle*(this._duration+this._repeatDelay),!1):this._time/this.duration()},k.totalProgress=function(a){return arguments.length?this.totalTime(this.totalDuration()*a,!1):this._totalTime/this.totalDuration()},k.time=function(a,b){return arguments.length?(this._dirty&&this.totalDuration(),a>this._duration&&(a=this._duration),this._yoyo&&0!==(1&this._cycle)?a=this._duration-a+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(a+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(a,b)):this._time},k.duration=function(b){return arguments.length?a.prototype.duration.call(this,b):this._duration},k.totalDuration=function(a){return arguments.length?-1===this._repeat?this:this.duration((a-this._repeat*this._repeatDelay)/(this._repeat+1)):(this._dirty&&(this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat,this._dirty=!1),this._totalDuration)},k.repeat=function(a){return arguments.length?(this._repeat=a,this._uncache(!0)):this._repeat},k.repeatDelay=function(a){return arguments.length?(this._repeatDelay=a,this._uncache(!0)):this._repeatDelay},k.yoyo=function(a){return arguments.length?(this._yoyo=a,this):this._yoyo},f},!0),_gsScope._gsDefine(\"TimelineLite\",[\"core.Animation\",\"core.SimpleTimeline\",\"TweenLite\"],function(a,b,c){var d=function(a){b.call(this,a),this._labels={},this.autoRemoveChildren=this.vars.autoRemoveChildren===!0,this.smoothChildTiming=this.vars.smoothChildTiming===!0,this._sortChildren=!0,this._onUpdate=this.vars.onUpdate;var c,d,e=this.vars;for(d in e)c=e[d],i(c)&&-1!==c.join(\"\").indexOf(\"{self}\")&&(e[d]=this._swapSelfInParams(c));i(e.tweens)&&this.add(e.tweens,0,e.align,e.stagger)},e=1e-10,f=c._internals,g=d._internals={},h=f.isSelector,i=f.isArray,j=f.lazyTweens,k=f.lazyRender,l=_gsScope._gsDefine.globals,m=function(a){var b,c={};for(b in a)c[b]=a[b];return c},n=function(a,b,c){var d,e,f=a.cycle;for(d in f)e=f[d],a[d]=\"function\"==typeof e?e.call(b[c],c):e[c%e.length];delete a.cycle},o=g.pauseCallback=function(){},p=function(a){var b,c=[],d=a.length;for(b=0;b!==d;c.push(a[b++]));return c},q=d.prototype=new b;return d.version=\"1.18.2\",q.constructor=d,q.kill()._gc=q._forcingPlayhead=q._hasPause=!1,q.to=function(a,b,d,e){var f=d.repeat&&l.TweenMax||c;return b?this.add(new f(a,b,d),e):this.set(a,d,e)},q.from=function(a,b,d,e){return this.add((d.repeat&&l.TweenMax||c).from(a,b,d),e)},q.fromTo=function(a,b,d,e,f){var g=e.repeat&&l.TweenMax||c;return b?this.add(g.fromTo(a,b,d,e),f):this.set(a,e,f)},q.staggerTo=function(a,b,e,f,g,i,j,k){var l,o,q=new d({onComplete:i,onCompleteParams:j,callbackScope:k,smoothChildTiming:this.smoothChildTiming}),r=e.cycle;for(\"string\"==typeof a&&(a=c.selector(a)||a),a=a||[],h(a)&&(a=p(a)),f=f||0,0>f&&(a=p(a),a.reverse(),f*=-1),o=0;o<a.length;o++)l=m(e),l.startAt&&(l.startAt=m(l.startAt),l.startAt.cycle&&n(l.startAt,a,o)),r&&n(l,a,o),q.to(a[o],b,l,o*f);return this.add(q,g)},q.staggerFrom=function(a,b,c,d,e,f,g,h){return c.immediateRender=0!=c.immediateRender,c.runBackwards=!0,this.staggerTo(a,b,c,d,e,f,g,h)},q.staggerFromTo=function(a,b,c,d,e,f,g,h,i){return d.startAt=c,d.immediateRender=0!=d.immediateRender&&0!=c.immediateRender,this.staggerTo(a,b,d,e,f,g,h,i)},q.call=function(a,b,d,e){return this.add(c.delayedCall(0,a,b,d),e)},q.set=function(a,b,d){return d=this._parseTimeOrLabel(d,0,!0),null==b.immediateRender&&(b.immediateRender=d===this._time&&!this._paused),this.add(new c(a,0,b),d)},d.exportRoot=function(a,b){a=a||{},null==a.smoothChildTiming&&(a.smoothChildTiming=!0);var e,f,g=new d(a),h=g._timeline;for(null==b&&(b=!0),h._remove(g,!0),g._startTime=0,g._rawPrevTime=g._time=g._totalTime=h._time,e=h._first;e;)f=e._next,b&&e instanceof c&&e.target===e.vars.onComplete||g.add(e,e._startTime-e._delay),e=f;return h.add(g,0),g},q.add=function(e,f,g,h){var j,k,l,m,n,o;if(\"number\"!=typeof f&&(f=this._parseTimeOrLabel(f,0,!0,e)),!(e instanceof a)){if(e instanceof Array||e&&e.push&&i(e)){for(g=g||\"normal\",h=h||0,j=f,k=e.length,l=0;k>l;l++)i(m=e[l])&&(m=new d({tweens:m})),this.add(m,j),\"string\"!=typeof m&&\"function\"!=typeof m&&(\"sequence\"===g?j=m._startTime+m.totalDuration()/m._timeScale:\"start\"===g&&(m._startTime-=m.delay())),j+=h;return this._uncache(!0)}if(\"string\"==typeof e)return this.addLabel(e,f);if(\"function\"!=typeof e)throw\"Cannot add \"+e+\" into the timeline; it is not a tween, timeline, function, or string.\";e=c.delayedCall(0,e)}if(b.prototype.add.call(this,e,f),(this._gc||this._time===this._duration)&&!this._paused&&this._duration<this.duration())for(n=this,o=n.rawTime()>e._startTime;n._timeline;)o&&n._timeline.smoothChildTiming?n.totalTime(n._totalTime,!0):n._gc&&n._enabled(!0,!1),n=n._timeline;return this},q.remove=function(b){if(b instanceof a){this._remove(b,!1);var c=b._timeline=b.vars.useFrames?a._rootFramesTimeline:a._rootTimeline;return b._startTime=(b._paused?b._pauseTime:c._time)-(b._reversed?b.totalDuration()-b._totalTime:b._totalTime)/b._timeScale,this}if(b instanceof Array||b&&b.push&&i(b)){for(var d=b.length;--d>-1;)this.remove(b[d]);return this}return\"string\"==typeof b?this.removeLabel(b):this.kill(null,b)},q._remove=function(a,c){b.prototype._remove.call(this,a,c);var d=this._last;return d?this._time>d._startTime+d._totalDuration/d._timeScale&&(this._time=this.duration(),this._totalTime=this._totalDuration):this._time=this._totalTime=this._duration=this._totalDuration=0,this},q.append=function(a,b){return this.add(a,this._parseTimeOrLabel(null,b,!0,a))},q.insert=q.insertMultiple=function(a,b,c,d){return this.add(a,b||0,c,d)},q.appendMultiple=function(a,b,c,d){return this.add(a,this._parseTimeOrLabel(null,b,!0,a),c,d)},q.addLabel=function(a,b){return this._labels[a]=this._parseTimeOrLabel(b),this},q.addPause=function(a,b,d,e){var f=c.delayedCall(0,o,d,e||this);return f.vars.onComplete=f.vars.onReverseComplete=b,f.data=\"isPause\",this._hasPause=!0,this.add(f,a)},q.removeLabel=function(a){return delete this._labels[a],this},q.getLabelTime=function(a){return null!=this._labels[a]?this._labels[a]:-1},q._parseTimeOrLabel=function(b,c,d,e){var f;if(e instanceof a&&e.timeline===this)this.remove(e);else if(e&&(e instanceof Array||e.push&&i(e)))for(f=e.length;--f>-1;)e[f]instanceof a&&e[f].timeline===this&&this.remove(e[f]);if(\"string\"==typeof c)return this._parseTimeOrLabel(c,d&&\"number\"==typeof b&&null==this._labels[c]?b-this.duration():0,d);if(c=c||0,\"string\"!=typeof b||!isNaN(b)&&null==this._labels[b])null==b&&(b=this.duration());else{if(f=b.indexOf(\"=\"),-1===f)return null==this._labels[b]?d?this._labels[b]=this.duration()+c:c:this._labels[b]+c;c=parseInt(b.charAt(f-1)+\"1\",10)*Number(b.substr(f+1)),b=f>1?this._parseTimeOrLabel(b.substr(0,f-1),0,d):this.duration()}return Number(b)+c},q.seek=function(a,b){return this.totalTime(\"number\"==typeof a?a:this._parseTimeOrLabel(a),b!==!1)},q.stop=function(){return this.paused(!0)},q.gotoAndPlay=function(a,b){return this.play(a,b)},q.gotoAndStop=function(a,b){return this.pause(a,b)},q.render=function(a,b,c){this._gc&&this._enabled(!0,!1);var d,f,g,h,i,l,m,n=this._dirty?this.totalDuration():this._totalDuration,o=this._time,p=this._startTime,q=this._timeScale,r=this._paused;if(a>=n-1e-7)this._totalTime=this._time=n,this._reversed||this._hasPausedChild()||(f=!0,h=\"onComplete\",i=!!this._timeline.autoRemoveChildren,0===this._duration&&(0>=a&&a>=-1e-7||this._rawPrevTime<0||this._rawPrevTime===e)&&this._rawPrevTime!==a&&this._first&&(i=!0,this._rawPrevTime>e&&(h=\"onReverseComplete\"))),this._rawPrevTime=this._duration||!b||a||this._rawPrevTime===a?a:e,a=n+1e-4;else if(1e-7>a)if(this._totalTime=this._time=0,(0!==o||0===this._duration&&this._rawPrevTime!==e&&(this._rawPrevTime>0||0>a&&this._rawPrevTime>=0))&&(h=\"onReverseComplete\",f=this._reversed),0>a)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(i=f=!0,h=\"onReverseComplete\"):this._rawPrevTime>=0&&this._first&&(i=!0),this._rawPrevTime=a;else{if(this._rawPrevTime=this._duration||!b||a||this._rawPrevTime===a?a:e,0===a&&f)for(d=this._first;d&&0===d._startTime;)d._duration||(f=!1),d=d._next;a=0,this._initted||(i=!0)}else{if(this._hasPause&&!this._forcingPlayhead&&!b){if(a>=o)for(d=this._first;d&&d._startTime<=a&&!l;)d._duration||\"isPause\"!==d.data||d.ratio||0===d._startTime&&0===this._rawPrevTime||(l=d),d=d._next;else for(d=this._last;d&&d._startTime>=a&&!l;)d._duration||\"isPause\"===d.data&&d._rawPrevTime>0&&(l=d),d=d._prev;l&&(this._time=a=l._startTime,this._totalTime=a+this._cycle*(this._totalDuration+this._repeatDelay))}this._totalTime=this._time=this._rawPrevTime=a}if(this._time!==o&&this._first||c||i||l){if(this._initted||(this._initted=!0),this._active||!this._paused&&this._time!==o&&a>0&&(this._active=!0),0===o&&this.vars.onStart&&0!==this._time&&(b||this._callback(\"onStart\")),m=this._time,m>=o)for(d=this._first;d&&(g=d._next,m===this._time&&(!this._paused||r));)(d._active||d._startTime<=m&&!d._paused&&!d._gc)&&(l===d&&this.pause(),d._reversed?d.render((d._dirty?d.totalDuration():d._totalDuration)-(a-d._startTime)*d._timeScale,b,c):d.render((a-d._startTime)*d._timeScale,b,c)),d=g;else for(d=this._last;d&&(g=d._prev,m===this._time&&(!this._paused||r));){if(d._active||d._startTime<=o&&!d._paused&&!d._gc){if(l===d){for(l=d._prev;l&&l.endTime()>this._time;)l.render(l._reversed?l.totalDuration()-(a-l._startTime)*l._timeScale:(a-l._startTime)*l._timeScale,b,c),l=l._prev;l=null,this.pause()}d._reversed?d.render((d._dirty?d.totalDuration():d._totalDuration)-(a-d._startTime)*d._timeScale,b,c):d.render((a-d._startTime)*d._timeScale,b,c)}d=g}this._onUpdate&&(b||(j.length&&k(),this._callback(\"onUpdate\"))),h&&(this._gc||(p===this._startTime||q!==this._timeScale)&&(0===this._time||n>=this.totalDuration())&&(f&&(j.length&&k(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!b&&this.vars[h]&&this._callback(h)))}},q._hasPausedChild=function(){for(var a=this._first;a;){if(a._paused||a instanceof d&&a._hasPausedChild())return!0;a=a._next}return!1},q.getChildren=function(a,b,d,e){e=e||-9999999999;for(var f=[],g=this._first,h=0;g;)g._startTime<e||(g instanceof c?b!==!1&&(f[h++]=g):(d!==!1&&(f[h++]=g),a!==!1&&(f=f.concat(g.getChildren(!0,b,d)),h=f.length))),g=g._next;return f},q.getTweensOf=function(a,b){var d,e,f=this._gc,g=[],h=0;for(f&&this._enabled(!0,!0),d=c.getTweensOf(a),e=d.length;--e>-1;)(d[e].timeline===this||b&&this._contains(d[e]))&&(g[h++]=d[e]);return f&&this._enabled(!1,!0),g},q.recent=function(){return this._recent},q._contains=function(a){for(var b=a.timeline;b;){if(b===this)return!0;b=b.timeline}return!1},q.shiftChildren=function(a,b,c){c=c||0;for(var d,e=this._first,f=this._labels;e;)e._startTime>=c&&(e._startTime+=a),e=e._next;if(b)for(d in f)f[d]>=c&&(f[d]+=a);return this._uncache(!0)},q._kill=function(a,b){if(!a&&!b)return this._enabled(!1,!1);for(var c=b?this.getTweensOf(b):this.getChildren(!0,!0,!1),d=c.length,e=!1;--d>-1;)c[d]._kill(a,b)&&(e=!0);return e},q.clear=function(a){var b=this.getChildren(!1,!0,!0),c=b.length;for(this._time=this._totalTime=0;--c>-1;)b[c]._enabled(!1,!1);return a!==!1&&(this._labels={}),this._uncache(!0)},q.invalidate=function(){for(var b=this._first;b;)b.invalidate(),b=b._next;return a.prototype.invalidate.call(this)},q._enabled=function(a,c){if(a===this._gc)for(var d=this._first;d;)d._enabled(a,!0),d=d._next;return b.prototype._enabled.call(this,a,c)},q.totalTime=function(b,c,d){this._forcingPlayhead=!0;var e=a.prototype.totalTime.apply(this,arguments);return this._forcingPlayhead=!1,e},q.duration=function(a){return arguments.length?(0!==this.duration()&&0!==a&&this.timeScale(this._duration/a),this):(this._dirty&&this.totalDuration(),this._duration)},q.totalDuration=function(a){if(!arguments.length){if(this._dirty){for(var b,c,d=0,e=this._last,f=999999999999;e;)b=e._prev,e._dirty&&e.totalDuration(),e._startTime>f&&this._sortChildren&&!e._paused?this.add(e,e._startTime-e._delay):f=e._startTime,e._startTime<0&&!e._paused&&(d-=e._startTime,this._timeline.smoothChildTiming&&(this._startTime+=e._startTime/this._timeScale),this.shiftChildren(-e._startTime,!1,-9999999999),f=0),c=e._startTime+e._totalDuration/e._timeScale,c>d&&(d=c),e=b;this._duration=this._totalDuration=d,this._dirty=!1}return this._totalDuration}return a&&this.totalDuration()?this.timeScale(this._totalDuration/a):this},q.paused=function(b){if(!b)for(var c=this._first,d=this._time;c;)c._startTime===d&&\"isPause\"===c.data&&(c._rawPrevTime=0),c=c._next;return a.prototype.paused.apply(this,arguments)},q.usesFrames=function(){for(var b=this._timeline;b._timeline;)b=b._timeline;return b===a._rootFramesTimeline},q.rawTime=function(){return this._paused?this._totalTime:(this._timeline.rawTime()-this._startTime)*this._timeScale},d},!0),_gsScope._gsDefine(\"TimelineMax\",[\"TimelineLite\",\"TweenLite\",\"easing.Ease\"],function(a,b,c){var d=function(b){a.call(this,b),this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._cycle=0,this._yoyo=this.vars.yoyo===!0,this._dirty=!0},e=1e-10,f=b._internals,g=f.lazyTweens,h=f.lazyRender,i=new c(null,null,1,0),j=d.prototype=new a;return j.constructor=d,j.kill()._gc=!1,d.version=\"1.18.2\",j.invalidate=function(){return this._yoyo=this.vars.yoyo===!0,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),a.prototype.invalidate.call(this)},j.addCallback=function(a,c,d,e){return this.add(b.delayedCall(0,a,d,e),c)},j.removeCallback=function(a,b){if(a)if(null==b)this._kill(null,a);else for(var c=this.getTweensOf(a,!1),d=c.length,e=this._parseTimeOrLabel(b);--d>-1;)c[d]._startTime===e&&c[d]._enabled(!1,!1);return this},j.removePause=function(b){return this.removeCallback(a._internals.pauseCallback,b)},j.tweenTo=function(a,c){c=c||{};var d,e,f,g={ease:i,useFrames:this.usesFrames(),immediateRender:!1};for(e in c)g[e]=c[e];return g.time=this._parseTimeOrLabel(a),d=Math.abs(Number(g.time)-this._time)/this._timeScale||.001,f=new b(this,d,g),g.onStart=function(){f.target.paused(!0),f.vars.time!==f.target.time()&&d===f.duration()&&f.duration(Math.abs(f.vars.time-f.target.time())/f.target._timeScale),c.onStart&&f._callback(\"onStart\")},f},j.tweenFromTo=function(a,b,c){c=c||{},a=this._parseTimeOrLabel(a),c.startAt={onComplete:this.seek,onCompleteParams:[a],callbackScope:this},c.immediateRender=c.immediateRender!==!1;var d=this.tweenTo(b,c);return d.duration(Math.abs(d.vars.time-a)/this._timeScale||.001)},j.render=function(a,b,c){this._gc&&this._enabled(!0,!1);var d,f,i,j,k,l,m,n,o=this._dirty?this.totalDuration():this._totalDuration,p=this._duration,q=this._time,r=this._totalTime,s=this._startTime,t=this._timeScale,u=this._rawPrevTime,v=this._paused,w=this._cycle;if(a>=o-1e-7)this._locked||(this._totalTime=o,this._cycle=this._repeat),this._reversed||this._hasPausedChild()||(f=!0,j=\"onComplete\",k=!!this._timeline.autoRemoveChildren,0===this._duration&&(0>=a&&a>=-1e-7||0>u||u===e)&&u!==a&&this._first&&(k=!0,u>e&&(j=\"onReverseComplete\"))),this._rawPrevTime=this._duration||!b||a||this._rawPrevTime===a?a:e,this._yoyo&&0!==(1&this._cycle)?this._time=a=0:(this._time=p,a=p+1e-4);else if(1e-7>a)if(this._locked||(this._totalTime=this._cycle=0),this._time=0,(0!==q||0===p&&u!==e&&(u>0||0>a&&u>=0)&&!this._locked)&&(j=\"onReverseComplete\",f=this._reversed),0>a)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(k=f=!0,j=\"onReverseComplete\"):u>=0&&this._first&&(k=!0),this._rawPrevTime=a;else{if(this._rawPrevTime=p||!b||a||this._rawPrevTime===a?a:e,0===a&&f)for(d=this._first;d&&0===d._startTime;)d._duration||(f=!1),d=d._next;a=0,this._initted||(k=!0)}else if(0===p&&0>u&&(k=!0),this._time=this._rawPrevTime=a,this._locked||(this._totalTime=a,0!==this._repeat&&(l=p+this._repeatDelay,this._cycle=this._totalTime/l>>0,0!==this._cycle&&this._cycle===this._totalTime/l&&this._cycle--,this._time=this._totalTime-this._cycle*l,this._yoyo&&0!==(1&this._cycle)&&(this._time=p-this._time),this._time>p?(this._time=p,a=p+1e-4):this._time<0?this._time=a=0:a=this._time)),this._hasPause&&!this._forcingPlayhead&&!b){if(a=this._time,a>=q)for(d=this._first;d&&d._startTime<=a&&!m;)d._duration||\"isPause\"!==d.data||d.ratio||0===d._startTime&&0===this._rawPrevTime||(m=d),d=d._next;else for(d=this._last;d&&d._startTime>=a&&!m;)d._duration||\"isPause\"===d.data&&d._rawPrevTime>0&&(m=d),d=d._prev;m&&(this._time=a=m._startTime,this._totalTime=a+this._cycle*(this._totalDuration+this._repeatDelay))}if(this._cycle!==w&&!this._locked){var x=this._yoyo&&0!==(1&w),y=x===(this._yoyo&&0!==(1&this._cycle)),z=this._totalTime,A=this._cycle,B=this._rawPrevTime,C=this._time;if(this._totalTime=w*p,this._cycle<w?x=!x:this._totalTime+=p,this._time=q,this._rawPrevTime=0===p?u-1e-4:u,this._cycle=w,this._locked=!0,q=x?0:p,this.render(q,b,0===p),b||this._gc||this.vars.onRepeat&&this._callback(\"onRepeat\"),q!==this._time)return;if(y&&(q=x?p+1e-4:-1e-4,this.render(q,!0,!1)),this._locked=!1,this._paused&&!v)return;this._time=C,this._totalTime=z,this._cycle=A,this._rawPrevTime=B}if(!(this._time!==q&&this._first||c||k||m))return void(r!==this._totalTime&&this._onUpdate&&(b||this._callback(\"onUpdate\")));if(this._initted||(this._initted=!0),this._active||!this._paused&&this._totalTime!==r&&a>0&&(this._active=!0),0===r&&this.vars.onStart&&0!==this._totalTime&&(b||this._callback(\"onStart\")),n=this._time,n>=q)for(d=this._first;d&&(i=d._next,n===this._time&&(!this._paused||v));)(d._active||d._startTime<=this._time&&!d._paused&&!d._gc)&&(m===d&&this.pause(),d._reversed?d.render((d._dirty?d.totalDuration():d._totalDuration)-(a-d._startTime)*d._timeScale,b,c):d.render((a-d._startTime)*d._timeScale,b,c)),d=i;else for(d=this._last;d&&(i=d._prev,n===this._time&&(!this._paused||v));){if(d._active||d._startTime<=q&&!d._paused&&!d._gc){if(m===d){for(m=d._prev;m&&m.endTime()>this._time;)m.render(m._reversed?m.totalDuration()-(a-m._startTime)*m._timeScale:(a-m._startTime)*m._timeScale,b,c),m=m._prev;m=null,this.pause()}d._reversed?d.render((d._dirty?d.totalDuration():d._totalDuration)-(a-d._startTime)*d._timeScale,b,c):d.render((a-d._startTime)*d._timeScale,b,c)}d=i}this._onUpdate&&(b||(g.length&&h(),this._callback(\"onUpdate\"))),j&&(this._locked||this._gc||(s===this._startTime||t!==this._timeScale)&&(0===this._time||o>=this.totalDuration())&&(f&&(g.length&&h(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!b&&this.vars[j]&&this._callback(j)))},j.getActive=function(a,b,c){null==a&&(a=!0),null==b&&(b=!0),null==c&&(c=!1);var d,e,f=[],g=this.getChildren(a,b,c),h=0,i=g.length;for(d=0;i>d;d++)e=g[d],e.isActive()&&(f[h++]=e);return f},j.getLabelAfter=function(a){a||0!==a&&(a=this._time);var b,c=this.getLabelsArray(),d=c.length;for(b=0;d>b;b++)if(c[b].time>a)return c[b].name;return null},j.getLabelBefore=function(a){null==a&&(a=this._time);for(var b=this.getLabelsArray(),c=b.length;--c>-1;)if(b[c].time<a)return b[c].name;return null},j.getLabelsArray=function(){var a,b=[],c=0;for(a in this._labels)b[c++]={time:this._labels[a],name:a};return b.sort(function(a,b){return a.time-b.time}),b},j.progress=function(a,b){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!==(1&this._cycle)?1-a:a)+this._cycle*(this._duration+this._repeatDelay),b):this._time/this.duration()},j.totalProgress=function(a,b){return arguments.length?this.totalTime(this.totalDuration()*a,b):this._totalTime/this.totalDuration()},j.totalDuration=function(b){return arguments.length?-1!==this._repeat&&b?this.timeScale(this.totalDuration()/b):this:(this._dirty&&(a.prototype.totalDuration.call(this),this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat),this._totalDuration)},j.time=function(a,b){return arguments.length?(this._dirty&&this.totalDuration(),a>this._duration&&(a=this._duration),this._yoyo&&0!==(1&this._cycle)?a=this._duration-a+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(a+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(a,b)):this._time},j.repeat=function(a){return arguments.length?(this._repeat=a,this._uncache(!0)):this._repeat},j.repeatDelay=function(a){return arguments.length?(this._repeatDelay=a,this._uncache(!0)):this._repeatDelay},j.yoyo=function(a){return arguments.length?(this._yoyo=a,this):this._yoyo},j.currentLabel=function(a){return arguments.length?this.seek(a,!0):this.getLabelBefore(this._time+1e-8)},d},!0),function(){var a=180/Math.PI,b=[],c=[],d=[],e={},f=_gsScope._gsDefine.globals,g=function(a,b,c,d){this.a=a,this.b=b,this.c=c,this.d=d,this.da=d-a,this.ca=c-a,this.ba=b-a},h=\",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,\",i=function(a,b,c,d){var e={a:a},f={},g={},h={c:d},i=(a+b)/2,j=(b+c)/2,k=(c+d)/2,l=(i+j)/2,m=(j+k)/2,n=(m-l)/8;return e.b=i+(a-i)/4,f.b=l+n,e.c=f.a=(e.b+f.b)/2,f.c=g.a=(l+m)/2,g.b=m-n,h.b=k+(d-k)/4,g.c=h.a=(g.b+h.b)/2,[e,f,g,h]},j=function(a,e,f,g,h){var j,k,l,m,n,o,p,q,r,s,t,u,v,w=a.length-1,x=0,y=a[0].a;for(j=0;w>j;j++)n=a[x],k=n.a,l=n.d,m=a[x+1].d,h?(t=b[j],u=c[j],v=(u+t)*e*.25/(g?.5:d[j]||.5),o=l-(l-k)*(g?.5*e:0!==t?v/t:0),p=l+(m-l)*(g?.5*e:0!==u?v/u:0),q=l-(o+((p-o)*(3*t/(t+u)+.5)/4||0))):(o=l-(l-k)*e*.5,p=l+(m-l)*e*.5,q=l-(o+p)/2),o+=q,p+=q,n.c=r=o,0!==j?n.b=y:n.b=y=n.a+.6*(n.c-n.a),n.da=l-k,n.ca=r-k,n.ba=y-k,f?(s=i(k,y,r,l),a.splice(x,1,s[0],s[1],s[2],s[3]),x+=4):x++,y=p;n=a[x],n.b=y,n.c=y+.4*(n.d-y),n.da=n.d-n.a,n.ca=n.c-n.a,n.ba=y-n.a,f&&(s=i(n.a,y,n.c,n.d),a.splice(x,1,s[0],s[1],s[2],s[3]))},k=function(a,d,e,f){var h,i,j,k,l,m,n=[];if(f)for(a=[f].concat(a),i=a.length;--i>-1;)\"string\"==typeof(m=a[i][d])&&\"=\"===m.charAt(1)&&(a[i][d]=f[d]+Number(m.charAt(0)+m.substr(2)));if(h=a.length-2,0>h)return n[0]=new g(a[0][d],0,0,a[-1>h?0:1][d]),n;for(i=0;h>i;i++)j=a[i][d],k=a[i+1][d],n[i]=new g(j,0,0,k),e&&(l=a[i+2][d],b[i]=(b[i]||0)+(k-j)*(k-j),c[i]=(c[i]||0)+(l-k)*(l-k));return n[i]=new g(a[i][d],0,0,a[i+1][d]),n},l=function(a,f,g,i,l,m){var n,o,p,q,r,s,t,u,v={},w=[],x=m||a[0];l=\"string\"==typeof l?\",\"+l+\",\":h,null==f&&(f=1);for(o in a[0])w.push(o);if(a.length>1){for(u=a[a.length-1],t=!0,n=w.length;--n>-1;)if(o=w[n],Math.abs(x[o]-u[o])>.05){t=!1;break}t&&(a=a.concat(),m&&a.unshift(m),a.push(a[1]),m=a[a.length-3])}for(b.length=c.length=d.length=0,n=w.length;--n>-1;)o=w[n],e[o]=-1!==l.indexOf(\",\"+o+\",\"),v[o]=k(a,o,e[o],m);for(n=b.length;--n>-1;)b[n]=Math.sqrt(b[n]),c[n]=Math.sqrt(c[n]);if(!i){for(n=w.length;--n>-1;)if(e[o])for(p=v[w[n]],s=p.length-1,q=0;s>q;q++)r=p[q+1].da/c[q]+p[q].da/b[q],d[q]=(d[q]||0)+r*r;for(n=d.length;--n>-1;)d[n]=Math.sqrt(d[n])}for(n=w.length,q=g?4:1;--n>-1;)o=w[n],p=v[o],j(p,f,g,i,e[o]),t&&(p.splice(0,q),p.splice(p.length-q,q));return v},m=function(a,b,c){b=b||\"soft\";var d,e,f,h,i,j,k,l,m,n,o,p={},q=\"cubic\"===b?3:2,r=\"soft\"===b,s=[];if(r&&c&&(a=[c].concat(a)),null==a||a.length<q+1)throw\"invalid Bezier data\";for(m in a[0])s.push(m);for(j=s.length;--j>-1;){for(m=s[j],p[m]=i=[],n=0,l=a.length,k=0;l>k;k++)d=null==c?a[k][m]:\"string\"==typeof(o=a[k][m])&&\"=\"===o.charAt(1)?c[m]+Number(o.charAt(0)+o.substr(2)):Number(o),r&&k>1&&l-1>k&&(i[n++]=(d+i[n-2])/2),i[n++]=d;for(l=n-q+1,n=0,k=0;l>k;k+=q)d=i[k],e=i[k+1],f=i[k+2],h=2===q?0:i[k+3],i[n++]=o=3===q?new g(d,e,f,h):new g(d,(2*e+d)/3,(2*e+f)/3,f);i.length=n}return p},n=function(a,b,c){for(var d,e,f,g,h,i,j,k,l,m,n,o=1/c,p=a.length;--p>-1;)for(m=a[p],f=m.a,g=m.d-f,h=m.c-f,i=m.b-f,d=e=0,k=1;c>=k;k++)j=o*k,l=1-j,d=e-(e=(j*j*g+3*l*(j*h+l*i))*j),n=p*c+k-1,b[n]=(b[n]||0)+d*d},o=function(a,b){b=b>>0||6;var c,d,e,f,g=[],h=[],i=0,j=0,k=b-1,l=[],m=[];for(c in a)n(a[c],g,b);for(e=g.length,d=0;e>d;d++)i+=Math.sqrt(g[d]),f=d%b,m[f]=i,f===k&&(j+=i,f=d/b>>0,l[f]=m,h[f]=j,i=0,m=[]);return{length:j,lengths:h,segments:l}},p=_gsScope._gsDefine.plugin({propName:\"bezier\",priority:-1,version:\"1.3.4\",API:2,global:!0,init:function(a,b,c){this._target=a,b instanceof Array&&(b={values:b}),this._func={},this._round={},this._props=[],this._timeRes=null==b.timeResolution?6:parseInt(b.timeResolution,10);\nvar d,e,f,g,h,i=b.values||[],j={},k=i[0],n=b.autoRotate||c.vars.orientToBezier;this._autoRotate=n?n instanceof Array?n:[[\"x\",\"y\",\"rotation\",n===!0?0:Number(n)||0]]:null;for(d in k)this._props.push(d);for(f=this._props.length;--f>-1;)d=this._props[f],this._overwriteProps.push(d),e=this._func[d]=\"function\"==typeof a[d],j[d]=e?a[d.indexOf(\"set\")||\"function\"!=typeof a[\"get\"+d.substr(3)]?d:\"get\"+d.substr(3)]():parseFloat(a[d]),h||j[d]!==i[0][d]&&(h=j);if(this._beziers=\"cubic\"!==b.type&&\"quadratic\"!==b.type&&\"soft\"!==b.type?l(i,isNaN(b.curviness)?1:b.curviness,!1,\"thruBasic\"===b.type,b.correlate,h):m(i,b.type,j),this._segCount=this._beziers[d].length,this._timeRes){var p=o(this._beziers,this._timeRes);this._length=p.length,this._lengths=p.lengths,this._segments=p.segments,this._l1=this._li=this._s1=this._si=0,this._l2=this._lengths[0],this._curSeg=this._segments[0],this._s2=this._curSeg[0],this._prec=1/this._curSeg.length}if(n=this._autoRotate)for(this._initialRotations=[],n[0]instanceof Array||(this._autoRotate=n=[n]),f=n.length;--f>-1;){for(g=0;3>g;g++)d=n[f][g],this._func[d]=\"function\"==typeof a[d]?a[d.indexOf(\"set\")||\"function\"!=typeof a[\"get\"+d.substr(3)]?d:\"get\"+d.substr(3)]:!1;d=n[f][2],this._initialRotations[f]=this._func[d]?this._func[d].call(this._target):this._target[d]}return this._startRatio=c.vars.runBackwards?1:0,!0},set:function(b){var c,d,e,f,g,h,i,j,k,l,m=this._segCount,n=this._func,o=this._target,p=b!==this._startRatio;if(this._timeRes){if(k=this._lengths,l=this._curSeg,b*=this._length,e=this._li,b>this._l2&&m-1>e){for(j=m-1;j>e&&(this._l2=k[++e])<=b;);this._l1=k[e-1],this._li=e,this._curSeg=l=this._segments[e],this._s2=l[this._s1=this._si=0]}else if(b<this._l1&&e>0){for(;e>0&&(this._l1=k[--e])>=b;);0===e&&b<this._l1?this._l1=0:e++,this._l2=k[e],this._li=e,this._curSeg=l=this._segments[e],this._s1=l[(this._si=l.length-1)-1]||0,this._s2=l[this._si]}if(c=e,b-=this._l1,e=this._si,b>this._s2&&e<l.length-1){for(j=l.length-1;j>e&&(this._s2=l[++e])<=b;);this._s1=l[e-1],this._si=e}else if(b<this._s1&&e>0){for(;e>0&&(this._s1=l[--e])>=b;);0===e&&b<this._s1?this._s1=0:e++,this._s2=l[e],this._si=e}h=(e+(b-this._s1)/(this._s2-this._s1))*this._prec}else c=0>b?0:b>=1?m-1:m*b>>0,h=(b-c*(1/m))*m;for(d=1-h,e=this._props.length;--e>-1;)f=this._props[e],g=this._beziers[f][c],i=(h*h*g.da+3*d*(h*g.ca+d*g.ba))*h+g.a,this._round[f]&&(i=Math.round(i)),n[f]?o[f](i):o[f]=i;if(this._autoRotate){var q,r,s,t,u,v,w,x=this._autoRotate;for(e=x.length;--e>-1;)f=x[e][2],v=x[e][3]||0,w=x[e][4]===!0?1:a,g=this._beziers[x[e][0]],q=this._beziers[x[e][1]],g&&q&&(g=g[c],q=q[c],r=g.a+(g.b-g.a)*h,t=g.b+(g.c-g.b)*h,r+=(t-r)*h,t+=(g.c+(g.d-g.c)*h-t)*h,s=q.a+(q.b-q.a)*h,u=q.b+(q.c-q.b)*h,s+=(u-s)*h,u+=(q.c+(q.d-q.c)*h-u)*h,i=p?Math.atan2(u-s,t-r)*w+v:this._initialRotations[e],n[f]?o[f](i):o[f]=i)}}}),q=p.prototype;p.bezierThrough=l,p.cubicToQuadratic=i,p._autoCSS=!0,p.quadraticToCubic=function(a,b,c){return new g(a,(2*b+a)/3,(2*b+c)/3,c)},p._cssRegister=function(){var a=f.CSSPlugin;if(a){var b=a._internals,c=b._parseToProxy,d=b._setPluginRatio,e=b.CSSPropTween;b._registerComplexSpecialProp(\"bezier\",{parser:function(a,b,f,g,h,i){b instanceof Array&&(b={values:b}),i=new p;var j,k,l,m=b.values,n=m.length-1,o=[],q={};if(0>n)return h;for(j=0;n>=j;j++)l=c(a,m[j],g,h,i,n!==j),o[j]=l.end;for(k in b)q[k]=b[k];return q.values=o,h=new e(a,\"bezier\",0,0,l.pt,2),h.data=l,h.plugin=i,h.setRatio=d,0===q.autoRotate&&(q.autoRotate=!0),!q.autoRotate||q.autoRotate instanceof Array||(j=q.autoRotate===!0?0:Number(q.autoRotate),q.autoRotate=null!=l.end.left?[[\"left\",\"top\",\"rotation\",j,!1]]:null!=l.end.x?[[\"x\",\"y\",\"rotation\",j,!1]]:!1),q.autoRotate&&(g._transform||g._enableTransforms(!1),l.autoRotate=g._target._gsTransform),i._onInitTween(l.proxy,q,g._tween),h}})}},q._roundProps=function(a,b){for(var c=this._overwriteProps,d=c.length;--d>-1;)(a[c[d]]||a.bezier||a.bezierThrough)&&(this._round[c[d]]=b)},q._kill=function(a){var b,c,d=this._props;for(b in this._beziers)if(b in a)for(delete this._beziers[b],delete this._func[b],c=d.length;--c>-1;)d[c]===b&&d.splice(c,1);return this._super._kill.call(this,a)}}(),_gsScope._gsDefine(\"plugins.CSSPlugin\",[\"plugins.TweenPlugin\",\"TweenLite\"],function(a,b){var c,d,e,f,g=function(){a.call(this,\"css\"),this._overwriteProps.length=0,this.setRatio=g.prototype.setRatio},h=_gsScope._gsDefine.globals,i={},j=g.prototype=new a(\"css\");j.constructor=g,g.version=\"1.18.2\",g.API=2,g.defaultTransformPerspective=0,g.defaultSkewType=\"compensated\",g.defaultSmoothOrigin=!0,j=\"px\",g.suffixMap={top:j,right:j,bottom:j,left:j,width:j,height:j,fontSize:j,padding:j,margin:j,perspective:j,lineHeight:\"\"};var k,l,m,n,o,p,q=/(?:\\d|\\-\\d|\\.\\d|\\-\\.\\d)+/g,r=/(?:\\d|\\-\\d|\\.\\d|\\-\\.\\d|\\+=\\d|\\-=\\d|\\+=.\\d|\\-=\\.\\d)+/g,s=/(?:\\+=|\\-=|\\-|\\b)[\\d\\-\\.]+[a-zA-Z0-9]*(?:%|\\b)/gi,t=/(?![+-]?\\d*\\.?\\d+|[+-]|e[+-]\\d+)[^0-9]/g,u=/(?:\\d|\\-|\\+|=|#|\\.)*/g,v=/opacity *= *([^)]*)/i,w=/opacity:([^;]*)/i,x=/alpha\\(opacity *=.+?\\)/i,y=/^(rgb|hsl)/,z=/([A-Z])/g,A=/-([a-z])/gi,B=/(^(?:url\\(\\\"|url\\())|(?:(\\\"\\))$|\\)$)/gi,C=function(a,b){return b.toUpperCase()},D=/(?:Left|Right|Width)/i,E=/(M11|M12|M21|M22)=[\\d\\-\\.e]+/gi,F=/progid\\:DXImageTransform\\.Microsoft\\.Matrix\\(.+?\\)/i,G=/,(?=[^\\)]*(?:\\(|$))/gi,H=Math.PI/180,I=180/Math.PI,J={},K=document,L=function(a){return K.createElementNS?K.createElementNS(\"http://www.w3.org/1999/xhtml\",a):K.createElement(a)},M=L(\"div\"),N=L(\"img\"),O=g._internals={_specialProps:i},P=navigator.userAgent,Q=function(){var a=P.indexOf(\"Android\"),b=L(\"a\");return m=-1!==P.indexOf(\"Safari\")&&-1===P.indexOf(\"Chrome\")&&(-1===a||Number(P.substr(a+8,1))>3),o=m&&Number(P.substr(P.indexOf(\"Version/\")+8,1))<6,n=-1!==P.indexOf(\"Firefox\"),(/MSIE ([0-9]{1,}[\\.0-9]{0,})/.exec(P)||/Trident\\/.*rv:([0-9]{1,}[\\.0-9]{0,})/.exec(P))&&(p=parseFloat(RegExp.$1)),b?(b.style.cssText=\"top:1px;opacity:.55;\",/^0.55/.test(b.style.opacity)):!1}(),R=function(a){return v.test(\"string\"==typeof a?a:(a.currentStyle?a.currentStyle.filter:a.style.filter)||\"\")?parseFloat(RegExp.$1)/100:1},S=function(a){window.console&&console.log(a)},T=\"\",U=\"\",V=function(a,b){b=b||M;var c,d,e=b.style;if(void 0!==e[a])return a;for(a=a.charAt(0).toUpperCase()+a.substr(1),c=[\"O\",\"Moz\",\"ms\",\"Ms\",\"Webkit\"],d=5;--d>-1&&void 0===e[c[d]+a];);return d>=0?(U=3===d?\"ms\":c[d],T=\"-\"+U.toLowerCase()+\"-\",U+a):null},W=K.defaultView?K.defaultView.getComputedStyle:function(){},X=g.getStyle=function(a,b,c,d,e){var f;return Q||\"opacity\"!==b?(!d&&a.style[b]?f=a.style[b]:(c=c||W(a))?f=c[b]||c.getPropertyValue(b)||c.getPropertyValue(b.replace(z,\"-$1\").toLowerCase()):a.currentStyle&&(f=a.currentStyle[b]),null==e||f&&\"none\"!==f&&\"auto\"!==f&&\"auto auto\"!==f?f:e):R(a)},Y=O.convertToPixels=function(a,c,d,e,f){if(\"px\"===e||!e)return d;if(\"auto\"===e||!d)return 0;var h,i,j,k=D.test(c),l=a,m=M.style,n=0>d;if(n&&(d=-d),\"%\"===e&&-1!==c.indexOf(\"border\"))h=d/100*(k?a.clientWidth:a.clientHeight);else{if(m.cssText=\"border:0 solid red;position:\"+X(a,\"position\")+\";line-height:0;\",\"%\"!==e&&l.appendChild&&\"v\"!==e.charAt(0)&&\"rem\"!==e)m[k?\"borderLeftWidth\":\"borderTopWidth\"]=d+e;else{if(l=a.parentNode||K.body,i=l._gsCache,j=b.ticker.frame,i&&k&&i.time===j)return i.width*d/100;m[k?\"width\":\"height\"]=d+e}l.appendChild(M),h=parseFloat(M[k?\"offsetWidth\":\"offsetHeight\"]),l.removeChild(M),k&&\"%\"===e&&g.cacheWidths!==!1&&(i=l._gsCache=l._gsCache||{},i.time=j,i.width=h/d*100),0!==h||f||(h=Y(a,c,d,e,!0))}return n?-h:h},Z=O.calculateOffset=function(a,b,c){if(\"absolute\"!==X(a,\"position\",c))return 0;var d=\"left\"===b?\"Left\":\"Top\",e=X(a,\"margin\"+d,c);return a[\"offset\"+d]-(Y(a,b,parseFloat(e),e.replace(u,\"\"))||0)},$=function(a,b){var c,d,e,f={};if(b=b||W(a,null))if(c=b.length)for(;--c>-1;)e=b[c],(-1===e.indexOf(\"-transform\")||za===e)&&(f[e.replace(A,C)]=b.getPropertyValue(e));else for(c in b)(-1===c.indexOf(\"Transform\")||ya===c)&&(f[c]=b[c]);else if(b=a.currentStyle||a.style)for(c in b)\"string\"==typeof c&&void 0===f[c]&&(f[c.replace(A,C)]=b[c]);return Q||(f.opacity=R(a)),d=La(a,b,!1),f.rotation=d.rotation,f.skewX=d.skewX,f.scaleX=d.scaleX,f.scaleY=d.scaleY,f.x=d.x,f.y=d.y,Ba&&(f.z=d.z,f.rotationX=d.rotationX,f.rotationY=d.rotationY,f.scaleZ=d.scaleZ),f.filters&&delete f.filters,f},_=function(a,b,c,d,e){var f,g,h,i={},j=a.style;for(g in c)\"cssText\"!==g&&\"length\"!==g&&isNaN(g)&&(b[g]!==(f=c[g])||e&&e[g])&&-1===g.indexOf(\"Origin\")&&(\"number\"==typeof f||\"string\"==typeof f)&&(i[g]=\"auto\"!==f||\"left\"!==g&&\"top\"!==g?\"\"!==f&&\"auto\"!==f&&\"none\"!==f||\"string\"!=typeof b[g]||\"\"===b[g].replace(t,\"\")?f:0:Z(a,g),void 0!==j[g]&&(h=new oa(j,g,j[g],h)));if(d)for(g in d)\"className\"!==g&&(i[g]=d[g]);return{difs:i,firstMPT:h}},aa={width:[\"Left\",\"Right\"],height:[\"Top\",\"Bottom\"]},ba=[\"marginLeft\",\"marginRight\",\"marginTop\",\"marginBottom\"],ca=function(a,b,c){var d=parseFloat(\"width\"===b?a.offsetWidth:a.offsetHeight),e=aa[b],f=e.length;for(c=c||W(a,null);--f>-1;)d-=parseFloat(X(a,\"padding\"+e[f],c,!0))||0,d-=parseFloat(X(a,\"border\"+e[f]+\"Width\",c,!0))||0;return d},da=function(a,b){if(\"contain\"===a||\"auto\"===a||\"auto auto\"===a)return a+\" \";(null==a||\"\"===a)&&(a=\"0 0\");var c=a.split(\" \"),d=-1!==a.indexOf(\"left\")?\"0%\":-1!==a.indexOf(\"right\")?\"100%\":c[0],e=-1!==a.indexOf(\"top\")?\"0%\":-1!==a.indexOf(\"bottom\")?\"100%\":c[1];return null==e?e=\"center\"===d?\"50%\":\"0\":\"center\"===e&&(e=\"50%\"),(\"center\"===d||isNaN(parseFloat(d))&&-1===(d+\"\").indexOf(\"=\"))&&(d=\"50%\"),a=d+\" \"+e+(c.length>2?\" \"+c[2]:\"\"),b&&(b.oxp=-1!==d.indexOf(\"%\"),b.oyp=-1!==e.indexOf(\"%\"),b.oxr=\"=\"===d.charAt(1),b.oyr=\"=\"===e.charAt(1),b.ox=parseFloat(d.replace(t,\"\")),b.oy=parseFloat(e.replace(t,\"\")),b.v=a),b||a},ea=function(a,b){return\"string\"==typeof a&&\"=\"===a.charAt(1)?parseInt(a.charAt(0)+\"1\",10)*parseFloat(a.substr(2)):parseFloat(a)-parseFloat(b)},fa=function(a,b){return null==a?b:\"string\"==typeof a&&\"=\"===a.charAt(1)?parseInt(a.charAt(0)+\"1\",10)*parseFloat(a.substr(2))+b:parseFloat(a)},ga=function(a,b,c,d){var e,f,g,h,i,j=1e-6;return null==a?h=b:\"number\"==typeof a?h=a:(e=360,f=a.split(\"_\"),i=\"=\"===a.charAt(1),g=(i?parseInt(a.charAt(0)+\"1\",10)*parseFloat(f[0].substr(2)):parseFloat(f[0]))*(-1===a.indexOf(\"rad\")?1:I)-(i?0:b),f.length&&(d&&(d[c]=b+g),-1!==a.indexOf(\"short\")&&(g%=e,g!==g%(e/2)&&(g=0>g?g+e:g-e)),-1!==a.indexOf(\"_cw\")&&0>g?g=(g+9999999999*e)%e-(g/e|0)*e:-1!==a.indexOf(\"ccw\")&&g>0&&(g=(g-9999999999*e)%e-(g/e|0)*e)),h=b+g),j>h&&h>-j&&(h=0),h},ha={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],fuchsia:[255,0,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},ia=function(a,b,c){return a=0>a?a+1:a>1?a-1:a,255*(1>6*a?b+(c-b)*a*6:.5>a?c:2>3*a?b+(c-b)*(2/3-a)*6:b)+.5|0},ja=g.parseColor=function(a,b){var c,d,e,f,g,h,i,j,k,l,m;if(a)if(\"number\"==typeof a)c=[a>>16,a>>8&255,255&a];else{if(\",\"===a.charAt(a.length-1)&&(a=a.substr(0,a.length-1)),ha[a])c=ha[a];else if(\"#\"===a.charAt(0))4===a.length&&(d=a.charAt(1),e=a.charAt(2),f=a.charAt(3),a=\"#\"+d+d+e+e+f+f),a=parseInt(a.substr(1),16),c=[a>>16,a>>8&255,255&a];else if(\"hsl\"===a.substr(0,3))if(c=m=a.match(q),b){if(-1!==a.indexOf(\"=\"))return a.match(r)}else g=Number(c[0])%360/360,h=Number(c[1])/100,i=Number(c[2])/100,e=.5>=i?i*(h+1):i+h-i*h,d=2*i-e,c.length>3&&(c[3]=Number(a[3])),c[0]=ia(g+1/3,d,e),c[1]=ia(g,d,e),c[2]=ia(g-1/3,d,e);else c=a.match(q)||ha.transparent;c[0]=Number(c[0]),c[1]=Number(c[1]),c[2]=Number(c[2]),c.length>3&&(c[3]=Number(c[3]))}else c=ha.black;return b&&!m&&(d=c[0]/255,e=c[1]/255,f=c[2]/255,j=Math.max(d,e,f),k=Math.min(d,e,f),i=(j+k)/2,j===k?g=h=0:(l=j-k,h=i>.5?l/(2-j-k):l/(j+k),g=j===d?(e-f)/l+(f>e?6:0):j===e?(f-d)/l+2:(d-e)/l+4,g*=60),c[0]=g+.5|0,c[1]=100*h+.5|0,c[2]=100*i+.5|0),c},ka=function(a,b){var c,d,e,f=a.match(la)||[],g=0,h=f.length?\"\":a;for(c=0;c<f.length;c++)d=f[c],e=a.substr(g,a.indexOf(d,g)-g),g+=e.length+d.length,d=ja(d,b),3===d.length&&d.push(1),h+=e+(b?\"hsla(\"+d[0]+\",\"+d[1]+\"%,\"+d[2]+\"%,\"+d[3]:\"rgba(\"+d.join(\",\"))+\")\";return h},la=\"(?:\\\\b(?:(?:rgb|rgba|hsl|hsla)\\\\(.+?\\\\))|\\\\B#(?:[0-9a-f]{3}){1,2}\\\\b\";for(j in ha)la+=\"|\"+j+\"\\\\b\";la=new RegExp(la+\")\",\"gi\"),g.colorStringFilter=function(a){var b,c=a[0]+a[1];la.lastIndex=0,la.test(c)&&(b=-1!==c.indexOf(\"hsl(\")||-1!==c.indexOf(\"hsla(\"),a[0]=ka(a[0],b),a[1]=ka(a[1],b))},b.defaultStringFilter||(b.defaultStringFilter=g.colorStringFilter);var ma=function(a,b,c,d){if(null==a)return function(a){return a};var e,f=b?(a.match(la)||[\"\"])[0]:\"\",g=a.split(f).join(\"\").match(s)||[],h=a.substr(0,a.indexOf(g[0])),i=\")\"===a.charAt(a.length-1)?\")\":\"\",j=-1!==a.indexOf(\" \")?\" \":\",\",k=g.length,l=k>0?g[0].replace(q,\"\"):\"\";return k?e=b?function(a){var b,m,n,o;if(\"number\"==typeof a)a+=l;else if(d&&G.test(a)){for(o=a.replace(G,\"|\").split(\"|\"),n=0;n<o.length;n++)o[n]=e(o[n]);return o.join(\",\")}if(b=(a.match(la)||[f])[0],m=a.split(b).join(\"\").match(s)||[],n=m.length,k>n--)for(;++n<k;)m[n]=c?m[(n-1)/2|0]:g[n];return h+m.join(j)+j+b+i+(-1!==a.indexOf(\"inset\")?\" inset\":\"\")}:function(a){var b,f,m;if(\"number\"==typeof a)a+=l;else if(d&&G.test(a)){for(f=a.replace(G,\"|\").split(\"|\"),m=0;m<f.length;m++)f[m]=e(f[m]);return f.join(\",\")}if(b=a.match(s)||[],m=b.length,k>m--)for(;++m<k;)b[m]=c?b[(m-1)/2|0]:g[m];return h+b.join(j)+i}:function(a){return a}},na=function(a){return a=a.split(\",\"),function(b,c,d,e,f,g,h){var i,j=(c+\"\").split(\" \");for(h={},i=0;4>i;i++)h[a[i]]=j[i]=j[i]||j[(i-1)/2>>0];return e.parse(b,h,f,g)}},oa=(O._setPluginRatio=function(a){this.plugin.setRatio(a);for(var b,c,d,e,f,g=this.data,h=g.proxy,i=g.firstMPT,j=1e-6;i;)b=h[i.v],i.r?b=Math.round(b):j>b&&b>-j&&(b=0),i.t[i.p]=b,i=i._next;if(g.autoRotate&&(g.autoRotate.rotation=h.rotation),1===a||0===a)for(i=g.firstMPT,f=1===a?\"e\":\"b\";i;){if(c=i.t,c.type){if(1===c.type){for(e=c.xs0+c.s+c.xs1,d=1;d<c.l;d++)e+=c[\"xn\"+d]+c[\"xs\"+(d+1)];c[f]=e}}else c[f]=c.s+c.xs0;i=i._next}},function(a,b,c,d,e){this.t=a,this.p=b,this.v=c,this.r=e,d&&(d._prev=this,this._next=d)}),pa=(O._parseToProxy=function(a,b,c,d,e,f){var g,h,i,j,k,l=d,m={},n={},o=c._transform,p=J;for(c._transform=null,J=b,d=k=c.parse(a,b,d,e),J=p,f&&(c._transform=o,l&&(l._prev=null,l._prev&&(l._prev._next=null)));d&&d!==l;){if(d.type<=1&&(h=d.p,n[h]=d.s+d.c,m[h]=d.s,f||(j=new oa(d,\"s\",h,j,d.r),d.c=0),1===d.type))for(g=d.l;--g>0;)i=\"xn\"+g,h=d.p+\"_\"+i,n[h]=d.data[i],m[h]=d[i],f||(j=new oa(d,i,h,j,d.rxp[i]));d=d._next}return{proxy:m,end:n,firstMPT:j,pt:k}},O.CSSPropTween=function(a,b,d,e,g,h,i,j,k,l,m){this.t=a,this.p=b,this.s=d,this.c=e,this.n=i||b,a instanceof pa||f.push(this.n),this.r=j,this.type=h||0,k&&(this.pr=k,c=!0),this.b=void 0===l?d:l,this.e=void 0===m?d+e:m,g&&(this._next=g,g._prev=this)}),qa=function(a,b,c,d,e,f){var g=new pa(a,b,c,d-c,e,-1,f);return g.b=c,g.e=g.xs0=d,g},ra=g.parseComplex=function(a,b,c,d,e,f,g,h,i,j){c=c||f||\"\",g=new pa(a,b,0,0,g,j?2:1,null,!1,h,c,d),d+=\"\";var l,m,n,o,p,s,t,u,v,w,x,y,z,A=c.split(\", \").join(\",\").split(\" \"),B=d.split(\", \").join(\",\").split(\" \"),C=A.length,D=k!==!1;for((-1!==d.indexOf(\",\")||-1!==c.indexOf(\",\"))&&(A=A.join(\" \").replace(G,\", \").split(\" \"),B=B.join(\" \").replace(G,\", \").split(\" \"),C=A.length),C!==B.length&&(A=(f||\"\").split(\" \"),C=A.length),g.plugin=i,g.setRatio=j,la.lastIndex=0,l=0;C>l;l++)if(o=A[l],p=B[l],u=parseFloat(o),u||0===u)g.appendXtra(\"\",u,ea(p,u),p.replace(r,\"\"),D&&-1!==p.indexOf(\"px\"),!0);else if(e&&la.test(o))y=\",\"===p.charAt(p.length-1)?\"),\":\")\",z=-1!==p.indexOf(\"hsl\")&&Q,o=ja(o,z),p=ja(p,z),v=o.length+p.length>6,v&&!Q&&0===p[3]?(g[\"xs\"+g.l]+=g.l?\" transparent\":\"transparent\",g.e=g.e.split(B[l]).join(\"transparent\")):(Q||(v=!1),z?g.appendXtra(v?\"hsla(\":\"hsl(\",o[0],ea(p[0],o[0]),\",\",!1,!0).appendXtra(\"\",o[1],ea(p[1],o[1]),\"%,\",!1).appendXtra(\"\",o[2],ea(p[2],o[2]),v?\"%,\":\"%\"+y,!1):g.appendXtra(v?\"rgba(\":\"rgb(\",o[0],p[0]-o[0],\",\",!0,!0).appendXtra(\"\",o[1],p[1]-o[1],\",\",!0).appendXtra(\"\",o[2],p[2]-o[2],v?\",\":y,!0),v&&(o=o.length<4?1:o[3],g.appendXtra(\"\",o,(p.length<4?1:p[3])-o,y,!1))),la.lastIndex=0;else if(s=o.match(q)){if(t=p.match(r),!t||t.length!==s.length)return g;for(n=0,m=0;m<s.length;m++)x=s[m],w=o.indexOf(x,n),g.appendXtra(o.substr(n,w-n),Number(x),ea(t[m],x),\"\",D&&\"px\"===o.substr(w+x.length,2),0===m),n=w+x.length;g[\"xs\"+g.l]+=o.substr(n)}else g[\"xs\"+g.l]+=g.l?\" \"+p:p;if(-1!==d.indexOf(\"=\")&&g.data){for(y=g.xs0+g.data.s,l=1;l<g.l;l++)y+=g[\"xs\"+l]+g.data[\"xn\"+l];g.e=y+g[\"xs\"+l]}return g.l||(g.type=-1,g.xs0=g.e),g.xfirst||g},sa=9;for(j=pa.prototype,j.l=j.pr=0;--sa>0;)j[\"xn\"+sa]=0,j[\"xs\"+sa]=\"\";j.xs0=\"\",j._next=j._prev=j.xfirst=j.data=j.plugin=j.setRatio=j.rxp=null,j.appendXtra=function(a,b,c,d,e,f){var g=this,h=g.l;return g[\"xs\"+h]+=f&&h?\" \"+a:a||\"\",c||0===h||g.plugin?(g.l++,g.type=g.setRatio?2:1,g[\"xs\"+g.l]=d||\"\",h>0?(g.data[\"xn\"+h]=b+c,g.rxp[\"xn\"+h]=e,g[\"xn\"+h]=b,g.plugin||(g.xfirst=new pa(g,\"xn\"+h,b,c,g.xfirst||g,0,g.n,e,g.pr),g.xfirst.xs0=0),g):(g.data={s:b+c},g.rxp={},g.s=b,g.c=c,g.r=e,g)):(g[\"xs\"+h]+=b+(d||\"\"),g)};var ta=function(a,b){b=b||{},this.p=b.prefix?V(a)||a:a,i[a]=i[this.p]=this,this.format=b.formatter||ma(b.defaultValue,b.color,b.collapsible,b.multi),b.parser&&(this.parse=b.parser),this.clrs=b.color,this.multi=b.multi,this.keyword=b.keyword,this.dflt=b.defaultValue,this.pr=b.priority||0},ua=O._registerComplexSpecialProp=function(a,b,c){\"object\"!=typeof b&&(b={parser:c});var d,e,f=a.split(\",\"),g=b.defaultValue;for(c=c||[g],d=0;d<f.length;d++)b.prefix=0===d&&b.prefix,b.defaultValue=c[d]||g,e=new ta(f[d],b)},va=function(a){if(!i[a]){var b=a.charAt(0).toUpperCase()+a.substr(1)+\"Plugin\";ua(a,{parser:function(a,c,d,e,f,g,j){var k=h.com.greensock.plugins[b];return k?(k._cssRegister(),i[d].parse(a,c,d,e,f,g,j)):(S(\"Error: \"+b+\" js file not loaded.\"),f)}})}};j=ta.prototype,j.parseComplex=function(a,b,c,d,e,f){var g,h,i,j,k,l,m=this.keyword;if(this.multi&&(G.test(c)||G.test(b)?(h=b.replace(G,\"|\").split(\"|\"),i=c.replace(G,\"|\").split(\"|\")):m&&(h=[b],i=[c])),i){for(j=i.length>h.length?i.length:h.length,g=0;j>g;g++)b=h[g]=h[g]||this.dflt,c=i[g]=i[g]||this.dflt,m&&(k=b.indexOf(m),l=c.indexOf(m),k!==l&&(-1===l?h[g]=h[g].split(m).join(\"\"):-1===k&&(h[g]+=\" \"+m)));b=h.join(\", \"),c=i.join(\", \")}return ra(a,this.p,b,c,this.clrs,this.dflt,d,this.pr,e,f)},j.parse=function(a,b,c,d,f,g,h){return this.parseComplex(a.style,this.format(X(a,this.p,e,!1,this.dflt)),this.format(b),f,g)},g.registerSpecialProp=function(a,b,c){ua(a,{parser:function(a,d,e,f,g,h,i){var j=new pa(a,e,0,0,g,2,e,!1,c);return j.plugin=h,j.setRatio=b(a,d,f._tween,e),j},priority:c})},g.useSVGTransformAttr=m||n;var wa,xa=\"scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent\".split(\",\"),ya=V(\"transform\"),za=T+\"transform\",Aa=V(\"transformOrigin\"),Ba=null!==V(\"perspective\"),Ca=O.Transform=function(){this.perspective=parseFloat(g.defaultTransformPerspective)||0,this.force3D=g.defaultForce3D!==!1&&Ba?g.defaultForce3D||\"auto\":!1},Da=window.SVGElement,Ea=function(a,b,c){var d,e=K.createElementNS(\"http://www.w3.org/2000/svg\",a),f=/([a-z])([A-Z])/g;for(d in c)e.setAttributeNS(null,d.replace(f,\"$1-$2\").toLowerCase(),c[d]);return b.appendChild(e),e},Fa=K.documentElement,Ga=function(){var a,b,c,d=p||/Android/i.test(P)&&!window.chrome;return K.createElementNS&&!d&&(a=Ea(\"svg\",Fa),b=Ea(\"rect\",a,{width:100,height:50,x:100}),c=b.getBoundingClientRect().width,b.style[Aa]=\"50% 50%\",b.style[ya]=\"scaleX(0.5)\",d=c===b.getBoundingClientRect().width&&!(n&&Ba),Fa.removeChild(a)),d}(),Ha=function(a,b,c,d,e){var f,h,i,j,k,l,m,n,o,p,q,r,s,t,u=a._gsTransform,v=Ka(a,!0);u&&(s=u.xOrigin,t=u.yOrigin),(!d||(f=d.split(\" \")).length<2)&&(m=a.getBBox(),b=da(b).split(\" \"),f=[(-1!==b[0].indexOf(\"%\")?parseFloat(b[0])/100*m.width:parseFloat(b[0]))+m.x,(-1!==b[1].indexOf(\"%\")?parseFloat(b[1])/100*m.height:parseFloat(b[1]))+m.y]),c.xOrigin=j=parseFloat(f[0]),c.yOrigin=k=parseFloat(f[1]),d&&v!==Ja&&(l=v[0],m=v[1],n=v[2],o=v[3],p=v[4],q=v[5],r=l*o-m*n,h=j*(o/r)+k*(-n/r)+(n*q-o*p)/r,i=j*(-m/r)+k*(l/r)-(l*q-m*p)/r,j=c.xOrigin=f[0]=h,k=c.yOrigin=f[1]=i),u&&(e||e!==!1&&g.defaultSmoothOrigin!==!1?(h=j-s,i=k-t,u.xOffset+=h*v[0]+i*v[2]-h,u.yOffset+=h*v[1]+i*v[3]-i):u.xOffset=u.yOffset=0),a.setAttribute(\"data-svg-origin\",f.join(\" \"))},Ia=function(a){return!!(Da&&\"function\"==typeof a.getBBox&&a.getCTM&&(!a.parentNode||a.parentNode.getBBox&&a.parentNode.getCTM))},Ja=[1,0,0,1,0,0],Ka=function(a,b){var c,d,e,f,g,h=a._gsTransform||new Ca,i=1e5;if(ya?d=X(a,za,null,!0):a.currentStyle&&(d=a.currentStyle.filter.match(E),d=d&&4===d.length?[d[0].substr(4),Number(d[2].substr(4)),Number(d[1].substr(4)),d[3].substr(4),h.x||0,h.y||0].join(\",\"):\"\"),c=!d||\"none\"===d||\"matrix(1, 0, 0, 1, 0, 0)\"===d,(h.svg||a.getBBox&&Ia(a))&&(c&&-1!==(a.style[ya]+\"\").indexOf(\"matrix\")&&(d=a.style[ya],c=0),e=a.getAttribute(\"transform\"),c&&e&&(-1!==e.indexOf(\"matrix\")?(d=e,c=0):-1!==e.indexOf(\"translate\")&&(d=\"matrix(1,0,0,1,\"+e.match(/(?:\\-|\\b)[\\d\\-\\.e]+\\b/gi).join(\",\")+\")\",c=0))),c)return Ja;for(e=(d||\"\").match(/(?:\\-|\\b)[\\d\\-\\.e]+\\b/gi)||[],sa=e.length;--sa>-1;)f=Number(e[sa]),e[sa]=(g=f-(f|=0))?(g*i+(0>g?-.5:.5)|0)/i+f:f;return b&&e.length>6?[e[0],e[1],e[4],e[5],e[12],e[13]]:e},La=O.getTransform=function(a,c,d,f){if(a._gsTransform&&d&&!f)return a._gsTransform;var h,i,j,k,l,m,n=d?a._gsTransform||new Ca:new Ca,o=n.scaleX<0,p=2e-5,q=1e5,r=Ba?parseFloat(X(a,Aa,c,!1,\"0 0 0\").split(\" \")[2])||n.zOrigin||0:0,s=parseFloat(g.defaultTransformPerspective)||0;if(n.svg=!(!a.getBBox||!Ia(a)),n.svg&&(Ha(a,X(a,Aa,e,!1,\"50% 50%\")+\"\",n,a.getAttribute(\"data-svg-origin\")),wa=g.useSVGTransformAttr||Ga),h=Ka(a),h!==Ja){if(16===h.length){var t,u,v,w,x,y=h[0],z=h[1],A=h[2],B=h[3],C=h[4],D=h[5],E=h[6],F=h[7],G=h[8],H=h[9],J=h[10],K=h[12],L=h[13],M=h[14],N=h[11],O=Math.atan2(E,J);n.zOrigin&&(M=-n.zOrigin,K=G*M-h[12],L=H*M-h[13],M=J*M+n.zOrigin-h[14]),n.rotationX=O*I,O&&(w=Math.cos(-O),x=Math.sin(-O),t=C*w+G*x,u=D*w+H*x,v=E*w+J*x,G=C*-x+G*w,H=D*-x+H*w,J=E*-x+J*w,N=F*-x+N*w,C=t,D=u,E=v),O=Math.atan2(-A,J),n.rotationY=O*I,O&&(w=Math.cos(-O),x=Math.sin(-O),t=y*w-G*x,u=z*w-H*x,v=A*w-J*x,H=z*x+H*w,J=A*x+J*w,N=B*x+N*w,y=t,z=u,A=v),O=Math.atan2(z,y),n.rotation=O*I,O&&(w=Math.cos(-O),x=Math.sin(-O),y=y*w+C*x,u=z*w+D*x,D=z*-x+D*w,E=A*-x+E*w,z=u),n.rotationX&&Math.abs(n.rotationX)+Math.abs(n.rotation)>359.9&&(n.rotationX=n.rotation=0,n.rotationY=180-n.rotationY),n.scaleX=(Math.sqrt(y*y+z*z)*q+.5|0)/q,n.scaleY=(Math.sqrt(D*D+H*H)*q+.5|0)/q,n.scaleZ=(Math.sqrt(E*E+J*J)*q+.5|0)/q,n.skewX=0,n.perspective=N?1/(0>N?-N:N):0,n.x=K,n.y=L,n.z=M,n.svg&&(n.x-=n.xOrigin-(n.xOrigin*y-n.yOrigin*C),n.y-=n.yOrigin-(n.yOrigin*z-n.xOrigin*D))}else if((!Ba||f||!h.length||n.x!==h[4]||n.y!==h[5]||!n.rotationX&&!n.rotationY)&&(void 0===n.x||\"none\"!==X(a,\"display\",c))){var P=h.length>=6,Q=P?h[0]:1,R=h[1]||0,S=h[2]||0,T=P?h[3]:1;n.x=h[4]||0,n.y=h[5]||0,j=Math.sqrt(Q*Q+R*R),k=Math.sqrt(T*T+S*S),l=Q||R?Math.atan2(R,Q)*I:n.rotation||0,m=S||T?Math.atan2(S,T)*I+l:n.skewX||0,Math.abs(m)>90&&Math.abs(m)<270&&(o?(j*=-1,m+=0>=l?180:-180,l+=0>=l?180:-180):(k*=-1,m+=0>=m?180:-180)),n.scaleX=j,n.scaleY=k,n.rotation=l,n.skewX=m,Ba&&(n.rotationX=n.rotationY=n.z=0,n.perspective=s,n.scaleZ=1),n.svg&&(n.x-=n.xOrigin-(n.xOrigin*Q+n.yOrigin*S),n.y-=n.yOrigin-(n.xOrigin*R+n.yOrigin*T))}n.zOrigin=r;for(i in n)n[i]<p&&n[i]>-p&&(n[i]=0)}return d&&(a._gsTransform=n,n.svg&&(wa&&a.style[ya]?b.delayedCall(.001,function(){Pa(a.style,ya)}):!wa&&a.getAttribute(\"transform\")&&b.delayedCall(.001,function(){a.removeAttribute(\"transform\")}))),n},Ma=function(a){var b,c,d=this.data,e=-d.rotation*H,f=e+d.skewX*H,g=1e5,h=(Math.cos(e)*d.scaleX*g|0)/g,i=(Math.sin(e)*d.scaleX*g|0)/g,j=(Math.sin(f)*-d.scaleY*g|0)/g,k=(Math.cos(f)*d.scaleY*g|0)/g,l=this.t.style,m=this.t.currentStyle;if(m){c=i,i=-j,j=-c,b=m.filter,l.filter=\"\";var n,o,q=this.t.offsetWidth,r=this.t.offsetHeight,s=\"absolute\"!==m.position,t=\"progid:DXImageTransform.Microsoft.Matrix(M11=\"+h+\", M12=\"+i+\", M21=\"+j+\", M22=\"+k,w=d.x+q*d.xPercent/100,x=d.y+r*d.yPercent/100;if(null!=d.ox&&(n=(d.oxp?q*d.ox*.01:d.ox)-q/2,o=(d.oyp?r*d.oy*.01:d.oy)-r/2,w+=n-(n*h+o*i),x+=o-(n*j+o*k)),s?(n=q/2,o=r/2,t+=\", Dx=\"+(n-(n*h+o*i)+w)+\", Dy=\"+(o-(n*j+o*k)+x)+\")\"):t+=\", sizingMethod='auto expand')\",-1!==b.indexOf(\"DXImageTransform.Microsoft.Matrix(\")?l.filter=b.replace(F,t):l.filter=t+\" \"+b,(0===a||1===a)&&1===h&&0===i&&0===j&&1===k&&(s&&-1===t.indexOf(\"Dx=0, Dy=0\")||v.test(b)&&100!==parseFloat(RegExp.$1)||-1===b.indexOf(b.indexOf(\"Alpha\"))&&l.removeAttribute(\"filter\")),!s){var y,z,A,B=8>p?1:-1;for(n=d.ieOffsetX||0,o=d.ieOffsetY||0,d.ieOffsetX=Math.round((q-((0>h?-h:h)*q+(0>i?-i:i)*r))/2+w),d.ieOffsetY=Math.round((r-((0>k?-k:k)*r+(0>j?-j:j)*q))/2+x),sa=0;4>sa;sa++)z=ba[sa],y=m[z],c=-1!==y.indexOf(\"px\")?parseFloat(y):Y(this.t,z,parseFloat(y),y.replace(u,\"\"))||0,A=c!==d[z]?2>sa?-d.ieOffsetX:-d.ieOffsetY:2>sa?n-d.ieOffsetX:o-d.ieOffsetY,l[z]=(d[z]=Math.round(c-A*(0===sa||2===sa?1:B)))+\"px\"}}},Na=O.set3DTransformRatio=O.setTransformRatio=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,o,p,q,r,s,t,u,v,w,x,y,z=this.data,A=this.t.style,B=z.rotation,C=z.rotationX,D=z.rotationY,E=z.scaleX,F=z.scaleY,G=z.scaleZ,I=z.x,J=z.y,K=z.z,L=z.svg,M=z.perspective,N=z.force3D;if(((1===a||0===a)&&\"auto\"===N&&(this.tween._totalTime===this.tween._totalDuration||!this.tween._totalTime)||!N)&&!K&&!M&&!D&&!C&&1===G||wa&&L||!Ba)return void(B||z.skewX||L?(B*=H,x=z.skewX*H,y=1e5,b=Math.cos(B)*E,e=Math.sin(B)*E,c=Math.sin(B-x)*-F,f=Math.cos(B-x)*F,x&&\"simple\"===z.skewType&&(s=Math.tan(x),s=Math.sqrt(1+s*s),c*=s,f*=s,z.skewY&&(b*=s,e*=s)),L&&(I+=z.xOrigin-(z.xOrigin*b+z.yOrigin*c)+z.xOffset,J+=z.yOrigin-(z.xOrigin*e+z.yOrigin*f)+z.yOffset,wa&&(z.xPercent||z.yPercent)&&(p=this.t.getBBox(),I+=.01*z.xPercent*p.width,J+=.01*z.yPercent*p.height),p=1e-6,p>I&&I>-p&&(I=0),p>J&&J>-p&&(J=0)),u=(b*y|0)/y+\",\"+(e*y|0)/y+\",\"+(c*y|0)/y+\",\"+(f*y|0)/y+\",\"+I+\",\"+J+\")\",L&&wa?this.t.setAttribute(\"transform\",\"matrix(\"+u):A[ya]=(z.xPercent||z.yPercent?\"translate(\"+z.xPercent+\"%,\"+z.yPercent+\"%) matrix(\":\"matrix(\")+u):A[ya]=(z.xPercent||z.yPercent?\"translate(\"+z.xPercent+\"%,\"+z.yPercent+\"%) matrix(\":\"matrix(\")+E+\",0,0,\"+F+\",\"+I+\",\"+J+\")\");if(n&&(p=1e-4,p>E&&E>-p&&(E=G=2e-5),p>F&&F>-p&&(F=G=2e-5),!M||z.z||z.rotationX||z.rotationY||(M=0)),B||z.skewX)B*=H,q=b=Math.cos(B),r=e=Math.sin(B),z.skewX&&(B-=z.skewX*H,q=Math.cos(B),r=Math.sin(B),\"simple\"===z.skewType&&(s=Math.tan(z.skewX*H),s=Math.sqrt(1+s*s),q*=s,r*=s,z.skewY&&(b*=s,e*=s))),c=-r,f=q;else{if(!(D||C||1!==G||M||L))return void(A[ya]=(z.xPercent||z.yPercent?\"translate(\"+z.xPercent+\"%,\"+z.yPercent+\"%) translate3d(\":\"translate3d(\")+I+\"px,\"+J+\"px,\"+K+\"px)\"+(1!==E||1!==F?\" scale(\"+E+\",\"+F+\")\":\"\"));b=f=1,c=e=0}j=1,d=g=h=i=k=l=0,m=M?-1/M:0,o=z.zOrigin,p=1e-6,v=\",\",w=\"0\",B=D*H,B&&(q=Math.cos(B),r=Math.sin(B),h=-r,k=m*-r,d=b*r,g=e*r,j=q,m*=q,b*=q,e*=q),B=C*H,B&&(q=Math.cos(B),r=Math.sin(B),s=c*q+d*r,t=f*q+g*r,i=j*r,l=m*r,d=c*-r+d*q,g=f*-r+g*q,j*=q,m*=q,c=s,f=t),1!==G&&(d*=G,g*=G,j*=G,m*=G),1!==F&&(c*=F,f*=F,i*=F,l*=F),1!==E&&(b*=E,e*=E,h*=E,k*=E),(o||L)&&(o&&(I+=d*-o,J+=g*-o,K+=j*-o+o),L&&(I+=z.xOrigin-(z.xOrigin*b+z.yOrigin*c)+z.xOffset,J+=z.yOrigin-(z.xOrigin*e+z.yOrigin*f)+z.yOffset),p>I&&I>-p&&(I=w),p>J&&J>-p&&(J=w),p>K&&K>-p&&(K=0)),u=z.xPercent||z.yPercent?\"translate(\"+z.xPercent+\"%,\"+z.yPercent+\"%) matrix3d(\":\"matrix3d(\",u+=(p>b&&b>-p?w:b)+v+(p>e&&e>-p?w:e)+v+(p>h&&h>-p?w:h),u+=v+(p>k&&k>-p?w:k)+v+(p>c&&c>-p?w:c)+v+(p>f&&f>-p?w:f),C||D||1!==G?(u+=v+(p>i&&i>-p?w:i)+v+(p>l&&l>-p?w:l)+v+(p>d&&d>-p?w:d),u+=v+(p>g&&g>-p?w:g)+v+(p>j&&j>-p?w:j)+v+(p>m&&m>-p?w:m)+v):u+=\",0,0,0,0,1,0,\",u+=I+v+J+v+K+v+(M?1+-K/M:1)+\")\",A[ya]=u};j=Ca.prototype,j.x=j.y=j.z=j.skewX=j.skewY=j.rotation=j.rotationX=j.rotationY=j.zOrigin=j.xPercent=j.yPercent=j.xOffset=j.yOffset=0,j.scaleX=j.scaleY=j.scaleZ=1,ua(\"transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin\",{parser:function(a,b,c,d,f,h,i){if(d._lastParsedTransform===i)return f;d._lastParsedTransform=i;var j,k,l,m,n,o,p,q,r,s,t=a._gsTransform,u=a.style,v=1e-6,w=xa.length,x=i,y={},z=\"transformOrigin\";if(i.display?(m=X(a,\"display\"),u.display=\"block\",j=La(a,e,!0,i.parseTransform),u.display=m):j=La(a,e,!0,i.parseTransform),d._transform=j,\"string\"==typeof x.transform&&ya)m=M.style,m[ya]=x.transform,m.display=\"block\",m.position=\"absolute\",K.body.appendChild(M),k=La(M,null,!1),K.body.removeChild(M),k.perspective||(k.perspective=j.perspective),null!=x.xPercent&&(k.xPercent=fa(x.xPercent,j.xPercent)),null!=x.yPercent&&(k.yPercent=fa(x.yPercent,j.yPercent));else if(\"object\"==typeof x){if(k={scaleX:fa(null!=x.scaleX?x.scaleX:x.scale,j.scaleX),scaleY:fa(null!=x.scaleY?x.scaleY:x.scale,j.scaleY),scaleZ:fa(x.scaleZ,j.scaleZ),x:fa(x.x,j.x),y:fa(x.y,j.y),z:fa(x.z,j.z),xPercent:fa(x.xPercent,j.xPercent),yPercent:fa(x.yPercent,j.yPercent),perspective:fa(x.transformPerspective,j.perspective)},q=x.directionalRotation,null!=q)if(\"object\"==typeof q)for(m in q)x[m]=q[m];else x.rotation=q;\"string\"==typeof x.x&&-1!==x.x.indexOf(\"%\")&&(k.x=0,k.xPercent=fa(x.x,j.xPercent)),\"string\"==typeof x.y&&-1!==x.y.indexOf(\"%\")&&(k.y=0,k.yPercent=fa(x.y,j.yPercent)),k.rotation=ga(\"rotation\"in x?x.rotation:\"shortRotation\"in x?x.shortRotation+\"_short\":\"rotationZ\"in x?x.rotationZ:j.rotation,j.rotation,\"rotation\",y),Ba&&(k.rotationX=ga(\"rotationX\"in x?x.rotationX:\"shortRotationX\"in x?x.shortRotationX+\"_short\":j.rotationX||0,j.rotationX,\"rotationX\",y),k.rotationY=ga(\"rotationY\"in x?x.rotationY:\"shortRotationY\"in x?x.shortRotationY+\"_short\":j.rotationY||0,j.rotationY,\"rotationY\",y)),k.skewX=null==x.skewX?j.skewX:ga(x.skewX,j.skewX),k.skewY=null==x.skewY?j.skewY:ga(x.skewY,j.skewY),(l=k.skewY-j.skewY)&&(k.skewX+=l,k.rotation+=l)}for(Ba&&null!=x.force3D&&(j.force3D=x.force3D,p=!0),j.skewType=x.skewType||j.skewType||g.defaultSkewType,o=j.force3D||j.z||j.rotationX||j.rotationY||k.z||k.rotationX||k.rotationY||k.perspective,o||null==x.scale||(k.scaleZ=1);--w>-1;)c=xa[w],n=k[c]-j[c],(n>v||-v>n||null!=x[c]||null!=J[c])&&(p=!0,f=new pa(j,c,j[c],n,f),c in y&&(f.e=y[c]),f.xs0=0,f.plugin=h,d._overwriteProps.push(f.n));return n=x.transformOrigin,j.svg&&(n||x.svgOrigin)&&(r=j.xOffset,s=j.yOffset,Ha(a,da(n),k,x.svgOrigin,x.smoothOrigin),f=qa(j,\"xOrigin\",(t?j:k).xOrigin,k.xOrigin,f,z),f=qa(j,\"yOrigin\",(t?j:k).yOrigin,k.yOrigin,f,z),(r!==j.xOffset||s!==j.yOffset)&&(f=qa(j,\"xOffset\",t?r:j.xOffset,j.xOffset,f,z),f=qa(j,\"yOffset\",t?s:j.yOffset,j.yOffset,f,z)),n=wa?null:\"0px 0px\"),(n||Ba&&o&&j.zOrigin)&&(ya?(p=!0,c=Aa,n=(n||X(a,c,e,!1,\"50% 50%\"))+\"\",f=new pa(u,c,0,0,f,-1,z),f.b=u[c],f.plugin=h,Ba?(m=j.zOrigin,n=n.split(\" \"),j.zOrigin=(n.length>2&&(0===m||\"0px\"!==n[2])?parseFloat(n[2]):m)||0,f.xs0=f.e=n[0]+\" \"+(n[1]||\"50%\")+\" 0px\",f=new pa(j,\"zOrigin\",0,0,f,-1,f.n),f.b=m,f.xs0=f.e=j.zOrigin):f.xs0=f.e=n):da(n+\"\",j)),p&&(d._transformType=j.svg&&wa||!o&&3!==this._transformType?2:3),f},prefix:!0}),ua(\"boxShadow\",{defaultValue:\"0px 0px 0px 0px #999\",prefix:!0,color:!0,multi:!0,keyword:\"inset\"}),ua(\"borderRadius\",{defaultValue:\"0px\",parser:function(a,b,c,f,g,h){b=this.format(b);var i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y=[\"borderTopLeftRadius\",\"borderTopRightRadius\",\"borderBottomRightRadius\",\"borderBottomLeftRadius\"],z=a.style;for(q=parseFloat(a.offsetWidth),r=parseFloat(a.offsetHeight),i=b.split(\" \"),j=0;j<y.length;j++)this.p.indexOf(\"border\")&&(y[j]=V(y[j])),m=l=X(a,y[j],e,!1,\"0px\"),-1!==m.indexOf(\" \")&&(l=m.split(\" \"),m=l[0],l=l[1]),n=k=i[j],o=parseFloat(m),t=m.substr((o+\"\").length),u=\"=\"===n.charAt(1),u?(p=parseInt(n.charAt(0)+\"1\",10),n=n.substr(2),p*=parseFloat(n),s=n.substr((p+\"\").length-(0>p?1:0))||\"\"):(p=parseFloat(n),s=n.substr((p+\"\").length)),\"\"===s&&(s=d[c]||t),s!==t&&(v=Y(a,\"borderLeft\",o,t),w=Y(a,\"borderTop\",o,t),\"%\"===s?(m=v/q*100+\"%\",l=w/r*100+\"%\"):\"em\"===s?(x=Y(a,\"borderLeft\",1,\"em\"),m=v/x+\"em\",l=w/x+\"em\"):(m=v+\"px\",l=w+\"px\"),u&&(n=parseFloat(m)+p+s,k=parseFloat(l)+p+s)),g=ra(z,y[j],m+\" \"+l,n+\" \"+k,!1,\"0px\",g);return g},prefix:!0,formatter:ma(\"0px 0px 0px 0px\",!1,!0)}),ua(\"backgroundPosition\",{\ndefaultValue:\"0 0\",parser:function(a,b,c,d,f,g){var h,i,j,k,l,m,n=\"background-position\",o=e||W(a,null),q=this.format((o?p?o.getPropertyValue(n+\"-x\")+\" \"+o.getPropertyValue(n+\"-y\"):o.getPropertyValue(n):a.currentStyle.backgroundPositionX+\" \"+a.currentStyle.backgroundPositionY)||\"0 0\"),r=this.format(b);if(-1!==q.indexOf(\"%\")!=(-1!==r.indexOf(\"%\"))&&(m=X(a,\"backgroundImage\").replace(B,\"\"),m&&\"none\"!==m)){for(h=q.split(\" \"),i=r.split(\" \"),N.setAttribute(\"src\",m),j=2;--j>-1;)q=h[j],k=-1!==q.indexOf(\"%\"),k!==(-1!==i[j].indexOf(\"%\"))&&(l=0===j?a.offsetWidth-N.width:a.offsetHeight-N.height,h[j]=k?parseFloat(q)/100*l+\"px\":parseFloat(q)/l*100+\"%\");q=h.join(\" \")}return this.parseComplex(a.style,q,r,f,g)},formatter:da}),ua(\"backgroundSize\",{defaultValue:\"0 0\",formatter:da}),ua(\"perspective\",{defaultValue:\"0px\",prefix:!0}),ua(\"perspectiveOrigin\",{defaultValue:\"50% 50%\",prefix:!0}),ua(\"transformStyle\",{prefix:!0}),ua(\"backfaceVisibility\",{prefix:!0}),ua(\"userSelect\",{prefix:!0}),ua(\"margin\",{parser:na(\"marginTop,marginRight,marginBottom,marginLeft\")}),ua(\"padding\",{parser:na(\"paddingTop,paddingRight,paddingBottom,paddingLeft\")}),ua(\"clip\",{defaultValue:\"rect(0px,0px,0px,0px)\",parser:function(a,b,c,d,f,g){var h,i,j;return 9>p?(i=a.currentStyle,j=8>p?\" \":\",\",h=\"rect(\"+i.clipTop+j+i.clipRight+j+i.clipBottom+j+i.clipLeft+\")\",b=this.format(b).split(\",\").join(j)):(h=this.format(X(a,this.p,e,!1,this.dflt)),b=this.format(b)),this.parseComplex(a.style,h,b,f,g)}}),ua(\"textShadow\",{defaultValue:\"0px 0px 0px #999\",color:!0,multi:!0}),ua(\"autoRound,strictUnits\",{parser:function(a,b,c,d,e){return e}}),ua(\"border\",{defaultValue:\"0px solid #000\",parser:function(a,b,c,d,f,g){return this.parseComplex(a.style,this.format(X(a,\"borderTopWidth\",e,!1,\"0px\")+\" \"+X(a,\"borderTopStyle\",e,!1,\"solid\")+\" \"+X(a,\"borderTopColor\",e,!1,\"#000\")),this.format(b),f,g)},color:!0,formatter:function(a){var b=a.split(\" \");return b[0]+\" \"+(b[1]||\"solid\")+\" \"+(a.match(la)||[\"#000\"])[0]}}),ua(\"borderWidth\",{parser:na(\"borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth\")}),ua(\"float,cssFloat,styleFloat\",{parser:function(a,b,c,d,e,f){var g=a.style,h=\"cssFloat\"in g?\"cssFloat\":\"styleFloat\";return new pa(g,h,0,0,e,-1,c,!1,0,g[h],b)}});var Oa=function(a){var b,c=this.t,d=c.filter||X(this.data,\"filter\")||\"\",e=this.s+this.c*a|0;100===e&&(-1===d.indexOf(\"atrix(\")&&-1===d.indexOf(\"radient(\")&&-1===d.indexOf(\"oader(\")?(c.removeAttribute(\"filter\"),b=!X(this.data,\"filter\")):(c.filter=d.replace(x,\"\"),b=!0)),b||(this.xn1&&(c.filter=d=d||\"alpha(opacity=\"+e+\")\"),-1===d.indexOf(\"pacity\")?0===e&&this.xn1||(c.filter=d+\" alpha(opacity=\"+e+\")\"):c.filter=d.replace(v,\"opacity=\"+e))};ua(\"opacity,alpha,autoAlpha\",{defaultValue:\"1\",parser:function(a,b,c,d,f,g){var h=parseFloat(X(a,\"opacity\",e,!1,\"1\")),i=a.style,j=\"autoAlpha\"===c;return\"string\"==typeof b&&\"=\"===b.charAt(1)&&(b=(\"-\"===b.charAt(0)?-1:1)*parseFloat(b.substr(2))+h),j&&1===h&&\"hidden\"===X(a,\"visibility\",e)&&0!==b&&(h=0),Q?f=new pa(i,\"opacity\",h,b-h,f):(f=new pa(i,\"opacity\",100*h,100*(b-h),f),f.xn1=j?1:0,i.zoom=1,f.type=2,f.b=\"alpha(opacity=\"+f.s+\")\",f.e=\"alpha(opacity=\"+(f.s+f.c)+\")\",f.data=a,f.plugin=g,f.setRatio=Oa),j&&(f=new pa(i,\"visibility\",0,0,f,-1,null,!1,0,0!==h?\"inherit\":\"hidden\",0===b?\"hidden\":\"inherit\"),f.xs0=\"inherit\",d._overwriteProps.push(f.n),d._overwriteProps.push(c)),f}});var Pa=function(a,b){b&&(a.removeProperty?((\"ms\"===b.substr(0,2)||\"webkit\"===b.substr(0,6))&&(b=\"-\"+b),a.removeProperty(b.replace(z,\"-$1\").toLowerCase())):a.removeAttribute(b))},Qa=function(a){if(this.t._gsClassPT=this,1===a||0===a){this.t.setAttribute(\"class\",0===a?this.b:this.e);for(var b=this.data,c=this.t.style;b;)b.v?c[b.p]=b.v:Pa(c,b.p),b=b._next;1===a&&this.t._gsClassPT===this&&(this.t._gsClassPT=null)}else this.t.getAttribute(\"class\")!==this.e&&this.t.setAttribute(\"class\",this.e)};ua(\"className\",{parser:function(a,b,d,f,g,h,i){var j,k,l,m,n,o=a.getAttribute(\"class\")||\"\",p=a.style.cssText;if(g=f._classNamePT=new pa(a,d,0,0,g,2),g.setRatio=Qa,g.pr=-11,c=!0,g.b=o,k=$(a,e),l=a._gsClassPT){for(m={},n=l.data;n;)m[n.p]=1,n=n._next;l.setRatio(1)}return a._gsClassPT=g,g.e=\"=\"!==b.charAt(1)?b:o.replace(new RegExp(\"\\\\s*\\\\b\"+b.substr(2)+\"\\\\b\"),\"\")+(\"+\"===b.charAt(0)?\" \"+b.substr(2):\"\"),a.setAttribute(\"class\",g.e),j=_(a,k,$(a),i,m),a.setAttribute(\"class\",o),g.data=j.firstMPT,a.style.cssText=p,g=g.xfirst=f.parse(a,j.difs,g,h)}});var Ra=function(a){if((1===a||0===a)&&this.data._totalTime===this.data._totalDuration&&\"isFromStart\"!==this.data.data){var b,c,d,e,f,g=this.t.style,h=i.transform.parse;if(\"all\"===this.e)g.cssText=\"\",e=!0;else for(b=this.e.split(\" \").join(\"\").split(\",\"),d=b.length;--d>-1;)c=b[d],i[c]&&(i[c].parse===h?e=!0:c=\"transformOrigin\"===c?Aa:i[c].p),Pa(g,c);e&&(Pa(g,ya),f=this.t._gsTransform,f&&(f.svg&&(this.t.removeAttribute(\"data-svg-origin\"),this.t.removeAttribute(\"transform\")),delete this.t._gsTransform))}};for(ua(\"clearProps\",{parser:function(a,b,d,e,f){return f=new pa(a,d,0,0,f,2),f.setRatio=Ra,f.e=b,f.pr=-10,f.data=e._tween,c=!0,f}}),j=\"bezier,throwProps,physicsProps,physics2D\".split(\",\"),sa=j.length;sa--;)va(j[sa]);j=g.prototype,j._firstPT=j._lastParsedTransform=j._transform=null,j._onInitTween=function(a,b,h){if(!a.nodeType)return!1;this._target=a,this._tween=h,this._vars=b,k=b.autoRound,c=!1,d=b.suffixMap||g.suffixMap,e=W(a,\"\"),f=this._overwriteProps;var j,n,p,q,r,s,t,u,v,x=a.style;if(l&&\"\"===x.zIndex&&(j=X(a,\"zIndex\",e),(\"auto\"===j||\"\"===j)&&this._addLazySet(x,\"zIndex\",0)),\"string\"==typeof b&&(q=x.cssText,j=$(a,e),x.cssText=q+\";\"+b,j=_(a,j,$(a)).difs,!Q&&w.test(b)&&(j.opacity=parseFloat(RegExp.$1)),b=j,x.cssText=q),b.className?this._firstPT=n=i.className.parse(a,b.className,\"className\",this,null,null,b):this._firstPT=n=this.parse(a,b,null),this._transformType){for(v=3===this._transformType,ya?m&&(l=!0,\"\"===x.zIndex&&(t=X(a,\"zIndex\",e),(\"auto\"===t||\"\"===t)&&this._addLazySet(x,\"zIndex\",0)),o&&this._addLazySet(x,\"WebkitBackfaceVisibility\",this._vars.WebkitBackfaceVisibility||(v?\"visible\":\"hidden\"))):x.zoom=1,p=n;p&&p._next;)p=p._next;u=new pa(a,\"transform\",0,0,null,2),this._linkCSSP(u,null,p),u.setRatio=ya?Na:Ma,u.data=this._transform||La(a,e,!0),u.tween=h,u.pr=-1,f.pop()}if(c){for(;n;){for(s=n._next,p=q;p&&p.pr>n.pr;)p=p._next;(n._prev=p?p._prev:r)?n._prev._next=n:q=n,(n._next=p)?p._prev=n:r=n,n=s}this._firstPT=q}return!0},j.parse=function(a,b,c,f){var g,h,j,l,m,n,o,p,q,r,s=a.style;for(g in b)n=b[g],h=i[g],h?c=h.parse(a,n,g,this,c,f,b):(m=X(a,g,e)+\"\",q=\"string\"==typeof n,\"color\"===g||\"fill\"===g||\"stroke\"===g||-1!==g.indexOf(\"Color\")||q&&y.test(n)?(q||(n=ja(n),n=(n.length>3?\"rgba(\":\"rgb(\")+n.join(\",\")+\")\"),c=ra(s,g,m,n,!0,\"transparent\",c,0,f)):!q||-1===n.indexOf(\" \")&&-1===n.indexOf(\",\")?(j=parseFloat(m),o=j||0===j?m.substr((j+\"\").length):\"\",(\"\"===m||\"auto\"===m)&&(\"width\"===g||\"height\"===g?(j=ca(a,g,e),o=\"px\"):\"left\"===g||\"top\"===g?(j=Z(a,g,e),o=\"px\"):(j=\"opacity\"!==g?0:1,o=\"\")),r=q&&\"=\"===n.charAt(1),r?(l=parseInt(n.charAt(0)+\"1\",10),n=n.substr(2),l*=parseFloat(n),p=n.replace(u,\"\")):(l=parseFloat(n),p=q?n.replace(u,\"\"):\"\"),\"\"===p&&(p=g in d?d[g]:o),n=l||0===l?(r?l+j:l)+p:b[g],o!==p&&\"\"!==p&&(l||0===l)&&j&&(j=Y(a,g,j,o),\"%\"===p?(j/=Y(a,g,100,\"%\")/100,b.strictUnits!==!0&&(m=j+\"%\")):\"em\"===p||\"rem\"===p||\"vw\"===p||\"vh\"===p?j/=Y(a,g,1,p):\"px\"!==p&&(l=Y(a,g,l,p),p=\"px\"),r&&(l||0===l)&&(n=l+j+p)),r&&(l+=j),!j&&0!==j||!l&&0!==l?void 0!==s[g]&&(n||n+\"\"!=\"NaN\"&&null!=n)?(c=new pa(s,g,l||j||0,0,c,-1,g,!1,0,m,n),c.xs0=\"none\"!==n||\"display\"!==g&&-1===g.indexOf(\"Style\")?n:m):S(\"invalid \"+g+\" tween value: \"+b[g]):(c=new pa(s,g,j,l-j,c,0,g,k!==!1&&(\"px\"===p||\"zIndex\"===g),0,m,n),c.xs0=p)):c=ra(s,g,m,n,!0,null,c,0,f)),f&&c&&!c.plugin&&(c.plugin=f);return c},j.setRatio=function(a){var b,c,d,e=this._firstPT,f=1e-6;if(1!==a||this._tween._time!==this._tween._duration&&0!==this._tween._time)if(a||this._tween._time!==this._tween._duration&&0!==this._tween._time||this._tween._rawPrevTime===-1e-6)for(;e;){if(b=e.c*a+e.s,e.r?b=Math.round(b):f>b&&b>-f&&(b=0),e.type)if(1===e.type)if(d=e.l,2===d)e.t[e.p]=e.xs0+b+e.xs1+e.xn1+e.xs2;else if(3===d)e.t[e.p]=e.xs0+b+e.xs1+e.xn1+e.xs2+e.xn2+e.xs3;else if(4===d)e.t[e.p]=e.xs0+b+e.xs1+e.xn1+e.xs2+e.xn2+e.xs3+e.xn3+e.xs4;else if(5===d)e.t[e.p]=e.xs0+b+e.xs1+e.xn1+e.xs2+e.xn2+e.xs3+e.xn3+e.xs4+e.xn4+e.xs5;else{for(c=e.xs0+b+e.xs1,d=1;d<e.l;d++)c+=e[\"xn\"+d]+e[\"xs\"+(d+1)];e.t[e.p]=c}else-1===e.type?e.t[e.p]=e.xs0:e.setRatio&&e.setRatio(a);else e.t[e.p]=b+e.xs0;e=e._next}else for(;e;)2!==e.type?e.t[e.p]=e.b:e.setRatio(a),e=e._next;else for(;e;){if(2!==e.type)if(e.r&&-1!==e.type)if(b=Math.round(e.s+e.c),e.type){if(1===e.type){for(d=e.l,c=e.xs0+b+e.xs1,d=1;d<e.l;d++)c+=e[\"xn\"+d]+e[\"xs\"+(d+1)];e.t[e.p]=c}}else e.t[e.p]=b+e.xs0;else e.t[e.p]=e.e;else e.setRatio(a);e=e._next}},j._enableTransforms=function(a){this._transform=this._transform||La(this._target,e,!0),this._transformType=this._transform.svg&&wa||!a&&3!==this._transformType?2:3};var Sa=function(a){this.t[this.p]=this.e,this.data._linkCSSP(this,this._next,null,!0)};j._addLazySet=function(a,b,c){var d=this._firstPT=new pa(a,b,0,0,this._firstPT,2);d.e=c,d.setRatio=Sa,d.data=this},j._linkCSSP=function(a,b,c,d){return a&&(b&&(b._prev=a),a._next&&(a._next._prev=a._prev),a._prev?a._prev._next=a._next:this._firstPT===a&&(this._firstPT=a._next,d=!0),c?c._next=a:d||null!==this._firstPT||(this._firstPT=a),a._next=b,a._prev=c),a},j._kill=function(b){var c,d,e,f=b;if(b.autoAlpha||b.alpha){f={};for(d in b)f[d]=b[d];f.opacity=1,f.autoAlpha&&(f.visibility=1)}return b.className&&(c=this._classNamePT)&&(e=c.xfirst,e&&e._prev?this._linkCSSP(e._prev,c._next,e._prev._prev):e===this._firstPT&&(this._firstPT=c._next),c._next&&this._linkCSSP(c._next,c._next._next,e._prev),this._classNamePT=null),a.prototype._kill.call(this,f)};var Ta=function(a,b,c){var d,e,f,g;if(a.slice)for(e=a.length;--e>-1;)Ta(a[e],b,c);else for(d=a.childNodes,e=d.length;--e>-1;)f=d[e],g=f.type,f.style&&(b.push($(f)),c&&c.push(f)),1!==g&&9!==g&&11!==g||!f.childNodes.length||Ta(f,b,c)};return g.cascadeTo=function(a,c,d){var e,f,g,h,i=b.to(a,c,d),j=[i],k=[],l=[],m=[],n=b._internals.reservedProps;for(a=i._targets||i.target,Ta(a,k,m),i.render(c,!0,!0),Ta(a,l),i.render(0,!0,!0),i._enabled(!0),e=m.length;--e>-1;)if(f=_(m[e],k[e],l[e]),f.firstMPT){f=f.difs;for(g in d)n[g]&&(f[g]=d[g]);h={};for(g in f)h[g]=k[e][g];j.push(b.fromTo(m[e],c,h,f))}return j},a.activate([g]),g},!0),function(){var a=_gsScope._gsDefine.plugin({propName:\"roundProps\",version:\"1.5\",priority:-1,API:2,init:function(a,b,c){return this._tween=c,!0}}),b=function(a){for(;a;)a.f||a.blob||(a.r=1),a=a._next},c=a.prototype;c._onInitAllProps=function(){for(var a,c,d,e=this._tween,f=e.vars.roundProps.join?e.vars.roundProps:e.vars.roundProps.split(\",\"),g=f.length,h={},i=e._propLookup.roundProps;--g>-1;)h[f[g]]=1;for(g=f.length;--g>-1;)for(a=f[g],c=e._firstPT;c;)d=c._next,c.pg?c.t._roundProps(h,!0):c.n===a&&(2===c.f&&c.t?b(c.t._firstPT):(this._add(c.t,a,c.s,c.c),d&&(d._prev=c._prev),c._prev?c._prev._next=d:e._firstPT===c&&(e._firstPT=d),c._next=c._prev=null,e._propLookup[a]=i)),c=d;return!1},c._add=function(a,b,c,d){this._addTween(a,b,c,c+d,b,!0),this._overwriteProps.push(b)}}(),function(){_gsScope._gsDefine.plugin({propName:\"attr\",API:2,version:\"0.5.0\",init:function(a,b,c){var d;if(\"function\"!=typeof a.setAttribute)return!1;for(d in b)this._addTween(a,\"setAttribute\",a.getAttribute(d)+\"\",b[d]+\"\",d,!1,d),this._overwriteProps.push(d);return!0}})}(),_gsScope._gsDefine.plugin({propName:\"directionalRotation\",version:\"0.2.1\",API:2,init:function(a,b,c){\"object\"!=typeof b&&(b={rotation:b}),this.finals={};var d,e,f,g,h,i,j=b.useRadians===!0?2*Math.PI:360,k=1e-6;for(d in b)\"useRadians\"!==d&&(i=(b[d]+\"\").split(\"_\"),e=i[0],f=parseFloat(\"function\"!=typeof a[d]?a[d]:a[d.indexOf(\"set\")||\"function\"!=typeof a[\"get\"+d.substr(3)]?d:\"get\"+d.substr(3)]()),g=this.finals[d]=\"string\"==typeof e&&\"=\"===e.charAt(1)?f+parseInt(e.charAt(0)+\"1\",10)*Number(e.substr(2)):Number(e)||0,h=g-f,i.length&&(e=i.join(\"_\"),-1!==e.indexOf(\"short\")&&(h%=j,h!==h%(j/2)&&(h=0>h?h+j:h-j)),-1!==e.indexOf(\"_cw\")&&0>h?h=(h+9999999999*j)%j-(h/j|0)*j:-1!==e.indexOf(\"ccw\")&&h>0&&(h=(h-9999999999*j)%j-(h/j|0)*j)),(h>k||-k>h)&&(this._addTween(a,d,f,f+h,d),this._overwriteProps.push(d)));return!0},set:function(a){var b;if(1!==a)this._super.setRatio.call(this,a);else for(b=this._firstPT;b;)b.f?b.t[b.p](this.finals[b.p]):b.t[b.p]=this.finals[b.p],b=b._next}})._autoCSS=!0,_gsScope._gsDefine(\"easing.Back\",[\"easing.Ease\"],function(a){var b,c,d,e=_gsScope.GreenSockGlobals||_gsScope,f=e.com.greensock,g=2*Math.PI,h=Math.PI/2,i=f._class,j=function(b,c){var d=i(\"easing.\"+b,function(){},!0),e=d.prototype=new a;return e.constructor=d,e.getRatio=c,d},k=a.register||function(){},l=function(a,b,c,d,e){var f=i(\"easing.\"+a,{easeOut:new b,easeIn:new c,easeInOut:new d},!0);return k(f,a),f},m=function(a,b,c){this.t=a,this.v=b,c&&(this.next=c,c.prev=this,this.c=c.v-b,this.gap=c.t-a)},n=function(b,c){var d=i(\"easing.\"+b,function(a){this._p1=a||0===a?a:1.70158,this._p2=1.525*this._p1},!0),e=d.prototype=new a;return e.constructor=d,e.getRatio=c,e.config=function(a){return new d(a)},d},o=l(\"Back\",n(\"BackOut\",function(a){return(a-=1)*a*((this._p1+1)*a+this._p1)+1}),n(\"BackIn\",function(a){return a*a*((this._p1+1)*a-this._p1)}),n(\"BackInOut\",function(a){return(a*=2)<1?.5*a*a*((this._p2+1)*a-this._p2):.5*((a-=2)*a*((this._p2+1)*a+this._p2)+2)})),p=i(\"easing.SlowMo\",function(a,b,c){b=b||0===b?b:.7,null==a?a=.7:a>1&&(a=1),this._p=1!==a?b:0,this._p1=(1-a)/2,this._p2=a,this._p3=this._p1+this._p2,this._calcEnd=c===!0},!0),q=p.prototype=new a;return q.constructor=p,q.getRatio=function(a){var b=a+(.5-a)*this._p;return a<this._p1?this._calcEnd?1-(a=1-a/this._p1)*a:b-(a=1-a/this._p1)*a*a*a*b:a>this._p3?this._calcEnd?1-(a=(a-this._p3)/this._p1)*a:b+(a-b)*(a=(a-this._p3)/this._p1)*a*a*a:this._calcEnd?1:b},p.ease=new p(.7,.7),q.config=p.config=function(a,b,c){return new p(a,b,c)},b=i(\"easing.SteppedEase\",function(a){a=a||1,this._p1=1/a,this._p2=a+1},!0),q=b.prototype=new a,q.constructor=b,q.getRatio=function(a){return 0>a?a=0:a>=1&&(a=.999999999),(this._p2*a>>0)*this._p1},q.config=b.config=function(a){return new b(a)},c=i(\"easing.RoughEase\",function(b){b=b||{};for(var c,d,e,f,g,h,i=b.taper||\"none\",j=[],k=0,l=0|(b.points||20),n=l,o=b.randomize!==!1,p=b.clamp===!0,q=b.template instanceof a?b.template:null,r=\"number\"==typeof b.strength?.4*b.strength:.4;--n>-1;)c=o?Math.random():1/l*n,d=q?q.getRatio(c):c,\"none\"===i?e=r:\"out\"===i?(f=1-c,e=f*f*r):\"in\"===i?e=c*c*r:.5>c?(f=2*c,e=f*f*.5*r):(f=2*(1-c),e=f*f*.5*r),o?d+=Math.random()*e-.5*e:n%2?d+=.5*e:d-=.5*e,p&&(d>1?d=1:0>d&&(d=0)),j[k++]={x:c,y:d};for(j.sort(function(a,b){return a.x-b.x}),h=new m(1,1,null),n=l;--n>-1;)g=j[n],h=new m(g.x,g.y,h);this._prev=new m(0,0,0!==h.t?h:h.next)},!0),q=c.prototype=new a,q.constructor=c,q.getRatio=function(a){var b=this._prev;if(a>b.t){for(;b.next&&a>=b.t;)b=b.next;b=b.prev}else for(;b.prev&&a<=b.t;)b=b.prev;return this._prev=b,b.v+(a-b.t)/b.gap*b.c},q.config=function(a){return new c(a)},c.ease=new c,l(\"Bounce\",j(\"BounceOut\",function(a){return 1/2.75>a?7.5625*a*a:2/2.75>a?7.5625*(a-=1.5/2.75)*a+.75:2.5/2.75>a?7.5625*(a-=2.25/2.75)*a+.9375:7.5625*(a-=2.625/2.75)*a+.984375}),j(\"BounceIn\",function(a){return(a=1-a)<1/2.75?1-7.5625*a*a:2/2.75>a?1-(7.5625*(a-=1.5/2.75)*a+.75):2.5/2.75>a?1-(7.5625*(a-=2.25/2.75)*a+.9375):1-(7.5625*(a-=2.625/2.75)*a+.984375)}),j(\"BounceInOut\",function(a){var b=.5>a;return a=b?1-2*a:2*a-1,a=1/2.75>a?7.5625*a*a:2/2.75>a?7.5625*(a-=1.5/2.75)*a+.75:2.5/2.75>a?7.5625*(a-=2.25/2.75)*a+.9375:7.5625*(a-=2.625/2.75)*a+.984375,b?.5*(1-a):.5*a+.5})),l(\"Circ\",j(\"CircOut\",function(a){return Math.sqrt(1-(a-=1)*a)}),j(\"CircIn\",function(a){return-(Math.sqrt(1-a*a)-1)}),j(\"CircInOut\",function(a){return(a*=2)<1?-.5*(Math.sqrt(1-a*a)-1):.5*(Math.sqrt(1-(a-=2)*a)+1)})),d=function(b,c,d){var e=i(\"easing.\"+b,function(a,b){this._p1=a>=1?a:1,this._p2=(b||d)/(1>a?a:1),this._p3=this._p2/g*(Math.asin(1/this._p1)||0),this._p2=g/this._p2},!0),f=e.prototype=new a;return f.constructor=e,f.getRatio=c,f.config=function(a,b){return new e(a,b)},e},l(\"Elastic\",d(\"ElasticOut\",function(a){return this._p1*Math.pow(2,-10*a)*Math.sin((a-this._p3)*this._p2)+1},.3),d(\"ElasticIn\",function(a){return-(this._p1*Math.pow(2,10*(a-=1))*Math.sin((a-this._p3)*this._p2))},.3),d(\"ElasticInOut\",function(a){return(a*=2)<1?-.5*(this._p1*Math.pow(2,10*(a-=1))*Math.sin((a-this._p3)*this._p2)):this._p1*Math.pow(2,-10*(a-=1))*Math.sin((a-this._p3)*this._p2)*.5+1},.45)),l(\"Expo\",j(\"ExpoOut\",function(a){return 1-Math.pow(2,-10*a)}),j(\"ExpoIn\",function(a){return Math.pow(2,10*(a-1))-.001}),j(\"ExpoInOut\",function(a){return(a*=2)<1?.5*Math.pow(2,10*(a-1)):.5*(2-Math.pow(2,-10*(a-1)))})),l(\"Sine\",j(\"SineOut\",function(a){return Math.sin(a*h)}),j(\"SineIn\",function(a){return-Math.cos(a*h)+1}),j(\"SineInOut\",function(a){return-.5*(Math.cos(Math.PI*a)-1)})),i(\"easing.EaseLookup\",{find:function(b){return a.map[b]}},!0),k(e.SlowMo,\"SlowMo\",\"ease,\"),k(c,\"RoughEase\",\"ease,\"),k(b,\"SteppedEase\",\"ease,\"),o},!0)}),_gsScope._gsDefine&&_gsScope._gsQueue.pop()(),function(a,b){\"use strict\";var c=a.GreenSockGlobals=a.GreenSockGlobals||a;if(!c.TweenLite){var d,e,f,g,h,i=function(a){var b,d=a.split(\".\"),e=c;for(b=0;b<d.length;b++)e[d[b]]=e=e[d[b]]||{};return e},j=i(\"com.greensock\"),k=1e-10,l=function(a){var b,c=[],d=a.length;for(b=0;b!==d;c.push(a[b++]));return c},m=function(){},n=function(){var a=Object.prototype.toString,b=a.call([]);return function(c){return null!=c&&(c instanceof Array||\"object\"==typeof c&&!!c.push&&a.call(c)===b)}}(),o={},p=function(d,e,f,g){this.sc=o[d]?o[d].sc:[],o[d]=this,this.gsClass=null,this.func=f;var h=[];this.check=function(j){for(var k,l,m,n,q,r=e.length,s=r;--r>-1;)(k=o[e[r]]||new p(e[r],[])).gsClass?(h[r]=k.gsClass,s--):j&&k.sc.push(this);if(0===s&&f)for(l=(\"com.greensock.\"+d).split(\".\"),m=l.pop(),n=i(l.join(\".\"))[m]=this.gsClass=f.apply(f,h),g&&(c[m]=n,q=\"undefined\"!=typeof module&&module.exports,!q&&\"function\"==typeof define&&define.amd?define((a.GreenSockAMDPath?a.GreenSockAMDPath+\"/\":\"\")+d.split(\".\").pop(),[],function(){return n}):d===b&&q&&(module.exports=n)),r=0;r<this.sc.length;r++)this.sc[r].check()},this.check(!0)},q=a._gsDefine=function(a,b,c,d){return new p(a,b,c,d)},r=j._class=function(a,b,c){return b=b||function(){},q(a,[],function(){return b},c),b};q.globals=c;var s=[0,0,1,1],t=[],u=r(\"easing.Ease\",function(a,b,c,d){this._func=a,this._type=c||0,this._power=d||0,this._params=b?s.concat(b):s},!0),v=u.map={},w=u.register=function(a,b,c,d){for(var e,f,g,h,i=b.split(\",\"),k=i.length,l=(c||\"easeIn,easeOut,easeInOut\").split(\",\");--k>-1;)for(f=i[k],e=d?r(\"easing.\"+f,null,!0):j.easing[f]||{},g=l.length;--g>-1;)h=l[g],v[f+\".\"+h]=v[h+f]=e[h]=a.getRatio?a:a[h]||new a};for(f=u.prototype,f._calcEnd=!1,f.getRatio=function(a){if(this._func)return this._params[0]=a,this._func.apply(null,this._params);var b=this._type,c=this._power,d=1===b?1-a:2===b?a:.5>a?2*a:2*(1-a);return 1===c?d*=d:2===c?d*=d*d:3===c?d*=d*d*d:4===c&&(d*=d*d*d*d),1===b?1-d:2===b?d:.5>a?d/2:1-d/2},d=[\"Linear\",\"Quad\",\"Cubic\",\"Quart\",\"Quint,Strong\"],e=d.length;--e>-1;)f=d[e]+\",Power\"+e,w(new u(null,null,1,e),f,\"easeOut\",!0),w(new u(null,null,2,e),f,\"easeIn\"+(0===e?\",easeNone\":\"\")),w(new u(null,null,3,e),f,\"easeInOut\");v.linear=j.easing.Linear.easeIn,v.swing=j.easing.Quad.easeInOut;var x=r(\"events.EventDispatcher\",function(a){this._listeners={},this._eventTarget=a||this});f=x.prototype,f.addEventListener=function(a,b,c,d,e){e=e||0;var f,i,j=this._listeners[a],k=0;for(null==j&&(this._listeners[a]=j=[]),i=j.length;--i>-1;)f=j[i],f.c===b&&f.s===c?j.splice(i,1):0===k&&f.pr<e&&(k=i+1);j.splice(k,0,{c:b,s:c,up:d,pr:e}),this!==g||h||g.wake()},f.removeEventListener=function(a,b){var c,d=this._listeners[a];if(d)for(c=d.length;--c>-1;)if(d[c].c===b)return void d.splice(c,1)},f.dispatchEvent=function(a){var b,c,d,e=this._listeners[a];if(e)for(b=e.length,c=this._eventTarget;--b>-1;)d=e[b],d&&(d.up?d.c.call(d.s||c,{type:a,target:c}):d.c.call(d.s||c))};var y=a.requestAnimationFrame,z=a.cancelAnimationFrame,A=Date.now||function(){return(new Date).getTime()},B=A();for(d=[\"ms\",\"moz\",\"webkit\",\"o\"],e=d.length;--e>-1&&!y;)y=a[d[e]+\"RequestAnimationFrame\"],z=a[d[e]+\"CancelAnimationFrame\"]||a[d[e]+\"CancelRequestAnimationFrame\"];r(\"Ticker\",function(a,b){var c,d,e,f,i,j=this,l=A(),n=b!==!1&&y?\"auto\":!1,o=500,p=33,q=\"tick\",r=function(a){var b,g,h=A()-B;h>o&&(l+=h-p),B+=h,j.time=(B-l)/1e3,b=j.time-i,(!c||b>0||a===!0)&&(j.frame++,i+=b+(b>=f?.004:f-b),g=!0),a!==!0&&(e=d(r)),g&&j.dispatchEvent(q)};x.call(j),j.time=j.frame=0,j.tick=function(){r(!0)},j.lagSmoothing=function(a,b){o=a||1/k,p=Math.min(b,o,0)},j.sleep=function(){null!=e&&(n&&z?z(e):clearTimeout(e),d=m,e=null,j===g&&(h=!1))},j.wake=function(a){null!==e?j.sleep():a?l+=-B+(B=A()):j.frame>10&&(B=A()-o+5),d=0===c?m:n&&y?y:function(a){return setTimeout(a,1e3*(i-j.time)+1|0)},j===g&&(h=!0),r(2)},j.fps=function(a){return arguments.length?(c=a,f=1/(c||60),i=this.time+f,void j.wake()):c},j.useRAF=function(a){return arguments.length?(j.sleep(),n=a,void j.fps(c)):n},j.fps(a),setTimeout(function(){\"auto\"===n&&j.frame<5&&\"hidden\"!==document.visibilityState&&j.useRAF(!1)},1500)}),f=j.Ticker.prototype=new j.events.EventDispatcher,f.constructor=j.Ticker;var C=r(\"core.Animation\",function(a,b){if(this.vars=b=b||{},this._duration=this._totalDuration=a||0,this._delay=Number(b.delay)||0,this._timeScale=1,this._active=b.immediateRender===!0,this.data=b.data,this._reversed=b.reversed===!0,V){h||g.wake();var c=this.vars.useFrames?U:V;c.add(this,c._time),this.vars.paused&&this.paused(!0)}});g=C.ticker=new j.Ticker,f=C.prototype,f._dirty=f._gc=f._initted=f._paused=!1,f._totalTime=f._time=0,f._rawPrevTime=-1,f._next=f._last=f._onUpdate=f._timeline=f.timeline=null,f._paused=!1;var D=function(){h&&A()-B>2e3&&g.wake(),setTimeout(D,2e3)};D(),f.play=function(a,b){return null!=a&&this.seek(a,b),this.reversed(!1).paused(!1)},f.pause=function(a,b){return null!=a&&this.seek(a,b),this.paused(!0)},f.resume=function(a,b){return null!=a&&this.seek(a,b),this.paused(!1)},f.seek=function(a,b){return this.totalTime(Number(a),b!==!1)},f.restart=function(a,b){return this.reversed(!1).paused(!1).totalTime(a?-this._delay:0,b!==!1,!0)},f.reverse=function(a,b){return null!=a&&this.seek(a||this.totalDuration(),b),this.reversed(!0).paused(!1)},f.render=function(a,b,c){},f.invalidate=function(){return this._time=this._totalTime=0,this._initted=this._gc=!1,this._rawPrevTime=-1,(this._gc||!this.timeline)&&this._enabled(!0),this},f.isActive=function(){var a,b=this._timeline,c=this._startTime;return!b||!this._gc&&!this._paused&&b.isActive()&&(a=b.rawTime())>=c&&a<c+this.totalDuration()/this._timeScale},f._enabled=function(a,b){return h||g.wake(),this._gc=!a,this._active=this.isActive(),b!==!0&&(a&&!this.timeline?this._timeline.add(this,this._startTime-this._delay):!a&&this.timeline&&this._timeline._remove(this,!0)),!1},f._kill=function(a,b){return this._enabled(!1,!1)},f.kill=function(a,b){return this._kill(a,b),this},f._uncache=function(a){for(var b=a?this:this.timeline;b;)b._dirty=!0,b=b.timeline;return this},f._swapSelfInParams=function(a){for(var b=a.length,c=a.concat();--b>-1;)\"{self}\"===a[b]&&(c[b]=this);return c},f._callback=function(a){var b=this.vars;b[a].apply(b[a+\"Scope\"]||b.callbackScope||this,b[a+\"Params\"]||t)},f.eventCallback=function(a,b,c,d){if(\"on\"===(a||\"\").substr(0,2)){var e=this.vars;if(1===arguments.length)return e[a];null==b?delete e[a]:(e[a]=b,e[a+\"Params\"]=n(c)&&-1!==c.join(\"\").indexOf(\"{self}\")?this._swapSelfInParams(c):c,e[a+\"Scope\"]=d),\"onUpdate\"===a&&(this._onUpdate=b)}return this},f.delay=function(a){return arguments.length?(this._timeline.smoothChildTiming&&this.startTime(this._startTime+a-this._delay),this._delay=a,this):this._delay},f.duration=function(a){return arguments.length?(this._duration=this._totalDuration=a,this._uncache(!0),this._timeline.smoothChildTiming&&this._time>0&&this._time<this._duration&&0!==a&&this.totalTime(this._totalTime*(a/this._duration),!0),this):(this._dirty=!1,this._duration)},f.totalDuration=function(a){return this._dirty=!1,arguments.length?this.duration(a):this._totalDuration},f.time=function(a,b){return arguments.length?(this._dirty&&this.totalDuration(),this.totalTime(a>this._duration?this._duration:a,b)):this._time},f.totalTime=function(a,b,c){if(h||g.wake(),!arguments.length)return this._totalTime;if(this._timeline){if(0>a&&!c&&(a+=this.totalDuration()),this._timeline.smoothChildTiming){this._dirty&&this.totalDuration();var d=this._totalDuration,e=this._timeline;if(a>d&&!c&&(a=d),this._startTime=(this._paused?this._pauseTime:e._time)-(this._reversed?d-a:a)/this._timeScale,e._dirty||this._uncache(!1),e._timeline)for(;e._timeline;)e._timeline._time!==(e._startTime+e._totalTime)/e._timeScale&&e.totalTime(e._totalTime,!0),e=e._timeline}this._gc&&this._enabled(!0,!1),(this._totalTime!==a||0===this._duration)&&(I.length&&X(),this.render(a,b,!1),I.length&&X())}return this},f.progress=f.totalProgress=function(a,b){var c=this.duration();return arguments.length?this.totalTime(c*a,b):c?this._time/c:this.ratio},f.startTime=function(a){return arguments.length?(a!==this._startTime&&(this._startTime=a,this.timeline&&this.timeline._sortChildren&&this.timeline.add(this,a-this._delay)),this):this._startTime},f.endTime=function(a){return this._startTime+(0!=a?this.totalDuration():this.duration())/this._timeScale},f.timeScale=function(a){if(!arguments.length)return this._timeScale;if(a=a||k,this._timeline&&this._timeline.smoothChildTiming){var b=this._pauseTime,c=b||0===b?b:this._timeline.totalTime();this._startTime=c-(c-this._startTime)*this._timeScale/a}return this._timeScale=a,this._uncache(!1)},f.reversed=function(a){return arguments.length?(a!=this._reversed&&(this._reversed=a,this.totalTime(this._timeline&&!this._timeline.smoothChildTiming?this.totalDuration()-this._totalTime:this._totalTime,!0)),this):this._reversed},f.paused=function(a){if(!arguments.length)return this._paused;var b,c,d=this._timeline;return a!=this._paused&&d&&(h||a||g.wake(),b=d.rawTime(),c=b-this._pauseTime,!a&&d.smoothChildTiming&&(this._startTime+=c,this._uncache(!1)),this._pauseTime=a?b:null,this._paused=a,this._active=this.isActive(),!a&&0!==c&&this._initted&&this.duration()&&(b=d.smoothChildTiming?this._totalTime:(b-this._startTime)/this._timeScale,this.render(b,b===this._totalTime,!0))),this._gc&&!a&&this._enabled(!0,!1),this};var E=r(\"core.SimpleTimeline\",function(a){C.call(this,0,a),this.autoRemoveChildren=this.smoothChildTiming=!0});f=E.prototype=new C,f.constructor=E,f.kill()._gc=!1,f._first=f._last=f._recent=null,f._sortChildren=!1,f.add=f.insert=function(a,b,c,d){var e,f;if(a._startTime=Number(b||0)+a._delay,a._paused&&this!==a._timeline&&(a._pauseTime=a._startTime+(this.rawTime()-a._startTime)/a._timeScale),a.timeline&&a.timeline._remove(a,!0),a.timeline=a._timeline=this,a._gc&&a._enabled(!0,!0),e=this._last,this._sortChildren)for(f=a._startTime;e&&e._startTime>f;)e=e._prev;return e?(a._next=e._next,e._next=a):(a._next=this._first,this._first=a),a._next?a._next._prev=a:this._last=a,a._prev=e,this._recent=a,this._timeline&&this._uncache(!0),this},f._remove=function(a,b){return a.timeline===this&&(b||a._enabled(!1,!0),a._prev?a._prev._next=a._next:this._first===a&&(this._first=a._next),a._next?a._next._prev=a._prev:this._last===a&&(this._last=a._prev),a._next=a._prev=a.timeline=null,a===this._recent&&(this._recent=this._last),this._timeline&&this._uncache(!0)),this},f.render=function(a,b,c){var d,e=this._first;for(this._totalTime=this._time=this._rawPrevTime=a;e;)d=e._next,(e._active||a>=e._startTime&&!e._paused)&&(e._reversed?e.render((e._dirty?e.totalDuration():e._totalDuration)-(a-e._startTime)*e._timeScale,b,c):e.render((a-e._startTime)*e._timeScale,b,c)),e=d},f.rawTime=function(){return h||g.wake(),this._totalTime};var F=r(\"TweenLite\",function(b,c,d){if(C.call(this,c,d),this.render=F.prototype.render,null==b)throw\"Cannot tween a null target.\";this.target=b=\"string\"!=typeof b?b:F.selector(b)||b;var e,f,g,h=b.jquery||b.length&&b!==a&&b[0]&&(b[0]===a||b[0].nodeType&&b[0].style&&!b.nodeType),i=this.vars.overwrite;if(this._overwrite=i=null==i?T[F.defaultOverwrite]:\"number\"==typeof i?i>>0:T[i],(h||b instanceof Array||b.push&&n(b))&&\"number\"!=typeof b[0])for(this._targets=g=l(b),this._propLookup=[],this._siblings=[],e=0;e<g.length;e++)f=g[e],f?\"string\"!=typeof f?f.length&&f!==a&&f[0]&&(f[0]===a||f[0].nodeType&&f[0].style&&!f.nodeType)?(g.splice(e--,1),this._targets=g=g.concat(l(f))):(this._siblings[e]=Y(f,this,!1),1===i&&this._siblings[e].length>1&&$(f,this,null,1,this._siblings[e])):(f=g[e--]=F.selector(f),\"string\"==typeof f&&g.splice(e+1,1)):g.splice(e--,1);else this._propLookup={},this._siblings=Y(b,this,!1),1===i&&this._siblings.length>1&&$(b,this,null,1,this._siblings);(this.vars.immediateRender||0===c&&0===this._delay&&this.vars.immediateRender!==!1)&&(this._time=-k,this.render(-this._delay))},!0),G=function(b){return b&&b.length&&b!==a&&b[0]&&(b[0]===a||b[0].nodeType&&b[0].style&&!b.nodeType)},H=function(a,b){var c,d={};for(c in a)S[c]||c in b&&\"transform\"!==c&&\"x\"!==c&&\"y\"!==c&&\"width\"!==c&&\"height\"!==c&&\"className\"!==c&&\"border\"!==c||!(!P[c]||P[c]&&P[c]._autoCSS)||(d[c]=a[c],delete a[c]);a.css=d};f=F.prototype=new C,f.constructor=F,f.kill()._gc=!1,f.ratio=0,f._firstPT=f._targets=f._overwrittenProps=f._startAt=null,f._notifyPluginsOfEnabled=f._lazy=!1,F.version=\"1.18.2\",F.defaultEase=f._ease=new u(null,null,1,1),F.defaultOverwrite=\"auto\",F.ticker=g,F.autoSleep=120,F.lagSmoothing=function(a,b){g.lagSmoothing(a,b)},F.selector=a.$||a.jQuery||function(b){var c=a.$||a.jQuery;return c?(F.selector=c,c(b)):\"undefined\"==typeof document?b:document.querySelectorAll?document.querySelectorAll(b):document.getElementById(\"#\"===b.charAt(0)?b.substr(1):b)};var I=[],J={},K=/(?:(-|-=|\\+=)?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/gi,L=function(a){for(var b,c=this._firstPT,d=1e-6;c;)b=c.blob?a?this.join(\"\"):this.start:c.c*a+c.s,c.r?b=Math.round(b):d>b&&b>-d&&(b=0),c.f?c.fp?c.t[c.p](c.fp,b):c.t[c.p](b):c.t[c.p]=b,c=c._next},M=function(a,b,c,d){var e,f,g,h,i,j,k,l=[a,b],m=0,n=\"\",o=0;for(l.start=a,c&&(c(l),a=l[0],b=l[1]),l.length=0,e=a.match(K)||[],f=b.match(K)||[],d&&(d._next=null,d.blob=1,l._firstPT=d),i=f.length,h=0;i>h;h++)k=f[h],j=b.substr(m,b.indexOf(k,m)-m),n+=j||!h?j:\",\",m+=j.length,o?o=(o+1)%5:\"rgba(\"===j.substr(-5)&&(o=1),k===e[h]||e.length<=h?n+=k:(n&&(l.push(n),n=\"\"),g=parseFloat(e[h]),l.push(g),l._firstPT={_next:l._firstPT,t:l,p:l.length-1,s:g,c:(\"=\"===k.charAt(1)?parseInt(k.charAt(0)+\"1\",10)*parseFloat(k.substr(2)):parseFloat(k)-g)||0,f:0,r:o&&4>o}),m+=k.length;return n+=b.substr(m),n&&l.push(n),l.setRatio=L,l},N=function(a,b,c,d,e,f,g,h){var i,j,k=\"get\"===c?a[b]:c,l=typeof a[b],m=\"string\"==typeof d&&\"=\"===d.charAt(1),n={t:a,p:b,s:k,f:\"function\"===l,pg:0,n:e||b,r:f,pr:0,c:m?parseInt(d.charAt(0)+\"1\",10)*parseFloat(d.substr(2)):parseFloat(d)-k||0};return\"number\"!==l&&(\"function\"===l&&\"get\"===c&&(j=b.indexOf(\"set\")||\"function\"!=typeof a[\"get\"+b.substr(3)]?b:\"get\"+b.substr(3),n.s=k=g?a[j](g):a[j]()),\"string\"==typeof k&&(g||isNaN(k))?(n.fp=g,i=M(k,d,h||F.defaultStringFilter,n),n={t:i,p:\"setRatio\",s:0,c:1,f:2,pg:0,n:e||b,pr:0}):m||(n.s=parseFloat(k),n.c=parseFloat(d)-n.s||0)),n.c?((n._next=this._firstPT)&&(n._next._prev=n),this._firstPT=n,n):void 0},O=F._internals={isArray:n,isSelector:G,lazyTweens:I,blobDif:M},P=F._plugins={},Q=O.tweenLookup={},R=0,S=O.reservedProps={ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1,lazy:1,onOverwrite:1,callbackScope:1,stringFilter:1},T={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,\"true\":1,\"false\":0},U=C._rootFramesTimeline=new E,V=C._rootTimeline=new E,W=30,X=O.lazyRender=function(){\nvar a,b=I.length;for(J={};--b>-1;)a=I[b],a&&a._lazy!==!1&&(a.render(a._lazy[0],a._lazy[1],!0),a._lazy=!1);I.length=0};V._startTime=g.time,U._startTime=g.frame,V._active=U._active=!0,setTimeout(X,1),C._updateRoot=F.render=function(){var a,b,c;if(I.length&&X(),V.render((g.time-V._startTime)*V._timeScale,!1,!1),U.render((g.frame-U._startTime)*U._timeScale,!1,!1),I.length&&X(),g.frame>=W){W=g.frame+(parseInt(F.autoSleep,10)||120);for(c in Q){for(b=Q[c].tweens,a=b.length;--a>-1;)b[a]._gc&&b.splice(a,1);0===b.length&&delete Q[c]}if(c=V._first,(!c||c._paused)&&F.autoSleep&&!U._first&&1===g._listeners.tick.length){for(;c&&c._paused;)c=c._next;c||g.sleep()}}},g.addEventListener(\"tick\",C._updateRoot);var Y=function(a,b,c){var d,e,f=a._gsTweenID;if(Q[f||(a._gsTweenID=f=\"t\"+R++)]||(Q[f]={target:a,tweens:[]}),b&&(d=Q[f].tweens,d[e=d.length]=b,c))for(;--e>-1;)d[e]===b&&d.splice(e,1);return Q[f].tweens},Z=function(a,b,c,d){var e,f,g=a.vars.onOverwrite;return g&&(e=g(a,b,c,d)),g=F.onOverwrite,g&&(f=g(a,b,c,d)),e!==!1&&f!==!1},$=function(a,b,c,d,e){var f,g,h,i;if(1===d||d>=4){for(i=e.length,f=0;i>f;f++)if((h=e[f])!==b)h._gc||h._kill(null,a,b)&&(g=!0);else if(5===d)break;return g}var j,l=b._startTime+k,m=[],n=0,o=0===b._duration;for(f=e.length;--f>-1;)(h=e[f])===b||h._gc||h._paused||(h._timeline!==b._timeline?(j=j||_(b,0,o),0===_(h,j,o)&&(m[n++]=h)):h._startTime<=l&&h._startTime+h.totalDuration()/h._timeScale>l&&((o||!h._initted)&&l-h._startTime<=2e-10||(m[n++]=h)));for(f=n;--f>-1;)if(h=m[f],2===d&&h._kill(c,a,b)&&(g=!0),2!==d||!h._firstPT&&h._initted){if(2!==d&&!Z(h,b))continue;h._enabled(!1,!1)&&(g=!0)}return g},_=function(a,b,c){for(var d=a._timeline,e=d._timeScale,f=a._startTime;d._timeline;){if(f+=d._startTime,e*=d._timeScale,d._paused)return-100;d=d._timeline}return f/=e,f>b?f-b:c&&f===b||!a._initted&&2*k>f-b?k:(f+=a.totalDuration()/a._timeScale/e)>b+k?0:f-b-k};f._init=function(){var a,b,c,d,e,f=this.vars,g=this._overwrittenProps,h=this._duration,i=!!f.immediateRender,j=f.ease;if(f.startAt){this._startAt&&(this._startAt.render(-1,!0),this._startAt.kill()),e={};for(d in f.startAt)e[d]=f.startAt[d];if(e.overwrite=!1,e.immediateRender=!0,e.lazy=i&&f.lazy!==!1,e.startAt=e.delay=null,this._startAt=F.to(this.target,0,e),i)if(this._time>0)this._startAt=null;else if(0!==h)return}else if(f.runBackwards&&0!==h)if(this._startAt)this._startAt.render(-1,!0),this._startAt.kill(),this._startAt=null;else{0!==this._time&&(i=!1),c={};for(d in f)S[d]&&\"autoCSS\"!==d||(c[d]=f[d]);if(c.overwrite=0,c.data=\"isFromStart\",c.lazy=i&&f.lazy!==!1,c.immediateRender=i,this._startAt=F.to(this.target,0,c),i){if(0===this._time)return}else this._startAt._init(),this._startAt._enabled(!1),this.vars.immediateRender&&(this._startAt=null)}if(this._ease=j=j?j instanceof u?j:\"function\"==typeof j?new u(j,f.easeParams):v[j]||F.defaultEase:F.defaultEase,f.easeParams instanceof Array&&j.config&&(this._ease=j.config.apply(j,f.easeParams)),this._easeType=this._ease._type,this._easePower=this._ease._power,this._firstPT=null,this._targets)for(a=this._targets.length;--a>-1;)this._initProps(this._targets[a],this._propLookup[a]={},this._siblings[a],g?g[a]:null)&&(b=!0);else b=this._initProps(this.target,this._propLookup,this._siblings,g);if(b&&F._onPluginEvent(\"_onInitAllProps\",this),g&&(this._firstPT||\"function\"!=typeof this.target&&this._enabled(!1,!1)),f.runBackwards)for(c=this._firstPT;c;)c.s+=c.c,c.c=-c.c,c=c._next;this._onUpdate=f.onUpdate,this._initted=!0},f._initProps=function(b,c,d,e){var f,g,h,i,j,k;if(null==b)return!1;J[b._gsTweenID]&&X(),this.vars.css||b.style&&b!==a&&b.nodeType&&P.css&&this.vars.autoCSS!==!1&&H(this.vars,b);for(f in this.vars)if(k=this.vars[f],S[f])k&&(k instanceof Array||k.push&&n(k))&&-1!==k.join(\"\").indexOf(\"{self}\")&&(this.vars[f]=k=this._swapSelfInParams(k,this));else if(P[f]&&(i=new P[f])._onInitTween(b,this.vars[f],this)){for(this._firstPT=j={_next:this._firstPT,t:i,p:\"setRatio\",s:0,c:1,f:1,n:f,pg:1,pr:i._priority},g=i._overwriteProps.length;--g>-1;)c[i._overwriteProps[g]]=this._firstPT;(i._priority||i._onInitAllProps)&&(h=!0),(i._onDisable||i._onEnable)&&(this._notifyPluginsOfEnabled=!0),j._next&&(j._next._prev=j)}else c[f]=N.call(this,b,f,\"get\",k,f,0,null,this.vars.stringFilter);return e&&this._kill(e,b)?this._initProps(b,c,d,e):this._overwrite>1&&this._firstPT&&d.length>1&&$(b,this,c,this._overwrite,d)?(this._kill(c,b),this._initProps(b,c,d,e)):(this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration)&&(J[b._gsTweenID]=!0),h)},f.render=function(a,b,c){var d,e,f,g,h=this._time,i=this._duration,j=this._rawPrevTime;if(a>=i-1e-7)this._totalTime=this._time=i,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1,this._reversed||(d=!0,e=\"onComplete\",c=c||this._timeline.autoRemoveChildren),0===i&&(this._initted||!this.vars.lazy||c)&&(this._startTime===this._timeline._duration&&(a=0),(0>j||0>=a&&a>=-1e-7||j===k&&\"isPause\"!==this.data)&&j!==a&&(c=!0,j>k&&(e=\"onReverseComplete\")),this._rawPrevTime=g=!b||a||j===a?a:k);else if(1e-7>a)this._totalTime=this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==h||0===i&&j>0)&&(e=\"onReverseComplete\",d=this._reversed),0>a&&(this._active=!1,0===i&&(this._initted||!this.vars.lazy||c)&&(j>=0&&(j!==k||\"isPause\"!==this.data)&&(c=!0),this._rawPrevTime=g=!b||a||j===a?a:k)),this._initted||(c=!0);else if(this._totalTime=this._time=a,this._easeType){var l=a/i,m=this._easeType,n=this._easePower;(1===m||3===m&&l>=.5)&&(l=1-l),3===m&&(l*=2),1===n?l*=l:2===n?l*=l*l:3===n?l*=l*l*l:4===n&&(l*=l*l*l*l),1===m?this.ratio=1-l:2===m?this.ratio=l:.5>a/i?this.ratio=l/2:this.ratio=1-l/2}else this.ratio=this._ease.getRatio(a/i);if(this._time!==h||c){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!c&&this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration))return this._time=this._totalTime=h,this._rawPrevTime=j,I.push(this),void(this._lazy=[a,b]);this._time&&!d?this.ratio=this._ease.getRatio(this._time/i):d&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(this._lazy!==!1&&(this._lazy=!1),this._active||!this._paused&&this._time!==h&&a>=0&&(this._active=!0),0===h&&(this._startAt&&(a>=0?this._startAt.render(a,b,c):e||(e=\"_dummyGS\")),this.vars.onStart&&(0!==this._time||0===i)&&(b||this._callback(\"onStart\"))),f=this._firstPT;f;)f.f?f.t[f.p](f.c*this.ratio+f.s):f.t[f.p]=f.c*this.ratio+f.s,f=f._next;this._onUpdate&&(0>a&&this._startAt&&a!==-1e-4&&this._startAt.render(a,b,c),b||(this._time!==h||d)&&this._callback(\"onUpdate\")),e&&(!this._gc||c)&&(0>a&&this._startAt&&!this._onUpdate&&a!==-1e-4&&this._startAt.render(a,b,c),d&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!b&&this.vars[e]&&this._callback(e),0===i&&this._rawPrevTime===k&&g!==k&&(this._rawPrevTime=0))}},f._kill=function(a,b,c){if(\"all\"===a&&(a=null),null==a&&(null==b||b===this.target))return this._lazy=!1,this._enabled(!1,!1);b=\"string\"!=typeof b?b||this._targets||this.target:F.selector(b)||b;var d,e,f,g,h,i,j,k,l,m=c&&this._time&&c._startTime===this._startTime&&this._timeline===c._timeline;if((n(b)||G(b))&&\"number\"!=typeof b[0])for(d=b.length;--d>-1;)this._kill(a,b[d],c)&&(i=!0);else{if(this._targets){for(d=this._targets.length;--d>-1;)if(b===this._targets[d]){h=this._propLookup[d]||{},this._overwrittenProps=this._overwrittenProps||[],e=this._overwrittenProps[d]=a?this._overwrittenProps[d]||{}:\"all\";break}}else{if(b!==this.target)return!1;h=this._propLookup,e=this._overwrittenProps=a?this._overwrittenProps||{}:\"all\"}if(h){if(j=a||h,k=a!==e&&\"all\"!==e&&a!==h&&(\"object\"!=typeof a||!a._tempKill),c&&(F.onOverwrite||this.vars.onOverwrite)){for(f in j)h[f]&&(l||(l=[]),l.push(f));if((l||!a)&&!Z(this,c,b,l))return!1}for(f in j)(g=h[f])&&(m&&(g.f?g.t[g.p](g.s):g.t[g.p]=g.s,i=!0),g.pg&&g.t._kill(j)&&(i=!0),g.pg&&0!==g.t._overwriteProps.length||(g._prev?g._prev._next=g._next:g===this._firstPT&&(this._firstPT=g._next),g._next&&(g._next._prev=g._prev),g._next=g._prev=null),delete h[f]),k&&(e[f]=1);!this._firstPT&&this._initted&&this._enabled(!1,!1)}}return i},f.invalidate=function(){return this._notifyPluginsOfEnabled&&F._onPluginEvent(\"_onDisable\",this),this._firstPT=this._overwrittenProps=this._startAt=this._onUpdate=null,this._notifyPluginsOfEnabled=this._active=this._lazy=!1,this._propLookup=this._targets?{}:[],C.prototype.invalidate.call(this),this.vars.immediateRender&&(this._time=-k,this.render(-this._delay)),this},f._enabled=function(a,b){if(h||g.wake(),a&&this._gc){var c,d=this._targets;if(d)for(c=d.length;--c>-1;)this._siblings[c]=Y(d[c],this,!0);else this._siblings=Y(this.target,this,!0)}return C.prototype._enabled.call(this,a,b),this._notifyPluginsOfEnabled&&this._firstPT?F._onPluginEvent(a?\"_onEnable\":\"_onDisable\",this):!1},F.to=function(a,b,c){return new F(a,b,c)},F.from=function(a,b,c){return c.runBackwards=!0,c.immediateRender=0!=c.immediateRender,new F(a,b,c)},F.fromTo=function(a,b,c,d){return d.startAt=c,d.immediateRender=0!=d.immediateRender&&0!=c.immediateRender,new F(a,b,d)},F.delayedCall=function(a,b,c,d,e){return new F(b,0,{delay:a,onComplete:b,onCompleteParams:c,callbackScope:d,onReverseComplete:b,onReverseCompleteParams:c,immediateRender:!1,lazy:!1,useFrames:e,overwrite:0})},F.set=function(a,b){return new F(a,0,b)},F.getTweensOf=function(a,b){if(null==a)return[];a=\"string\"!=typeof a?a:F.selector(a)||a;var c,d,e,f;if((n(a)||G(a))&&\"number\"!=typeof a[0]){for(c=a.length,d=[];--c>-1;)d=d.concat(F.getTweensOf(a[c],b));for(c=d.length;--c>-1;)for(f=d[c],e=c;--e>-1;)f===d[e]&&d.splice(c,1)}else for(d=Y(a).concat(),c=d.length;--c>-1;)(d[c]._gc||b&&!d[c].isActive())&&d.splice(c,1);return d},F.killTweensOf=F.killDelayedCallsTo=function(a,b,c){\"object\"==typeof b&&(c=b,b=!1);for(var d=F.getTweensOf(a,b),e=d.length;--e>-1;)d[e]._kill(c,a)};var aa=r(\"plugins.TweenPlugin\",function(a,b){this._overwriteProps=(a||\"\").split(\",\"),this._propName=this._overwriteProps[0],this._priority=b||0,this._super=aa.prototype},!0);if(f=aa.prototype,aa.version=\"1.18.0\",aa.API=2,f._firstPT=null,f._addTween=N,f.setRatio=L,f._kill=function(a){var b,c=this._overwriteProps,d=this._firstPT;if(null!=a[this._propName])this._overwriteProps=[];else for(b=c.length;--b>-1;)null!=a[c[b]]&&c.splice(b,1);for(;d;)null!=a[d.n]&&(d._next&&(d._next._prev=d._prev),d._prev?(d._prev._next=d._next,d._prev=null):this._firstPT===d&&(this._firstPT=d._next)),d=d._next;return!1},f._roundProps=function(a,b){for(var c=this._firstPT;c;)(a[this._propName]||null!=c.n&&a[c.n.split(this._propName+\"_\").join(\"\")])&&(c.r=b),c=c._next},F._onPluginEvent=function(a,b){var c,d,e,f,g,h=b._firstPT;if(\"_onInitAllProps\"===a){for(;h;){for(g=h._next,d=e;d&&d.pr>h.pr;)d=d._next;(h._prev=d?d._prev:f)?h._prev._next=h:e=h,(h._next=d)?d._prev=h:f=h,h=g}h=b._firstPT=e}for(;h;)h.pg&&\"function\"==typeof h.t[a]&&h.t[a]()&&(c=!0),h=h._next;return c},aa.activate=function(a){for(var b=a.length;--b>-1;)a[b].API===aa.API&&(P[(new a[b])._propName]=a[b]);return!0},q.plugin=function(a){if(!(a&&a.propName&&a.init&&a.API))throw\"illegal plugin definition.\";var b,c=a.propName,d=a.priority||0,e=a.overwriteProps,f={init:\"_onInitTween\",set:\"setRatio\",kill:\"_kill\",round:\"_roundProps\",initAll:\"_onInitAllProps\"},g=r(\"plugins.\"+c.charAt(0).toUpperCase()+c.substr(1)+\"Plugin\",function(){aa.call(this,c,d),this._overwriteProps=e||[]},a.global===!0),h=g.prototype=new aa(c);h.constructor=g,g.API=a.API;for(b in f)\"function\"==typeof a[b]&&(h[f[b]]=a[b]);return g.version=a.version,aa.activate([g]),g},d=a._gsQueue){for(e=0;e<d.length;e++)d[e]();for(f in o)o[f].func||a.console.log(\"GSAP encountered missing dependency: com.greensock.\"+f)}h=!1}}(\"undefined\"!=typeof module&&module.exports&&\"undefined\"!=typeof global?global:this||window,\"TweenMax\");\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}],16:[function(require,module,exports){\n// File:src/Three.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar THREE = { REVISION: '78' };\n\n//\n\nif ( typeof define === 'function' && define.amd ) {\n\n\tdefine( 'three', THREE );\n\n} else if ( 'undefined' !== typeof exports && 'undefined' !== typeof module ) {\n\n\tmodule.exports = THREE;\n\n}\n\n// Polyfills\n\nif ( Number.EPSILON === undefined ) {\n\n\tNumber.EPSILON = Math.pow( 2, - 52 );\n\n}\n\n//\n\nif ( Math.sign === undefined ) {\n\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\n\tMath.sign = function ( x ) {\n\n\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\n\t};\n\n}\n\nif ( Function.prototype.name === undefined ) {\n\n\t// Missing in IE9-11.\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n\tObject.defineProperty( Function.prototype, 'name', {\n\n\t\tget: function () {\n\n\t\t\treturn this.toString().match( /^\\s*function\\s*(\\S*)\\s*\\(/ )[ 1 ];\n\n\t\t}\n\n\t} );\n\n}\n\nif ( Object.assign === undefined ) {\n\n\t// Missing in IE.\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n\t( function () {\n\n\t\tObject.assign = function ( target ) {\n\n\t\t\t'use strict';\n\n\t\t\tif ( target === undefined || target === null ) {\n\n\t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\n\t\t\t}\n\n\t\t\tvar output = Object( target );\n\n\t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\n\t\t\t\tvar source = arguments[ index ];\n\n\t\t\t\tif ( source !== undefined && source !== null ) {\n\n\t\t\t\t\tfor ( var nextKey in source ) {\n\n\t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\n\t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn output;\n\n\t\t};\n\n\t} )();\n\n}\n\n//\n\nObject.assign( THREE, {\n\n\t// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent.button\n\n\tMOUSE: { LEFT: 0, MIDDLE: 1, RIGHT: 2 },\n\n\t// GL STATE CONSTANTS\n\n\tCullFaceNone: 0,\n\tCullFaceBack: 1,\n\tCullFaceFront: 2,\n\tCullFaceFrontBack: 3,\n\n\tFrontFaceDirectionCW: 0,\n\tFrontFaceDirectionCCW: 1,\n\n\t// SHADOWING TYPES\n\n\tBasicShadowMap: 0,\n\tPCFShadowMap: 1,\n\tPCFSoftShadowMap: 2,\n\n\t// MATERIAL CONSTANTS\n\n\t// side\n\n\tFrontSide: 0,\n\tBackSide: 1,\n\tDoubleSide: 2,\n\n\t// shading\n\n\tFlatShading: 1,\n\tSmoothShading: 2,\n\n\t// colors\n\n\tNoColors: 0,\n\tFaceColors: 1,\n\tVertexColors: 2,\n\n\t// blending modes\n\n\tNoBlending: 0,\n\tNormalBlending: 1,\n\tAdditiveBlending: 2,\n\tSubtractiveBlending: 3,\n\tMultiplyBlending: 4,\n\tCustomBlending: 5,\n\n\t// custom blending equations\n\t// (numbers start from 100 not to clash with other\n\t// mappings to OpenGL constants defined in Texture.js)\n\n\tAddEquation: 100,\n\tSubtractEquation: 101,\n\tReverseSubtractEquation: 102,\n\tMinEquation: 103,\n\tMaxEquation: 104,\n\n\t// custom blending destination factors\n\n\tZeroFactor: 200,\n\tOneFactor: 201,\n\tSrcColorFactor: 202,\n\tOneMinusSrcColorFactor: 203,\n\tSrcAlphaFactor: 204,\n\tOneMinusSrcAlphaFactor: 205,\n\tDstAlphaFactor: 206,\n\tOneMinusDstAlphaFactor: 207,\n\n\t// custom blending source factors\n\n\t//ZeroFactor: 200,\n\t//OneFactor: 201,\n\t//SrcAlphaFactor: 204,\n\t//OneMinusSrcAlphaFactor: 205,\n\t//DstAlphaFactor: 206,\n\t//OneMinusDstAlphaFactor: 207,\n\tDstColorFactor: 208,\n\tOneMinusDstColorFactor: 209,\n\tSrcAlphaSaturateFactor: 210,\n\n\t// depth modes\n\n\tNeverDepth: 0,\n\tAlwaysDepth: 1,\n\tLessDepth: 2,\n\tLessEqualDepth: 3,\n\tEqualDepth: 4,\n\tGreaterEqualDepth: 5,\n\tGreaterDepth: 6,\n\tNotEqualDepth: 7,\n\n\n\t// TEXTURE CONSTANTS\n\n\tMultiplyOperation: 0,\n\tMixOperation: 1,\n\tAddOperation: 2,\n\n\t// Tone Mapping modes\n\n\tNoToneMapping: 0, // do not do any tone mapping, not even exposure (required for special purpose passes.)\n\tLinearToneMapping: 1, // only apply exposure.\n\tReinhardToneMapping: 2,\n\tUncharted2ToneMapping: 3, // John Hable\n\tCineonToneMapping: 4, // optimized filmic operator by Jim Hejl and Richard Burgess-Dawson\n\n\t// Mapping modes\n\n\tUVMapping: 300,\n\n\tCubeReflectionMapping: 301,\n\tCubeRefractionMapping: 302,\n\n\tEquirectangularReflectionMapping: 303,\n\tEquirectangularRefractionMapping: 304,\n\n\tSphericalReflectionMapping: 305,\n\tCubeUVReflectionMapping: 306,\n\tCubeUVRefractionMapping: 307,\n\n\t// Wrapping modes\n\n\tRepeatWrapping: 1000,\n\tClampToEdgeWrapping: 1001,\n\tMirroredRepeatWrapping: 1002,\n\n\t// Filters\n\n\tNearestFilter: 1003,\n\tNearestMipMapNearestFilter: 1004,\n\tNearestMipMapLinearFilter: 1005,\n\tLinearFilter: 1006,\n\tLinearMipMapNearestFilter: 1007,\n\tLinearMipMapLinearFilter: 1008,\n\n\t// Data types\n\n\tUnsignedByteType: 1009,\n\tByteType: 1010,\n\tShortType: 1011,\n\tUnsignedShortType: 1012,\n\tIntType: 1013,\n\tUnsignedIntType: 1014,\n\tFloatType: 1015,\n\tHalfFloatType: 1025,\n\n\t// Pixel types\n\n\t//UnsignedByteType: 1009,\n\tUnsignedShort4444Type: 1016,\n\tUnsignedShort5551Type: 1017,\n\tUnsignedShort565Type: 1018,\n\n\t// Pixel formats\n\n\tAlphaFormat: 1019,\n\tRGBFormat: 1020,\n\tRGBAFormat: 1021,\n\tLuminanceFormat: 1022,\n\tLuminanceAlphaFormat: 1023,\n\t// THREE.RGBEFormat handled as THREE.RGBAFormat in shaders\n\tRGBEFormat: THREE.RGBAFormat, //1024;\n\tDepthFormat: 1026,\n\n\t// DDS / ST3C Compressed texture formats\n\n\tRGB_S3TC_DXT1_Format: 2001,\n\tRGBA_S3TC_DXT1_Format: 2002,\n\tRGBA_S3TC_DXT3_Format: 2003,\n\tRGBA_S3TC_DXT5_Format: 2004,\n\n\t// PVRTC compressed texture formats\n\n\tRGB_PVRTC_4BPPV1_Format: 2100,\n\tRGB_PVRTC_2BPPV1_Format: 2101,\n\tRGBA_PVRTC_4BPPV1_Format: 2102,\n\tRGBA_PVRTC_2BPPV1_Format: 2103,\n\n\t// ETC compressed texture formats\n\n\tRGB_ETC1_Format: 2151,\n\n\t// Loop styles for AnimationAction\n\n\tLoopOnce: 2200,\n\tLoopRepeat: 2201,\n\tLoopPingPong: 2202,\n\n\t// Interpolation\n\n\tInterpolateDiscrete: 2300,\n\tInterpolateLinear: 2301,\n\tInterpolateSmooth: 2302,\n\n\t// Interpolant ending modes\n\n\tZeroCurvatureEnding: 2400,\n\tZeroSlopeEnding: 2401,\n\tWrapAroundEnding: 2402,\n\n\t// Triangle Draw modes\n\n\tTrianglesDrawMode: 0,\n\tTriangleStripDrawMode: 1,\n\tTriangleFanDrawMode: 2,\n\n\t// Texture Encodings\n\n\tLinearEncoding: 3000, // No encoding at all.\n\tsRGBEncoding: 3001,\n\tGammaEncoding: 3007, // uses GAMMA_FACTOR, for backwards compatibility with WebGLRenderer.gammaInput/gammaOutput\n\n\t// The following Texture Encodings are for RGB-only (no alpha) HDR light emission sources.\n\t// These encodings should not specified as output encodings except in rare situations.\n\tRGBEEncoding: 3002, // AKA Radiance.\n\tLogLuvEncoding: 3003,\n\tRGBM7Encoding: 3004,\n\tRGBM16Encoding: 3005,\n\tRGBDEncoding: 3006, // MaxRange is 256.\n\n\t// Depth packing strategies\n\n\tBasicDepthPacking: 3200, // for writing to float textures for high precision or for visualizing results in RGB buffers\n\tRGBADepthPacking: 3201 // for packing into RGBA buffers.\n\n} );\n\n// File:src/math/Color.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Color = function ( r, g, b ) {\n\n\tif ( g === undefined && b === undefined ) {\n\n\t\t// r is THREE.Color, hex or string\n\t\treturn this.set( r );\n\n\t}\n\n\treturn this.setRGB( r, g, b );\n\n};\n\nTHREE.Color.prototype = {\n\n\tconstructor: THREE.Color,\n\n\tr: 1, g: 1, b: 1,\n\n\tset: function ( value ) {\n\n\t\tif ( value instanceof THREE.Color ) {\n\n\t\t\tthis.copy( value );\n\n\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\tthis.setHex( value );\n\n\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\tthis.setStyle( value );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetScalar: function ( scalar ) {\n\n\t\tthis.r = scalar;\n\t\tthis.g = scalar;\n\t\tthis.b = scalar;\n\n\t},\n\n\tsetHex: function ( hex ) {\n\n\t\thex = Math.floor( hex );\n\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\treturn this;\n\n\t},\n\n\tsetRGB: function ( r, g, b ) {\n\n\t\tthis.r = r;\n\t\tthis.g = g;\n\t\tthis.b = b;\n\n\t\treturn this;\n\n\t},\n\n\tsetHSL: function () {\n\n\t\tfunction hue2rgb( p, q, t ) {\n\n\t\t\tif ( t < 0 ) t += 1;\n\t\t\tif ( t > 1 ) t -= 1;\n\t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\t\t\tif ( t < 1 / 2 ) return q;\n\t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\t\t\treturn p;\n\n\t\t}\n\n\t\treturn function setHSL( h, s, l ) {\n\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\th = THREE.Math.euclideanModulo( h, 1 );\n\t\t\ts = THREE.Math.clamp( s, 0, 1 );\n\t\t\tl = THREE.Math.clamp( l, 0, 1 );\n\n\t\t\tif ( s === 0 ) {\n\n\t\t\t\tthis.r = this.g = this.b = l;\n\n\t\t\t} else {\n\n\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\t\tvar q = ( 2 * l ) - p;\n\n\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tsetStyle: function ( style ) {\n\n\t\tfunction handleAlpha( string ) {\n\n\t\t\tif ( string === undefined ) return;\n\n\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tvar m;\n\n\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t// rgb / hsl\n\n\t\t\tvar color;\n\t\t\tvar name = m[ 1 ];\n\t\t\tvar components = m[ 2 ];\n\n\t\t\tswitch ( name ) {\n\n\t\t\t\tcase 'rgb':\n\t\t\t\tcase 'rgba':\n\n\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'hsl':\n\t\t\t\tcase 'hsla':\n\n\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\n\t\t\t// hex color\n\n\t\t\tvar hex = m[ 1 ];\n\t\t\tvar size = hex.length;\n\n\t\t\tif ( size === 3 ) {\n\n\t\t\t\t// #ff0\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n\t\t\t\treturn this;\n\n\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t// #ff0000\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( style && style.length > 0 ) {\n\n\t\t\t// color keywords\n\t\t\tvar hex = THREE.ColorKeywords[ style ];\n\n\t\t\tif ( hex !== undefined ) {\n\n\t\t\t\t// red\n\t\t\t\tthis.setHex( hex );\n\n\t\t\t} else {\n\n\t\t\t\t// unknown color\n\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t},\n\n\tcopy: function ( color ) {\n\n\t\tthis.r = color.r;\n\t\tthis.g = color.g;\n\t\tthis.b = color.b;\n\n\t\treturn this;\n\n\t},\n\n\tcopyGammaToLinear: function ( color, gammaFactor ) {\n\n\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n\t\tthis.r = Math.pow( color.r, gammaFactor );\n\t\tthis.g = Math.pow( color.g, gammaFactor );\n\t\tthis.b = Math.pow( color.b, gammaFactor );\n\n\t\treturn this;\n\n\t},\n\n\tcopyLinearToGamma: function ( color, gammaFactor ) {\n\n\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n\t\tthis.r = Math.pow( color.r, safeInverse );\n\t\tthis.g = Math.pow( color.g, safeInverse );\n\t\tthis.b = Math.pow( color.b, safeInverse );\n\n\t\treturn this;\n\n\t},\n\n\tconvertGammaToLinear: function () {\n\n\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\tthis.r = r * r;\n\t\tthis.g = g * g;\n\t\tthis.b = b * b;\n\n\t\treturn this;\n\n\t},\n\n\tconvertLinearToGamma: function () {\n\n\t\tthis.r = Math.sqrt( this.r );\n\t\tthis.g = Math.sqrt( this.g );\n\t\tthis.b = Math.sqrt( this.b );\n\n\t\treturn this;\n\n\t},\n\n\tgetHex: function () {\n\n\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n\t},\n\n\tgetHexString: function () {\n\n\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n\t},\n\n\tgetHSL: function ( optionalTarget ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\tvar hsl = optionalTarget || { h: 0, s: 0, l: 0 };\n\n\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\tvar max = Math.max( r, g, b );\n\t\tvar min = Math.min( r, g, b );\n\n\t\tvar hue, saturation;\n\t\tvar lightness = ( min + max ) / 2.0;\n\n\t\tif ( min === max ) {\n\n\t\t\thue = 0;\n\t\t\tsaturation = 0;\n\n\t\t} else {\n\n\t\t\tvar delta = max - min;\n\n\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\tswitch ( max ) {\n\n\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t}\n\n\t\t\thue /= 6;\n\n\t\t}\n\n\t\thsl.h = hue;\n\t\thsl.s = saturation;\n\t\thsl.l = lightness;\n\n\t\treturn hsl;\n\n\t},\n\n\tgetStyle: function () {\n\n\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n\t},\n\n\toffsetHSL: function ( h, s, l ) {\n\n\t\tvar hsl = this.getHSL();\n\n\t\thsl.h += h; hsl.s += s; hsl.l += l;\n\n\t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( color ) {\n\n\t\tthis.r += color.r;\n\t\tthis.g += color.g;\n\t\tthis.b += color.b;\n\n\t\treturn this;\n\n\t},\n\n\taddColors: function ( color1, color2 ) {\n\n\t\tthis.r = color1.r + color2.r;\n\t\tthis.g = color1.g + color2.g;\n\t\tthis.b = color1.b + color2.b;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.r += s;\n\t\tthis.g += s;\n\t\tthis.b += s;\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( color ) {\n\n\t\tthis.r *= color.r;\n\t\tthis.g *= color.g;\n\t\tthis.b *= color.b;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( s ) {\n\n\t\tthis.r *= s;\n\t\tthis.g *= s;\n\t\tthis.b *= s;\n\n\t\treturn this;\n\n\t},\n\n\tlerp: function ( color, alpha ) {\n\n\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( c ) {\n\n\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.r = array[ offset ];\n\t\tthis.g = array[ offset + 1 ];\n\t\tthis.b = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.r;\n\t\tarray[ offset + 1 ] = this.g;\n\t\tarray[ offset + 2 ] = this.b;\n\n\t\treturn array;\n\n\t}\n\n};\n\nTHREE.ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\n// File:src/math/Quaternion.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n */\n\nTHREE.Quaternion = function ( x, y, z, w ) {\n\n\tthis._x = x || 0;\n\tthis._y = y || 0;\n\tthis._z = z || 0;\n\tthis._w = ( w !== undefined ) ? w : 1;\n\n};\n\nTHREE.Quaternion.prototype = {\n\n\tconstructor: THREE.Quaternion,\n\n\tget x () {\n\n\t\treturn this._x;\n\n\t},\n\n\tset x ( value ) {\n\n\t\tthis._x = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget y () {\n\n\t\treturn this._y;\n\n\t},\n\n\tset y ( value ) {\n\n\t\tthis._y = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget z () {\n\n\t\treturn this._z;\n\n\t},\n\n\tset z ( value ) {\n\n\t\tthis._z = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget w () {\n\n\t\treturn this._w;\n\n\t},\n\n\tset w ( value ) {\n\n\t\tthis._w = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tset: function ( x, y, z, w ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t},\n\n\tcopy: function ( quaternion ) {\n\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromEuler: function ( euler, update ) {\n\n\t\tif ( euler instanceof THREE.Euler === false ) {\n\n\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t//\tcontent/SpinCalc.m\n\n\t\tvar c1 = Math.cos( euler._x / 2 );\n\t\tvar c2 = Math.cos( euler._y / 2 );\n\t\tvar c3 = Math.cos( euler._z / 2 );\n\t\tvar s1 = Math.sin( euler._x / 2 );\n\t\tvar s2 = Math.sin( euler._y / 2 );\n\t\tvar s3 = Math.sin( euler._z / 2 );\n\n\t\tvar order = euler.order;\n\n\t\tif ( order === 'XYZ' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t} else if ( order === 'YZX' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'XZY' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t}\n\n\t\tif ( update !== false ) this.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromAxisAngle: function ( axis, angle ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t// assumes axis is normalized\n\n\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\tthis._x = axis.x * s;\n\t\tthis._y = axis.y * s;\n\t\tthis._z = axis.z * s;\n\t\tthis._w = Math.cos( halfAngle );\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromRotationMatrix: function ( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar te = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\ttrace = m11 + m22 + m33,\n\t\t\ts;\n\n\t\tif ( trace > 0 ) {\n\n\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\tthis._w = 0.25 / s;\n\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\tthis._x = 0.25 * s;\n\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t} else if ( m22 > m33 ) {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\tthis._y = 0.25 * s;\n\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t} else {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\tthis._z = 0.25 * s;\n\n\t\t}\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromUnitVectors: function () {\n\n\t\t// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final\n\n\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\tvar v1, r;\n\n\t\tvar EPS = 0.000001;\n\n\t\treturn function setFromUnitVectors( vFrom, vTo ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\n\t\t\tr = vFrom.dot( vTo ) + 1;\n\n\t\t\tif ( r < EPS ) {\n\n\t\t\t\tr = 0;\n\n\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tv1.crossVectors( vFrom, vTo );\n\n\t\t\t}\n\n\t\t\tthis._x = v1.x;\n\t\t\tthis._y = v1.y;\n\t\t\tthis._z = v1.z;\n\t\t\tthis._w = r;\n\n\t\t\treturn this.normalize();\n\n\t\t};\n\n\t}(),\n\n\tinverse: function () {\n\n\t\treturn this.conjugate().normalize();\n\n\t},\n\n\tconjugate: function () {\n\n\t\tthis._x *= - 1;\n\t\tthis._y *= - 1;\n\t\tthis._z *= - 1;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t},\n\n\tnormalize: function () {\n\n\t\tvar l = this.length();\n\n\t\tif ( l === 0 ) {\n\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\n\t\t} else {\n\n\t\t\tl = 1 / l;\n\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\n\t\t}\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( q, p ) {\n\n\t\tif ( p !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t}\n\n\t\treturn this.multiplyQuaternions( this, q );\n\n\t},\n\n\tpremultiply: function ( q ) {\n\n\t\treturn this.multiplyQuaternions( q, this );\n\n\t},\n\n\tmultiplyQuaternions: function ( a, b ) {\n\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tslerp: function ( qb, t ) {\n\n\t\tif ( t === 0 ) return this;\n\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\tthis._w = - qb._w;\n\t\t\tthis._x = - qb._x;\n\t\t\tthis._y = - qb._y;\n\t\t\tthis._z = - qb._z;\n\n\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t} else {\n\n\t\t\tthis.copy( qb );\n\n\t\t}\n\n\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\tthis._w = w;\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\n\n\t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\n\n\t\t\tthis._w = 0.5 * ( w + this._w );\n\t\t\tthis._x = 0.5 * ( x + this._x );\n\t\t\tthis._y = 0.5 * ( y + this._y );\n\t\t\tthis._z = 0.5 * ( z + this._z );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( quaternion ) {\n\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis._x = array[ offset ];\n\t\tthis._y = array[ offset + 1 ];\n\t\tthis._z = array[ offset + 2 ];\n\t\tthis._w = array[ offset + 3 ];\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._w;\n\n\t\treturn array;\n\n\t},\n\n\tonChange: function ( callback ) {\n\n\t\tthis.onChangeCallback = callback;\n\n\t\treturn this;\n\n\t},\n\n\tonChangeCallback: function () {}\n\n};\n\nObject.assign( THREE.Quaternion, {\n\n\tslerp: function( qa, qb, qm, t ) {\n\n\t\treturn qm.copy( qa ).slerp( qb, t );\n\n\t},\n\n\tslerpFlat: function(\n\t\t\tdst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\tw0 = src0[ srcOffset0 + 3 ],\n\n\t\t\tx1 = src1[ srcOffset1 + 0 ],\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\tvar s = 1 - t,\n\n\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t}\n\n\t\t\tvar tDir = t * dir;\n\n\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t// Normalize in case we just did a lerp:\n\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\tx0 *= f;\n\t\t\t\ty0 *= f;\n\t\t\t\tz0 *= f;\n\t\t\t\tw0 *= f;\n\n\t\t\t}\n\n\t\t}\n\n\t\tdst[ dstOffset ] = x0;\n\t\tdst[ dstOffset + 1 ] = y0;\n\t\tdst[ dstOffset + 2 ] = z0;\n\t\tdst[ dstOffset + 3 ] = w0;\n\n\t}\n\n} );\n\n// File:src/math/Vector2.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author philogb / http://blog.thejit.org/\n * @author egraether / http://egraether.com/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n */\n\nTHREE.Vector2 = function ( x, y ) {\n\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n\n};\n\nTHREE.Vector2.prototype = {\n\n\tconstructor: THREE.Vector2,\n\n\tget width() {\n\n\t\treturn this.x;\n\n\t},\n\n\tset width( value ) {\n\n\t\tthis.x = value;\n\n\t},\n\n\tget height() {\n\n\t\treturn this.y;\n\n\t},\n\n\tset height( value ) {\n\n\t\tthis.y = value;\n\n\t},\n\n\t//\n\n\tset: function ( x, y ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetScalar: function ( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\n\t\treturn this;\n\n\t},\n\n\tsetX: function ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponent: function ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tgetComponent: function ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.x, this.y );\n\n\t},\n\n\tcopy: function ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\n\t\treturn this;\n\n\t},\n\n\taddVectors: function ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\n\t\treturn this;\n\n\t},\n\n\taddScaledVector: function ( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\n\t\treturn this;\n\n\t},\n\n\tsubScalar: function ( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\n\t\treturn this;\n\n\t},\n\n\tsubVectors: function ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( scalar ) {\n\n\t\tif ( isFinite( scalar ) ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\n\t\t} else {\n\n\t\t\tthis.x = 0;\n\t\t\tthis.y = 0;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tdivide: function ( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\n\t\treturn this;\n\n\t},\n\n\tdivideScalar: function ( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t},\n\n\tmin: function ( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\n\t\treturn this;\n\n\t},\n\n\tmax: function ( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\n\t\treturn this;\n\n\t},\n\n\tclamp: function ( min, max ) {\n\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\treturn this;\n\n\t},\n\n\tclampScalar: function () {\n\n\t\tvar min, max;\n\n\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\tif ( min === undefined ) {\n\n\t\t\t\tmin = new THREE.Vector2();\n\t\t\t\tmax = new THREE.Vector2();\n\n\t\t\t}\n\n\t\t\tmin.set( minVal, minVal );\n\t\t\tmax.set( maxVal, maxVal );\n\n\t\t\treturn this.clamp( min, max );\n\n\t\t};\n\n\t}(),\n\n\tclampLength: function ( min, max ) {\n\n\t\tvar length = this.length();\n\n\t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\n\t},\n\n\tfloor: function () {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\n\t\treturn this;\n\n\t},\n\n\tceil: function () {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\n\t\treturn this;\n\n\t},\n\n\tround: function () {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\n\t\treturn this;\n\n\t},\n\n\troundToZero: function () {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this.x * this.x + this.y * this.y;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t},\n\n\tlengthManhattan: function() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t},\n\n\tnormalize: function () {\n\n\t\treturn this.divideScalar( this.length() );\n\n\t},\n\n\tangle: function () {\n\n\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\tvar angle = Math.atan2( this.y, this.x );\n\n\t\tif ( angle < 0 ) angle += 2 * Math.PI;\n\n\t\treturn angle;\n\n\t},\n\n\tdistanceTo: function ( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t},\n\n\tdistanceToSquared: function ( v ) {\n\n\t\tvar dx = this.x - v.x, dy = this.y - v.y;\n\t\treturn dx * dx + dy * dy;\n\n\t},\n\n\tsetLength: function ( length ) {\n\n\t\treturn this.multiplyScalar( length / this.length() );\n\n\t},\n\n\tlerp: function ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t},\n\n\tequals: function ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\n\t\treturn array;\n\n\t},\n\n\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tindex = index * attribute.itemSize + offset;\n\n\t\tthis.x = attribute.array[ index ];\n\t\tthis.y = attribute.array[ index + 1 ];\n\n\t\treturn this;\n\n\t},\n\n\trotateAround: function ( center, angle ) {\n\n\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\tvar x = this.x - center.x;\n\t\tvar y = this.y - center.y;\n\n\t\tthis.x = x * c - y * s + center.x;\n\t\tthis.y = x * s + y * c + center.y;\n\n\t\treturn this;\n\n\t}\n\n};\n\n// File:src/math/Vector3.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author *kile / http://kile.stravaganza.org/\n * @author philogb / http://blog.thejit.org/\n * @author mikael emtinger / http://gomo.se/\n * @author egraether / http://egraether.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.Vector3 = function ( x, y, z ) {\n\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n\tthis.z = z || 0;\n\n};\n\nTHREE.Vector3.prototype = {\n\n\tconstructor: THREE.Vector3,\n\n\tset: function ( x, y, z ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetScalar: function ( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\n\t\treturn this;\n\n\t},\n\n\tsetX: function ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetZ: function ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponent: function ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tgetComponent: function ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t},\n\n\tcopy: function ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\n\t\treturn this;\n\n\t},\n\n\taddVectors: function ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\n\t\treturn this;\n\n\t},\n\n\taddScaledVector: function ( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\n\t\treturn this;\n\n\t},\n\n\tsubScalar: function ( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\n\t\treturn this;\n\n\t},\n\n\tsubVectors: function ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\treturn this.multiplyVectors( v, w );\n\n\t\t}\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( scalar ) {\n\n\t\tif ( isFinite( scalar ) ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\n\t\t} else {\n\n\t\t\tthis.x = 0;\n\t\t\tthis.y = 0;\n\t\t\tthis.z = 0;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyVectors: function ( a, b ) {\n\n\t\tthis.x = a.x * b.x;\n\t\tthis.y = a.y * b.y;\n\t\tthis.z = a.z * b.z;\n\n\t\treturn this;\n\n\t},\n\n\tapplyEuler: function () {\n\n\t\tvar quaternion;\n\n\t\treturn function applyEuler( euler ) {\n\n\t\t\tif ( euler instanceof THREE.Euler === false ) {\n\n\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tif ( quaternion === undefined ) quaternion = new THREE.Quaternion();\n\n\t\t\treturn this.applyQuaternion( quaternion.setFromEuler( euler ) );\n\n\t\t};\n\n\t}(),\n\n\tapplyAxisAngle: function () {\n\n\t\tvar quaternion;\n\n\t\treturn function applyAxisAngle( axis, angle ) {\n\n\t\t\tif ( quaternion === undefined ) quaternion = new THREE.Quaternion();\n\n\t\t\treturn this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\n\n\t\t};\n\n\t}(),\n\n\tapplyMatrix3: function ( m ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\treturn this;\n\n\t},\n\n\tapplyMatrix4: function ( m ) {\n\n\t\t// input: THREE.Matrix4 affine matrix\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];\n\n\t\treturn this;\n\n\t},\n\n\tapplyProjection: function ( m ) {\n\n\t\t// input: THREE.Matrix4 projection matrix\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\t\tvar d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide\n\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;\n\n\t\treturn this;\n\n\t},\n\n\tapplyQuaternion: function ( q ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t// calculate quat * vector\n\n\t\tvar ix =  qw * x + qy * z - qz * y;\n\t\tvar iy =  qw * y + qz * x - qx * z;\n\t\tvar iz =  qw * z + qx * y - qy * x;\n\t\tvar iw = - qx * x - qy * y - qz * z;\n\n\t\t// calculate result * inverse quat\n\n\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\treturn this;\n\n\t},\n\n\tproject: function () {\n\n\t\tvar matrix;\n\n\t\treturn function project( camera ) {\n\n\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\n\n\t\t\tmatrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );\n\t\t\treturn this.applyProjection( matrix );\n\n\t\t};\n\n\t}(),\n\n\tunproject: function () {\n\n\t\tvar matrix;\n\n\t\treturn function unproject( camera ) {\n\n\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\n\n\t\t\tmatrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );\n\t\t\treturn this.applyProjection( matrix );\n\n\t\t};\n\n\t}(),\n\n\ttransformDirection: function ( m ) {\n\n\t\t// input: THREE.Matrix4 affine matrix\n\t\t// vector interpreted as a direction\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\treturn this.normalize();\n\n\t},\n\n\tdivide: function ( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\t\tthis.z /= v.z;\n\n\t\treturn this;\n\n\t},\n\n\tdivideScalar: function ( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t},\n\n\tmin: function ( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\n\t\treturn this;\n\n\t},\n\n\tmax: function ( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\n\t\treturn this;\n\n\t},\n\n\tclamp: function ( min, max ) {\n\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\treturn this;\n\n\t},\n\n\tclampScalar: function () {\n\n\t\tvar min, max;\n\n\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\tif ( min === undefined ) {\n\n\t\t\t\tmin = new THREE.Vector3();\n\t\t\t\tmax = new THREE.Vector3();\n\n\t\t\t}\n\n\t\t\tmin.set( minVal, minVal, minVal );\n\t\t\tmax.set( maxVal, maxVal, maxVal );\n\n\t\t\treturn this.clamp( min, max );\n\n\t\t};\n\n\t}(),\n\n\tclampLength: function ( min, max ) {\n\n\t\tvar length = this.length();\n\n\t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\n\t},\n\n\tfloor: function () {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\n\t\treturn this;\n\n\t},\n\n\tceil: function () {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\n\t\treturn this;\n\n\t},\n\n\tround: function () {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\n\t\treturn this;\n\n\t},\n\n\troundToZero: function () {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t},\n\n\tlengthManhattan: function () {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t},\n\n\tnormalize: function () {\n\n\t\treturn this.divideScalar( this.length() );\n\n\t},\n\n\tsetLength: function ( length ) {\n\n\t\treturn this.multiplyScalar( length / this.length() );\n\n\t},\n\n\tlerp: function ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t},\n\n\tcross: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\treturn this.crossVectors( v, w );\n\n\t\t}\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\n\t\tthis.x = y * v.z - z * v.y;\n\t\tthis.y = z * v.x - x * v.z;\n\t\tthis.z = x * v.y - y * v.x;\n\n\t\treturn this;\n\n\t},\n\n\tcrossVectors: function ( a, b ) {\n\n\t\tvar ax = a.x, ay = a.y, az = a.z;\n\t\tvar bx = b.x, by = b.y, bz = b.z;\n\n\t\tthis.x = ay * bz - az * by;\n\t\tthis.y = az * bx - ax * bz;\n\t\tthis.z = ax * by - ay * bx;\n\n\t\treturn this;\n\n\t},\n\n\tprojectOnVector: function ( vector ) {\n\n\t\tvar scalar = vector.dot( this ) / vector.lengthSq();\n\t\n\t\treturn this.copy( vector ).multiplyScalar( scalar );\n\t\n\t},\n\n\tprojectOnPlane: function () {\n\n\t\tvar v1;\n\n\t\treturn function projectOnPlane( planeNormal ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\n\t\t\tv1.copy( this ).projectOnVector( planeNormal );\n\n\t\t\treturn this.sub( v1 );\n\n\t\t};\n\n\t}(),\n\n\treflect: function () {\n\n\t\t// reflect incident vector off plane orthogonal to normal\n\t\t// normal is assumed to have unit length\n\n\t\tvar v1;\n\n\t\treturn function reflect( normal ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\n\t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t\t};\n\n\t}(),\n\n\tangleTo: function ( v ) {\n\n\t\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\n\n\t\t// clamp, to handle numerical problems\n\n\t\treturn Math.acos( THREE.Math.clamp( theta, - 1, 1 ) );\n\n\t},\n\n\tdistanceTo: function ( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t},\n\n\tdistanceToSquared: function ( v ) {\n\n\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t},\n\n\tsetFromSpherical: function( s ) {\n\n\t\tvar sinPhiRadius = Math.sin( s.phi ) * s.radius;\n\n\t\tthis.x = sinPhiRadius * Math.sin( s.theta );\n\t\tthis.y = Math.cos( s.phi ) * s.radius;\n\t\tthis.z = sinPhiRadius * Math.cos( s.theta );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrixPosition: function ( m ) {\n\n\t\treturn this.setFromMatrixColumn( m, 3 );\n\n\t},\n\n\tsetFromMatrixScale: function ( m ) {\n\n\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\tthis.x = sx;\n\t\tthis.y = sy;\n\t\tthis.z = sz;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrixColumn: function ( m, index ) {\n\n\t\tif ( typeof m === 'number' ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).' );\n\t\t\tvar temp = m\n\t\t\tm = index;\n\t\t\tindex = temp;\n\n\t\t}\n\n\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t},\n\n\tequals: function ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\n\t\treturn array;\n\n\t},\n\n\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tindex = index * attribute.itemSize + offset;\n\n\t\tthis.x = attribute.array[ index ];\n\t\tthis.y = attribute.array[ index + 1 ];\n\t\tthis.z = attribute.array[ index + 2 ];\n\n\t\treturn this;\n\n\t}\n\n};\n\n// File:src/math/Vector4.js\n\n/**\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author philogb / http://blog.thejit.org/\n * @author mikael emtinger / http://gomo.se/\n * @author egraether / http://egraether.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.Vector4 = function ( x, y, z, w ) {\n\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n\tthis.z = z || 0;\n\tthis.w = ( w !== undefined ) ? w : 1;\n\n};\n\nTHREE.Vector4.prototype = {\n\n\tconstructor: THREE.Vector4,\n\n\tset: function ( x, y, z, w ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetScalar: function ( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\t\tthis.w = scalar;\n\n\t\treturn this;\n\n\t},\n\n\tsetX: function ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetZ: function ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetW: function ( w ) {\n\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponent: function ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tcase 3: this.w = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tgetComponent: function ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tcase 3: return this.w;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t},\n\n\tcopy: function ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\t\tthis.w += v.w;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\t\tthis.w += s;\n\n\t\treturn this;\n\n\t},\n\n\taddVectors: function ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\t\tthis.w = a.w + b.w;\n\n\t\treturn this;\n\n\t},\n\n\taddScaledVector: function ( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\t\tthis.w += v.w * s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\t\tthis.w -= v.w;\n\n\t\treturn this;\n\n\t},\n\n\tsubScalar: function ( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\t\tthis.w -= s;\n\n\t\treturn this;\n\n\t},\n\n\tsubVectors: function ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\t\tthis.w = a.w - b.w;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( scalar ) {\n\n\t\tif ( isFinite( scalar ) ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\tthis.w *= scalar;\n\n\t\t} else {\n\n\t\t\tthis.x = 0;\n\t\t\tthis.y = 0;\n\t\t\tthis.z = 0;\n\t\t\tthis.w = 0;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tapplyMatrix4: function ( m ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\treturn this;\n\n\t},\n\n\tdivideScalar: function ( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t},\n\n\tsetAxisAngleFromQuaternion: function ( q ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t// q is assumed to be normalized\n\n\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\n\t\tif ( s < 0.0001 ) {\n\n\t\t\t this.x = 1;\n\t\t\t this.y = 0;\n\t\t\t this.z = 0;\n\n\t\t} else {\n\n\t\t\t this.x = q.x / s;\n\t\t\t this.y = q.y / s;\n\t\t\t this.z = q.z / s;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetAxisAngleFromRotationMatrix: function ( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar angle, x, y, z,\t\t// variables for result\n\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\tte = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t// singularity found\n\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t}\n\n\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\tangle = Math.PI;\n\n\t\t\tvar xx = ( m11 + 1 ) / 2;\n\t\t\tvar yy = ( m22 + 1 ) / 2;\n\t\t\tvar zz = ( m33 + 1 ) / 2;\n\t\t\tvar xy = ( m12 + m21 ) / 4;\n\t\t\tvar xz = ( m13 + m31 ) / 4;\n\t\t\tvar yz = ( m23 + m32 ) / 4;\n\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\tx = 0;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\ty = xy / x;\n\t\t\t\t\tz = xz / x;\n\n\t\t\t\t}\n\n\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\tx = xy / y;\n\t\t\t\t\tz = yz / y;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\tx = xz / z;\n\t\t\t\t\ty = yz / z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.set( x, y, z, angle );\n\n\t\t\treturn this; // return 180 deg rotation\n\n\t\t}\n\n\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\n\t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\tthis.x = ( m32 - m23 ) / s;\n\t\tthis.y = ( m13 - m31 ) / s;\n\t\tthis.z = ( m21 - m12 ) / s;\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\treturn this;\n\n\t},\n\n\tmin: function ( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\t\tthis.w = Math.min( this.w, v.w );\n\n\t\treturn this;\n\n\t},\n\n\tmax: function ( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\t\tthis.w = Math.max( this.w, v.w );\n\n\t\treturn this;\n\n\t},\n\n\tclamp: function ( min, max ) {\n\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\treturn this;\n\n\t},\n\n\tclampScalar: function () {\n\n\t\tvar min, max;\n\n\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\tif ( min === undefined ) {\n\n\t\t\t\tmin = new THREE.Vector4();\n\t\t\t\tmax = new THREE.Vector4();\n\n\t\t\t}\n\n\t\t\tmin.set( minVal, minVal, minVal, minVal );\n\t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\n\n\t\t\treturn this.clamp( min, max );\n\n\t\t};\n\n\t}(),\n\n\tfloor: function () {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\t\tthis.w = Math.floor( this.w );\n\n\t\treturn this;\n\n\t},\n\n\tceil: function () {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\t\tthis.w = Math.ceil( this.w );\n\n\t\treturn this;\n\n\t},\n\n\tround: function () {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\t\tthis.w = Math.round( this.w );\n\n\t\treturn this;\n\n\t},\n\n\troundToZero: function () {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\t\tthis.w = - this.w;\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t},\n\n\tlengthManhattan: function () {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t},\n\n\tnormalize: function () {\n\n\t\treturn this.divideScalar( this.length() );\n\n\t},\n\n\tsetLength: function ( length ) {\n\n\t\treturn this.multiplyScalar( length / this.length() );\n\n\t},\n\n\tlerp: function ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t},\n\n\tequals: function ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\t\tthis.w = array[ offset + 3 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\t\tarray[ offset + 3 ] = this.w;\n\n\t\treturn array;\n\n\t},\n\n\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tindex = index * attribute.itemSize + offset;\n\n\t\tthis.x = attribute.array[ index ];\n\t\tthis.y = attribute.array[ index + 1 ];\n\t\tthis.z = attribute.array[ index + 2 ];\n\t\tthis.w = attribute.array[ index + 3 ];\n\n\t\treturn this;\n\n\t}\n\n};\n\n// File:src/math/Euler.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n */\n\nTHREE.Euler = function ( x, y, z, order ) {\n\n\tthis._x = x || 0;\n\tthis._y = y || 0;\n\tthis._z = z || 0;\n\tthis._order = order || THREE.Euler.DefaultOrder;\n\n};\n\nTHREE.Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\nTHREE.Euler.DefaultOrder = 'XYZ';\n\nTHREE.Euler.prototype = {\n\n\tconstructor: THREE.Euler,\n\n\tget x () {\n\n\t\treturn this._x;\n\n\t},\n\n\tset x ( value ) {\n\n\t\tthis._x = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget y () {\n\n\t\treturn this._y;\n\n\t},\n\n\tset y ( value ) {\n\n\t\tthis._y = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget z () {\n\n\t\treturn this._z;\n\n\t},\n\n\tset z ( value ) {\n\n\t\tthis._z = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget order () {\n\n\t\treturn this._order;\n\n\t},\n\n\tset order ( value ) {\n\n\t\tthis._order = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tset: function ( x, y, z, order ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order || this._order;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t},\n\n\tcopy: function ( euler ) {\n\n\t\tthis._x = euler._x;\n\t\tthis._y = euler._y;\n\t\tthis._z = euler._z;\n\t\tthis._order = euler._order;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromRotationMatrix: function ( m, order, update ) {\n\n\t\tvar clamp = THREE.Math.clamp;\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar te = m.elements;\n\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\torder = order || this._order;\n\n\t\tif ( order === 'XYZ' ) {\n\n\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\tthis._z = 0;\n\n\t\t\t}\n\n\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\n\n\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\tthis._z = 0;\n\n\t\t\t}\n\n\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\n\n\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t}\n\n\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t}\n\n\t\t} else if ( order === 'YZX' ) {\n\n\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t}\n\n\t\t} else if ( order === 'XZY' ) {\n\n\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\tthis._y = 0;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\n\n\t\t}\n\n\t\tthis._order = order;\n\n\t\tif ( update !== false ) this.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromQuaternion: function () {\n\n\t\tvar matrix;\n\n\t\treturn function setFromQuaternion( q, order, update ) {\n\n\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\n\n\t\t\tmatrix.makeRotationFromQuaternion( q );\n\n\t\t\treturn this.setFromRotationMatrix( matrix, order, update );\n\n\t\t};\n\n\t}(),\n\n\tsetFromVector3: function ( v, order ) {\n\n\t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\n\t},\n\n\treorder: function () {\n\n\t\t// WARNING: this discards revolution information -bhouston\n\n\t\tvar q = new THREE.Quaternion();\n\n\t\treturn function reorder( newOrder ) {\n\n\t\t\tq.setFromEuler( this );\n\t\t\t\n\t\t\treturn this.setFromQuaternion( q, newOrder );\n\n\t\t};\n\n\t}(),\n\n\tequals: function ( euler ) {\n\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t},\n\n\tfromArray: function ( array ) {\n\n\t\tthis._x = array[ 0 ];\n\t\tthis._y = array[ 1 ];\n\t\tthis._z = array[ 2 ];\n\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._order;\n\n\t\treturn array;\n\n\t},\n\n\ttoVector3: function ( optionalResult ) {\n\n\t\tif ( optionalResult ) {\n\n\t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n\t\t} else {\n\n\t\t\treturn new THREE.Vector3( this._x, this._y, this._z );\n\n\t\t}\n\n\t},\n\n\tonChange: function ( callback ) {\n\n\t\tthis.onChangeCallback = callback;\n\n\t\treturn this;\n\n\t},\n\n\tonChangeCallback: function () {}\n\n};\n\n// File:src/math/Line3.js\n\n/**\n * @author bhouston / http://clara.io\n */\n\nTHREE.Line3 = function ( start, end ) {\n\n\tthis.start = ( start !== undefined ) ? start : new THREE.Vector3();\n\tthis.end = ( end !== undefined ) ? end : new THREE.Vector3();\n\n};\n\nTHREE.Line3.prototype = {\n\n\tconstructor: THREE.Line3,\n\n\tset: function ( start, end ) {\n\n\t\tthis.start.copy( start );\n\t\tthis.end.copy( end );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( line ) {\n\n\t\tthis.start.copy( line.start );\n\t\tthis.end.copy( line.end );\n\n\t\treturn this;\n\n\t},\n\n\tcenter: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t},\n\n\tdelta: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.subVectors( this.end, this.start );\n\n\t},\n\n\tdistanceSq: function () {\n\n\t\treturn this.start.distanceToSquared( this.end );\n\n\t},\n\n\tdistance: function () {\n\n\t\treturn this.start.distanceTo( this.end );\n\n\t},\n\n\tat: function ( t, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n\t},\n\n\tclosestPointToPointParameter: function () {\n\n\t\tvar startP = new THREE.Vector3();\n\t\tvar startEnd = new THREE.Vector3();\n\n\t\treturn function closestPointToPointParameter( point, clampToLine ) {\n\n\t\t\tstartP.subVectors( point, this.start );\n\t\t\tstartEnd.subVectors( this.end, this.start );\n\n\t\t\tvar startEnd2 = startEnd.dot( startEnd );\n\t\t\tvar startEnd_startP = startEnd.dot( startP );\n\n\t\t\tvar t = startEnd_startP / startEnd2;\n\n\t\t\tif ( clampToLine ) {\n\n\t\t\t\tt = THREE.Math.clamp( t, 0, 1 );\n\n\t\t\t}\n\n\t\t\treturn t;\n\n\t\t};\n\n\t}(),\n\n\tclosestPointToPoint: function ( point, clampToLine, optionalTarget ) {\n\n\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n\t},\n\n\tapplyMatrix4: function ( matrix ) {\n\n\t\tthis.start.applyMatrix4( matrix );\n\t\tthis.end.applyMatrix4( matrix );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( line ) {\n\n\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t}\n\n};\n\n// File:src/math/Box2.js\n\n/**\n * @author bhouston / http://clara.io\n */\n\nTHREE.Box2 = function ( min, max ) {\n\n\tthis.min = ( min !== undefined ) ? min : new THREE.Vector2( + Infinity, + Infinity );\n\tthis.max = ( max !== undefined ) ? max : new THREE.Vector2( - Infinity, - Infinity );\n\n};\n\nTHREE.Box2.prototype = {\n\n\tconstructor: THREE.Box2,\n\n\tset: function ( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPoints: function ( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCenterAndSize: function () {\n\n\t\tvar v1 = new THREE.Vector2();\n\n\t\treturn function setFromCenterAndSize( center, size ) {\n\n\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tmakeEmpty: function () {\n\n\t\tthis.min.x = this.min.y = + Infinity;\n\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\treturn this;\n\n\t},\n\n\tisEmpty: function () {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t},\n\n\tcenter: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector2();\n\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t},\n\n\tsize: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector2();\n\t\treturn result.subVectors( this.max, this.min );\n\n\t},\n\n\texpandByPoint: function ( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t},\n\n\texpandByVector: function ( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t},\n\n\texpandByScalar: function ( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\tif ( point.x < this.min.x || point.x > this.max.x ||\n\t\t     point.y < this.min.y || point.y > this.max.y ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tcontainsBox: function ( box ) {\n\n\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n\t\t     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t},\n\n\tgetParameter: function ( point, optionalTarget ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\tvar result = optionalTarget || new THREE.Vector2();\n\n\t\treturn result.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t);\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\n\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t     box.max.y < this.min.y || box.min.y > this.max.y ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tclampPoint: function ( point, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector2();\n\t\treturn result.copy( point ).clamp( this.min, this.max );\n\n\t},\n\n\tdistanceToPoint: function () {\n\n\t\tvar v1 = new THREE.Vector2();\n\n\t\treturn function distanceToPoint( point ) {\n\n\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t};\n\n\t}(),\n\n\tintersect: function ( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tunion: function ( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t},\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n};\n\n// File:src/math/Box3.js\n\n/**\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.Box3 = function ( min, max ) {\n\n\tthis.min = ( min !== undefined ) ? min : new THREE.Vector3( + Infinity, + Infinity, + Infinity );\n\tthis.max = ( max !== undefined ) ? max : new THREE.Vector3( - Infinity, - Infinity, - Infinity );\n\n};\n\nTHREE.Box3.prototype = {\n\n\tconstructor: THREE.Box3,\n\n\tset: function ( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromArray: function ( array ) {\n\n\t\tvar minX = + Infinity;\n\t\tvar minY = + Infinity;\n\t\tvar minZ = + Infinity;\n\n\t\tvar maxX = - Infinity;\n\t\tvar maxY = - Infinity;\n\t\tvar maxZ = - Infinity;\n\n\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\tvar x = array[ i ];\n\t\t\tvar y = array[ i + 1 ];\n\t\t\tvar z = array[ i + 2 ];\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t},\n\n\tsetFromPoints: function ( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCenterAndSize: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function setFromCenterAndSize( center, size ) {\n\n\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tsetFromObject: function () {\n\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t// accounting for both the object's, and children's, world transforms\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function setFromObject( object ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tobject.updateMatrixWorld( true );\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tobject.traverse( function ( node ) {\n\n\t\t\t\tvar geometry = node.geometry;\n\n\t\t\t\tif ( geometry !== undefined ) {\n\n\t\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tv1.copy( vertices[ i ] );\n\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( geometry instanceof THREE.BufferGeometry && geometry.attributes[ 'position' ] !== undefined ) {\n\n\t\t\t\t\t\tvar positions = geometry.attributes[ 'position' ].array;\n\n\t\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 3 ) {\n\n\t\t\t\t\t\t\tv1.fromArray( positions, i );\n\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tmakeEmpty: function () {\n\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\treturn this;\n\n\t},\n\n\tisEmpty: function () {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t},\n\n\tcenter: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t},\n\n\tsize: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.subVectors( this.max, this.min );\n\n\t},\n\n\texpandByPoint: function ( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t},\n\n\texpandByVector: function ( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t},\n\n\texpandByScalar: function ( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\tif ( point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\t point.y < this.min.y || point.y > this.max.y ||\n\t\t\t\t point.z < this.min.z || point.z > this.max.z ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tcontainsBox: function ( box ) {\n\n\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n\t\t\t ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&\n\t\t\t ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t},\n\n\tgetParameter: function ( point, optionalTarget ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\treturn result.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t);\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\n\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\t box.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\t\t box.max.z < this.min.z || box.min.z > this.max.z ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tintersectsSphere: ( function () {\n\n\t\tvar closestPoint;\n\n\t\treturn function intersectsSphere( sphere ) {\n\n\t\t\tif ( closestPoint === undefined ) closestPoint = new THREE.Vector3();\n\n\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\tthis.clampPoint( sphere.center, closestPoint );\n\n\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\t\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t\t};\n\n\t} )(),\n\n\tintersectsPlane: function ( plane ) {\n\n\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\tvar min, max;\n\n\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t} else {\n\n\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t}\n\n\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t}\n\n\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t}\n\n\t\treturn ( min <= plane.constant && max >= plane.constant );\n\n\t},\n\n\tclampPoint: function ( point, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.copy( point ).clamp( this.min, this.max );\n\n\t},\n\n\tdistanceToPoint: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function distanceToPoint( point ) {\n\n\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t};\n\n\t}(),\n\n\tgetBoundingSphere: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function getBoundingSphere( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Sphere();\n\n\t\t\tresult.center = this.center();\n\t\t\tresult.radius = this.size( v1 ).length() * 0.5;\n\n\t\t\treturn result;\n\n\t\t};\n\n\t}(),\n\n\tintersect: function ( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\tif( this.isEmpty() ) this.makeEmpty();\n\n\t\treturn this;\n\n\t},\n\n\tunion: function ( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tapplyMatrix4: function () {\n\n\t\tvar points = [\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3()\n\t\t];\n\n\t\treturn function applyMatrix4( matrix ) {\n\n\t\t\t// transform of empty box is an empty box.\n\t\t\tif( this.isEmpty() ) return this;\n\n\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );\t// 111\n\n\t\t\tthis.setFromPoints( points );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n};\n\n// File:src/math/Matrix3.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n * @author tschw\n */\n\nTHREE.Matrix3 = function () {\n\n\tthis.elements = new Float32Array( [\n\n\t\t1, 0, 0,\n\t\t0, 1, 0,\n\t\t0, 0, 1\n\n\t] );\n\n\tif ( arguments.length > 0 ) {\n\n\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n\t}\n\n};\n\nTHREE.Matrix3.prototype = {\n\n\tconstructor: THREE.Matrix3,\n\n\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\treturn this;\n\n\t},\n\n\tidentity: function () {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().fromArray( this.elements );\n\n\t},\n\n\tcopy: function ( m ) {\n\n\t\tvar me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 3 ], me[ 6 ],\n\t\t\tme[ 1 ], me[ 4 ], me[ 7 ],\n\t\t\tme[ 2 ], me[ 5 ], me[ 8 ]\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrix4: function( m ) {\n\n\t\tvar me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 4 ], me[  8 ],\n\t\t\tme[ 1 ], me[ 5 ], me[  9 ],\n\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tapplyToVector3Array: function () {\n\n\t\tvar v1;\n\n\t\treturn function applyToVector3Array( array, offset, length ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\tif ( length === undefined ) length = array.length;\n\n\t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\n\t\t\t\tv1.fromArray( array, j );\n\t\t\t\tv1.applyMatrix3( this );\n\t\t\t\tv1.toArray( array, j );\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t};\n\n\t}(),\n\n\tapplyToBuffer: function () {\n\n\t\tvar v1;\n\n\t\treturn function applyToBuffer( buffer, offset, length ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\n\t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\n\t\t\t\tv1.x = buffer.getX( j );\n\t\t\t\tv1.y = buffer.getY( j );\n\t\t\t\tv1.z = buffer.getZ( j );\n\n\t\t\t\tv1.applyMatrix3( this );\n\n\t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\n\n\t\t\t}\n\n\t\t\treturn buffer;\n\n\t\t};\n\n\t}(),\n\n\tmultiplyScalar: function ( s ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\treturn this;\n\n\t},\n\n\tdeterminant: function () {\n\n\t\tvar te = this.elements;\n\n\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t},\n\n\tgetInverse: function ( matrix, throwOnDegenerate ) {\n\n\t\tif ( matrix instanceof THREE.Matrix4 ) {\n\n\t\t\tconsole.error( \"THREE.Matrix3.getInverse no longer takes a Matrix4 argument.\" );\n\n\t\t}\n\n\t\tvar me = matrix.elements,\n\t\t\tte = this.elements,\n\n\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\n\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\tif ( det === 0 ) {\n\n\t\t\tvar msg = \"THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0\";\n\n\t\t\tif ( throwOnDegenerate || false ) {\n\n\t\t\t\tthrow new Error( msg );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( msg );\n\n\t\t\t}\n\n\t\t\treturn this.identity();\n\t\t}\n\t\t\n\t\tvar detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\tte[ 3 ] = t12 * detInv;\n\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\tte[ 6 ] = t13 * detInv;\n\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\treturn this;\n\n\t},\n\n\ttranspose: function () {\n\n\t\tvar tmp, m = this.elements;\n\n\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\treturn this;\n\n\t},\n\n\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n\t\t\t\t\"- just use .toArray instead.\" );\n\n\t\treturn this.toArray( array, offset );\n\n\t},\n\n\tgetNormalMatrix: function ( matrix4 ) {\n\n\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\n\t},\n\n\ttransposeIntoArray: function ( r ) {\n\n\t\tvar m = this.elements;\n\n\t\tr[ 0 ] = m[ 0 ];\n\t\tr[ 1 ] = m[ 3 ];\n\t\tr[ 2 ] = m[ 6 ];\n\t\tr[ 3 ] = m[ 1 ];\n\t\tr[ 4 ] = m[ 4 ];\n\t\tr[ 5 ] = m[ 7 ];\n\t\tr[ 6 ] = m[ 2 ];\n\t\tr[ 7 ] = m[ 5 ];\n\t\tr[ 8 ] = m[ 8 ];\n\n\t\treturn this;\n\n\t},\n\n\tfromArray: function ( array ) {\n\n\t\tthis.elements.set( array );\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tvar te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\tarray[ offset + 8 ]  = te[ 8 ];\n\n\t\treturn array;\n\n\t}\n\n};\n\n// File:src/math/Matrix4.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author philogb / http://blog.thejit.org/\n * @author jordi_ros / http://plattsoft.com\n * @author D1plo1d / http://github.com/D1plo1d\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author timknip / http://www.floorplanner.com/\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.Matrix4 = function () {\n\n\tthis.elements = new Float32Array( [\n\n\t\t1, 0, 0, 0,\n\t\t0, 1, 0, 0,\n\t\t0, 0, 1, 0,\n\t\t0, 0, 0, 1\n\n\t] );\n\n\tif ( arguments.length > 0 ) {\n\n\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n\t}\n\n};\n\nTHREE.Matrix4.prototype = {\n\n\tconstructor: THREE.Matrix4,\n\n\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\treturn this;\n\n\t},\n\n\tidentity: function () {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new THREE.Matrix4().fromArray( this.elements );\n\n\t},\n\n\tcopy: function ( m ) {\n\n\t\tthis.elements.set( m.elements );\n\n\t\treturn this;\n\n\t},\n\n\tcopyPosition: function ( m ) {\n\n\t\tvar te = this.elements;\n\t\tvar me = m.elements;\n\n\t\tte[ 12 ] = me[ 12 ];\n\t\tte[ 13 ] = me[ 13 ];\n\t\tte[ 14 ] = me[ 14 ];\n\n\t\treturn this;\n\n\t},\n\n\textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\treturn this;\n\n\t},\n\n\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\tthis.set(\n\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t0,       0,       0,       1\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\textractRotation: function () {\n\n\t\tvar v1;\n\n\t\treturn function extractRotation( m ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\n\t\t\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\n\t\t\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\n\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\n\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tmakeRotationFromEuler: function ( euler ) {\n\n\t\tif ( euler instanceof THREE.Euler === false ) {\n\n\t\t\tconsole.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\tvar te = this.elements;\n\n\t\tvar x = euler.x, y = euler.y, z = euler.z;\n\t\tvar a = Math.cos( x ), b = Math.sin( x );\n\t\tvar c = Math.cos( y ), d = Math.sin( y );\n\t\tvar e = Math.cos( z ), f = Math.sin( z );\n\n\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - c * f;\n\t\t\tte[ 8 ] = d;\n\n\t\t\tte[ 1 ] = af + be * d;\n\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\tte[ 9 ] = - b * c;\n\n\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\tte[ 6 ] = be + af * d;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce + df * b;\n\t\t\tte[ 4 ] = de * b - cf;\n\t\t\tte[ 8 ] = a * d;\n\n\t\t\tte[ 1 ] = a * f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b;\n\n\t\t\tte[ 2 ] = cf * b - de;\n\t\t\tte[ 6 ] = df + ce * b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce - df * b;\n\t\t\tte[ 4 ] = - a * f;\n\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\tte[ 1 ] = cf + de * b;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\tte[ 2 ] = - a * d;\n\t\t\tte[ 6 ] = b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = be * d - af;\n\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\tte[ 1 ] = c * f;\n\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\tte[ 2 ] = - d;\n\t\t\tte[ 6 ] = b * c;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\tte[ 1 ] = f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b * e;\n\n\t\t\tte[ 2 ] = - d * e;\n\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - f;\n\t\t\tte[ 8 ] = d * e;\n\n\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\tte[ 6 ] = b * e;\n\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t}\n\n\t\t// last column\n\t\tte[ 3 ] = 0;\n\t\tte[ 7 ] = 0;\n\t\tte[ 11 ] = 0;\n\n\t\t// bottom row\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationFromQuaternion: function ( q ) {\n\n\t\tvar te = this.elements;\n\n\t\tvar x = q.x, y = q.y, z = q.z, w = q.w;\n\t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\n\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\tte[ 0 ] = 1 - ( yy + zz );\n\t\tte[ 4 ] = xy - wz;\n\t\tte[ 8 ] = xz + wy;\n\n\t\tte[ 1 ] = xy + wz;\n\t\tte[ 5 ] = 1 - ( xx + zz );\n\t\tte[ 9 ] = yz - wx;\n\n\t\tte[ 2 ] = xz - wy;\n\t\tte[ 6 ] = yz + wx;\n\t\tte[ 10 ] = 1 - ( xx + yy );\n\n\t\t// last column\n\t\tte[ 3 ] = 0;\n\t\tte[ 7 ] = 0;\n\t\tte[ 11 ] = 0;\n\n\t\t// bottom row\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t},\n\n\tlookAt: function () {\n\n\t\tvar x, y, z;\n\n\t\treturn function lookAt( eye, target, up ) {\n\n\t\t\tif ( x === undefined ) {\n\n\t\t\t\tx = new THREE.Vector3();\n\t\t\t\ty = new THREE.Vector3();\n\t\t\t\tz = new THREE.Vector3();\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\n\t\t\tz.subVectors( eye, target ).normalize();\n\n\t\t\tif ( z.lengthSq() === 0 ) {\n\n\t\t\t\tz.z = 1;\n\n\t\t\t}\n\n\t\t\tx.crossVectors( up, z ).normalize();\n\n\t\t\tif ( x.lengthSq() === 0 ) {\n\n\t\t\t\tz.z += 0.0001;\n\t\t\t\tx.crossVectors( up, z ).normalize();\n\n\t\t\t}\n\n\t\t\ty.crossVectors( z, x );\n\n\n\t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\n\t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\n\t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tmultiply: function ( m, n ) {\n\n\t\tif ( n !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t\t\treturn this.multiplyMatrices( m, n );\n\n\t\t}\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t},\n\n\tpremultiply: function ( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t},\n\n\tmultiplyMatrices: function ( a, b ) {\n\n\t\tvar ae = a.elements;\n\t\tvar be = b.elements;\n\t\tvar te = this.elements;\n\n\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyToArray: function ( a, b, r ) {\n\n\t\tvar te = this.elements;\n\n\t\tthis.multiplyMatrices( a, b );\n\n\t\tr[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];\n\t\tr[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];\n\t\tr[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];\n\t\tr[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( s ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\treturn this;\n\n\t},\n\n\tapplyToVector3Array: function () {\n\n\t\tvar v1;\n\n\t\treturn function applyToVector3Array( array, offset, length ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\tif ( length === undefined ) length = array.length;\n\n\t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\n\t\t\t\tv1.fromArray( array, j );\n\t\t\t\tv1.applyMatrix4( this );\n\t\t\t\tv1.toArray( array, j );\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t};\n\n\t}(),\n\n\tapplyToBuffer: function () {\n\n\t\tvar v1;\n\n\t\treturn function applyToBuffer( buffer, offset, length ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\n\t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\n\t\t\t\tv1.x = buffer.getX( j );\n\t\t\t\tv1.y = buffer.getY( j );\n\t\t\t\tv1.z = buffer.getZ( j );\n\n\t\t\t\tv1.applyMatrix4( this );\n\n\t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\n\n\t\t\t}\n\n\t\t\treturn buffer;\n\n\t\t};\n\n\t}(),\n\n\tdeterminant: function () {\n\n\t\tvar te = this.elements;\n\n\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t//TODO: make this more efficient\n\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\treturn (\n\t\t\tn41 * (\n\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t - n13 * n24 * n32\n\t\t\t\t - n14 * n22 * n33\n\t\t\t\t + n12 * n24 * n33\n\t\t\t\t + n13 * n22 * n34\n\t\t\t\t - n12 * n23 * n34\n\t\t\t) +\n\t\t\tn42 * (\n\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t - n11 * n24 * n33\n\t\t\t\t + n14 * n21 * n33\n\t\t\t\t - n13 * n21 * n34\n\t\t\t\t + n13 * n24 * n31\n\t\t\t\t - n14 * n23 * n31\n\t\t\t) +\n\t\t\tn43 * (\n\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t - n11 * n22 * n34\n\t\t\t\t - n14 * n21 * n32\n\t\t\t\t + n12 * n21 * n34\n\t\t\t\t + n14 * n22 * n31\n\t\t\t\t - n12 * n24 * n31\n\t\t\t) +\n\t\t\tn44 * (\n\t\t\t\t- n13 * n22 * n31\n\t\t\t\t - n11 * n23 * n32\n\t\t\t\t + n11 * n22 * n33\n\t\t\t\t + n13 * n21 * n32\n\t\t\t\t - n12 * n21 * n33\n\t\t\t\t + n12 * n23 * n31\n\t\t\t)\n\n\t\t);\n\n\t},\n\n\ttranspose: function () {\n\n\t\tvar te = this.elements;\n\t\tvar tmp;\n\n\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\treturn this;\n\n\t},\n\n\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n\t\t\t\t\"- just use .toArray instead.\" );\n\n\t\treturn this.toArray( array, offset );\n\n\t},\n\n\tgetPosition: function () {\n\n\t\tvar v1;\n\n\t\treturn function getPosition() {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\n\t\t\treturn v1.setFromMatrixColumn( this, 3 );\n\n\t\t};\n\n\t}(),\n\n\tsetPosition: function ( v ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 12 ] = v.x;\n\t\tte[ 13 ] = v.y;\n\t\tte[ 14 ] = v.z;\n\n\t\treturn this;\n\n\t},\n\n\tgetInverse: function ( m, throwOnDegenerate ) {\n\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\tvar te = this.elements,\n\t\t\tme = m.elements,\n\n\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\n\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\tif ( det === 0 ) {\n\n\t\t\tvar msg = \"THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0\";\n\n\t\t\tif ( throwOnDegenerate || false ) {\n\n\t\t\t\tthrow new Error( msg );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( msg );\n\n\t\t\t}\n\n\t\t\treturn this.identity();\n\n\t\t}\n\t\t\n\t\tvar detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\tte[ 4 ] = t12 * detInv;\n\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\tte[ 8 ] = t13 * detInv;\n\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\tte[ 12 ] = t14 * detInv;\n\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\treturn this;\n\n\t},\n\n\tscale: function ( v ) {\n\n\t\tvar te = this.elements;\n\t\tvar x = v.x, y = v.y, z = v.z;\n\n\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\treturn this;\n\n\t},\n\n\tgetMaxScaleOnAxis: function () {\n\n\t\tvar te = this.elements;\n\n\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t},\n\n\tmakeTranslation: function ( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, x,\n\t\t\t0, 1, 0, y,\n\t\t\t0, 0, 1, z,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationX: function ( theta ) {\n\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t1, 0,  0, 0,\n\t\t\t0, c, - s, 0,\n\t\t\t0, s,  c, 0,\n\t\t\t0, 0,  0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationY: function ( theta ) {\n\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t c, 0, s, 0,\n\t\t\t 0, 1, 0, 0,\n\t\t\t- s, 0, c, 0,\n\t\t\t 0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationZ: function ( theta ) {\n\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\tc, - s, 0, 0,\n\t\t\ts,  c, 0, 0,\n\t\t\t0,  0, 1, 0,\n\t\t\t0,  0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationAxis: function ( axis, angle ) {\n\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\tvar c = Math.cos( angle );\n\t\tvar s = Math.sin( angle );\n\t\tvar t = 1 - c;\n\t\tvar x = axis.x, y = axis.y, z = axis.z;\n\t\tvar tx = t * x, ty = t * y;\n\n\t\tthis.set(\n\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\t return this;\n\n\t},\n\n\tmakeScale: function ( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\tx, 0, 0, 0,\n\t\t\t0, y, 0, 0,\n\t\t\t0, 0, z, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tcompose: function ( position, quaternion, scale ) {\n\n\t\tthis.makeRotationFromQuaternion( quaternion );\n\t\tthis.scale( scale );\n\t\tthis.setPosition( position );\n\n\t\treturn this;\n\n\t},\n\n\tdecompose: function () {\n\n\t\tvar vector, matrix;\n\n\t\treturn function decompose( position, quaternion, scale ) {\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tvector = new THREE.Vector3();\n\t\t\t\tmatrix = new THREE.Matrix4();\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t\t// if determine is negative, we need to invert one scale\n\t\t\tvar det = this.determinant();\n\t\t\tif ( det < 0 ) {\n\n\t\t\t\tsx = - sx;\n\n\t\t\t}\n\n\t\t\tposition.x = te[ 12 ];\n\t\t\tposition.y = te[ 13 ];\n\t\t\tposition.z = te[ 14 ];\n\n\t\t\t// scale the rotation part\n\n\t\t\tmatrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()\n\n\t\t\tvar invSX = 1 / sx;\n\t\t\tvar invSY = 1 / sy;\n\t\t\tvar invSZ = 1 / sz;\n\n\t\t\tmatrix.elements[ 0 ] *= invSX;\n\t\t\tmatrix.elements[ 1 ] *= invSX;\n\t\t\tmatrix.elements[ 2 ] *= invSX;\n\n\t\t\tmatrix.elements[ 4 ] *= invSY;\n\t\t\tmatrix.elements[ 5 ] *= invSY;\n\t\t\tmatrix.elements[ 6 ] *= invSY;\n\n\t\t\tmatrix.elements[ 8 ] *= invSZ;\n\t\t\tmatrix.elements[ 9 ] *= invSZ;\n\t\t\tmatrix.elements[ 10 ] *= invSZ;\n\n\t\t\tquaternion.setFromRotationMatrix( matrix );\n\n\t\t\tscale.x = sx;\n\t\t\tscale.y = sy;\n\t\t\tscale.z = sz;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\n\t\tvar te = this.elements;\n\t\tvar x = 2 * near / ( right - left );\n\t\tvar y = 2 * near / ( top - bottom );\n\n\t\tvar a = ( right + left ) / ( right - left );\n\t\tvar b = ( top + bottom ) / ( top - bottom );\n\t\tvar c = - ( far + near ) / ( far - near );\n\t\tvar d = - 2 * far * near / ( far - near );\n\n\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\treturn this;\n\n\t},\n\n\tmakePerspective: function ( fov, aspect, near, far ) {\n\n\t\tvar ymax = near * Math.tan( THREE.Math.DEG2RAD * fov * 0.5 );\n\t\tvar ymin = - ymax;\n\t\tvar xmin = ymin * aspect;\n\t\tvar xmax = ymax * aspect;\n\n\t\treturn this.makeFrustum( xmin, xmax, ymin, ymax, near, far );\n\n\t},\n\n\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\n\t\tvar te = this.elements;\n\t\tvar w = 1.0 / ( right - left );\n\t\tvar h = 1.0 / ( top - bottom );\n\t\tvar p = 1.0 / ( far - near );\n\n\t\tvar x = ( right + left ) * w;\n\t\tvar y = ( top + bottom ) * h;\n\t\tvar z = ( far + near ) * p;\n\n\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( matrix ) {\n\n\t\tvar te = this.elements;\n\t\tvar me = matrix.elements;\n\n\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tfromArray: function ( array ) {\n\n\t\tthis.elements.set( array );\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tvar te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\tarray[ offset + 8 ]  = te[ 8 ];\n\t\tarray[ offset + 9 ]  = te[ 9 ];\n\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\treturn array;\n\n\t}\n\n};\n\n// File:src/math/Ray.js\n\n/**\n * @author bhouston / http://clara.io\n */\n\nTHREE.Ray = function ( origin, direction ) {\n\n\tthis.origin = ( origin !== undefined ) ? origin : new THREE.Vector3();\n\tthis.direction = ( direction !== undefined ) ? direction : new THREE.Vector3();\n\n};\n\nTHREE.Ray.prototype = {\n\n\tconstructor: THREE.Ray,\n\n\tset: function ( origin, direction ) {\n\n\t\tthis.origin.copy( origin );\n\t\tthis.direction.copy( direction );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( ray ) {\n\n\t\tthis.origin.copy( ray.origin );\n\t\tthis.direction.copy( ray.direction );\n\n\t\treturn this;\n\n\t},\n\n\tat: function ( t, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\treturn result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t},\n\n\tlookAt: function ( v ) {\n\n\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\treturn this;\n\n\t},\n\n\trecast: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function recast( t ) {\n\n\t\t\tthis.origin.copy( this.at( t, v1 ) );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclosestPointToPoint: function ( point, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\tresult.subVectors( point, this.origin );\n\t\tvar directionDistance = result.dot( this.direction );\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn result.copy( this.origin );\n\n\t\t}\n\n\t\treturn result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t},\n\n\tdistanceToPoint: function ( point ) {\n\n\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t},\n\n\tdistanceSqToPoint: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function distanceSqToPoint( point ) {\n\n\t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t\t// point behind the ray\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t\t}\n\n\t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t\treturn v1.distanceToSquared( point );\n\n\t\t};\n\n\t}(),\n\n\tdistanceSqToSegment: function () {\n\n\t\tvar segCenter = new THREE.Vector3();\n\t\tvar segDir = new THREE.Vector3();\n\t\tvar diff = new THREE.Vector3();\n\n\t\treturn function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t// defined by v0 and v1\n\t\t\t// It can also set two optional targets :\n\t\t\t// - The closest point on the ray\n\t\t\t// - The closest point on the segment\n\n\t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\n\t\t\tdiff.copy( this.origin ).sub( segCenter );\n\n\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\t\tvar a01 = - this.direction.dot( segDir );\n\t\t\tvar b0 = diff.dot( this.direction );\n\t\t\tvar b1 = - diff.dot( segDir );\n\t\t\tvar c = diff.lengthSq();\n\t\t\tvar det = Math.abs( 1 - a01 * a01 );\n\t\t\tvar s0, s1, sqrDist, extDet;\n\n\t\t\tif ( det > 0 ) {\n\n\t\t\t\t// The ray and segment are not parallel.\n\n\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\textDet = segExtent * det;\n\n\t\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 5\n\n\t\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t\t// region 4\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 3\n\n\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 2\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Ray and segment are parallel.\n\n\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnRay ) {\n\n\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnSegment ) {\n\n\t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\n\n\t\t\t}\n\n\t\t\treturn sqrDist;\n\n\t\t};\n\n\t}(),\n\n\tintersectSphere: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function intersectSphere( sphere, optionalTarget ) {\n\n\t\t\tv1.subVectors( sphere.center, this.origin );\n\t\t\tvar tca = v1.dot( this.direction );\n\t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\n\t\t\tvar radius2 = sphere.radius * sphere.radius;\n\n\t\t\tif ( d2 > radius2 ) return null;\n\n\t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\n\t\t\t// t0 = first intersect point - entrance on front of sphere\n\t\t\tvar t0 = tca - thc;\n\n\t\t\t// t1 = second intersect point - exit point on back of sphere\n\t\t\tvar t1 = tca + thc;\n\n\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\n\t\t\t// test to see if t0 is behind the ray:\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t// in order to always return an intersect point that is in front of the ray.\n\t\t\tif ( t0 < 0 ) return this.at( t1, optionalTarget );\n\n\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\t\treturn this.at( t0, optionalTarget );\n\n\t\t};\n\n\t}(),\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\n\n\t},\n\n\tdistanceToPlane: function ( plane ) {\n\n\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t// Return if the ray never intersects the plane\n\n\t\treturn t >= 0 ? t :  null;\n\n\t},\n\n\tintersectPlane: function ( plane, optionalTarget ) {\n\n\t\tvar t = this.distanceToPlane( plane );\n\n\t\tif ( t === null ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn this.at( t, optionalTarget );\n\n\t},\n\n\n\n\tintersectsPlane: function ( plane ) {\n\n\t\t// check if the ray lies on the plane first\n\n\t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\n\t\tif ( distToPoint === 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\treturn false;\n\n\t},\n\n\tintersectBox: function ( box, optionalTarget ) {\n\n\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\tvar invdirx = 1 / this.direction.x,\n\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\tvar origin = this.origin;\n\n\t\tif ( invdirx >= 0 ) {\n\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t} else {\n\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t}\n\n\t\tif ( invdiry >= 0 ) {\n\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t} else {\n\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t}\n\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\n\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\n\t\tif ( invdirz >= 0 ) {\n\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t} else {\n\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t}\n\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n\t\t//return point closest to the ray (positive side)\n\n\t\tif ( tmax < 0 ) return null;\n\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, optionalTarget );\n\n\t},\n\n\tintersectsBox: ( function () {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function intersectsBox( box ) {\n\n\t\t\treturn this.intersectBox( box, v ) !== null;\n\n\t\t};\n\n\t} )(),\n\n\tintersectTriangle: function () {\n\n\t\t// Compute the offset origin, edges, and normal.\n\t\tvar diff = new THREE.Vector3();\n\t\tvar edge1 = new THREE.Vector3();\n\t\tvar edge2 = new THREE.Vector3();\n\t\tvar normal = new THREE.Vector3();\n\n\t\treturn function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {\n\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t\tedge1.subVectors( b, a );\n\t\t\tedge2.subVectors( c, a );\n\t\t\tnormal.crossVectors( edge1, edge2 );\n\n\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\t\tvar DdN = this.direction.dot( normal );\n\t\t\tvar sign;\n\n\t\t\tif ( DdN > 0 ) {\n\n\t\t\t\tif ( backfaceCulling ) return null;\n\t\t\t\tsign = 1;\n\n\t\t\t} else if ( DdN < 0 ) {\n\n\t\t\t\tsign = - 1;\n\t\t\t\tDdN = - DdN;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tdiff.subVectors( this.origin, a );\n\t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\n\n\t\t\t// b1 < 0, no intersection\n\t\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\n\n\t\t\t// b2 < 0, no intersection\n\t\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// b1+b2 > 1, no intersection\n\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Line intersects triangle, check if ray does.\n\t\t\tvar QdN = - sign * diff.dot( normal );\n\n\t\t\t// t < 0, no intersection\n\t\t\tif ( QdN < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Ray intersects triangle.\n\t\t\treturn this.at( QdN / DdN, optionalTarget );\n\n\t\t};\n\n\t}(),\n\n\tapplyMatrix4: function ( matrix4 ) {\n\n\t\tthis.direction.add( this.origin ).applyMatrix4( matrix4 );\n\t\tthis.origin.applyMatrix4( matrix4 );\n\t\tthis.direction.sub( this.origin );\n\t\tthis.direction.normalize();\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( ray ) {\n\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t}\n\n};\n\n// File:src/math/Sphere.js\n\n/**\n * @author bhouston / http://clara.io\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Sphere = function ( center, radius ) {\n\n\tthis.center = ( center !== undefined ) ? center : new THREE.Vector3();\n\tthis.radius = ( radius !== undefined ) ? radius : 0;\n\n};\n\nTHREE.Sphere.prototype = {\n\n\tconstructor: THREE.Sphere,\n\n\tset: function ( center, radius ) {\n\n\t\tthis.center.copy( center );\n\t\tthis.radius = radius;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPoints: function () {\n\n\t\tvar box = new THREE.Box3();\n\n\t\treturn function setFromPoints( points, optionalCenter ) {\n\n\t\t\tvar center = this.center;\n\n\t\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\t\tcenter.copy( optionalCenter );\n\n\t\t\t} else {\n\n\t\t\t\tbox.setFromPoints( points ).center( center );\n\n\t\t\t}\n\n\t\t\tvar maxRadiusSq = 0;\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t\t}\n\n\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( sphere ) {\n\n\t\tthis.center.copy( sphere.center );\n\t\tthis.radius = sphere.radius;\n\n\t\treturn this;\n\n\t},\n\n\tempty: function () {\n\n\t\treturn ( this.radius <= 0 );\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t},\n\n\tdistanceToPoint: function ( point ) {\n\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t},\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\tvar radiusSum = this.radius + sphere.radius;\n\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\treturn box.intersectsSphere( this );\n\n\t},\n\n\tintersectsPlane: function ( plane ) {\n\n\t\t// We use the following equation to compute the signed distance from\n\t\t// the center of the sphere to the plane.\n\t\t//\n\t\t// distance = q * n - d\n\t\t//\n\t\t// If this distance is greater than the radius of the sphere,\n\t\t// then there is no intersection.\n\n\t\treturn Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;\n\n\t},\n\n\tclampPoint: function ( point, optionalTarget ) {\n\n\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\tresult.copy( point );\n\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\tresult.sub( this.center ).normalize();\n\t\t\tresult.multiplyScalar( this.radius ).add( this.center );\n\n\t\t}\n\n\t\treturn result;\n\n\t},\n\n\tgetBoundingBox: function ( optionalTarget ) {\n\n\t\tvar box = optionalTarget || new THREE.Box3();\n\n\t\tbox.set( this.center, this.center );\n\t\tbox.expandByScalar( this.radius );\n\n\t\treturn box;\n\n\t},\n\n\tapplyMatrix4: function ( matrix ) {\n\n\t\tthis.center.applyMatrix4( matrix );\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\treturn this;\n\n\t},\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.center.add( offset );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( sphere ) {\n\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t}\n\n};\n\n// File:src/math/Frustum.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author bhouston / http://clara.io\n */\n\nTHREE.Frustum = function ( p0, p1, p2, p3, p4, p5 ) {\n\n\tthis.planes = [\n\n\t\t( p0 !== undefined ) ? p0 : new THREE.Plane(),\n\t\t( p1 !== undefined ) ? p1 : new THREE.Plane(),\n\t\t( p2 !== undefined ) ? p2 : new THREE.Plane(),\n\t\t( p3 !== undefined ) ? p3 : new THREE.Plane(),\n\t\t( p4 !== undefined ) ? p4 : new THREE.Plane(),\n\t\t( p5 !== undefined ) ? p5 : new THREE.Plane()\n\n\t];\n\n};\n\nTHREE.Frustum.prototype = {\n\n\tconstructor: THREE.Frustum,\n\n\tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tvar planes = this.planes;\n\n\t\tplanes[ 0 ].copy( p0 );\n\t\tplanes[ 1 ].copy( p1 );\n\t\tplanes[ 2 ].copy( p2 );\n\t\tplanes[ 3 ].copy( p3 );\n\t\tplanes[ 4 ].copy( p4 );\n\t\tplanes[ 5 ].copy( p5 );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( frustum ) {\n\n\t\tvar planes = this.planes;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrix: function ( m ) {\n\n\t\tvar planes = this.planes;\n\t\tvar me = m.elements;\n\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\treturn this;\n\n\t},\n\n\tintersectsObject: function () {\n\n\t\tvar sphere = new THREE.Sphere();\n\n\t\treturn function intersectsObject( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null )\n\t\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\tsphere.copy( geometry.boundingSphere )\n\t\t\t\t.applyMatrix4( object.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t};\n\n\t}(),\n\n\tintersectsSprite: function () {\n\n\t\tvar sphere = new THREE.Sphere();\n\n\t\treturn function intersectsSprite( sprite ) {\n\n\t\t\tsphere.center.set( 0, 0, 0 );\n\t\t\tsphere.radius = 0.7071067811865476;\n\t\t\tsphere.applyMatrix4( sprite.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t};\n\n\t}(),\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\tvar planes = this.planes;\n\t\tvar center = sphere.center;\n\t\tvar negRadius = - sphere.radius;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\n\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tintersectsBox: function () {\n\n\t\tvar p1 = new THREE.Vector3(),\n\t\t\tp2 = new THREE.Vector3();\n\n\t\treturn function intersectsBox( box ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6 ; i ++ ) {\n\n\t\t\t\tvar plane = planes[ i ];\n\n\t\t\t\tp1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\n\t\t\t\tp2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\tp1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\n\t\t\t\tp2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\tp1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\n\t\t\t\tp2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\tvar d1 = plane.distanceToPoint( p1 );\n\t\t\t\tvar d2 = plane.distanceToPoint( p2 );\n\n\t\t\t\t// if both outside plane, no intersection\n\n\t\t\t\tif ( d1 < 0 && d2 < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t};\n\n\t}(),\n\n\n\tcontainsPoint: function ( point ) {\n\n\t\tvar planes = this.planes;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n};\n\n// File:src/math/Plane.js\n\n/**\n * @author bhouston / http://clara.io\n */\n\nTHREE.Plane = function ( normal, constant ) {\n\n\tthis.normal = ( normal !== undefined ) ? normal : new THREE.Vector3( 1, 0, 0 );\n\tthis.constant = ( constant !== undefined ) ? constant : 0;\n\n};\n\nTHREE.Plane.prototype = {\n\n\tconstructor: THREE.Plane,\n\n\tset: function ( normal, constant ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = constant;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponents: function ( x, y, z, w ) {\n\n\t\tthis.normal.set( x, y, z );\n\t\tthis.constant = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = - point.dot( this.normal );\t// must be this.normal, not normal, as this.normal is normalized\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCoplanarPoints: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\t\tvar v2 = new THREE.Vector3();\n\n\t\treturn function setFromCoplanarPoints( a, b, c ) {\n\n\t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\n\n\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( plane ) {\n\n\t\tthis.normal.copy( plane.normal );\n\t\tthis.constant = plane.constant;\n\n\t\treturn this;\n\n\t},\n\n\tnormalize: function () {\n\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\tthis.constant *= inverseNormalLength;\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.constant *= - 1;\n\t\tthis.normal.negate();\n\n\t\treturn this;\n\n\t},\n\n\tdistanceToPoint: function ( point ) {\n\n\t\treturn this.normal.dot( point ) + this.constant;\n\n\t},\n\n\tdistanceToSphere: function ( sphere ) {\n\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t},\n\n\tprojectPoint: function ( point, optionalTarget ) {\n\n\t\treturn this.orthoPoint( point, optionalTarget ).sub( point ).negate();\n\n\t},\n\n\torthoPoint: function ( point, optionalTarget ) {\n\n\t\tvar perpendicularMagnitude = this.distanceToPoint( point );\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );\n\n\t},\n\n\tintersectLine: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function intersectLine( line, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t\tvar direction = line.delta( v1 );\n\n\t\t\tvar denominator = this.normal.dot( direction );\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\t\treturn result.copy( line.start );\n\n\t\t\t\t}\n\n\t\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\treturn result.copy( direction ).multiplyScalar( t ).add( line.start );\n\n\t\t};\n\n\t}(),\n\n\tintersectsLine: function ( line ) {\n\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\tvar startSign = this.distanceToPoint( line.start );\n\t\tvar endSign = this.distanceToPoint( line.end );\n\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\treturn box.intersectsPlane( this );\n\n\t},\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\treturn sphere.intersectsPlane( this );\n\n\t},\n\n\tcoplanarPoint: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t},\n\n\tapplyMatrix4: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\t\tvar m1 = new THREE.Matrix3();\n\n\t\treturn function applyMatrix4( matrix, optionalNormalMatrix ) {\n\n\t\t\tvar referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );\n\n\t\t\t// transform normal based on theory here:\n\t\t\t// http://www.songho.ca/opengl/gl_normaltransform.html\n\t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\n\t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t// recalculate constant (like in setFromNormalAndCoplanarPoint)\n\t\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.constant = this.constant - offset.dot( this.normal );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( plane ) {\n\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t}\n\n};\n\n// File:src/math/Spherical.js\n\n/**\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n *\n * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n *\n * The poles (phi) are at the positive and negative y axis.\n * The equator starts at positive z.\n */\n\nTHREE.Spherical = function ( radius, phi, theta ) {\n\n\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n\tthis.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole\n\tthis.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere\n\n\treturn this;\n\n};\n\nTHREE.Spherical.prototype = {\n\n\tconstructor: THREE.Spherical,\n\n\tset: function ( radius, phi, theta ) {\n\n\t\tthis.radius = radius;\n\t\tthis.phi = phi;\n\t\tthis.theta = theta;\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( other ) {\n\n\t\tthis.radius.copy( other.radius );\n\t\tthis.phi.copy( other.phi );\n\t\tthis.theta.copy( other.theta );\n\n\t\treturn this;\n\n\t},\n\n\t// restrict phi to be betwee EPS and PI-EPS\n\tmakeSafe: function() {\n\n\t\tvar EPS = 0.000001;\n\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromVector3: function( vec3 ) {\n\n\t\tthis.radius = vec3.length();\n\n\t\tif ( this.radius === 0 ) {\n\n\t\t\tthis.theta = 0;\n\t\t\tthis.phi = 0;\n\n\t\t} else {\n\n\t\t\tthis.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis\n\t\t\tthis.phi = Math.acos( THREE.Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n};\n\n// File:src/math/Math.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Math = {\n\n\tDEG2RAD: Math.PI / 180,\n\tRAD2DEG: 180 / Math.PI,\n\n\tgenerateUUID: function () {\n\n\t\t// http://www.broofa.com/Tools/Math.uuid.htm\n\n\t\tvar chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );\n\t\tvar uuid = new Array( 36 );\n\t\tvar rnd = 0, r;\n\n\t\treturn function generateUUID() {\n\n\t\t\tfor ( var i = 0; i < 36; i ++ ) {\n\n\t\t\t\tif ( i === 8 || i === 13 || i === 18 || i === 23 ) {\n\n\t\t\t\t\tuuid[ i ] = '-';\n\n\t\t\t\t} else if ( i === 14 ) {\n\n\t\t\t\t\tuuid[ i ] = '4';\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;\n\t\t\t\t\tr = rnd & 0xf;\n\t\t\t\t\trnd = rnd >> 4;\n\t\t\t\t\tuuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn uuid.join( '' );\n\n\t\t};\n\n\t}(),\n\n\tclamp: function ( value, min, max ) {\n\n\t\treturn Math.max( min, Math.min( max, value ) );\n\n\t},\n\n\t// compute euclidian modulo of m % n\n\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\teuclideanModulo: function ( n, m ) {\n\n\t\treturn ( ( n % m ) + m ) % m;\n\n\t},\n\n\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\n\tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\n\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n\t},\n\n\t// http://en.wikipedia.org/wiki/Smoothstep\n\n\tsmoothstep: function ( x, min, max ) {\n\n\t\tif ( x <= min ) return 0;\n\t\tif ( x >= max ) return 1;\n\n\t\tx = ( x - min ) / ( max - min );\n\n\t\treturn x * x * ( 3 - 2 * x );\n\n\t},\n\n\tsmootherstep: function ( x, min, max ) {\n\n\t\tif ( x <= min ) return 0;\n\t\tif ( x >= max ) return 1;\n\n\t\tx = ( x - min ) / ( max - min );\n\n\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n\t},\n\n\trandom16: function () {\n\n\t\tconsole.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );\n\t\treturn Math.random();\n\n\t},\n\n\t// Random integer from <low, high> interval\n\n\trandInt: function ( low, high ) {\n\n\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n\t},\n\n\t// Random float from <low, high> interval\n\n\trandFloat: function ( low, high ) {\n\n\t\treturn low + Math.random() * ( high - low );\n\n\t},\n\n\t// Random float from <-range/2, range/2> interval\n\n\trandFloatSpread: function ( range ) {\n\n\t\treturn range * ( 0.5 - Math.random() );\n\n\t},\n\n\tdegToRad: function ( degrees ) {\n\n\t\treturn degrees * THREE.Math.DEG2RAD;\n\n\t},\n\n\tradToDeg: function ( radians ) {\n\n\t\treturn radians * THREE.Math.RAD2DEG;\n\n\t},\n\n\tisPowerOfTwo: function ( value ) {\n\n\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t},\n\n\tnearestPowerOfTwo: function ( value ) {\n\n\t\treturn Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );\n\n\t},\n\n\tnextPowerOfTwo: function ( value ) {\n\n\t\tvalue --;\n\t\tvalue |= value >> 1;\n\t\tvalue |= value >> 2;\n\t\tvalue |= value >> 4;\n\t\tvalue |= value >> 8;\n\t\tvalue |= value >> 16;\n\t\tvalue ++;\n\n\t\treturn value;\n\n\t}\n\n};\n\n// File:src/math/Spline.js\n\n/**\n * Spline from Tween.js, slightly optimized (and trashed)\n * http://sole.github.com/tween.js/examples/05_spline.html\n *\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Spline = function ( points ) {\n\n\tthis.points = points;\n\n\tvar c = [], v3 = { x: 0, y: 0, z: 0 },\n\tpoint, intPoint, weight, w2, w3,\n\tpa, pb, pc, pd;\n\n\tthis.initFromArray = function ( a ) {\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0; i < a.length; i ++ ) {\n\n\t\t\tthis.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };\n\n\t\t}\n\n\t};\n\n\tthis.getPoint = function ( k ) {\n\n\t\tpoint = ( this.points.length - 1 ) * k;\n\t\tintPoint = Math.floor( point );\n\t\tweight = point - intPoint;\n\n\t\tc[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\n\t\tc[ 1 ] = intPoint;\n\t\tc[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;\n\t\tc[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;\n\n\t\tpa = this.points[ c[ 0 ] ];\n\t\tpb = this.points[ c[ 1 ] ];\n\t\tpc = this.points[ c[ 2 ] ];\n\t\tpd = this.points[ c[ 3 ] ];\n\n\t\tw2 = weight * weight;\n\t\tw3 = weight * w2;\n\n\t\tv3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );\n\t\tv3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );\n\t\tv3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );\n\n\t\treturn v3;\n\n\t};\n\n\tthis.getControlPointsArray = function () {\n\n\t\tvar i, p, l = this.points.length,\n\t\t\tcoords = [];\n\n\t\tfor ( i = 0; i < l; i ++ ) {\n\n\t\t\tp = this.points[ i ];\n\t\t\tcoords[ i ] = [ p.x, p.y, p.z ];\n\n\t\t}\n\n\t\treturn coords;\n\n\t};\n\n\t// approximate length by summing linear segments\n\n\tthis.getLength = function ( nSubDivisions ) {\n\n\t\tvar i, index, nSamples, position,\n\t\t\tpoint = 0, intPoint = 0, oldIntPoint = 0,\n\t\t\toldPosition = new THREE.Vector3(),\n\t\t\ttmpVec = new THREE.Vector3(),\n\t\t\tchunkLengths = [],\n\t\t\ttotalLength = 0;\n\n\t\t// first point has 0 length\n\n\t\tchunkLengths[ 0 ] = 0;\n\n\t\tif ( ! nSubDivisions ) nSubDivisions = 100;\n\n\t\tnSamples = this.points.length * nSubDivisions;\n\n\t\toldPosition.copy( this.points[ 0 ] );\n\n\t\tfor ( i = 1; i < nSamples; i ++ ) {\n\n\t\t\tindex = i / nSamples;\n\n\t\t\tposition = this.getPoint( index );\n\t\t\ttmpVec.copy( position );\n\n\t\t\ttotalLength += tmpVec.distanceTo( oldPosition );\n\n\t\t\toldPosition.copy( position );\n\n\t\t\tpoint = ( this.points.length - 1 ) * index;\n\t\t\tintPoint = Math.floor( point );\n\n\t\t\tif ( intPoint !== oldIntPoint ) {\n\n\t\t\t\tchunkLengths[ intPoint ] = totalLength;\n\t\t\t\toldIntPoint = intPoint;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// last point ends with total length\n\n\t\tchunkLengths[ chunkLengths.length ] = totalLength;\n\n\t\treturn { chunks: chunkLengths, total: totalLength };\n\n\t};\n\n\tthis.reparametrizeByArcLength = function ( samplingCoef ) {\n\n\t\tvar i, j,\n\t\t\tindex, indexCurrent, indexNext,\n\t\t\trealDistance,\n\t\t\tsampling, position,\n\t\t\tnewpoints = [],\n\t\t\ttmpVec = new THREE.Vector3(),\n\t\t\tsl = this.getLength();\n\n\t\tnewpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );\n\n\t\tfor ( i = 1; i < this.points.length; i ++ ) {\n\n\t\t\t//tmpVec.copy( this.points[ i - 1 ] );\n\t\t\t//linearDistance = tmpVec.distanceTo( this.points[ i ] );\n\n\t\t\trealDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];\n\n\t\t\tsampling = Math.ceil( samplingCoef * realDistance / sl.total );\n\n\t\t\tindexCurrent = ( i - 1 ) / ( this.points.length - 1 );\n\t\t\tindexNext = i / ( this.points.length - 1 );\n\n\t\t\tfor ( j = 1; j < sampling - 1; j ++ ) {\n\n\t\t\t\tindex = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );\n\n\t\t\t\tposition = this.getPoint( index );\n\t\t\t\tnewpoints.push( tmpVec.copy( position ).clone() );\n\n\t\t\t}\n\n\t\t\tnewpoints.push( tmpVec.copy( this.points[ i ] ).clone() );\n\n\t\t}\n\n\t\tthis.points = newpoints;\n\n\t};\n\n\t// Catmull-Rom\n\n\tfunction interpolate( p0, p1, p2, p3, t, t2, t3 ) {\n\n\t\tvar v0 = ( p2 - p0 ) * 0.5,\n\t\t\tv1 = ( p3 - p1 ) * 0.5;\n\n\t\treturn ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n\t}\n\n};\n\n// File:src/math/Triangle.js\n\n/**\n * @author bhouston / http://clara.io\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Triangle = function ( a, b, c ) {\n\n\tthis.a = ( a !== undefined ) ? a : new THREE.Vector3();\n\tthis.b = ( b !== undefined ) ? b : new THREE.Vector3();\n\tthis.c = ( c !== undefined ) ? c : new THREE.Vector3();\n\n};\n\nTHREE.Triangle.normal = function () {\n\n\tvar v0 = new THREE.Vector3();\n\n\treturn function normal( a, b, c, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\tresult.subVectors( c, b );\n\t\tv0.subVectors( a, b );\n\t\tresult.cross( v0 );\n\n\t\tvar resultLengthSq = result.lengthSq();\n\t\tif ( resultLengthSq > 0 ) {\n\n\t\t\treturn result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\n\n\t\t}\n\n\t\treturn result.set( 0, 0, 0 );\n\n\t};\n\n}();\n\n// static/instance method to calculate barycentric coordinates\n// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\nTHREE.Triangle.barycoordFromPoint = function () {\n\n\tvar v0 = new THREE.Vector3();\n\tvar v1 = new THREE.Vector3();\n\tvar v2 = new THREE.Vector3();\n\n\treturn function barycoordFromPoint( point, a, b, c, optionalTarget ) {\n\n\t\tv0.subVectors( c, a );\n\t\tv1.subVectors( b, a );\n\t\tv2.subVectors( point, a );\n\n\t\tvar dot00 = v0.dot( v0 );\n\t\tvar dot01 = v0.dot( v1 );\n\t\tvar dot02 = v0.dot( v2 );\n\t\tvar dot11 = v1.dot( v1 );\n\t\tvar dot12 = v1.dot( v2 );\n\n\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t// collinear or singular triangle\n\t\tif ( denom === 0 ) {\n\n\t\t\t// arbitrary location outside of triangle?\n\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\treturn result.set( - 2, - 1, - 1 );\n\n\t\t}\n\n\t\tvar invDenom = 1 / denom;\n\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t// barycentric coordinates must always sum to 1\n\t\treturn result.set( 1 - u - v, v, u );\n\n\t};\n\n}();\n\nTHREE.Triangle.containsPoint = function () {\n\n\tvar v1 = new THREE.Vector3();\n\n\treturn function containsPoint( point, a, b, c ) {\n\n\t\tvar result = THREE.Triangle.barycoordFromPoint( point, a, b, c, v1 );\n\n\t\treturn ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\n\n\t};\n\n}();\n\nTHREE.Triangle.prototype = {\n\n\tconstructor: THREE.Triangle,\n\n\tset: function ( a, b, c ) {\n\n\t\tthis.a.copy( a );\n\t\tthis.b.copy( b );\n\t\tthis.c.copy( c );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\n\t\tthis.a.copy( points[ i0 ] );\n\t\tthis.b.copy( points[ i1 ] );\n\t\tthis.c.copy( points[ i2 ] );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( triangle ) {\n\n\t\tthis.a.copy( triangle.a );\n\t\tthis.b.copy( triangle.b );\n\t\tthis.c.copy( triangle.c );\n\n\t\treturn this;\n\n\t},\n\n\tarea: function () {\n\n\t\tvar v0 = new THREE.Vector3();\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function area() {\n\n\t\t\tv0.subVectors( this.c, this.b );\n\t\t\tv1.subVectors( this.a, this.b );\n\n\t\t\treturn v0.cross( v1 ).length() * 0.5;\n\n\t\t};\n\n\t}(),\n\n\tmidpoint: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t},\n\n\tnormal: function ( optionalTarget ) {\n\n\t\treturn THREE.Triangle.normal( this.a, this.b, this.c, optionalTarget );\n\n\t},\n\n\tplane: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Plane();\n\n\t\treturn result.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t},\n\n\tbarycoordFromPoint: function ( point, optionalTarget ) {\n\n\t\treturn THREE.Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\treturn THREE.Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t},\n\n\tclosestPointToPoint: function () {\n\n\t\tvar plane, edgeList, projectedPoint, closestPoint;\n\n\t\treturn function closestPointToPoint( point, optionalTarget ) {\n\n\t\t\tif ( plane === undefined ) {\n\n\t\t\t\tplane = new THREE.Plane();\n\t\t\t\tedgeList = [ new THREE.Line3(), new THREE.Line3(), new THREE.Line3() ];\n\t\t\t\tprojectedPoint = new THREE.Vector3();\n\t\t\t\tclosestPoint = new THREE.Vector3();\n\n\t\t\t}\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\t\tvar minDistance = Infinity;\n\n\t\t\t// project the point onto the plane of the triangle\n\n\t\t\tplane.setFromCoplanarPoints( this.a, this.b, this.c );\n\t\t\tplane.projectPoint( point, projectedPoint );\n\n\t\t\t// check if the projection lies within the triangle\n\n\t\t\tif( this.containsPoint( projectedPoint ) === true ) {\n\n\t\t\t\t// if so, this is the closest point\n\n\t\t\t\tresult.copy( projectedPoint );\n\n\t\t\t} else {\n\n\t\t\t\t// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices\n\n\t\t\t\tedgeList[ 0 ].set( this.a, this.b );\n\t\t\t\tedgeList[ 1 ].set( this.b, this.c );\n\t\t\t\tedgeList[ 2 ].set( this.c, this.a );\n\n\t\t\t\tfor( var i = 0; i < edgeList.length; i ++ ) {\n\n\t\t\t\t\tedgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );\n\n\t\t\t\t\tvar distance = projectedPoint.distanceToSquared( closestPoint );\n\n\t\t\t\t\tif( distance < minDistance ) {\n\n\t\t\t\t\t\tminDistance = distance;\n\n\t\t\t\t\t\tresult.copy( closestPoint );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t};\n\n\t}(),\n\n\tequals: function ( triangle ) {\n\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t}\n\n};\n\n// File:src/math/Interpolant.js\n\n/**\n * Abstract base class of interpolants over parametric samples.\n *\n * The parameter domain is one dimensional, typically the time or a path\n * along a curve defined by the data.\n *\n * The sample values can have any dimensionality and derived classes may\n * apply special interpretations to the data.\n *\n * This class provides the interval seek in a Template Method, deferring\n * the actual interpolation to derived classes.\n *\n * Time complexity is O(1) for linear access crossing at most two points\n * and O(log N) for random access, where N is the number of positions.\n *\n * References:\n *\n * \t\thttp://www.oodesign.com/template-method-pattern.html\n *\n * @author tschw\n */\n\nTHREE.Interpolant = function(\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tthis.parameterPositions = parameterPositions;\n\tthis._cachedIndex = 0;\n\n\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\tthis.sampleValues = sampleValues;\n\tthis.valueSize = sampleSize;\n\n};\n\nTHREE.Interpolant.prototype = {\n\n\tconstructor: THREE.Interpolant,\n\n\tevaluate: function( t ) {\n\n\t\tvar pp = this.parameterPositions,\n\t\t\ti1 = this._cachedIndex,\n\n\t\t\tt1 = pp[   i1   ],\n\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\tvalidate_interval: {\n\n\t\t\tseek: {\n\n\t\t\t\tvar right;\n\n\t\t\t\tlinear_scan: {\n//- See http://jsperf.com/comparison-to-undefined/3\n//- slower code:\n//-\n//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ;) {\n\n\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\n\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n//- slower code:\n//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\tvar t1global = pp[ 1 ];\n\n\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ;) {\n\n\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t} // linear scan\n\n\t\t\t\t// binary search\n\n\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tt1 = pp[   i1   ];\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t// check boundary cases, again\n\n\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\n\t\t\t\t}\n\n\t\t\t} // seek\n\n\t\t\tthis._cachedIndex = i1;\n\n\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t} // validate_interval\n\n\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t},\n\n\tsettings: null, // optional, subclass-specific settings structure\n\t// Note: The indirection allows central control of many interpolants.\n\n\t// --- Protected interface\n\n\tDefaultSettings_: {},\n\n\tgetSettings_: function() {\n\n\t\treturn this.settings || this.DefaultSettings_;\n\n\t},\n\n\tcopySampleValue_: function( index ) {\n\n\t\t// copies a sample value to the result buffer\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = index * stride;\n\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t},\n\n\t// Template methods for derived classes:\n\n\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\tthrow new Error( \"call to abstract method\" );\n\t\t// implementations shall return this.resultBuffer\n\n\t},\n\n\tintervalChanged_: function( i1, t0, t1 ) {\n\n\t\t// empty\n\n\t}\n\n};\n\nObject.assign( THREE.Interpolant.prototype, {\n\n\tbeforeStart_: //( 0, t, t0 ), returns this.resultBuffer\n\t\tTHREE.Interpolant.prototype.copySampleValue_,\n\n\tafterEnd_: //( N-1, tN-1, t ), returns this.resultBuffer\n\t\tTHREE.Interpolant.prototype.copySampleValue_\n\n} );\n\n// File:src/math/interpolants/CubicInterpolant.js\n\n/**\n * Fast and simple cubic spline interpolant.\n *\n * It was derived from a Hermitian construction setting the first derivative\n * at each sample position to the linear slope between neighboring positions\n * over their parameter interval.\n *\n * @author tschw\n */\n\nTHREE.CubicInterpolant = function(\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tTHREE.Interpolant.call(\n\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\tthis._weightPrev = -0;\n\tthis._offsetPrev = -0;\n\tthis._weightNext = -0;\n\tthis._offsetNext = -0;\n\n};\n\nTHREE.CubicInterpolant.prototype =\n\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\n\n\tconstructor: THREE.CubicInterpolant,\n\n\tDefaultSettings_: {\n\n\t\tendingStart: \tTHREE.ZeroCurvatureEnding,\n\t\tendingEnd:\t\tTHREE.ZeroCurvatureEnding\n\n\t},\n\n\tintervalChanged_: function( i1, t0, t1 ) {\n\n\t\tvar pp = this.parameterPositions,\n\t\t\tiPrev = i1 - 2,\n\t\t\tiNext = i1 + 1,\n\n\t\t\ttPrev = pp[ iPrev ],\n\t\t\ttNext = pp[ iNext ];\n\n\t\tif ( tPrev === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\tcase THREE.ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = t1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tNext === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\tcase THREE.ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\tiNext = i1;\n\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiNext = 1;\n\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\ttNext = t0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar halfDt = ( t1 - t0 ) * 0.5,\n\t\t\tstride = this.valueSize;\n\n\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\tthis._offsetPrev = iPrev * stride;\n\t\tthis._offsetNext = iNext * stride;\n\n\t},\n\n\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tpp = p * p,\n\t\t\tppp = pp * p;\n\n\t\t// evaluate polynomials\n\n\t\tvar sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;\n\t\tvar s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;\n\t\tvar s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;\n\t\tvar sN =       wN   * ppp   -           wN      * pp;\n\n\t\t// combine data linearly\n\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n} );\n\n// File:src/math/interpolants/DiscreteInterpolant.js\n\n/**\n *\n * Interpolant that evaluates to the sample value at the position preceeding\n * the parameter.\n *\n * @author tschw\n */\n\nTHREE.DiscreteInterpolant = function(\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tTHREE.Interpolant.call(\n\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n};\n\nTHREE.DiscreteInterpolant.prototype =\n\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\n\n\tconstructor: THREE.DiscreteInterpolant,\n\n\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t}\n\n} );\n\n// File:src/math/interpolants/LinearInterpolant.js\n\n/**\n * @author tschw\n */\n\nTHREE.LinearInterpolant = function(\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tTHREE.Interpolant.call(\n\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n};\n\nTHREE.LinearInterpolant.prototype =\n\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\n\n\tconstructor: THREE.LinearInterpolant,\n\n\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\toffset1 = i1 * stride,\n\t\t\toffset0 = offset1 - stride,\n\n\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tweight0 = 1 - weight1;\n\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n} );\n\n// File:src/math/interpolants/QuaternionLinearInterpolant.js\n\n/**\n * Spherical linear unit quaternion interpolant.\n *\n * @author tschw\n */\n\nTHREE.QuaternionLinearInterpolant = function(\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tTHREE.Interpolant.call(\n\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n};\n\nTHREE.QuaternionLinearInterpolant.prototype =\n\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\n\n\tconstructor: THREE.QuaternionLinearInterpolant,\n\n\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\toffset = i1 * stride,\n\n\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\tTHREE.Quaternion.slerpFlat( result, 0,\n\t\t\t\t\tvalues, offset - stride, values, offset, alpha );\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n} );\n\n// File:src/core/Clock.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Clock = function ( autoStart ) {\n\n\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\n\tthis.startTime = 0;\n\tthis.oldTime = 0;\n\tthis.elapsedTime = 0;\n\n\tthis.running = false;\n\n};\n\nTHREE.Clock.prototype = {\n\n\tconstructor: THREE.Clock,\n\n\tstart: function () {\n\n\t\tthis.startTime = ( performance || Date ).now();\n\n\t\tthis.oldTime = this.startTime;\n\t\tthis.running = true;\n\n\t},\n\n\tstop: function () {\n\n\t\tthis.getElapsedTime();\n\t\tthis.running = false;\n\n\t},\n\n\tgetElapsedTime: function () {\n\n\t\tthis.getDelta();\n\t\treturn this.elapsedTime;\n\n\t},\n\n\tgetDelta: function () {\n\n\t\tvar diff = 0;\n\n\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\tthis.start();\n\n\t\t}\n\n\t\tif ( this.running ) {\n\n\t\t\tvar newTime = ( performance || Date ).now();\n\n\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\tthis.oldTime = newTime;\n\n\t\t\tthis.elapsedTime += diff;\n\n\t\t}\n\n\t\treturn diff;\n\n\t}\n\n};\n\n// File:src/core/EventDispatcher.js\n\n/**\n * https://github.com/mrdoob/eventdispatcher.js/\n */\n\nTHREE.EventDispatcher = function () {};\n\nObject.assign( THREE.EventDispatcher.prototype, {\n\n\taddEventListener: function ( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) this._listeners = {};\n\n\t\tvar listeners = this._listeners;\n\n\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\tlisteners[ type ] = [];\n\n\t\t}\n\n\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\tlisteners[ type ].push( listener );\n\n\t\t}\n\n\t},\n\n\thasEventListener: function ( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return false;\n\n\t\tvar listeners = this._listeners;\n\n\t\tif ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t},\n\n\tremoveEventListener: function ( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tvar listeners = this._listeners;\n\t\tvar listenerArray = listeners[ type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tvar index = listenerArray.indexOf( listener );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tdispatchEvent: function ( event ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tvar listeners = this._listeners;\n\t\tvar listenerArray = listeners[ event.type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tevent.target = this;\n\n\t\t\tvar array = [], i = 0;\n\t\t\tvar length = listenerArray.length;\n\n\t\t\tfor ( i = 0; i < length; i ++ ) {\n\n\t\t\t\tarray[ i ] = listenerArray[ i ];\n\n\t\t\t}\n\n\t\t\tfor ( i = 0; i < length; i ++ ) {\n\n\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n} );\n\n// File:src/core/Layers.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Layers = function () {\n\n\tthis.mask = 1;\n\n};\n\nTHREE.Layers.prototype = {\n\n\tconstructor: THREE.Layers,\n\n\tset: function ( channel ) {\n\n\t\tthis.mask = 1 << channel;\n\n\t},\n\n\tenable: function ( channel ) {\n\n\t\tthis.mask |= 1 << channel;\n\n\t},\n\n\ttoggle: function ( channel ) {\n\n\t\tthis.mask ^= 1 << channel;\n\n\t},\n\n\tdisable: function ( channel ) {\n\n\t\tthis.mask &= ~ ( 1 << channel );\n\n\t},\n\n\ttest: function ( layers ) {\n\n\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t}\n\n};\n\n// File:src/core/Raycaster.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author bhouston / http://clara.io/\n * @author stephomi / http://stephaneginier.com/\n */\n\n( function ( THREE ) {\n\n\tTHREE.Raycaster = function ( origin, direction, near, far ) {\n\n\t\tthis.ray = new THREE.Ray( origin, direction );\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near || 0;\n\t\tthis.far = far || Infinity;\n\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: {},\n\t\t\tLOD: {},\n\t\t\tPoints: { threshold: 1 },\n\t\t\tSprite: {}\n\t\t};\n\n\t\tObject.defineProperties( this.params, {\n\t\t\tPointCloud: {\n\t\t\t\tget: function () {\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n\t\t\t\t\treturn this.Points;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t};\n\n\tfunction ascSort( a, b ) {\n\n\t\treturn a.distance - b.distance;\n\n\t}\n\n\tfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tobject.raycast( raycaster, intersects );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t//\n\n\tTHREE.Raycaster.prototype = {\n\n\t\tconstructor: THREE.Raycaster,\n\n\t\tlinePrecision: 1,\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\t\tthis.ray.set( origin, direction );\n\n\t\t},\n\n\t\tsetFromCamera: function ( coords, camera ) {\n\n\t\t\tif ( camera instanceof THREE.PerspectiveCamera ) {\n\n\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\n\t\t\t} else if ( camera instanceof THREE.OrthographicCamera ) {\n\n\t\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\n\t\t\t}\n\n\t\t},\n\n\t\tintersectObject: function ( object, recursive ) {\n\n\t\t\tvar intersects = [];\n\n\t\t\tintersectObject( object, this, intersects, recursive );\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t},\n\n\t\tintersectObjects: function ( objects, recursive ) {\n\n\t\t\tvar intersects = [];\n\n\t\t\tif ( Array.isArray( objects ) === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t\t\t\treturn intersects;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t\t}\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t}\n\n\t};\n\n}( THREE ) );\n\n// File:src/core/Object3D.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author elephantatwork / www.elephantatwork.ch\n */\n\nTHREE.Object3D = function () {\n\n\tObject.defineProperty( this, 'id', { value: THREE.Object3DIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'Object3D';\n\n\tthis.parent = null;\n\tthis.children = [];\n\n\tthis.up = THREE.Object3D.DefaultUp.clone();\n\n\tvar position = new THREE.Vector3();\n\tvar rotation = new THREE.Euler();\n\tvar quaternion = new THREE.Quaternion();\n\tvar scale = new THREE.Vector3( 1, 1, 1 );\n\n\tfunction onRotationChange() {\n\n\t\tquaternion.setFromEuler( rotation, false );\n\n\t}\n\n\tfunction onQuaternionChange() {\n\n\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t}\n\n\trotation.onChange( onRotationChange );\n\tquaternion.onChange( onQuaternionChange );\n\n\tObject.defineProperties( this, {\n\t\tposition: {\n\t\t\tenumerable: true,\n\t\t\tvalue: position\n\t\t},\n\t\trotation: {\n\t\t\tenumerable: true,\n\t\t\tvalue: rotation\n\t\t},\n\t\tquaternion: {\n\t\t\tenumerable: true,\n\t\t\tvalue: quaternion\n\t\t},\n\t\tscale: {\n\t\t\tenumerable: true,\n\t\t\tvalue: scale\n\t\t},\n\t\tmodelViewMatrix: {\n\t\t\tvalue: new THREE.Matrix4()\n\t\t},\n\t\tnormalMatrix: {\n\t\t\tvalue: new THREE.Matrix3()\n\t\t}\n\t} );\n\n\tthis.matrix = new THREE.Matrix4();\n\tthis.matrixWorld = new THREE.Matrix4();\n\n\tthis.matrixAutoUpdate = THREE.Object3D.DefaultMatrixAutoUpdate;\n\tthis.matrixWorldNeedsUpdate = false;\n\n\tthis.layers = new THREE.Layers();\n\tthis.visible = true;\n\n\tthis.castShadow = false;\n\tthis.receiveShadow = false;\n\n\tthis.frustumCulled = true;\n\tthis.renderOrder = 0;\n\n\tthis.userData = {};\n\n};\n\nTHREE.Object3D.DefaultUp = new THREE.Vector3( 0, 1, 0 );\nTHREE.Object3D.DefaultMatrixAutoUpdate = true;\n\nObject.assign( THREE.Object3D.prototype, THREE.EventDispatcher.prototype, {\n\n\tapplyMatrix: function ( matrix ) {\n\n\t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\n\n\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t},\n\n\tsetRotationFromAxisAngle: function ( axis, angle ) {\n\n\t\t// assumes axis is normalized\n\n\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t},\n\n\tsetRotationFromEuler: function ( euler ) {\n\n\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t},\n\n\tsetRotationFromMatrix: function ( m ) {\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t},\n\n\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t// assumes q is normalized\n\n\t\tthis.quaternion.copy( q );\n\n\t},\n\n\trotateOnAxis: function () {\n\n\t\t// rotate object on axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\tvar q1 = new THREE.Quaternion();\n\n\t\treturn function rotateOnAxis( axis, angle ) {\n\n\t\t\tq1.setFromAxisAngle( axis, angle );\n\n\t\t\tthis.quaternion.multiply( q1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateX: function () {\n\n\t\tvar v1 = new THREE.Vector3( 1, 0, 0 );\n\n\t\treturn function rotateX( angle ) {\n\n\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t};\n\n\t}(),\n\n\trotateY: function () {\n\n\t\tvar v1 = new THREE.Vector3( 0, 1, 0 );\n\n\t\treturn function rotateY( angle ) {\n\n\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t};\n\n\t}(),\n\n\trotateZ: function () {\n\n\t\tvar v1 = new THREE.Vector3( 0, 0, 1 );\n\n\t\treturn function rotateZ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t};\n\n\t}(),\n\n\ttranslateOnAxis: function () {\n\n\t\t// translate object by distance along axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function translateOnAxis( axis, distance ) {\n\n\t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\t\tthis.position.add( v1.multiplyScalar( distance ) );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslateX: function () {\n\n\t\tvar v1 = new THREE.Vector3( 1, 0, 0 );\n\n\t\treturn function translateX( distance ) {\n\n\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t};\n\n\t}(),\n\n\ttranslateY: function () {\n\n\t\tvar v1 = new THREE.Vector3( 0, 1, 0 );\n\n\t\treturn function translateY( distance ) {\n\n\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t};\n\n\t}(),\n\n\ttranslateZ: function () {\n\n\t\tvar v1 = new THREE.Vector3( 0, 0, 1 );\n\n\t\treturn function translateZ( distance ) {\n\n\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t};\n\n\t}(),\n\n\tlocalToWorld: function ( vector ) {\n\n\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t},\n\n\tworldToLocal: function () {\n\n\t\tvar m1 = new THREE.Matrix4();\n\n\t\treturn function worldToLocal( vector ) {\n\n\t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\n\n\t\t};\n\n\t}(),\n\n\tlookAt: function () {\n\n\t\t// This routine does not support objects with rotated and/or translated parent(s)\n\n\t\tvar m1 = new THREE.Matrix4();\n\n\t\treturn function lookAt( vector ) {\n\n\t\t\tm1.lookAt( vector, this.position, this.up );\n\n\t\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n\t\t};\n\n\t}(),\n\n\tadd: function ( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object === this ) {\n\n\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object instanceof THREE.Object3D ) {\n\n\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\tobject.parent.remove( object );\n\n\t\t\t}\n\n\t\t\tobject.parent = this;\n\t\t\tobject.dispatchEvent( { type: 'added' } );\n\n\t\t\tthis.children.push( object );\n\n\t\t} else {\n\n\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tremove: function ( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar index = this.children.indexOf( object );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tobject.parent = null;\n\n\t\t\tobject.dispatchEvent( { type: 'removed' } );\n\n\t\t\tthis.children.splice( index, 1 );\n\n\t\t}\n\n\t},\n\n\tgetObjectById: function ( id ) {\n\n\t\treturn this.getObjectByProperty( 'id', id );\n\n\t},\n\n\tgetObjectByName: function ( name ) {\n\n\t\treturn this.getObjectByProperty( 'name', name );\n\n\t},\n\n\tgetObjectByProperty: function ( name, value ) {\n\n\t\tif ( this[ name ] === value ) return this;\n\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tvar child = this.children[ i ];\n\t\t\tvar object = child.getObjectByProperty( name, value );\n\n\t\t\tif ( object !== undefined ) {\n\n\t\t\t\treturn object;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t},\n\n\tgetWorldPosition: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\tthis.updateMatrixWorld( true );\n\n\t\treturn result.setFromMatrixPosition( this.matrixWorld );\n\n\t},\n\n\tgetWorldQuaternion: function () {\n\n\t\tvar position = new THREE.Vector3();\n\t\tvar scale = new THREE.Vector3();\n\n\t\treturn function getWorldQuaternion( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Quaternion();\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( position, result, scale );\n\n\t\t\treturn result;\n\n\t\t};\n\n\t}(),\n\n\tgetWorldRotation: function () {\n\n\t\tvar quaternion = new THREE.Quaternion();\n\n\t\treturn function getWorldRotation( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Euler();\n\n\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\treturn result.setFromQuaternion( quaternion, this.rotation.order, false );\n\n\t\t};\n\n\t}(),\n\n\tgetWorldScale: function () {\n\n\t\tvar position = new THREE.Vector3();\n\t\tvar quaternion = new THREE.Quaternion();\n\n\t\treturn function getWorldScale( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( position, quaternion, result );\n\n\t\t\treturn result;\n\n\t\t};\n\n\t}(),\n\n\tgetWorldDirection: function () {\n\n\t\tvar quaternion = new THREE.Quaternion();\n\n\t\treturn function getWorldDirection( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\treturn result.set( 0, 0, 1 ).applyQuaternion( quaternion );\n\n\t\t};\n\n\t}(),\n\n\traycast: function () {},\n\n\ttraverse: function ( callback ) {\n\n\t\tcallback( this );\n\n\t\tvar children = this.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverse( callback );\n\n\t\t}\n\n\t},\n\n\ttraverseVisible: function ( callback ) {\n\n\t\tif ( this.visible === false ) return;\n\n\t\tcallback( this );\n\n\t\tvar children = this.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t}\n\n\t},\n\n\ttraverseAncestors: function ( callback ) {\n\n\t\tvar parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tcallback( parent );\n\n\t\t\tparent.traverseAncestors( callback );\n\n\t\t}\n\n\t},\n\n\tupdateMatrix: function () {\n\n\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t},\n\n\tupdateMatrixWorld: function ( force ) {\n\n\t\tif ( this.matrixAutoUpdate === true ) this.updateMatrix();\n\n\t\tif ( this.matrixWorldNeedsUpdate === true || force === true ) {\n\n\t\t\tif ( this.parent === null ) {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t}\n\n\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\tforce = true;\n\n\t\t}\n\n\t\t// update children\n\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tthis.children[ i ].updateMatrixWorld( force );\n\n\t\t}\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\t// meta is '' when called from JSON.stringify\n\t\tvar isRootObject = ( meta === undefined || meta === '' );\n\n\t\tvar output = {};\n\n\t\t// meta is a hash used to collect geometries, materials.\n\t\t// not providing it implies that this is the root object\n\t\t// being serialized.\n\t\tif ( isRootObject ) {\n\n\t\t\t// initialize meta obj\n\t\t\tmeta = {\n\t\t\t\tgeometries: {},\n\t\t\t\tmaterials: {},\n\t\t\t\ttextures: {},\n\t\t\t\timages: {}\n\t\t\t};\n\n\t\t\toutput.metadata = {\n\t\t\t\tversion: 4.4,\n\t\t\t\ttype: 'Object',\n\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t};\n\n\t\t}\n\n\t\t// standard Object3D serialization\n\n\t\tvar object = {};\n\n\t\tobject.uuid = this.uuid;\n\t\tobject.type = this.type;\n\n\t\tif ( this.name !== '' ) object.name = this.name;\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\n\t\tif ( this.castShadow === true ) object.castShadow = true;\n\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t\tif ( this.visible === false ) object.visible = false;\n\n\t\tobject.matrix = this.matrix.toArray();\n\n\t\t//\n\n\t\tif ( this.geometry !== undefined ) {\n\n\t\t\tif ( meta.geometries[ this.geometry.uuid ] === undefined ) {\n\n\t\t\t\tmeta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );\n\n\t\t\t}\n\n\t\t\tobject.geometry = this.geometry.uuid;\n\n\t\t}\n\n\t\tif ( this.material !== undefined ) {\n\n\t\t\tif ( meta.materials[ this.material.uuid ] === undefined ) {\n\n\t\t\t\tmeta.materials[ this.material.uuid ] = this.material.toJSON( meta );\n\n\t\t\t}\n\n\t\t\tobject.material = this.material.uuid;\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.children.length > 0 ) {\n\n\t\t\tobject.children = [];\n\n\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( isRootObject ) {\n\n\t\t\tvar geometries = extractFromCache( meta.geometries );\n\t\t\tvar materials = extractFromCache( meta.materials );\n\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t\t\tif ( images.length > 0 ) output.images = images;\n\n\t\t}\n\n\t\toutput.object = object;\n\n\t\treturn output;\n\n\t\t// extract data from the cache hash\n\t\t// remove metadata on each item\n\t\t// and return as array\n\t\tfunction extractFromCache ( cache ) {\n\n\t\t\tvar values = [];\n\t\t\tfor ( var key in cache ) {\n\n\t\t\t\tvar data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\t\t\treturn values;\n\n\t\t}\n\n\t},\n\n\tclone: function ( recursive ) {\n\n\t\treturn new this.constructor().copy( this, recursive );\n\n\t},\n\n\tcopy: function ( source, recursive ) {\n\n\t\tif ( recursive === undefined ) recursive = true;\n\n\t\tthis.name = source.name;\n\n\t\tthis.up.copy( source.up );\n\n\t\tthis.position.copy( source.position );\n\t\tthis.quaternion.copy( source.quaternion );\n\t\tthis.scale.copy( source.scale );\n\n\t\tthis.matrix.copy( source.matrix );\n\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\tthis.visible = source.visible;\n\n\t\tthis.castShadow = source.castShadow;\n\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\tthis.frustumCulled = source.frustumCulled;\n\t\tthis.renderOrder = source.renderOrder;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\tvar child = source.children[ i ];\n\t\t\t\tthis.add( child.clone() );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\nTHREE.Object3DIdCount = 0;\n\n// File:src/core/Face3.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Face3 = function ( a, b, c, normal, color, materialIndex ) {\n\n\tthis.a = a;\n\tthis.b = b;\n\tthis.c = c;\n\n\tthis.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();\n\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\n\tthis.color = color instanceof THREE.Color ? color : new THREE.Color();\n\tthis.vertexColors = Array.isArray( color ) ? color : [];\n\n\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\n};\n\nTHREE.Face3.prototype = {\n\n\tconstructor: THREE.Face3,\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.a = source.a;\n\t\tthis.b = source.b;\n\t\tthis.c = source.c;\n\n\t\tthis.normal.copy( source.normal );\n\t\tthis.color.copy( source.color );\n\n\t\tthis.materialIndex = source.materialIndex;\n\n\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\n\t\t}\n\n\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\n\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n};\n\n// File:src/core/BufferAttribute.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.BufferAttribute = function ( array, itemSize, normalized ) {\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.array = array;\n\tthis.itemSize = itemSize;\n\n\tthis.dynamic = false;\n\tthis.updateRange = { offset: 0, count: - 1 };\n\n\tthis.version = 0;\n\tthis.normalized = normalized === true;\n\n};\n\nTHREE.BufferAttribute.prototype = {\n\n\tconstructor: THREE.BufferAttribute,\n\n\tget count() {\n\n\t\treturn this.array.length / this.itemSize;\n\n\t},\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t},\n\n\tsetDynamic: function ( value ) {\n\n\t\tthis.dynamic = value;\n\n\t\treturn this;\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.itemSize = source.itemSize;\n\n\t\tthis.dynamic = source.dynamic;\n\n\t\treturn this;\n\n\t},\n\n\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.itemSize;\n\t\tindex2 *= attribute.itemSize;\n\n\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyArray: function ( array ) {\n\n\t\tthis.array.set( array );\n\n\t\treturn this;\n\n\t},\n\n\tcopyColorsArray: function ( colors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\n\t\t\tvar color = colors[ i ];\n\n\t\t\tif ( color === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t\t\t\tcolor = new THREE.Color();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = color.r;\n\t\t\tarray[ offset ++ ] = color.g;\n\t\t\tarray[ offset ++ ] = color.b;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyIndicesArray: function ( indices ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\tvar index = indices[ i ];\n\n\t\t\tarray[ offset ++ ] = index.a;\n\t\t\tarray[ offset ++ ] = index.b;\n\t\t\tarray[ offset ++ ] = index.c;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyVector2sArray: function ( vectors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tvar vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t\t\t\tvector = new THREE.Vector2();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyVector3sArray: function ( vectors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tvar vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t\t\t\tvector = new THREE.Vector3();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\tarray[ offset ++ ] = vector.z;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyVector4sArray: function ( vectors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tvar vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t\t\t\tvector = new THREE.Vector4();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\tarray[ offset ++ ] = vector.z;\n\t\t\tarray[ offset ++ ] = vector.w;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tset: function ( value, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t},\n\n\tgetX: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize ];\n\n\t},\n\n\tsetX: function ( index, x ) {\n\n\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\treturn this;\n\n\t},\n\n\tgetY: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 1 ];\n\n\t},\n\n\tsetY: function ( index, y ) {\n\n\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tgetZ: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 2 ];\n\n\t},\n\n\tsetZ: function ( index, z ) {\n\n\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tgetW: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 3 ];\n\n\t},\n\n\tsetW: function ( index, w ) {\n\n\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetXY: function ( index, x, y ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZ: function ( index, x, y, z ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\t\tthis.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n};\n\n//\n\nTHREE.Int8Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Int8Array( array ), itemSize );\n\n};\n\nTHREE.Uint8Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Uint8Array( array ), itemSize );\n\n};\n\nTHREE.Uint8ClampedAttribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Uint8ClampedArray( array ), itemSize );\n\n};\n\nTHREE.Int16Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Int16Array( array ), itemSize );\n\n};\n\nTHREE.Uint16Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Uint16Array( array ), itemSize );\n\n};\n\nTHREE.Int32Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Int32Array( array ), itemSize );\n\n};\n\nTHREE.Uint32Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Uint32Array( array ), itemSize );\n\n};\n\nTHREE.Float32Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Float32Array( array ), itemSize );\n\n};\n\nTHREE.Float64Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Float64Array( array ), itemSize );\n\n};\n\n\n// Deprecated\n\nTHREE.DynamicBufferAttribute = function ( array, itemSize ) {\n\n\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\n\treturn new THREE.BufferAttribute( array, itemSize ).setDynamic( true );\n\n};\n\n// File:src/core/InstancedBufferAttribute.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nTHREE.InstancedBufferAttribute = function ( array, itemSize, meshPerAttribute ) {\n\n\tTHREE.BufferAttribute.call( this, array, itemSize );\n\n\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n};\n\nTHREE.InstancedBufferAttribute.prototype = Object.create( THREE.BufferAttribute.prototype );\nTHREE.InstancedBufferAttribute.prototype.constructor = THREE.InstancedBufferAttribute;\n\nTHREE.InstancedBufferAttribute.prototype.copy = function ( source ) {\n\n\tTHREE.BufferAttribute.prototype.copy.call( this, source );\n\n\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\treturn this;\n\n};\n\n// File:src/core/InterleavedBuffer.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nTHREE.InterleavedBuffer = function ( array, stride ) {\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.array = array;\n\tthis.stride = stride;\n\n\tthis.dynamic = false;\n\tthis.updateRange = { offset: 0, count: - 1 };\n\n\tthis.version = 0;\n\n};\n\nTHREE.InterleavedBuffer.prototype = {\n\n\tconstructor: THREE.InterleavedBuffer,\n\n\tget length () {\n\n\t\treturn this.array.length;\n\n\t},\n\n\tget count () {\n\n\t\treturn this.array.length / this.stride;\n\n\t},\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t},\n\n\tsetDynamic: function ( value ) {\n\n\t\tthis.dynamic = value;\n\n\t\treturn this;\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.stride = source.stride;\n\t\tthis.dynamic = source.dynamic;\n\n\t\treturn this;\n\n\t},\n\n\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.stride;\n\t\tindex2 *= attribute.stride;\n\n\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tset: function ( value, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n};\n\n// File:src/core/InstancedInterleavedBuffer.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nTHREE.InstancedInterleavedBuffer = function ( array, stride, meshPerAttribute ) {\n\n\tTHREE.InterleavedBuffer.call( this, array, stride );\n\n\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n};\n\nTHREE.InstancedInterleavedBuffer.prototype = Object.create( THREE.InterleavedBuffer.prototype );\nTHREE.InstancedInterleavedBuffer.prototype.constructor = THREE.InstancedInterleavedBuffer;\n\nTHREE.InstancedInterleavedBuffer.prototype.copy = function ( source ) {\n\n\tTHREE.InterleavedBuffer.prototype.copy.call( this, source );\n\n\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\treturn this;\n\n};\n\n// File:src/core/InterleavedBufferAttribute.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nTHREE.InterleavedBufferAttribute = function ( interleavedBuffer, itemSize, offset ) {\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.data = interleavedBuffer;\n\tthis.itemSize = itemSize;\n\tthis.offset = offset;\n\n};\n\n\nTHREE.InterleavedBufferAttribute.prototype = {\n\n\tconstructor: THREE.InterleavedBufferAttribute,\n\n\tget length() {\n\n\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\n\t\treturn this.array.length;\n\n\t},\n\n\tget count() {\n\n\t\treturn this.data.count;\n\n\t},\n\n\tsetX: function ( index, x ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( index, y ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetZ: function ( index, z ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetW: function ( index, w ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\treturn this;\n\n\t},\n\n\tgetX: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n\t},\n\n\tgetY: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t},\n\n\tgetZ: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t},\n\n\tgetW: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t},\n\n\tsetXY: function ( index, x, y ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZ: function ( index, x, y, z ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\t\tthis.data.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n};\n\n// File:src/core/Geometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author kile / http://kile.stravaganza.org/\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author bhouston / http://clara.io\n */\n\nTHREE.Geometry = function () {\n\n\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'Geometry';\n\n\tthis.vertices = [];\n\tthis.colors = [];\n\tthis.faces = [];\n\tthis.faceVertexUvs = [ [] ];\n\n\tthis.morphTargets = [];\n\tthis.morphNormals = [];\n\n\tthis.skinWeights = [];\n\tthis.skinIndices = [];\n\n\tthis.lineDistances = [];\n\n\tthis.boundingBox = null;\n\tthis.boundingSphere = null;\n\n\t// update flags\n\n\tthis.verticesNeedUpdate = false;\n\tthis.elementsNeedUpdate = false;\n\tthis.uvsNeedUpdate = false;\n\tthis.normalsNeedUpdate = false;\n\tthis.colorsNeedUpdate = false;\n\tthis.lineDistancesNeedUpdate = false;\n\tthis.groupsNeedUpdate = false;\n\n};\n\nObject.assign( THREE.Geometry.prototype, THREE.EventDispatcher.prototype, {\n\n\tapplyMatrix: function ( matrix ) {\n\n\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\n\n\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\tvar vertex = this.vertices[ i ];\n\t\t\tvertex.applyMatrix4( matrix );\n\n\t\t}\n\n\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\tvar face = this.faces[ i ];\n\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t\tthis.verticesNeedUpdate = true;\n\t\tthis.normalsNeedUpdate = true;\n\n\t\treturn this;\n\n\t},\n\n\trotateX: function () {\n\n\t\t// rotate geometry around world x-axis\n\n\t\tvar m1;\n\n\t\treturn function rotateX( angle ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateY: function () {\n\n\t\t// rotate geometry around world y-axis\n\n\t\tvar m1;\n\n\t\treturn function rotateY( angle ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateZ: function () {\n\n\t\t// rotate geometry around world z-axis\n\n\t\tvar m1;\n\n\t\treturn function rotateZ( angle ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function () {\n\n\t\t// translate geometry\n\n\t\tvar m1;\n\n\t\treturn function translate( x, y, z ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tscale: function () {\n\n\t\t// scale geometry\n\n\t\tvar m1;\n\n\t\treturn function scale( x, y, z ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tlookAt: function () {\n\n\t\tvar obj;\n\n\t\treturn function lookAt( vector ) {\n\n\t\t\tif ( obj === undefined ) obj = new THREE.Object3D();\n\n\t\t\tobj.lookAt( vector );\n\n\t\t\tobj.updateMatrix();\n\n\t\t\tthis.applyMatrix( obj.matrix );\n\n\t\t};\n\n\t}(),\n\n\tfromBufferGeometry: function ( geometry ) {\n\n\t\tvar scope = this;\n\n\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n\t\tvar attributes = geometry.attributes;\n\n\t\tvar positions = attributes.position.array;\n\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\n\t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\n\n\t\tvar tempNormals = [];\n\t\tvar tempUVs = [];\n\t\tvar tempUVs2 = [];\n\n\t\tfor ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\n\n\t\t\tscope.vertices.push( new THREE.Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );\n\n\t\t\tif ( normals !== undefined ) {\n\n\t\t\t\ttempNormals.push( new THREE.Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( colors !== undefined ) {\n\n\t\t\t\tscope.colors.push( new THREE.Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\ttempUVs.push( new THREE.Vector2( uvs[ j ], uvs[ j + 1 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\ttempUVs2.push( new THREE.Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction addFace( a, b, c, materialIndex ) {\n\n\t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\n\t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\n\n\t\t\tvar face = new THREE.Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\n\t\t\tscope.faces.push( face );\n\n\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\n\n\t\t\t}\n\n\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( indices !== undefined ) {\n\n\t\t\tvar groups = geometry.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\n\t\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex  );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\n\n\t\t\t\taddFace( i, i + 1, i + 2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.computeFaceNormals();\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t}\n\n\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcenter: function () {\n\n\t\tthis.computeBoundingBox();\n\n\t\tvar offset = this.boundingBox.center().negate();\n\n\t\tthis.translate( offset.x, offset.y, offset.z );\n\n\t\treturn offset;\n\n\t},\n\n\tnormalize: function () {\n\n\t\tthis.computeBoundingSphere();\n\n\t\tvar center = this.boundingSphere.center;\n\t\tvar radius = this.boundingSphere.radius;\n\n\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\n\t\tvar matrix = new THREE.Matrix4();\n\t\tmatrix.set(\n\t\t\ts, 0, 0, - s * center.x,\n\t\t\t0, s, 0, - s * center.y,\n\t\t\t0, 0, s, - s * center.z,\n\t\t\t0, 0, 0, 1\n\t\t);\n\n\t\tthis.applyMatrix( matrix );\n\n\t\treturn this;\n\n\t},\n\n\tcomputeFaceNormals: function () {\n\n\t\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3();\n\n\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tvar face = this.faces[ f ];\n\n\t\t\tvar vA = this.vertices[ face.a ];\n\t\t\tvar vB = this.vertices[ face.b ];\n\t\t\tvar vC = this.vertices[ face.c ];\n\n\t\t\tcb.subVectors( vC, vB );\n\t\t\tab.subVectors( vA, vB );\n\t\t\tcb.cross( ab );\n\n\t\t\tcb.normalize();\n\n\t\t\tface.normal.copy( cb );\n\n\t\t}\n\n\t},\n\n\tcomputeVertexNormals: function ( areaWeighted ) {\n\n\t\tif ( areaWeighted === undefined ) areaWeighted = true;\n\n\t\tvar v, vl, f, fl, face, vertices;\n\n\t\tvertices = new Array( this.vertices.length );\n\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\tvertices[ v ] = new THREE.Vector3();\n\n\t\t}\n\n\t\tif ( areaWeighted ) {\n\n\t\t\t// vertex normals weighted by triangle areas\n\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\n\t\t\tvar vA, vB, vC;\n\t\t\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3();\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvA = this.vertices[ face.a ];\n\t\t\t\tvB = this.vertices[ face.b ];\n\t\t\t\tvC = this.vertices[ face.c ];\n\n\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\tcb.cross( ab );\n\n\t\t\t\tvertices[ face.a ].add( cb );\n\t\t\t\tvertices[ face.b ].add( cb );\n\t\t\t\tvertices[ face.c ].add( cb );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvertices[ face.a ].add( face.normal );\n\t\t\t\tvertices[ face.b ].add( face.normal );\n\t\t\t\tvertices[ face.c ].add( face.normal );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\tvertices[ v ].normalize();\n\n\t\t}\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\n\t\t\t} else {\n\n\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.faces.length > 0 ) {\n\n\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t}\n\n\t},\n\n\tcomputeMorphNormals: function () {\n\n\t\tvar i, il, f, fl, face;\n\n\t\t// save original normals\n\t\t// - create temp variables on first access\n\t\t//   otherwise just copy (for faster repeated calls)\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tif ( ! face.__originalFaceNormal ) {\n\n\t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\n\t\t\t} else {\n\n\t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\n\t\t\t}\n\n\t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\n\n\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\n\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// use temp geometry to compute face and vertex normals for each morph\n\n\t\tvar tmpGeo = new THREE.Geometry();\n\t\ttmpGeo.faces = this.faces;\n\n\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\n\t\t\t// create on first access\n\n\t\t\tif ( ! this.morphNormals[ i ] ) {\n\n\t\t\t\tthis.morphNormals[ i ] = {};\n\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\n\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\n\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tfaceNormal = new THREE.Vector3();\n\t\t\t\t\tvertexNormals = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3() };\n\n\t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar morphNormals = this.morphNormals[ i ];\n\n\t\t\t// set vertices to morph target\n\n\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\n\t\t\t// compute morph normals\n\n\t\t\ttmpGeo.computeFaceNormals();\n\t\t\ttmpGeo.computeVertexNormals();\n\n\t\t\t// store morph normals\n\n\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\n\t\t\t\tfaceNormal.copy( face.normal );\n\n\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// restore original normals\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tface.normal = face.__originalFaceNormal;\n\t\t\tface.vertexNormals = face.__originalVertexNormals;\n\n\t\t}\n\n\t},\n\n\tcomputeTangents: function () {\n\n\t\tconsole.warn( 'THREE.Geometry: .computeTangents() has been removed.' );\n\n\t},\n\n\tcomputeLineDistances: function () {\n\n\t\tvar d = 0;\n\t\tvar vertices = this.vertices;\n\n\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\tif ( i > 0 ) {\n\n\t\t\t\td += vertices[ i ].distanceTo( vertices[ i - 1 ] );\n\n\t\t\t}\n\n\t\t\tthis.lineDistances[ i ] = d;\n\n\t\t}\n\n\t},\n\n\tcomputeBoundingBox: function () {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new THREE.Box3();\n\n\t\t}\n\n\t\tthis.boundingBox.setFromPoints( this.vertices );\n\n\t},\n\n\tcomputeBoundingSphere: function () {\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new THREE.Sphere();\n\n\t\t}\n\n\t\tthis.boundingSphere.setFromPoints( this.vertices );\n\n\t},\n\n\tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\n\t\tif ( geometry instanceof THREE.Geometry === false ) {\n\n\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar normalMatrix,\n\t\tvertexOffset = this.vertices.length,\n\t\tvertices1 = this.vertices,\n\t\tvertices2 = geometry.vertices,\n\t\tfaces1 = this.faces,\n\t\tfaces2 = geometry.faces,\n\t\tuvs1 = this.faceVertexUvs[ 0 ],\n\t\tuvs2 = geometry.faceVertexUvs[ 0 ];\n\n\t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\n\n\t\tif ( matrix !== undefined ) {\n\n\t\t\tnormalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\n\n\t\t}\n\n\t\t// vertices\n\n\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\n\t\t\tvar vertex = vertices2[ i ];\n\n\t\t\tvar vertexCopy = vertex.clone();\n\n\t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\n\n\t\t\tvertices1.push( vertexCopy );\n\n\t\t}\n\n\t\t// faces\n\n\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\n\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n\t\t\tfaceVertexNormals = face.vertexNormals,\n\t\t\tfaceVertexColors = face.vertexColors;\n\n\t\t\tfaceCopy = new THREE.Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t\t\tfaceCopy.normal.copy( face.normal );\n\n\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\n\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.vertexNormals.push( normal );\n\n\t\t\t}\n\n\t\t\tfaceCopy.color.copy( face.color );\n\n\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\n\t\t\t\tcolor = faceVertexColors[ j ];\n\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\n\t\t\t}\n\n\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n\t\t\tfaces1.push( faceCopy );\n\n\t\t}\n\n\t\t// uvs\n\n\t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\n\n\t\t\tvar uv = uvs2[ i ], uvCopy = [];\n\n\t\t\tif ( uv === undefined ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\n\n\t\t\t\tuvCopy.push( uv[ j ].clone() );\n\n\t\t\t}\n\n\t\t\tuvs1.push( uvCopy );\n\n\t\t}\n\n\t},\n\n\tmergeMesh: function ( mesh ) {\n\n\t\tif ( mesh instanceof THREE.Mesh === false ) {\n\n\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n\t\t\treturn;\n\n\t\t}\n\n\t\tmesh.matrixAutoUpdate && mesh.updateMatrix();\n\n\t\tthis.merge( mesh.geometry, mesh.matrix );\n\n\t},\n\n\t/*\n\t * Checks for duplicate vertices with hashmap.\n\t * Duplicated vertices are removed\n\t * and faces' vertices are updated.\n\t */\n\n\tmergeVertices: function () {\n\n\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\t\tvar unique = [], changes = [];\n\n\t\tvar v, key;\n\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\t\tvar precision = Math.pow( 10, precisionPoints );\n\t\tvar i, il, face;\n\t\tvar indices, j, jl;\n\n\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\tv = this.vertices[ i ];\n\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n\t\t\tif ( verticesMap[ key ] === undefined ) {\n\n\t\t\t\tverticesMap[ key ] = i;\n\t\t\t\tunique.push( this.vertices[ i ] );\n\t\t\t\tchanges[ i ] = unique.length - 1;\n\n\t\t\t} else {\n\n\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\n\t\t\t}\n\n\t\t}\n\n\n\t\t// if faces are completely degenerate after merging vertices, we\n\t\t// have to remove them from the geometry.\n\t\tvar faceIndicesToRemove = [];\n\n\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\tface = this.faces[ i ];\n\n\t\t\tface.a = changes[ face.a ];\n\t\t\tface.b = changes[ face.b ];\n\t\t\tface.c = changes[ face.c ];\n\n\t\t\tindices = [ face.a, face.b, face.c ];\n\n\t\t\tvar dupIndex = - 1;\n\n\t\t\t// if any duplicate vertices are found in a Face3\n\t\t\t// we have to remove the face as nothing can be saved\n\t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\n\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\n\t\t\t\t\tdupIndex = n;\n\t\t\t\t\tfaceIndicesToRemove.push( i );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\n\t\t\tvar idx = faceIndicesToRemove[ i ];\n\n\t\t\tthis.faces.splice( idx, 1 );\n\n\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Use unique set of vertices\n\n\t\tvar diff = this.vertices.length - unique.length;\n\t\tthis.vertices = unique;\n\t\treturn diff;\n\n\t},\n\n\tsortFacesByMaterialIndex: function () {\n\n\t\tvar faces = this.faces;\n\t\tvar length = faces.length;\n\n\t\t// tag faces\n\n\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\tfaces[ i ]._id = i;\n\n\t\t}\n\n\t\t// sort faces\n\n\t\tfunction materialIndexSort( a, b ) {\n\n\t\t\treturn a.materialIndex - b.materialIndex;\n\n\t\t}\n\n\t\tfaces.sort( materialIndexSort );\n\n\t\t// sort uvs\n\n\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\n\t\tvar newUvs1, newUvs2;\n\n\t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\n\t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\n\n\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\tvar id = faces[ i ]._id;\n\n\t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\n\t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\n\n\t\t}\n\n\t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\n\t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.4,\n\t\t\t\ttype: 'Geometry',\n\t\t\t\tgenerator: 'Geometry.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Geometry serialization\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.parameters !== undefined ) {\n\n\t\t\tvar parameters = this.parameters;\n\n\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tvar vertices = [];\n\n\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\n\t\t\tvar vertex = this.vertices[ i ];\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tvar faces = [];\n\t\tvar normals = [];\n\t\tvar normalsHash = {};\n\t\tvar colors = [];\n\t\tvar colorsHash = {};\n\t\tvar uvs = [];\n\t\tvar uvsHash = {};\n\n\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\n\t\t\tvar face = this.faces[ i ];\n\n\t\t\tvar hasMaterial = true;\n\t\t\tvar hasFaceUv = false; // deprecated\n\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n\t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\n\t\t\tvar faceType = 0;\n\n\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\n\t\t\tfaces.push( faceType );\n\t\t\tfaces.push( face.a, face.b, face.c );\n\t\t\tfaces.push( face.materialIndex );\n\n\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\tfaces.push( getColorIndex( face.color ) );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setBit( value, position, enabled ) {\n\n\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\n\t\t}\n\n\t\tfunction getNormalIndex( normal ) {\n\n\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n\t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\n\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\treturn normalsHash[ hash ];\n\n\t\t}\n\n\t\tfunction getColorIndex( color ) {\n\n\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n\t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\n\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tcolorsHash[ hash ] = colors.length;\n\t\t\tcolors.push( color.getHex() );\n\n\t\t\treturn colorsHash[ hash ];\n\n\t\t}\n\n\t\tfunction getUvIndex( uv ) {\n\n\t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n\t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\n\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\treturn uvsHash[ hash ];\n\n\t\t}\n\n\t\tdata.data = {};\n\n\t\tdata.data.vertices = vertices;\n\t\tdata.data.normals = normals;\n\t\tif ( colors.length > 0 ) data.data.colors = colors;\n\t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\n\t\tdata.data.faces = faces;\n\n\t\treturn data;\n\n\t},\n\n\tclone: function () {\n\n\t\t/*\n\t\t// Handle primitives\n\n\t\tvar parameters = this.parameters;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tvar values = [];\n\n\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\tvalues.push( parameters[ key ] );\n\n\t\t\t}\n\n\t\t\tvar geometry = Object.create( this.constructor.prototype );\n\t\t\tthis.constructor.apply( geometry, values );\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\treturn new this.constructor().copy( this );\n\t\t*/\n\n\t\treturn new THREE.Geometry().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.vertices = [];\n\t\tthis.faces = [];\n\t\tthis.faceVertexUvs = [ [] ];\n\n\t\tvar vertices = source.vertices;\n\n\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\tthis.vertices.push( vertices[ i ].clone() );\n\n\t\t}\n\n\t\tvar faces = source.faces;\n\n\t\tfor ( var i = 0, il = faces.length; i < il; i ++ ) {\n\n\t\t\tthis.faces.push( faces[ i ].clone() );\n\n\t\t}\n\n\t\tfor ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\n\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\n\t\t\t\tthis.faceVertexUvs[ i ] = [];\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\n\t\t\t\tfor ( var k = 0, kl = uvs.length; k < kl; k ++ ) {\n\n\t\t\t\t\tvar uv = uvs[ k ];\n\n\t\t\t\t\tuvsCopy.push( uv.clone() );\n\n\t\t\t\t}\n\n\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\nTHREE.GeometryIdCount = 0;\n\n// File:src/core/DirectGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.DirectGeometry = function () {\n\n\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'DirectGeometry';\n\n\tthis.indices = [];\n\tthis.vertices = [];\n\tthis.normals = [];\n\tthis.colors = [];\n\tthis.uvs = [];\n\tthis.uvs2 = [];\n\n\tthis.groups = [];\n\n\tthis.morphTargets = {};\n\n\tthis.skinWeights = [];\n\tthis.skinIndices = [];\n\n\t// this.lineDistances = [];\n\n\tthis.boundingBox = null;\n\tthis.boundingSphere = null;\n\n\t// update flags\n\n\tthis.verticesNeedUpdate = false;\n\tthis.normalsNeedUpdate = false;\n\tthis.colorsNeedUpdate = false;\n\tthis.uvsNeedUpdate = false;\n\tthis.groupsNeedUpdate = false;\n\n};\n\nObject.assign( THREE.DirectGeometry.prototype, THREE.EventDispatcher.prototype, {\n\n\tcomputeBoundingBox: THREE.Geometry.prototype.computeBoundingBox,\n\tcomputeBoundingSphere: THREE.Geometry.prototype.computeBoundingSphere,\n\n\tcomputeFaceNormals: function () {\n\n\t\tconsole.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );\n\n\t},\n\n\tcomputeVertexNormals: function () {\n\n\t\tconsole.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );\n\n\t},\n\n\tcomputeGroups: function ( geometry ) {\n\n\t\tvar group;\n\t\tvar groups = [];\n\t\tvar materialIndex;\n\n\t\tvar faces = geometry.faces;\n\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\t// materials\n\n\t\t\tif ( face.materialIndex !== materialIndex ) {\n\n\t\t\t\tmaterialIndex = face.materialIndex;\n\n\t\t\t\tif ( group !== undefined ) {\n\n\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\t\tgroups.push( group );\n\n\t\t\t\t}\n\n\t\t\t\tgroup = {\n\t\t\t\t\tstart: i * 3,\n\t\t\t\t\tmaterialIndex: materialIndex\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( group !== undefined ) {\n\n\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\tgroups.push( group );\n\n\t\t}\n\n\t\tthis.groups = groups;\n\n\t},\n\n\tfromGeometry: function ( geometry ) {\n\n\t\tvar faces = geometry.faces;\n\t\tvar vertices = geometry.vertices;\n\t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\n\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\n\t\t// morphs\n\n\t\tvar morphTargets = geometry.morphTargets;\n\t\tvar morphTargetsLength = morphTargets.length;\n\n\t\tvar morphTargetsPosition;\n\n\t\tif ( morphTargetsLength > 0 ) {\n\n\t\t\tmorphTargetsPosition = [];\n\n\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\n\t\t\t\tmorphTargetsPosition[ i ] = [];\n\n\t\t\t}\n\n\t\t\tthis.morphTargets.position = morphTargetsPosition;\n\n\t\t}\n\n\t\tvar morphNormals = geometry.morphNormals;\n\t\tvar morphNormalsLength = morphNormals.length;\n\n\t\tvar morphTargetsNormal;\n\n\t\tif ( morphNormalsLength > 0 ) {\n\n\t\t\tmorphTargetsNormal = [];\n\n\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\n\t\t\t\tmorphTargetsNormal[ i ] = [];\n\n\t\t\t}\n\n\t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\n\t\t}\n\n\t\t// skins\n\n\t\tvar skinIndices = geometry.skinIndices;\n\t\tvar skinWeights = geometry.skinWeights;\n\n\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\n\t\t//\n\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\n\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\n\t\t\t} else {\n\n\t\t\t\tvar normal = face.normal;\n\n\t\t\t\tthis.normals.push( normal, normal, normal );\n\n\t\t\t}\n\n\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\tif ( vertexColors.length === 3 ) {\n\n\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\n\t\t\t} else {\n\n\t\t\t\tvar color = face.color;\n\n\t\t\t\tthis.colors.push( color, color, color );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexUv === true ) {\n\n\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\n\t\t\t\t\tthis.uvs.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexUv2 === true ) {\n\n\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\n\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\n\t\t\t\t\tthis.uvs2.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// morphs\n\n\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\n\t\t\t\tmorphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\n\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\n\t\t\t\tmorphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );\n\n\t\t\t}\n\n\t\t\t// skins\n\n\t\t\tif ( hasSkinIndices ) {\n\n\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\n\t\t\t}\n\n\t\t\tif ( hasSkinWeights ) {\n\n\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.computeGroups( geometry );\n\n\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\n// File:src/core/BufferGeometry.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.BufferGeometry = function () {\n\n\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'BufferGeometry';\n\n\tthis.index = null;\n\tthis.attributes = {};\n\n\tthis.morphAttributes = {};\n\n\tthis.groups = [];\n\n\tthis.boundingBox = null;\n\tthis.boundingSphere = null;\n\n\tthis.drawRange = { start: 0, count: Infinity };\n\n};\n\nObject.assign( THREE.BufferGeometry.prototype, THREE.EventDispatcher.prototype, {\n\n\tgetIndex: function () {\n\n\t\treturn this.index;\n\n\t},\n\n\tsetIndex: function ( index ) {\n\n\t\tthis.index = index;\n\n\t},\n\n\taddAttribute: function ( name, attribute ) {\n\n\t\tif ( attribute instanceof THREE.BufferAttribute === false && attribute instanceof THREE.InterleavedBufferAttribute === false ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n\t\t\tthis.addAttribute( name, new THREE.BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( name === 'index' ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t\t\tthis.setIndex( attribute );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.attributes[ name ] = attribute;\n\n\t\treturn this;\n\n\t},\n\n\tgetAttribute: function ( name ) {\n\n\t\treturn this.attributes[ name ];\n\n\t},\n\n\tremoveAttribute: function ( name ) {\n\n\t\tdelete this.attributes[ name ];\n\n\t\treturn this;\n\n\t},\n\n\taddGroup: function ( start, count, materialIndex ) {\n\n\t\tthis.groups.push( {\n\n\t\t\tstart: start,\n\t\t\tcount: count,\n\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\n\t\t} );\n\n\t},\n\n\tclearGroups: function () {\n\n\t\tthis.groups = [];\n\n\t},\n\n\tsetDrawRange: function ( start, count ) {\n\n\t\tthis.drawRange.start = start;\n\t\tthis.drawRange.count = count;\n\n\t},\n\n\tapplyMatrix: function ( matrix ) {\n\n\t\tvar position = this.attributes.position;\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tmatrix.applyToVector3Array( position.array );\n\t\t\tposition.needsUpdate = true;\n\n\t\t}\n\n\t\tvar normal = this.attributes.normal;\n\n\t\tif ( normal !== undefined ) {\n\n\t\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\n\n\t\t\tnormalMatrix.applyToVector3Array( normal.array );\n\t\t\tnormal.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\trotateX: function () {\n\n\t\t// rotate geometry around world x-axis\n\n\t\tvar m1;\n\n\t\treturn function rotateX( angle ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateY: function () {\n\n\t\t// rotate geometry around world y-axis\n\n\t\tvar m1;\n\n\t\treturn function rotateY( angle ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateZ: function () {\n\n\t\t// rotate geometry around world z-axis\n\n\t\tvar m1;\n\n\t\treturn function rotateZ( angle ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function () {\n\n\t\t// translate geometry\n\n\t\tvar m1;\n\n\t\treturn function translate( x, y, z ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tscale: function () {\n\n\t\t// scale geometry\n\n\t\tvar m1;\n\n\t\treturn function scale( x, y, z ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tlookAt: function () {\n\n\t\tvar obj;\n\n\t\treturn function lookAt( vector ) {\n\n\t\t\tif ( obj === undefined ) obj = new THREE.Object3D();\n\n\t\t\tobj.lookAt( vector );\n\n\t\t\tobj.updateMatrix();\n\n\t\t\tthis.applyMatrix( obj.matrix );\n\n\t\t};\n\n\t}(),\n\n\tcenter: function () {\n\n\t\tthis.computeBoundingBox();\n\n\t\tvar offset = this.boundingBox.center().negate();\n\n\t\tthis.translate( offset.x, offset.y, offset.z );\n\n\t\treturn offset;\n\n\t},\n\n\tsetFromObject: function ( object ) {\n\n\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( object instanceof THREE.Points || object instanceof THREE.Line ) {\n\n\t\t\tvar positions = new THREE.Float32Attribute( geometry.vertices.length * 3, 3 );\n\t\t\tvar colors = new THREE.Float32Attribute( geometry.colors.length * 3, 3 );\n\n\t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n\t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\n\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\n\t\t\t\tvar lineDistances = new THREE.Float32Attribute( geometry.lineDistances.length, 1 );\n\n\t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t} else if ( object instanceof THREE.Mesh ) {\n\n\t\t\tif ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\tthis.fromGeometry( geometry );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tupdateFromObject: function ( object ) {\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( object instanceof THREE.Mesh ) {\n\n\t\t\tvar direct = geometry.__directGeometry;\n\n\t\t\tif ( direct === undefined ) {\n\n\t\t\t\treturn this.fromGeometry( geometry );\n\n\t\t\t}\n\n\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\tgeometry.normalsNeedUpdate = false;\n\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\tgeometry.uvsNeedUpdate = false;\n\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\tgeometry = direct;\n\n\t\t}\n\n\t\tif ( geometry.verticesNeedUpdate === true ) {\n\n\t\t\tvar attribute = this.attributes.position;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.verticesNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.normalsNeedUpdate === true ) {\n\n\t\t\tvar attribute = this.attributes.normal;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyVector3sArray( geometry.normals );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.normalsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.colorsNeedUpdate === true ) {\n\n\t\t\tvar attribute = this.attributes.color;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyColorsArray( geometry.colors );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.colorsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.uvsNeedUpdate ) {\n\n\t\t\tvar attribute = this.attributes.uv;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.uvsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.lineDistancesNeedUpdate ) {\n\n\t\t\tvar attribute = this.attributes.lineDistance;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyArray( geometry.lineDistances );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.lineDistancesNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.groupsNeedUpdate ) {\n\n\t\t\tgeometry.computeGroups( object.geometry );\n\t\t\tthis.groups = geometry.groups;\n\n\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tfromGeometry: function ( geometry ) {\n\n\t\tgeometry.__directGeometry = new THREE.DirectGeometry().fromGeometry( geometry );\n\n\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\n\t},\n\n\tfromDirectGeometry: function ( geometry ) {\n\n\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\n\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n\t\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\n\t\t}\n\n\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n\t\t\tthis.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\n\t\t}\n\n\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n\t\t\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\n\t\t}\n\n\t\tif ( geometry.uvs2.length > 0 ) {\n\n\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n\t\t\tthis.addAttribute( 'uv2', new THREE.BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\n\t\t}\n\n\t\tif ( geometry.indices.length > 0 ) {\n\n\t\t\tvar TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;\n\t\t\tvar indices = new TypeArray( geometry.indices.length * 3 );\n\t\t\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );\n\n\t\t}\n\n\t\t// groups\n\n\t\tthis.groups = geometry.groups;\n\n\t\t// morphs\n\n\t\tfor ( var name in geometry.morphTargets ) {\n\n\t\t\tvar array = [];\n\t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\n\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ i ];\n\n\t\t\t\tvar attribute = new THREE.Float32Attribute( morphTarget.length * 3, 3 );\n\n\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget ) );\n\n\t\t\t}\n\n\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t}\n\n\t\t// skinning\n\n\t\tif ( geometry.skinIndices.length > 0 ) {\n\n\t\t\tvar skinIndices = new THREE.Float32Attribute( geometry.skinIndices.length * 4, 4 );\n\t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\n\t\t}\n\n\t\tif ( geometry.skinWeights.length > 0 ) {\n\n\t\t\tvar skinWeights = new THREE.Float32Attribute( geometry.skinWeights.length * 4, 4 );\n\t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t}\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcomputeBoundingBox: function () {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new THREE.Box3();\n\n\t\t}\n\n\t\tvar positions = this.attributes.position.array;\n\n\t\tif ( positions !== undefined ) {\n\n\t\t\tthis.boundingBox.setFromArray( positions );\n\n\t\t} else {\n\n\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t}\n\n\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t}\n\n\t},\n\n\tcomputeBoundingSphere: function () {\n\n\t\tvar box = new THREE.Box3();\n\t\tvar vector = new THREE.Vector3();\n\n\t\treturn function computeBoundingSphere() {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new THREE.Sphere();\n\n\t\t\t}\n\n\t\t\tvar positions = this.attributes.position;\n\n\t\t\tif ( positions ) {\n\n\t\t\t\tvar array = positions.array;\n\t\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t\tbox.setFromArray( array );\n\t\t\t\tbox.center( center );\n\n\t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\tfor ( var i = 0, il = array.length; i < il; i += 3 ) {\n\n\t\t\t\t\tvector.fromArray( array, i );\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}(),\n\n\tcomputeFaceNormals: function () {\n\n\t\t// backwards compatibility\n\n\t},\n\n\tcomputeVertexNormals: function () {\n\n\t\tvar index = this.index;\n\t\tvar attributes = this.attributes;\n\t\tvar groups = this.groups;\n\n\t\tif ( attributes.position ) {\n\n\t\t\tvar positions = attributes.position.array;\n\n\t\t\tif ( attributes.normal === undefined ) {\n\n\t\t\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\n\t\t\t} else {\n\n\t\t\t\t// reset existing normals to zero\n\n\t\t\t\tvar array = attributes.normal.array;\n\n\t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t\tarray[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar normals = attributes.normal.array;\n\n\t\t\tvar vA, vB, vC,\n\n\t\t\tpA = new THREE.Vector3(),\n\t\t\tpB = new THREE.Vector3(),\n\t\t\tpC = new THREE.Vector3(),\n\n\t\t\tcb = new THREE.Vector3(),\n\t\t\tab = new THREE.Vector3();\n\n\t\t\t// indexed elements\n\n\t\t\tif ( index ) {\n\n\t\t\t\tvar indices = index.array;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tthis.addGroup( 0, indices.length );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = groups.length; j < jl; ++ j ) {\n\n\t\t\t\t\tvar group = groups[ j ];\n\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\n\t\t\t\t\t\tpA.fromArray( positions, vA );\n\t\t\t\t\t\tpB.fromArray( positions, vB );\n\t\t\t\t\t\tpC.fromArray( positions, vC );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormals[ vA ] += cb.x;\n\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vB ] += cb.x;\n\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vC ] += cb.x;\n\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\n\t\t\t\t\tpA.fromArray( positions, i );\n\t\t\t\t\tpB.fromArray( positions, i + 3 );\n\t\t\t\t\tpC.fromArray( positions, i + 6 );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnormals[ i ] = cb.x;\n\t\t\t\t\tnormals[ i + 1 ] = cb.y;\n\t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\n\t\t\t\t\tnormals[ i + 3 ] = cb.x;\n\t\t\t\t\tnormals[ i + 4 ] = cb.y;\n\t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\n\t\t\t\t\tnormals[ i + 6 ] = cb.x;\n\t\t\t\t\tnormals[ i + 7 ] = cb.y;\n\t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.normalizeNormals();\n\n\t\t\tattributes.normal.needsUpdate = true;\n\n\t\t}\n\n\t},\n\n\tmerge: function ( geometry, offset ) {\n\n\t\tif ( geometry instanceof THREE.BufferGeometry === false ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tvar attributes = this.attributes;\n\n\t\tfor ( var key in attributes ) {\n\n\t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\n\n\t\t\tvar attribute1 = attributes[ key ];\n\t\t\tvar attributeArray1 = attribute1.array;\n\n\t\t\tvar attribute2 = geometry.attributes[ key ];\n\t\t\tvar attributeArray2 = attribute2.array;\n\n\t\t\tvar attributeSize = attribute2.itemSize;\n\n\t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\n\n\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tnormalizeNormals: function () {\n\n\t\tvar normals = this.attributes.normal.array;\n\n\t\tvar x, y, z, n;\n\n\t\tfor ( var i = 0, il = normals.length; i < il; i += 3 ) {\n\n\t\t\tx = normals[ i ];\n\t\t\ty = normals[ i + 1 ];\n\t\t\tz = normals[ i + 2 ];\n\n\t\t\tn = 1.0 / Math.sqrt( x * x + y * y + z * z );\n\n\t\t\tnormals[ i ] *= n;\n\t\t\tnormals[ i + 1 ] *= n;\n\t\t\tnormals[ i + 2 ] *= n;\n\n\t\t}\n\n\t},\n\n\ttoNonIndexed: function () {\n\n\t\tif ( this.index === null ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar geometry2 = new THREE.BufferGeometry();\n\n\t\tvar indices = this.index.array;\n\t\tvar attributes = this.attributes;\n\n\t\tfor ( var name in attributes ) {\n\n\t\t\tvar attribute = attributes[ name ];\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\tvar index = 0, index2 = 0;\n\n\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry2.addAttribute( name, new THREE.BufferAttribute( array2, itemSize ) );\n\n\t\t}\n\n\t\treturn geometry2;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.4,\n\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard BufferGeometry serialization\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.parameters !== undefined ) {\n\n\t\t\tvar parameters = this.parameters;\n\n\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tdata.data = { attributes: {} };\n\n\t\tvar index = this.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tvar array = Array.prototype.slice.call( index.array );\n\n\t\t\tdata.data.index = {\n\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\tarray: array\n\t\t\t};\n\n\t\t}\n\n\t\tvar attributes = this.attributes;\n\n\t\tfor ( var key in attributes ) {\n\n\t\t\tvar attribute = attributes[ key ];\n\n\t\t\tvar array = Array.prototype.slice.call( attribute.array );\n\n\t\t\tdata.data.attributes[ key ] = {\n\t\t\t\titemSize: attribute.itemSize,\n\t\t\t\ttype: attribute.array.constructor.name,\n\t\t\t\tarray: array,\n\t\t\t\tnormalized: attribute.normalized\n\t\t\t};\n\n\t\t}\n\n\t\tvar groups = this.groups;\n\n\t\tif ( groups.length > 0 ) {\n\n\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t}\n\n\t\tvar boundingSphere = this.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tdata.data.boundingSphere = {\n\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\tradius: boundingSphere.radius\n\t\t\t};\n\n\t\t}\n\n\t\treturn data;\n\n\t},\n\n\tclone: function () {\n\n\t\t/*\n\t\t// Handle primitives\n\n\t\tvar parameters = this.parameters;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tvar values = [];\n\n\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\tvalues.push( parameters[ key ] );\n\n\t\t\t}\n\n\t\t\tvar geometry = Object.create( this.constructor.prototype );\n\t\t\tthis.constructor.apply( geometry, values );\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\treturn new this.constructor().copy( this );\n\t\t*/\n\n\t\treturn new THREE.BufferGeometry().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tvar index = source.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tthis.setIndex( index.clone() );\n\n\t\t}\n\n\t\tvar attributes = source.attributes;\n\n\t\tfor ( var name in attributes ) {\n\n\t\t\tvar attribute = attributes[ name ];\n\t\t\tthis.addAttribute( name, attribute.clone() );\n\n\t\t}\n\n\t\tvar groups = source.groups;\n\n\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tvar group = groups[ i ];\n\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\nTHREE.BufferGeometry.MaxIndex = 65535;\n\n// File:src/core/InstancedBufferGeometry.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nTHREE.InstancedBufferGeometry = function () {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'InstancedBufferGeometry';\n\tthis.maxInstancedCount = undefined;\n\n};\n\nTHREE.InstancedBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.InstancedBufferGeometry.prototype.constructor = THREE.InstancedBufferGeometry;\n\nTHREE.InstancedBufferGeometry.prototype.addGroup = function ( start, count, instances ) {\n\n\tthis.groups.push( {\n\n\t\tstart: start,\n\t\tcount: count,\n\t\tinstances: instances\n\n\t} );\n\n};\n\nTHREE.InstancedBufferGeometry.prototype.copy = function ( source ) {\n\n\tvar index = source.index;\n\n\tif ( index !== null ) {\n\n\t\tthis.setIndex( index.clone() );\n\n\t}\n\n\tvar attributes = source.attributes;\n\n\tfor ( var name in attributes ) {\n\n\t\tvar attribute = attributes[ name ];\n\t\tthis.addAttribute( name, attribute.clone() );\n\n\t}\n\n\tvar groups = source.groups;\n\n\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\tvar group = groups[ i ];\n\t\tthis.addGroup( group.start, group.count, group.instances );\n\n\t}\n\n\treturn this;\n\n};\n\n// File:src/core/Uniform.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Uniform = function ( value ) {\n\n\tif ( typeof value === 'string' ) {\n\n\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t\tvalue = arguments[ 1 ];\n\n\t}\n\n\tthis.value = value;\n\n\tthis.dynamic = false;\n\n};\n\nTHREE.Uniform.prototype = {\n\n\tconstructor: THREE.Uniform,\n\n\tonUpdate: function ( callback ) {\n\n\t\tthis.dynamic = true;\n\t\tthis.onUpdateCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n};\n\n// File:src/animation/AnimationAction.js\n\n/**\n *\n * Action provided by AnimationMixer for scheduling clip playback on specific\n * objects.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n *\n */\n\nTHREE.AnimationAction = function() {\n\n\tthrow new Error( \"THREE.AnimationAction: \" +\n\t\t\t\"Use mixer.clipAction for construction.\" );\n\n};\n\nTHREE.AnimationAction._new =\n\t\tfunction AnimationAction( mixer, clip, localRoot ) {\n\n\tthis._mixer = mixer;\n\tthis._clip = clip;\n\tthis._localRoot = localRoot || null;\n\n\tvar tracks = clip.tracks,\n\t\tnTracks = tracks.length,\n\t\tinterpolants = new Array( nTracks );\n\n\tvar interpolantSettings = {\n\t\t\tendingStart: \tTHREE.ZeroCurvatureEnding,\n\t\t\tendingEnd:\t\tTHREE.ZeroCurvatureEnding\n\t};\n\n\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\tvar interpolant = tracks[ i ].createInterpolant( null );\n\t\tinterpolants[ i ] = interpolant;\n\t\tinterpolant.settings = interpolantSettings;\n\n\t}\n\n\tthis._interpolantSettings = interpolantSettings;\n\n\tthis._interpolants = interpolants;\t// bound by the mixer\n\n\t// inside: PropertyMixer (managed by the mixer)\n\tthis._propertyBindings = new Array( nTracks );\n\n\tthis._cacheIndex = null;\t\t\t// for the memory manager\n\tthis._byClipCacheIndex = null;\t\t// for the memory manager\n\n\tthis._timeScaleInterpolant = null;\n\tthis._weightInterpolant = null;\n\n\tthis.loop = THREE.LoopRepeat;\n\tthis._loopCount = -1;\n\n\t// global mixer time when the action is to be started\n\t// it's set back to 'null' upon start of the action\n\tthis._startTime = null;\n\n\t// scaled local time of the action\n\t// gets clamped or wrapped to 0..clip.duration according to loop\n\tthis.time = 0;\n\n\tthis.timeScale = 1;\n\tthis._effectiveTimeScale = 1;\n\n\tthis.weight = 1;\n\tthis._effectiveWeight = 1;\n\n\tthis.repetitions = Infinity; \t\t// no. of repetitions when looping\n\n\tthis.paused = false;\t\t\t\t// false -> zero effective time scale\n\tthis.enabled = true;\t\t\t\t// true -> zero effective weight\n\n\tthis.clampWhenFinished \t= false;\t// keep feeding the last frame?\n\n\tthis.zeroSlopeAtStart \t= true;\t\t// for smooth interpolation w/o separate\n\tthis.zeroSlopeAtEnd\t\t= true;\t\t// clips for start, loop and end\n\n};\n\nTHREE.AnimationAction._new.prototype = {\n\n\tconstructor: THREE.AnimationAction._new,\n\n\t// State & Scheduling\n\n\tplay: function() {\n\n\t\tthis._mixer._activateAction( this );\n\n\t\treturn this;\n\n\t},\n\n\tstop: function() {\n\n\t\tthis._mixer._deactivateAction( this );\n\n\t\treturn this.reset();\n\n\t},\n\n\treset: function() {\n\n\t\tthis.paused = false;\n\t\tthis.enabled = true;\n\n\t\tthis.time = 0;\t\t\t// restart clip\n\t\tthis._loopCount = -1;\t// forget previous loops\n\t\tthis._startTime = null;\t// forget scheduling\n\n\t\treturn this.stopFading().stopWarping();\n\n\t},\n\n\tisRunning: function() {\n\n\t\tvar start = this._startTime;\n\n\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t},\n\n\t// return true when play has been called\n\tisScheduled: function() {\n\n\t\treturn this._mixer._isActiveAction( this );\n\n\t},\n\n\tstartAt: function( time ) {\n\n\t\tthis._startTime = time;\n\n\t\treturn this;\n\n\t},\n\n\tsetLoop: function( mode, repetitions ) {\n\n\t\tthis.loop = mode;\n\t\tthis.repetitions = repetitions;\n\n\t\treturn this;\n\n\t},\n\n\t// Weight\n\n\t// set the weight stopping any scheduled fading\n\t// although .enabled = false yields an effective weight of zero, this\n\t// method does *not* change .enabled, because it would be confusing\n\tsetEffectiveWeight: function( weight ) {\n\n\t\tthis.weight = weight;\n\n\t\t// note: same logic as when updated at runtime\n\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\treturn this.stopFading();\n\n\t},\n\n\t// return the weight considering fading and .enabled\n\tgetEffectiveWeight: function() {\n\n\t\treturn this._effectiveWeight;\n\n\t},\n\n\tfadeIn: function( duration ) {\n\n\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t},\n\n\tfadeOut: function( duration ) {\n\n\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t},\n\n\tcrossFadeFrom: function( fadeOutAction, duration, warp ) {\n\n\t\tvar mixer = this._mixer;\n\n\t\tfadeOutAction.fadeOut( duration );\n\t\tthis.fadeIn( duration );\n\n\t\tif( warp ) {\n\n\t\t\tvar fadeInDuration = this._clip.duration,\n\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcrossFadeTo: function( fadeInAction, duration, warp ) {\n\n\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t},\n\n\tstopFading: function() {\n\n\t\tvar weightInterpolant = this._weightInterpolant;\n\n\t\tif ( weightInterpolant !== null ) {\n\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// Time Scale Control\n\n\t// set the weight stopping any scheduled warping\n\t// although .paused = true yields an effective time scale of zero, this\n\t// method does *not* change .paused, because it would be confusing\n\tsetEffectiveTimeScale: function( timeScale ) {\n\n\t\tthis.timeScale = timeScale;\n\t\tthis._effectiveTimeScale = this.paused ? 0 :timeScale;\n\n\t\treturn this.stopWarping();\n\n\t},\n\n\t// return the time scale considering warping and .paused\n\tgetEffectiveTimeScale: function() {\n\n\t\treturn this._effectiveTimeScale;\n\n\t},\n\n\tsetDuration: function( duration ) {\n\n\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\treturn this.stopWarping();\n\n\t},\n\n\tsyncWith: function( action ) {\n\n\t\tthis.time = action.time;\n\t\tthis.timeScale = action.timeScale;\n\n\t\treturn this.stopWarping();\n\n\t},\n\n\thalt: function( duration ) {\n\n\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t},\n\n\twarp: function( startTimeScale, endTimeScale, duration ) {\n\n\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\tinterpolant = this._timeScaleInterpolant,\n\n\t\t\ttimeScale = this.timeScale;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant(),\n\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t}\n\n\t\tvar times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\ttimes[ 1 ] = now + duration;\n\n\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\treturn this;\n\n\t},\n\n\tstopWarping: function() {\n\n\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// Object Accessors\n\n\tgetMixer: function() {\n\n\t\treturn this._mixer;\n\n\t},\n\n\tgetClip: function() {\n\n\t\treturn this._clip;\n\n\t},\n\n\tgetRoot: function() {\n\n\t\treturn this._localRoot || this._mixer._root;\n\n\t},\n\n\t// Interna\n\n\t_update: function( time, deltaTime, timeDirection, accuIndex ) {\n\t\t// called by the mixer\n\n\t\tvar startTime = this._startTime;\n\n\t\tif ( startTime !== null ) {\n\n\t\t\t// check for scheduled start of action\n\n\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\n\t\t\t}\n\n\t\t\t// start\n\n\t\t\tthis._startTime = null; // unschedule\n\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t}\n\n\t\t// apply time scale and advance time\n\n\t\tdeltaTime *= this._updateTimeScale( time );\n\t\tvar clipTime = this._updateTime( deltaTime );\n\n\t\t// note: _updateTime may disable the action resulting in\n\t\t// an effective weight of 0\n\n\t\tvar weight = this._updateWeight( time );\n\n\t\tif ( weight > 0 ) {\n\n\t\t\tvar interpolants = this._interpolants;\n\t\t\tvar propertyMixers = this._propertyBindings;\n\n\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t_updateWeight: function( time ) {\n\n\t\tvar weight = 0;\n\n\t\tif ( this.enabled ) {\n\n\t\t\tweight = this.weight;\n\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveWeight = weight;\n\t\treturn weight;\n\n\t},\n\n\t_updateTimeScale: function( time ) {\n\n\t\tvar timeScale = 0;\n\n\t\tif ( ! this.paused ) {\n\n\t\t\ttimeScale = this.timeScale;\n\n\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveTimeScale = timeScale;\n\t\treturn timeScale;\n\n\t},\n\n\t_updateTime: function( deltaTime ) {\n\n\t\tvar time = this.time + deltaTime;\n\n\t\tif ( deltaTime === 0 ) return time;\n\n\t\tvar duration = this._clip.duration,\n\n\t\t\tloop = this.loop,\n\t\t\tloopCount = this._loopCount;\n\n\t\tif ( loop === THREE.LoopOnce ) {\n\n\t\t\tif ( loopCount === -1 ) {\n\t\t\t\t// just started\n\n\t\t\t\tthis.loopCount = 0;\n\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t}\n\n\t\t\thandle_stop: {\n\n\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\ttime = duration;\n\n\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\ttime = 0;\n\n\t\t\t\t} else break handle_stop;\n\n\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\telse this.enabled = false;\n\n\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\tvar pingPong = ( loop === THREE.LoopPingPong );\n\n\t\t\tif ( loopCount === -1 ) {\n\t\t\t\t// just started\n\n\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\tthis._setEndings(\n\t\t\t\t\t\t\ttrue, this.repetitions === 0, pingPong );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\tthis._setEndings(\n\t\t\t\t\t\t\tthis.repetitions === 0, true, pingPong );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( time >= duration || time < 0 ) {\n\t\t\t\t// wrap around\n\n\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\tvar pending = this.repetitions - loopCount;\n\n\t\t\t\tif ( pending < 0 ) {\n\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\t\t\t\t\t// keep running\n\n\t\t\t\t\tif ( pending === 0 ) {\n\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\tvar atStart = deltaTime < 0;\n\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\tthis.time = time;\n\t\t\t\treturn duration - time;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.time = time;\n\t\treturn time;\n\n\t},\n\n\t_setEndings: function( atStart, atEnd, pingPong ) {\n\n\t\tvar settings = this._interpolantSettings;\n\n\t\tif ( pingPong ) {\n\n\t\t\tsettings.endingStart \t= THREE.ZeroSlopeEnding;\n\t\t\tsettings.endingEnd\t\t= THREE.ZeroSlopeEnding;\n\n\t\t} else {\n\n\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\tif ( atStart ) {\n\n\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ?\n\t\t\t\t\t\tTHREE.ZeroSlopeEnding : THREE.ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingStart = THREE.WrapAroundEnding;\n\n\t\t\t}\n\n\t\t\tif ( atEnd ) {\n\n\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ?\n\t\t\t\t\t\tTHREE.ZeroSlopeEnding : THREE.ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingEnd \t = THREE.WrapAroundEnding;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t_scheduleFading: function( duration, weightNow, weightThen ) {\n\n\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\tinterpolant = this._weightInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant(),\n\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t}\n\n\t\tvar times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now; \t\t\t\tvalues[ 0 ] = weightNow;\n\t\ttimes[ 1 ] = now + duration;\tvalues[ 1 ] = weightThen;\n\n\t\treturn this;\n\n\t}\n\n};\n\n\n// File:src/animation/AnimationClip.js\n\n/**\n *\n * Reusable set of Tracks that represent an animation.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n */\n\nTHREE.AnimationClip = function ( name, duration, tracks ) {\n\n\tthis.name = name;\n\tthis.tracks = tracks;\n\tthis.duration = ( duration !== undefined ) ? duration : -1;\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\t// this means it should figure out its duration by scanning the tracks\n\tif ( this.duration < 0 ) {\n\n\t\tthis.resetDuration();\n\n\t}\n\n\t// maybe only do these on demand, as doing them here could potentially slow down loading\n\t// but leaving these here during development as this ensures a lot of testing of these functions\n\tthis.trim();\n\tthis.optimize();\n\n};\n\nTHREE.AnimationClip.prototype = {\n\n\tconstructor: THREE.AnimationClip,\n\n\tresetDuration: function() {\n\n\t\tvar tracks = this.tracks,\n\t\t\tduration = 0;\n\n\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\tvar track = this.tracks[ i ];\n\n\t\t\tduration = Math.max(\n\t\t\t\t\tduration, track.times[ track.times.length - 1 ] );\n\n\t\t}\n\n\t\tthis.duration = duration;\n\n\t},\n\n\ttrim: function() {\n\n\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\toptimize: function() {\n\n\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].optimize();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n};\n\n// Static methods:\n\nObject.assign( THREE.AnimationClip, {\n\n\tparse: function( json ) {\n\n\t\tvar tracks = [],\n\t\t\tjsonTracks = json.tracks,\n\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( THREE.KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t}\n\n\t\treturn new THREE.AnimationClip( json.name, json.duration, tracks );\n\n\t},\n\n\n\ttoJSON: function( clip ) {\n\n\t\tvar tracks = [],\n\t\t\tclipTracks = clip.tracks;\n\n\t\tvar json = {\n\n\t\t\t'name': clip.name,\n\t\t\t'duration': clip.duration,\n\t\t\t'tracks': tracks\n\n\t\t};\n\n\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( THREE.KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t}\n\n\t\treturn json;\n\n\t},\n\n\n\tCreateFromMorphTargetSequence: function( name, morphTargetSequence, fps, noLoop ) {\n\n\t\tvar numMorphTargets = morphTargetSequence.length;\n\t\tvar tracks = [];\n\n\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\tvar times = [];\n\t\t\tvar values = [];\n\n\t\t\ttimes.push(\n\t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\t\ti,\n\t\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\tvar order = THREE.AnimationUtils.getKeyframeOrder( times );\n\t\t\ttimes = THREE.AnimationUtils.sortedArray( times, 1, order );\n\t\t\tvalues = THREE.AnimationUtils.sortedArray( values, 1, order );\n\n\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t// last frame as well for perfect loop.\n\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t}\n\n\t\t\ttracks.push(\n\t\t\t\t\tnew THREE.NumberKeyframeTrack(\n\t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\t\ttimes, values\n\t\t\t\t\t).scale( 1.0 / fps ) );\n\t\t}\n\n\t\treturn new THREE.AnimationClip( name, -1, tracks );\n\n\t},\n\n\tfindByName: function( objectOrClipArray, name ) {\n\n\t\tvar clipArray = objectOrClipArray;\n\n\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\tvar o = objectOrClipArray;\n\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t}\n\n\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\treturn clipArray[ i ];\n\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\n\t},\n\n\tCreateClipsFromMorphTargetSequences: function( morphTargets, fps, noLoop ) {\n\n\t\tvar animationToMorphTargets = {};\n\n\t\t// tested with https://regex101.com/ on trick sequences\n\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t// sort morph target names into animation groups based\n\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\tvar morphTarget = morphTargets[ i ];\n\t\t\tvar parts = morphTarget.name.match( pattern );\n\n\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\tvar name = parts[ 1 ];\n\n\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t}\n\n\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar clips = [];\n\n\t\tfor ( var name in animationToMorphTargets ) {\n\n\t\t\tclips.push( THREE.AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n\t\t}\n\n\t\treturn clips;\n\n\t},\n\n\t// parse the animation.hierarchy format\n\tparseAnimation: function( animation, bones, nodeName ) {\n\n\t\tif ( ! animation ) {\n\n\t\t\tconsole.error( \"  no animation in JSONLoader data\" );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tvar addNonemptyTrack = function(\n\t\t\t\ttrackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t// only return track if there are actually keys.\n\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\tTHREE.AnimationUtils.flattenJSON(\n\t\t\t\t\t\tanimationKeys, times, values, propertyName );\n\n\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tvar tracks = [];\n\n\t\tvar clipName = animation.name || 'default';\n\t\t// automatic length determination in AnimationClip.\n\t\tvar duration = animation.length || -1;\n\t\tvar fps = animation.fps || 30;\n\n\t\tvar hierarchyTracks = animation.hierarchy || [];\n\n\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t// skip empty tracks\n\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\n\t\t\t// process morph targets in a way exactly compatible\n\t\t\t// with AnimationHandler.init( animation )\n\t\t\tif ( animationKeys[0].morphTargets ) {\n\n\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\tvar morphTargetNames = {};\n\t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\tif ( animationKeys[k].morphTargets ) {\n\n\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t// the morphTarget is named.\n\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\tvar times = [];\n\t\t\t\t\tvar values = [];\n\n\t\t\t\t\tfor ( var m = 0;\n\t\t\t\t\t\t\tm !== animationKeys[k].morphTargets.length; ++ m ) {\n\n\t\t\t\t\t\tvar animationKey = animationKeys[k];\n\n\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttracks.push( new THREE.NumberKeyframeTrack(\n\t\t\t\t\t\t\t'.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t}\n\n\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\n\t\t\t} else {\n\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tTHREE.VectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tTHREE.QuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tTHREE.VectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tracks.length === 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tvar clip = new THREE.AnimationClip( clipName, duration, tracks );\n\n\t\treturn clip;\n\n\t}\n\n} );\n\n// File:src/animation/AnimationMixer.js\n\n/**\n *\n * Player for AnimationClips.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.AnimationMixer = function( root ) {\n\n\tthis._root = root;\n\tthis._initMemoryManager();\n\tthis._accuIndex = 0;\n\n\tthis.time = 0;\n\n\tthis.timeScale = 1.0;\n\n};\n\nObject.assign( THREE.AnimationMixer.prototype, THREE.EventDispatcher.prototype, {\n\n\t// return an action for a clip optionally using a custom root target\n\t// object (this method allocates a lot of dynamic memory in case a\n\t// previously unknown clip/root combination is specified)\n\tclipAction: function( clip, optionalRoot ) {\n\n\t\tvar root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid,\n\n\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tTHREE.AnimationClip.findByName( root, clip ) : clip,\n\n\t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\n\n\t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\n\t\t\tprototypeAction = null;\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\tvar existingAction =\n\t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\tif ( existingAction !== undefined ) {\n\n\t\t\t\treturn existingAction;\n\n\t\t\t}\n\n\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t// the bindings again but can just copy\n\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t// also, take the clip from the prototype action\n\t\t\tif ( clipObject === null )\n\t\t\t\tclipObject = prototypeAction._clip;\n\n\t\t}\n\n\t\t// clip must be known when specified via string\n\t\tif ( clipObject === null ) return null;\n\n\t\t// allocate all resources required to run it\n\t\tvar newAction = new THREE.\n\t\t\t\tAnimationMixer._Action( this, clipObject, optionalRoot );\n\n\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t// and make the action known to the memory manager\n\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\treturn newAction;\n\n\t},\n\n\t// get an existing action\n\texistingAction: function( clip, optionalRoot ) {\n\n\t\tvar root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid,\n\n\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tTHREE.AnimationClip.findByName( root, clip ) : clip,\n\n\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t}\n\n\t\treturn null;\n\n\t},\n\n\t// deactivates all previously scheduled actions\n\tstopAllAction: function() {\n\n\t\tvar actions = this._actions,\n\t\t\tnActions = this._nActiveActions,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = this._nActiveBindings;\n\n\t\tthis._nActiveActions = 0;\n\t\tthis._nActiveBindings = 0;\n\n\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\tactions[ i ].reset();\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\tbindings[ i ].useCount = 0;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// advance the time and update apply the animation\n\tupdate: function( deltaTime ) {\n\n\t\tdeltaTime *= this.timeScale;\n\n\t\tvar actions = this._actions,\n\t\t\tnActions = this._nActiveActions,\n\n\t\t\ttime = this.time += deltaTime,\n\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t// run active actions\n\n\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\tvar action = actions[ i ];\n\n\t\t\tif ( action.enabled ) {\n\n\t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// update scene graph\n\n\t\tvar bindings = this._bindings,\n\t\t\tnBindings = this._nActiveBindings;\n\n\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\tbindings[ i ].apply( accuIndex );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// return this mixer's root target object\n\tgetRoot: function() {\n\n\t\treturn this._root;\n\n\t},\n\n\t// free all resources specific to a particular clip\n\tuncacheClip: function( clip ) {\n\n\t\tvar actions = this._actions,\n\t\t\tclipUuid = clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t// iteration state and also require updating the state we can\n\t\t\t// just throw away\n\n\t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\tvar action = actionsToRemove[ i ];\n\n\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\tvar cacheIndex = action._cacheIndex,\n\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\taction._cacheIndex = null;\n\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\tactions.pop();\n\n\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t}\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t},\n\n\t// free all resources specific to a particular root target object\n\tuncacheRoot: function( root ) {\n\n\t\tvar rootUuid = root.uuid,\n\t\t\tactionsByClip = this._actionsByClip;\n\n\t\tfor ( var clipUuid in actionsByClip ) {\n\n\t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\tif ( action !== undefined ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingByName !== undefined ) {\n\n\t\t\tfor ( var trackName in bindingByName ) {\n\n\t\t\t\tvar binding = bindingByName[ trackName ];\n\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t// remove a targeted clip from the cache\n\tuncacheAction: function( clip, optionalRoot ) {\n\n\t\tvar action = this.existingAction( clip, optionalRoot );\n\n\t\tif ( action !== null ) {\n\n\t\t\tthis._deactivateAction( action );\n\t\t\tthis._removeInactiveAction( action );\n\n\t\t}\n\n\t}\n\n} );\n\nTHREE.AnimationMixer._Action = THREE.AnimationAction._new;\n\n// Implementation details:\n\nObject.assign( THREE.AnimationMixer.prototype, {\n\n\t_bindAction: function( action, prototypeAction ) {\n\n\t\tvar root = action._localRoot || this._root,\n\t\t\ttracks = action._clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tbindings = action._propertyBindings,\n\t\t\tinterpolants = action._interpolants,\n\t\t\trootUuid = root.uuid,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingsByName === undefined ) {\n\n\t\t\tbindingsByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tvar track = tracks[ i ],\n\t\t\t\ttrackName = track.name,\n\t\t\t\tbinding = bindingsByName[ trackName ];\n\n\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t} else {\n\n\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar path = prototypeAction && prototypeAction.\n\t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\tbinding = new THREE.PropertyMixer(\n\t\t\t\t\t\tTHREE.PropertyBinding.create( root, trackName, path ),\n\t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t++ binding.referenceCount;\n\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t}\n\n\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t}\n\n\t},\n\n\t_activateAction: function( action ) {\n\n\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\tthis._bindAction( action,\n\t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t}\n\n\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t// increment reference counts / sort out state\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._lendAction( action );\n\n\t\t}\n\n\t},\n\n\t_deactivateAction: function( action ) {\n\n\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t// decrement reference counts / sort out state\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._takeBackAction( action );\n\n\t\t}\n\n\t},\n\n\t// Memory manager\n\n\t_initMemoryManager: function() {\n\n\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\tthis._nActiveActions = 0;\n\n\t\tthis._actionsByClip = {};\n\t\t// inside:\n\t\t// {\n\t\t// \t\tknownActions: Array< _Action >\t- used as prototypes\n\t\t// \t\tactionByRoot: _Action\t\t\t- lookup\n\t\t// }\n\n\n\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\tthis._nActiveBindings = 0;\n\n\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\tthis._controlInterpolants = []; // same game as above\n\t\tthis._nActiveControlInterpolants = 0;\n\n\t\tvar scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tactions: {\n\t\t\t\tget total() { return scope._actions.length; },\n\t\t\t\tget inUse() { return scope._nActiveActions; }\n\t\t\t},\n\t\t\tbindings: {\n\t\t\t\tget total() { return scope._bindings.length; },\n\t\t\t\tget inUse() { return scope._nActiveBindings; }\n\t\t\t},\n\t\t\tcontrolInterpolants: {\n\t\t\t\tget total() { return scope._controlInterpolants.length; },\n\t\t\t\tget inUse() { return scope._nActiveControlInterpolants; }\n\t\t\t}\n\n\t\t};\n\n\t},\n\n\t// Memory management for _Action objects\n\n\t_isActiveAction: function( action ) {\n\n\t\tvar index = action._cacheIndex;\n\t\treturn index !== null && index < this._nActiveActions;\n\n\t},\n\n\t_addInactiveAction: function( action, clipUuid, rootUuid ) {\n\n\t\tvar actions = this._actions,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip === undefined ) {\n\n\t\t\tactionsForClip = {\n\n\t\t\t\tknownActions: [ action ],\n\t\t\t\tactionByRoot: {}\n\n\t\t\t};\n\n\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t} else {\n\n\t\t\tvar knownActions = actionsForClip.knownActions;\n\n\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\tknownActions.push( action );\n\n\t\t}\n\n\t\taction._cacheIndex = actions.length;\n\t\tactions.push( action );\n\n\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t},\n\n\t_removeInactiveAction: function( action ) {\n\n\t\tvar actions = this._actions,\n\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\tcacheIndex = action._cacheIndex;\n\n\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\tactions.pop();\n\n\t\taction._cacheIndex = null;\n\n\n\t\tvar clipUuid = action._clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\tlastKnownAction =\n\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\tknownActionsForClip.pop();\n\n\t\taction._byClipCacheIndex = null;\n\n\n\t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t\t\trootUuid = ( actions._localRoot || this._root ).uuid;\n\n\t\tdelete actionByRoot[ rootUuid ];\n\n\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t\tthis._removeInactiveBindingsForAction( action );\n\n\t},\n\n\t_removeInactiveBindingsForAction: function( action ) {\n\n\t\tvar bindings = action._propertyBindings;\n\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tvar binding = bindings[ i ];\n\n\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t_lendAction: function( action ) {\n\n\t\t// [ active actions |  inactive actions  ]\n\t\t// [  active actions >| inactive actions ]\n\t\t//                 s        a\n\t\t//                  <-swap->\n\t\t//                 a        s\n\n\t\tvar actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\taction._cacheIndex = lastActiveIndex;\n\t\tactions[ lastActiveIndex ] = action;\n\n\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t},\n\n\t_takeBackAction: function( action ) {\n\n\t\t// [  active actions  | inactive actions ]\n\t\t// [ active actions |< inactive actions  ]\n\t\t//        a        s\n\t\t//         <-swap->\n\t\t//        s        a\n\n\t\tvar actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\taction._cacheIndex = firstInactiveIndex;\n\t\tactions[ firstInactiveIndex ] = action;\n\n\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t},\n\n\t// Memory management for PropertyMixer objects\n\n\t_addInactiveBinding: function( binding, rootUuid, trackName ) {\n\n\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\tbindings = this._bindings;\n\n\t\tif ( bindingByName === undefined ) {\n\n\t\t\tbindingByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t}\n\n\t\tbindingByName[ trackName ] = binding;\n\n\t\tbinding._cacheIndex = bindings.length;\n\t\tbindings.push( binding );\n\n\t},\n\n\t_removeInactiveBinding: function( binding ) {\n\n\t\tvar bindings = this._bindings,\n\t\t\tpropBinding = binding.binding,\n\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\ttrackName = propBinding.path,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\tbindings.pop();\n\n\t\tdelete bindingByName[ trackName ];\n\n\t\tremove_empty_map: {\n\n\t\t\tfor ( var _ in bindingByName ) break remove_empty_map;\n\n\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t}\n\n\t},\n\n\t_lendBinding: function( binding ) {\n\n\t\tvar bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\tbinding._cacheIndex = lastActiveIndex;\n\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t},\n\n\t_takeBackBinding: function( binding ) {\n\n\t\tvar bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t},\n\n\n\t// Memory management of Interpolants for weight and time scale\n\n\t_lendControlInterpolant: function() {\n\n\t\tvar interpolants = this._controlInterpolants,\n\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\n\t\t\tinterpolant = interpolants[ lastActiveIndex ];\n\n\t\tif ( interpolant === undefined ) {\n\n\t\t\tinterpolant = new THREE.LinearInterpolant(\n\t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\n\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t}\n\n\t\treturn interpolant;\n\n\t},\n\n\t_takeBackControlInterpolant: function( interpolant ) {\n\n\t\tvar interpolants = this._controlInterpolants,\n\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t},\n\n\t_controlInterpolantsResultBuffer: new Float32Array( 1 )\n\n} );\n\n// File:src/animation/AnimationObjectGroup.js\n\n/**\n *\n * A group of objects that receives a shared animation state.\n *\n * Usage:\n *\n * \t-\tAdd objects you would otherwise pass as 'root' to the\n * \t\tconstructor or the .clipAction method of AnimationMixer.\n *\n * \t-\tInstead pass this object as 'root'.\n *\n * \t-\tYou can also add and remove objects later when the mixer\n * \t\tis running.\n *\n * Note:\n *\n *  \tObjects of this class appear as one object to the mixer,\n *  \tso cache control of the individual objects must be done\n *  \ton the group.\n *\n * Limitation:\n *\n * \t- \tThe animated properties must be compatible among the\n * \t\tall objects in the group.\n *\n *  -\tA single property can either be controlled through a\n *  \ttarget group or directly, but not both.\n *\n * @author tschw\n */\n\nTHREE.AnimationObjectGroup = function( var_args ) {\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\t// cached objects followed by the active ones\n\tthis._objects = Array.prototype.slice.call( arguments );\n\n\tthis.nCachedObjects_ = 0;\t\t\t// threshold\n\t// note: read by PropertyBinding.Composite\n\n\tvar indices = {};\n\tthis._indicesByUUID = indices;\t\t// for bookkeeping\n\n\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t}\n\n\tthis._paths = [];\t\t\t\t\t// inside: string\n\tthis._parsedPaths = [];\t\t\t\t// inside: { we don't care, here }\n\tthis._bindings = []; \t\t\t\t// inside: Array< PropertyBinding >\n\tthis._bindingsIndicesByPath = {}; \t// inside: indices in these arrays\n\n\tvar scope = this;\n\n\tthis.stats = {\n\n\t\tobjects: {\n\t\t\tget total() { return scope._objects.length; },\n\t\t\tget inUse() { return this.total - scope.nCachedObjects_;  }\n\t\t},\n\n\t\tget bindingsPerObject() { return scope._bindings.length; }\n\n\t};\n\n};\n\nTHREE.AnimationObjectGroup.prototype = {\n\n\tconstructor: THREE.AnimationObjectGroup,\n\n\tadd: function( var_args ) {\n\n\t\tvar objects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tpaths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tvar object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index === undefined ) {\n\n\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\tindex = nObjects ++;\n\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\tobjects.push( object );\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tbindings[ j ].push(\n\t\t\t\t\t\t\tnew THREE.PropertyBinding(\n\t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t}\n\n\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\tvar knownObject = objects[ index ];\n\n\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\tbinding = new THREE.PropertyBinding(\n\t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t} else if ( objects[ index ] !== knownObject) {\n\n\t\t\t\tconsole.error( \"Different objects with the same UUID \" +\n\t\t\t\t\t\t\"detected. Clean the caches or recreate your \" +\n\t\t\t\t\t\t\"infrastructure when reloading scenes...\" );\n\n\t\t\t} // else the object is already where we want it to be\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t},\n\n\tremove: function( var_args ) {\n\n\t\tvar objects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tvar object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t},\n\n\t// remove & forget\n\tuncache: function( var_args ) {\n\n\t\tvar objects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tvar object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\tvar lastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} // cached or active\n\n\t\t\t} // if object is known\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t},\n\n\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\tsubscribe_: function( path, parsedPath ) {\n\t\t// returns an array of bindings for the given path that is changed\n\t\t// according to the contained objects in the group\n\n\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\tindex = indicesByPath[ path ],\n\t\t\tbindings = this._bindings;\n\n\t\tif ( index !== undefined ) return bindings[ index ];\n\n\t\tvar paths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tobjects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\tindex = bindings.length;\n\n\t\tindicesByPath[ path ] = index;\n\n\t\tpaths.push( path );\n\t\tparsedPaths.push( parsedPath );\n\t\tbindings.push( bindingsForPath );\n\n\t\tfor ( var i = nCachedObjects,\n\t\t\t\tn = objects.length; i !== n; ++ i ) {\n\n\t\t\tvar object = objects[ i ];\n\n\t\t\tbindingsForPath[ i ] =\n\t\t\t\t\tnew THREE.PropertyBinding( object, path, parsedPath );\n\n\t\t}\n\n\t\treturn bindingsForPath;\n\n\t},\n\n\tunsubscribe_: function( path ) {\n\t\t// tells the group to forget about a property path and no longer\n\t\t// update the array previously obtained with 'subscribe_'\n\n\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\tindex = indicesByPath[ path ];\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tvar paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\tbindings[ index ] = lastBindings;\n\t\t\tbindings.pop();\n\n\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\tparsedPaths.pop();\n\n\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\tpaths.pop();\n\n\t\t}\n\n\t}\n\n};\n\n\n// File:src/animation/AnimationUtils.js\n\n/**\n * @author tschw\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n */\n\nTHREE.AnimationUtils = {\n\n\t// same as Array.prototype.slice, but also works on typed arrays\n\tarraySlice: function( array, from, to ) {\n\n\t\tif ( THREE.AnimationUtils.isTypedArray( array ) ) {\n\n\t\t\treturn new array.constructor( array.subarray( from, to ) );\n\n\t\t}\n\n\t\treturn array.slice( from, to );\n\n\t},\n\n\t// converts an array to a specific type\n\tconvertArray: function( array, type, forceClone ) {\n\n\t\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t\t\t! forceClone && array.constructor === type ) return array;\n\n\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\t\treturn new type( array ); // create typed array\n\n\t\t}\n\n\t\treturn Array.prototype.slice.call( array ); // create Array\n\n\t},\n\n\tisTypedArray: function( object ) {\n\n\t\treturn ArrayBuffer.isView( object ) &&\n\t\t\t\t! ( object instanceof DataView );\n\n\t},\n\n\t// returns an array by which times and values can be sorted\n\tgetKeyframeOrder: function( times ) {\n\n\t\tfunction compareTime( i, j ) {\n\n\t\t\treturn times[ i ] - times[ j ];\n\n\t\t}\n\n\t\tvar n = times.length;\n\t\tvar result = new Array( n );\n\t\tfor ( var i = 0; i !== n; ++ i ) result[ i ] = i;\n\n\t\tresult.sort( compareTime );\n\n\t\treturn result;\n\n\t},\n\n\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\tsortedArray: function( values, stride, order ) {\n\n\t\tvar nValues = values.length;\n\t\tvar result = new values.constructor( nValues );\n\n\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\t\tvar srcOffset = order[ i ] * stride;\n\n\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn result;\n\n\t},\n\n\t// function for parsing AOS keyframe formats\n\tflattenJSON: function( jsonKeys, times, values, valuePropertyName ) {\n\n\t\tvar i = 1, key = jsonKeys[ 0 ];\n\n\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t}\n\n\t\tif ( key === undefined ) return; // no data\n\n\t\tvar value = key[ valuePropertyName ];\n\t\tif ( value === undefined ) return; // no data\n\n\t\tif ( Array.isArray( value ) ) {\n\n\t\t\tdo {\n\n\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n\t\t\t\t}\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t} while ( key !== undefined );\n\n\t\t} else if ( value.toArray !== undefined ) {\n\t\t\t// ...assume THREE.Math-ish\n\n\t\t\tdo {\n\n\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t\t}\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t} while ( key !== undefined );\n\n\t\t} else {\n\t\t\t// otherwise push as-is\n\n\t\t\tdo {\n\n\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\tvalues.push( value );\n\n\t\t\t\t}\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t} while ( key !== undefined );\n\n\t\t}\n\n\t}\n\n};\n\n// File:src/animation/KeyframeTrack.js\n\n/**\n *\n * A timed sequence of keyframes for a specific property.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.KeyframeTrack = function ( name, times, values, interpolation ) {\n\n\tif( name === undefined ) throw new Error( \"track name is undefined\" );\n\n\tif( times === undefined || times.length === 0 ) {\n\n\t\tthrow new Error( \"no keyframes in track named \" + name );\n\n\t}\n\n\tthis.name = name;\n\n\tthis.times = THREE.AnimationUtils.convertArray( times, this.TimeBufferType );\n\tthis.values = THREE.AnimationUtils.convertArray( values, this.ValueBufferType );\n\n\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\tthis.validate();\n\tthis.optimize();\n\n};\n\nTHREE.KeyframeTrack.prototype = {\n\n\tconstructor: THREE.KeyframeTrack,\n\n\tTimeBufferType: Float32Array,\n\tValueBufferType: Float32Array,\n\n\tDefaultInterpolation: THREE.InterpolateLinear,\n\n\tInterpolantFactoryMethodDiscrete: function( result ) {\n\n\t\treturn new THREE.DiscreteInterpolant(\n\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n\t},\n\n\tInterpolantFactoryMethodLinear: function( result ) {\n\n\t\treturn new THREE.LinearInterpolant(\n\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n\t},\n\n\tInterpolantFactoryMethodSmooth: function( result ) {\n\n\t\treturn new THREE.CubicInterpolant(\n\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n\t},\n\n\tsetInterpolation: function( interpolation ) {\n\n\t\tvar factoryMethod;\n\n\t\tswitch ( interpolation ) {\n\n\t\t\tcase THREE.InterpolateDiscrete:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.InterpolateLinear:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.InterpolateSmooth:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( factoryMethod === undefined ) {\n\n\t\t\tvar message = \"unsupported interpolation for \" +\n\t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\n\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconsole.warn( message );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.createInterpolant = factoryMethod;\n\n\t},\n\n\tgetInterpolation: function() {\n\n\t\tswitch ( this.createInterpolant ) {\n\n\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\treturn THREE.InterpolateDiscrete;\n\n\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\treturn THREE.InterpolateLinear;\n\n\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\treturn THREE.InterpolateSmooth;\n\n\t\t}\n\n\t},\n\n\tgetValueSize: function() {\n\n\t\treturn this.values.length / this.times.length;\n\n\t},\n\n\t// move all keyframes either forwards or backwards in time\n\tshift: function( timeOffset ) {\n\n\t\tif( timeOffset !== 0.0 ) {\n\n\t\t\tvar times = this.times;\n\n\t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\tscale: function( timeScale ) {\n\n\t\tif( timeScale !== 1.0 ) {\n\n\t\t\tvar times = this.times;\n\n\t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\ttrim: function( startTime, endTime ) {\n\n\t\tvar times = this.times,\n\t\t\tnKeys = times.length,\n\t\t\tfrom = 0,\n\t\t\tto = nKeys - 1;\n\n\t\twhile ( from !== nKeys && times[ from ] < startTime ) ++ from;\n\t\twhile ( to !== -1 && times[ to ] > endTime ) -- to;\n\n\t\t++ to; // inclusive -> exclusive bound\n\n\t\tif( from !== 0 || to !== nKeys ) {\n\n\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\tif ( from >= to ) to = Math.max( to , 1 ), from = to - 1;\n\n\t\t\tvar stride = this.getValueSize();\n\t\t\tthis.times = THREE.AnimationUtils.arraySlice( times, from, to );\n\t\t\tthis.values = THREE.AnimationUtils.\n\t\t\t\t\tarraySlice( this.values, from * stride, to * stride );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\tvalidate: function() {\n\n\t\tvar valid = true;\n\n\t\tvar valueSize = this.getValueSize();\n\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\tconsole.error( \"invalid value size in track\", this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tvar times = this.times,\n\t\t\tvalues = this.values,\n\n\t\t\tnKeys = times.length;\n\n\t\tif( nKeys === 0 ) {\n\n\t\t\tconsole.error( \"track is empty\", this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tvar prevTime = null;\n\n\t\tfor( var i = 0; i !== nKeys; i ++ ) {\n\n\t\t\tvar currTime = times[ i ];\n\n\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\tconsole.error( \"time is not a valid number\", this, i, currTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\tconsole.error( \"out of order keys\", this, i, currTime, prevTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tprevTime = currTime;\n\n\t\t}\n\n\t\tif ( values !== undefined ) {\n\n\t\t\tif ( THREE.AnimationUtils.isTypedArray( values ) ) {\n\n\t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar value = values[ i ];\n\n\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\tconsole.error( \"value is not a valid number\", this, i, value );\n\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn valid;\n\n\t},\n\n\t// removes equivalent sequential keys as common in morph target sequences\n\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\toptimize: function() {\n\n\t\tvar times = this.times,\n\t\t\tvalues = this.values,\n\t\t\tstride = this.getValueSize(),\n\n\t\t\twriteIndex = 1;\n\n\t\tfor( var i = 1, n = times.length - 1; i <= n; ++ i ) {\n\n\t\t\tvar keep = false;\n\n\t\t\tvar time = times[ i ];\n\t\t\tvar timeNext = times[ i + 1 ];\n\n\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\n\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\t\t\t\tvar offset = i * stride,\n\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\tvar value = values[ offset + j ];\n\n\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// in-place compaction\n\n\t\t\tif ( keep ) {\n\n\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\tvar readOffset = i * stride,\n\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( writeIndex !== times.length ) {\n\n\t\t\tthis.times = THREE.AnimationUtils.arraySlice( times, 0, writeIndex );\n\t\t\tthis.values = THREE.AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n};\n\n// Static methods:\n\nObject.assign( THREE.KeyframeTrack, {\n\n\t// Serialization (in static context, because of constructor invocation\n\t// and automatic invocation of .toJSON):\n\n\tparse: function( json ) {\n\n\t\tif( json.type === undefined ) {\n\n\t\t\tthrow new Error( \"track type undefined, can not parse\" );\n\n\t\t}\n\n\t\tvar trackType = THREE.KeyframeTrack._getTrackTypeForValueTypeName( json.type );\n\n\t\tif ( json.times === undefined ) {\n\n\t\t\tvar times = [], values = [];\n\n\t\t\tTHREE.AnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\n\t\t\tjson.times = times;\n\t\t\tjson.values = values;\n\n\t\t}\n\n\t\t// derived classes can define a static parse method\n\t\tif ( trackType.parse !== undefined ) {\n\n\t\t\treturn trackType.parse( json );\n\n\t\t} else {\n\n\t\t\t// by default, we asssume a constructor compatible with the base\n\t\t\treturn new trackType(\n\t\t\t\t\tjson.name, json.times, json.values, json.interpolation );\n\n\t\t}\n\n\t},\n\n\ttoJSON: function( track ) {\n\n\t\tvar trackType = track.constructor;\n\n\t\tvar json;\n\n\t\t// derived classes can define a static toJSON method\n\t\tif ( trackType.toJSON !== undefined ) {\n\n\t\t\tjson = trackType.toJSON( track );\n\n\t\t} else {\n\n\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\tjson = {\n\n\t\t\t\t'name': track.name,\n\t\t\t\t'times': THREE.AnimationUtils.convertArray( track.times, Array ),\n\t\t\t\t'values': THREE.AnimationUtils.convertArray( track.values, Array )\n\n\t\t\t};\n\n\t\t\tvar interpolation = track.getInterpolation();\n\n\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t}\n\n\t\t}\n\n\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\treturn json;\n\n\t},\n\n\t_getTrackTypeForValueTypeName: function( typeName ) {\n\n\t\tswitch( typeName.toLowerCase() ) {\n\n\t\t\tcase \"scalar\":\n\t\t\tcase \"double\":\n\t\t\tcase \"float\":\n\t\t\tcase \"number\":\n\t\t\tcase \"integer\":\n\n\t\t\t\treturn THREE.NumberKeyframeTrack;\n\n\t\t\tcase \"vector\":\n\t\t\tcase \"vector2\":\n\t\t\tcase \"vector3\":\n\t\t\tcase \"vector4\":\n\n\t\t\t\treturn THREE.VectorKeyframeTrack;\n\n\t\t\tcase \"color\":\n\n\t\t\t\treturn THREE.ColorKeyframeTrack;\n\n\t\t\tcase \"quaternion\":\n\n\t\t\t\treturn THREE.QuaternionKeyframeTrack;\n\n\t\t\tcase \"bool\":\n\t\t\tcase \"boolean\":\n\n\t\t\t\treturn THREE.BooleanKeyframeTrack;\n\n\t\t\tcase \"string\":\n\n\t\t\t\treturn THREE.StringKeyframeTrack;\n\n\t\t}\n\n\t\tthrow new Error( \"Unsupported typeName: \" + typeName );\n\n\t}\n\n} );\n\n// File:src/animation/PropertyBinding.js\n\n/**\n *\n * A reference to a real property in the scene graph.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.PropertyBinding = function ( rootNode, path, parsedPath ) {\n\n\tthis.path = path;\n\tthis.parsedPath = parsedPath ||\n\t\t\tTHREE.PropertyBinding.parseTrackName( path );\n\n\tthis.node = THREE.PropertyBinding.findNode(\n\t\t\trootNode, this.parsedPath.nodeName ) || rootNode;\n\n\tthis.rootNode = rootNode;\n\n};\n\nTHREE.PropertyBinding.prototype = {\n\n\tconstructor: THREE.PropertyBinding,\n\n\tgetValue: function getValue_unbound( targetArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.getValue( targetArray, offset );\n\n\t\t// Note: This class uses a State pattern on a per-method basis:\n\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t// prototype version of these methods with one that represents\n\t\t// the bound state. When the property is not found, the methods\n\t\t// become no-ops.\n\n\t},\n\n\tsetValue: function getValue_unbound( sourceArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.setValue( sourceArray, offset );\n\n\t},\n\n\t// create getter / setter pair for a property in the scene graph\n\tbind: function() {\n\n\t\tvar targetObject = this.node,\n\t\t\tparsedPath = this.parsedPath,\n\n\t\t\tobjectName = parsedPath.objectName,\n\t\t\tpropertyName = parsedPath.propertyName,\n\t\t\tpropertyIndex = parsedPath.propertyIndex;\n\n\t\tif ( ! targetObject ) {\n\n\t\t\ttargetObject = THREE.PropertyBinding.findNode(\n\t\t\t\t\tthis.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n\t\t\tthis.node = targetObject;\n\n\t\t}\n\n\t\t// set fail state so we can just 'return' on error\n\t\tthis.getValue = this._getValue_unavailable;\n\t\tthis.setValue = this._setValue_unavailable;\n\n \t\t// ensure there is a value node\n\t\tif ( ! targetObject ) {\n\n\t\t\tconsole.error( \"  trying to update node for track: \" + this.path + \" but it wasn't found.\" );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( objectName ) {\n\n\t\t\tvar objectIndex = parsedPath.objectIndex;\n\n\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\tswitch ( objectName ) {\n\n\t\t\t\tcase 'materials':\n\n\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\tconsole.error( '  can not bind to material as node does not have a material', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\tconsole.error( '  can not bind to material.materials as node.material does not have a materials array', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'bones':\n\n\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\tconsole.error( '  can not bind to bones as node does not have a skeleton', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( '  can not bind to objectName of node, undefined', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t}\n\n\n\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\tconsole.error( \"  trying to bind to objectIndex of objectName, but is undefined:\", this, targetObject );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// resolve property\n\t\tvar nodeProperty = targetObject[ propertyName ];\n\n\t\tif ( nodeProperty === undefined ) {\n\n\t\t\tvar nodeName = parsedPath.nodeName;\n\n\t\t\tconsole.error( \"  trying to update property for track: \" + nodeName +\n\t\t\t\t\t'.' + propertyName + \" but it wasn't found.\", targetObject );\n\t\t\treturn;\n\n\t\t}\n\n\t\t// determine versioning scheme\n\t\tvar versioning = this.Versioning.None;\n\n\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n\t\t\tversioning = this.Versioning.NeedsUpdate;\n\t\t\tthis.targetObject = targetObject;\n\n\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\t\t\tthis.targetObject = targetObject;\n\n\t\t}\n\n\t\t// determine how the property gets bound\n\t\tvar bindingType = this.BindingType.Direct;\n\n\t\tif ( propertyIndex !== undefined ) {\n\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\n\t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\n\t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else if ( nodeProperty.length !== undefined ) {\n\n\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else {\n\n\t\t\tthis.propertyName = propertyName;\n\n\t\t}\n\n\t\t// select getter / setter\n\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t},\n\n\tunbind: function() {\n\n\t\tthis.node = null;\n\n\t\t// back to the prototype version of getValue / setValue\n\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\tthis.getValue = this._getValue_unbound;\n\t\tthis.setValue = this._setValue_unbound;\n\n\t}\n\n};\n\nObject.assign( THREE.PropertyBinding.prototype, { // prototype, continued\n\n\t// these are used to \"bind\" a nonexistent property\n\t_getValue_unavailable: function() {},\n\t_setValue_unavailable: function() {},\n\n\t// initial state of these methods that calls 'bind'\n\t_getValue_unbound: THREE.PropertyBinding.prototype.getValue,\n\t_setValue_unbound: THREE.PropertyBinding.prototype.setValue,\n\n\tBindingType: {\n\t\tDirect: 0,\n\t\tEntireArray: 1,\n\t\tArrayElement: 2,\n\t\tHasFromToArray: 3\n\t},\n\n\tVersioning: {\n\t\tNone: 0,\n\t\tNeedsUpdate: 1,\n\t\tMatrixWorldNeedsUpdate: 2\n\t},\n\n\tGetterByBindingType: [\n\n\t\tfunction getValue_direct( buffer, offset ) {\n\n\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\n\t\t},\n\n\t\tfunction getValue_array( buffer, offset ) {\n\n\t\t\tvar source = this.resolvedProperty;\n\n\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t\t}\n\n\t\t},\n\n\t\tfunction getValue_arrayElement( buffer, offset ) {\n\n\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t\t},\n\n\t\tfunction getValue_toArray( buffer, offset ) {\n\n\t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t\t}\n\n\t],\n\n\tSetterByBindingTypeAndVersioning: [\n\n\t\t[\n\t\t\t// Direct\n\n\t\t\tfunction setValue_direct( buffer, offset ) {\n\n\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\n\t\t\t},\n\n\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t},\n\n\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t}\n\n\t\t], [\n\n\t\t\t// EntireArray\n\n\t\t\tfunction setValue_array( buffer, offset ) {\n\n\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t}\n\n\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t},\n\n\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t}\n\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t}\n\n\t\t], [\n\n\t\t\t// ArrayElement\n\n\t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t\t\t},\n\n\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t},\n\n\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t}\n\n\t\t], [\n\n\t\t\t// HasToFromArray\n\n\t\t\tfunction setValue_fromArray( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t\t\t},\n\n\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t},\n\n\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t}\n\n\t\t]\n\n\t]\n\n} );\n\nTHREE.PropertyBinding.Composite =\n\t\tfunction( targetGroup, path, optionalParsedPath ) {\n\n\tvar parsedPath = optionalParsedPath ||\n\t\t\tTHREE.PropertyBinding.parseTrackName( path );\n\n\tthis._targetGroup = targetGroup;\n\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n};\n\nTHREE.PropertyBinding.Composite.prototype = {\n\n\tconstructor: THREE.PropertyBinding.Composite,\n\n\tgetValue: function( array, offset ) {\n\n\t\tthis.bind(); // bind all binding\n\n\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t// and only call .getValue on the first\n\t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\n\t},\n\n\tsetValue: function( array, offset ) {\n\n\t\tvar bindings = this._bindings;\n\n\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t}\n\n\t},\n\n\tbind: function() {\n\n\t\tvar bindings = this._bindings;\n\n\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].bind();\n\n\t\t}\n\n\t},\n\n\tunbind: function() {\n\n\t\tvar bindings = this._bindings;\n\n\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].unbind();\n\n\t\t}\n\n\t}\n\n};\n\nTHREE.PropertyBinding.create = function( root, path, parsedPath ) {\n\n\tif ( ! ( root instanceof THREE.AnimationObjectGroup ) ) {\n\n\t\treturn new THREE.PropertyBinding( root, path, parsedPath );\n\n\t} else {\n\n\t\treturn new THREE.PropertyBinding.Composite( root, path, parsedPath );\n\n\t}\n\n};\n\nTHREE.PropertyBinding.parseTrackName = function( trackName ) {\n\n\t// matches strings in the form of:\n\t//    nodeName.property\n\t//    nodeName.property[accessor]\n\t//    nodeName.material.property[accessor]\n\t//    uuid.property[accessor]\n\t//    uuid.objectName[objectIndex].propertyName[propertyIndex]\n\t//    parentName/nodeName.property\n\t//    parentName/parentName/nodeName.property[index]\n\t//\t  .bone[Armature.DEF_cog].position\n\t// created and tested via https://regex101.com/#javascript\n\n\tvar re = /^(([\\w]+\\/)*)([\\w-\\d]+)?(\\.([\\w]+)(\\[([\\w\\d\\[\\]\\_.:\\- ]+)\\])?)?(\\.([\\w.]+)(\\[([\\w\\d\\[\\]\\_. ]+)\\])?)$/;\n\tvar matches = re.exec( trackName );\n\n\tif ( ! matches ) {\n\n\t\tthrow new Error( \"cannot parse trackName at all: \" + trackName );\n\n\t}\n\n\tif ( matches.index === re.lastIndex ) {\n\n\t\tre.lastIndex++;\n\n\t}\n\n\tvar results = {\n\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\tnodeName: matches[ 3 ], \t// allowed to be null, specified root node.\n\t\tobjectName: matches[ 5 ],\n\t\tobjectIndex: matches[ 7 ],\n\t\tpropertyName: matches[ 9 ],\n\t\tpropertyIndex: matches[ 11 ]\t// allowed to be null, specifies that the whole property is set.\n\t};\n\n\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\tthrow new Error( \"can not parse propertyName from trackName: \" + trackName );\n\n\t}\n\n\treturn results;\n\n};\n\nTHREE.PropertyBinding.findNode = function( root, nodeName ) {\n\n\tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\treturn root;\n\n\t}\n\n\t// search into skeleton bones.\n\tif ( root.skeleton ) {\n\n\t\tvar searchSkeleton = function( skeleton ) {\n\n\t\t\tfor( var i = 0; i < skeleton.bones.length; i ++ ) {\n\n\t\t\t\tvar bone = skeleton.bones[ i ];\n\n\t\t\t\tif ( bone.name === nodeName ) {\n\n\t\t\t\t\treturn bone;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t};\n\n\t\tvar bone = searchSkeleton( root.skeleton );\n\n\t\tif ( bone ) {\n\n\t\t\treturn bone;\n\n\t\t}\n\t}\n\n\t// search into node subtree.\n\tif ( root.children ) {\n\n\t\tvar searchNodeSubtree = function( children ) {\n\n\t\t\tfor( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\tvar childNode = children[ i ];\n\n\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\treturn childNode;\n\n\t\t\t\t}\n\n\t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\n\t\t\t\tif ( result ) return result;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t};\n\n\t\tvar subTreeNode = searchNodeSubtree( root.children );\n\n\t\tif ( subTreeNode ) {\n\n\t\t\treturn subTreeNode;\n\n\t\t}\n\n\t}\n\n\treturn null;\n\n};\n\n// File:src/animation/PropertyMixer.js\n\n/**\n *\n * Buffered scene graph property that allows weighted accumulation.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.PropertyMixer = function ( binding, typeName, valueSize ) {\n\n\tthis.binding = binding;\n\tthis.valueSize = valueSize;\n\n\tvar bufferType = Float64Array,\n\t\tmixFunction;\n\n\tswitch ( typeName ) {\n\n\t\tcase 'quaternion':\t\t\tmixFunction = this._slerp;\t\tbreak;\n\n\t\tcase 'string':\n\t\tcase 'bool':\n\n\t\t\tbufferType = Array,\t\tmixFunction = this._select;\t\tbreak;\n\n\t\tdefault:\t\t\t\t\tmixFunction = this._lerp;\n\n\t}\n\n\tthis.buffer = new bufferType( valueSize * 4 );\n\t// layout: [ incoming | accu0 | accu1 | orig ]\n\t//\n\t// interpolators can use .buffer as their .result\n\t// the data then goes to 'incoming'\n\t//\n\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t// the cumulative result and are compared to detect\n\t// changes\n\t//\n\t// 'orig' stores the original state of the property\n\n\tthis._mixBufferRegion = mixFunction;\n\n\tthis.cumulativeWeight = 0;\n\n\tthis.useCount = 0;\n\tthis.referenceCount = 0;\n\n};\n\nTHREE.PropertyMixer.prototype = {\n\n\tconstructor: THREE.PropertyMixer,\n\n\t// accumulate data in the 'incoming' region into 'accu<i>'\n\taccumulate: function( accuIndex, weight ) {\n\n\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t// the weight and shouldn't have made the call in the first place\n\n\t\tvar buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\tcurrentWeight = this.cumulativeWeight;\n\n\t\tif ( currentWeight === 0 ) {\n\n\t\t\t// accuN := incoming * weight\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t}\n\n\t\t\tcurrentWeight = weight;\n\n\t\t} else {\n\n\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\tcurrentWeight += weight;\n\t\t\tvar mix = weight / currentWeight;\n\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t}\n\n\t\tthis.cumulativeWeight = currentWeight;\n\n\t},\n\n\t// apply the state of 'accu<i>' to the binding when accus differ\n\tapply: function( accuIndex ) {\n\n\t\tvar stride = this.valueSize,\n\t\t\tbuffer = this.buffer,\n\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\tweight = this.cumulativeWeight,\n\n\t\t\tbinding = this.binding;\n\n\t\tthis.cumulativeWeight = 0;\n\n\t\tif ( weight < 1 ) {\n\n\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\tvar originalValueOffset = stride * 3;\n\n\t\t\tthis._mixBufferRegion(\n\t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t}\n\n\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t// remember the state of the bound property and copy it to both accus\n\tsaveOriginalState: function() {\n\n\t\tvar binding = this.binding;\n\n\t\tvar buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\n\t\t\toriginalValueOffset = stride * 3;\n\n\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t}\n\n\t\tthis.cumulativeWeight = 0;\n\n\t},\n\n\t// apply the state previously taken via 'saveOriginalState' to the binding\n\trestoreOriginalState: function() {\n\n\t\tvar originalValueOffset = this.valueSize * 3;\n\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t},\n\n\n\t// mix functions\n\n\t_select: function( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tif ( t >= 0.5 ) {\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t_slerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tTHREE.Quaternion.slerpFlat( buffer, dstOffset,\n\t\t\t\tbuffer, dstOffset, buffer, srcOffset, t );\n\n\t},\n\n\t_lerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tvar s = 1 - t;\n\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\tvar j = dstOffset + i;\n\n\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t}\n\n\t}\n\n};\n\n// File:src/animation/tracks/BooleanKeyframeTrack.js\n\n/**\n *\n * A Track of Boolean keyframe values.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.BooleanKeyframeTrack = function ( name, times, values ) {\n\n\tTHREE.KeyframeTrack.call( this, name, times, values );\n\n};\n\nTHREE.BooleanKeyframeTrack.prototype =\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\n\tconstructor: THREE.BooleanKeyframeTrack,\n\n\tValueTypeName: 'bool',\n\tValueBufferType: Array,\n\n\tDefaultInterpolation: THREE.InterpolateDiscrete,\n\n\tInterpolantFactoryMethodLinear: undefined,\n\tInterpolantFactoryMethodSmooth: undefined\n\n\t// Note: Actually this track could have a optimized / compressed\n\t// representation of a single value and a custom interpolant that\n\t// computes \"firstValue ^ isOdd( index )\".\n\n} );\n\n// File:src/animation/tracks/ColorKeyframeTrack.js\n\n/**\n *\n * A Track of keyframe values that represent color.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.ColorKeyframeTrack = function ( name, times, values, interpolation ) {\n\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\n\n};\n\nTHREE.ColorKeyframeTrack.prototype =\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\n\tconstructor: THREE.ColorKeyframeTrack,\n\n\tValueTypeName: 'color'\n\n\t// ValueBufferType is inherited\n\n\t// DefaultInterpolation is inherited\n\n\n\t// Note: Very basic implementation and nothing special yet.\n\t// However, this is the place for color space parameterization.\n\n} );\n\n// File:src/animation/tracks/NumberKeyframeTrack.js\n\n/**\n *\n * A Track of numeric keyframe values.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.NumberKeyframeTrack = function ( name, times, values, interpolation ) {\n\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\n\n};\n\nTHREE.NumberKeyframeTrack.prototype =\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\n\tconstructor: THREE.NumberKeyframeTrack,\n\n\tValueTypeName: 'number',\n\n\t// ValueBufferType is inherited\n\n\t// DefaultInterpolation is inherited\n\n} );\n\n// File:src/animation/tracks/QuaternionKeyframeTrack.js\n\n/**\n *\n * A Track of quaternion keyframe values.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.QuaternionKeyframeTrack = function ( name, times, values, interpolation ) {\n\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\n\n};\n\nTHREE.QuaternionKeyframeTrack.prototype =\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\n\tconstructor: THREE.QuaternionKeyframeTrack,\n\n\tValueTypeName: 'quaternion',\n\n\t// ValueBufferType is inherited\n\n\tDefaultInterpolation: THREE.InterpolateLinear,\n\n\tInterpolantFactoryMethodLinear: function( result ) {\n\n\t\treturn new THREE.QuaternionLinearInterpolant(\n\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n\t},\n\n\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n} );\n\n// File:src/animation/tracks/StringKeyframeTrack.js\n\n/**\n *\n * A Track that interpolates Strings\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.StringKeyframeTrack = function ( name, times, values, interpolation ) {\n\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\n\n};\n\nTHREE.StringKeyframeTrack.prototype =\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\n\tconstructor: THREE.StringKeyframeTrack,\n\n\tValueTypeName: 'string',\n\tValueBufferType: Array,\n\n\tDefaultInterpolation: THREE.InterpolateDiscrete,\n\n\tInterpolantFactoryMethodLinear: undefined,\n\n\tInterpolantFactoryMethodSmooth: undefined\n\n} );\n\n// File:src/animation/tracks/VectorKeyframeTrack.js\n\n/**\n *\n * A Track of vectored keyframe values.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.VectorKeyframeTrack = function ( name, times, values, interpolation ) {\n\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\n\n};\n\nTHREE.VectorKeyframeTrack.prototype =\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\n\tconstructor: THREE.VectorKeyframeTrack,\n\n\tValueTypeName: 'vector'\n\n\t// ValueBufferType is inherited\n\n\t// DefaultInterpolation is inherited\n\n} );\n\n// File:src/audio/Audio.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Reece Aaron Lecrivain / http://reecenotes.com/\n */\n\nTHREE.Audio = function ( listener ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Audio';\n\n\tthis.context = listener.context;\n\tthis.source = this.context.createBufferSource();\n\tthis.source.onended = this.onEnded.bind( this );\n\n\tthis.gain = this.context.createGain();\n\tthis.gain.connect( listener.getInput() );\n\n\tthis.autoplay = false;\n\n\tthis.startTime = 0;\n\tthis.playbackRate = 1;\n\tthis.isPlaying = false;\n\tthis.hasPlaybackControl = true;\n\tthis.sourceType = 'empty';\n\n\tthis.filters = [];\n\n};\n\nTHREE.Audio.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.Audio,\n\n\tgetOutput: function () {\n\n\t\treturn this.gain;\n\n\t},\n\n\tsetNodeSource: function ( audioNode ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'audioNode';\n\t\tthis.source = audioNode;\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t},\n\n\tsetBuffer: function ( audioBuffer ) {\n\n\t\tthis.source.buffer = audioBuffer;\n\t\tthis.sourceType = 'buffer';\n\n\t\tif ( this.autoplay ) this.play();\n\n\t\treturn this;\n\n\t},\n\n\tplay: function () {\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar source = this.context.createBufferSource();\n\n\t\tsource.buffer = this.source.buffer;\n\t\tsource.loop = this.source.loop;\n\t\tsource.onended = this.source.onended;\n\t\tsource.start( 0, this.startTime );\n\t\tsource.playbackRate.value = this.playbackRate;\n\n\t\tthis.isPlaying = true;\n\n\t\tthis.source = source;\n\n\t\treturn this.connect();\n\n\t},\n\n\tpause: function () {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.source.stop();\n\t\tthis.startTime = this.context.currentTime;\n\t\tthis.isPlaying = false;\n\n\t\treturn this;\n\n\t},\n\n\tstop: function () {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.source.stop();\n\t\tthis.startTime = 0;\n\t\tthis.isPlaying = false;\n\n\t\treturn this;\n\n\t},\n\n\tconnect: function () {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tdisconnect: function () {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetFilters: function () {\n\n\t\treturn this.filters;\n\n\t},\n\n\tsetFilters: function ( value ) {\n\n\t\tif ( ! value ) value = [];\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.disconnect();\n\t\t\tthis.filters = value;\n\t\t\tthis.connect();\n\n\t\t} else {\n\n\t\t\tthis.filters = value;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetFilter: function () {\n\n\t\treturn this.getFilters()[ 0 ];\n\n\t},\n\n\tsetFilter: function ( filter ) {\n\n\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t},\n\n\tsetPlaybackRate: function ( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.playbackRate = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.playbackRate.value = this.playbackRate;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetPlaybackRate: function () {\n\n\t\treturn this.playbackRate;\n\n\t},\n\n\tonEnded: function () {\n\n\t\tthis.isPlaying = false;\n\n\t},\n\n\tgetLoop: function () {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn this.source.loop;\n\n\t},\n\n\tsetLoop: function ( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.source.loop = value;\n\n\t},\n\n\tgetVolume: function () {\n\n\t\treturn this.gain.gain.value;\n\n\t},\n\n\n\tsetVolume: function ( value ) {\n\n\t\tthis.gain.gain.value = value;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/audio/AudioAnalyser.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.AudioAnalyser = function ( audio, fftSize ) {\n\n\tthis.analyser = audio.context.createAnalyser();\n\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\n\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\taudio.getOutput().connect( this.analyser );\n\n};\n\nObject.assign( THREE.AudioAnalyser.prototype, {\n\n\tgetFrequencyData: function () {\n\n\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\treturn this.data;\n\n\t},\n\n\tgetAverageFrequency: function () {\n\n\t\tvar value = 0, data = this.getFrequencyData();\n\n\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\tvalue += data[ i ];\n\n\t\t}\n\n\t\treturn value / data.length;\n\n\t}\n\n} );\n\n// File:src/audio/AudioContext.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nObject.defineProperty( THREE, 'AudioContext', {\n\n\tget: ( function () {\n\n\t\tvar context;\n\n\t\treturn function get() {\n\n\t\t\tif ( context === undefined ) {\n\n\t\t\t\tcontext = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t\t}\n\n\t\t\treturn context;\n\n\t\t};\n\n\t} )()\n\n} );\n\n// File:src/audio/PositionalAudio.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.PositionalAudio = function ( listener ) {\n\n\tTHREE.Audio.call( this, listener );\n\n\tthis.panner = this.context.createPanner();\n\tthis.panner.connect( this.gain );\n\n};\n\nTHREE.PositionalAudio.prototype = Object.assign( Object.create( THREE.Audio.prototype ), {\n\n\tconstructor: THREE.PositionalAudio,\n\n\tgetOutput: function () {\n\n\t\treturn this.panner;\n\n\t},\n\n\tgetRefDistance: function () {\n\n\t\treturn this.panner.refDistance;\n\n\t},\n\n\tsetRefDistance: function ( value ) {\n\n\t\tthis.panner.refDistance = value;\n\n\t},\n\n\tgetRolloffFactor: function () {\n\n\t\treturn this.panner.rolloffFactor;\n\n\t},\n\n\tsetRolloffFactor: function ( value ) {\n\n\t\tthis.panner.rolloffFactor = value;\n\n\t},\n\n\tgetDistanceModel: function () {\n\n\t\treturn this.panner.distanceModel;\n\n\t},\n\n\tsetDistanceModel: function ( value ) {\n\n\t\tthis.panner.distanceModel = value;\n\n\t},\n\n\tgetMaxDistance: function () {\n\n\t\treturn this.panner.maxDistance;\n\n\t},\n\n\tsetMaxDistance: function ( value ) {\n\n\t\tthis.panner.maxDistance = value;\n\n\t},\n\n\tupdateMatrixWorld: ( function () {\n\n\t\tvar position = new THREE.Vector3();\n\n\t\treturn function updateMatrixWorld( force ) {\n\n\t\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tposition.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tthis.panner.setPosition( position.x, position.y, position.z );\n\n\t\t};\n\n\t} )()\n\n\n} );\n\n// File:src/audio/AudioListener.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.AudioListener = function () {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'AudioListener';\n\n\tthis.context = THREE.AudioContext;\n\n\tthis.gain = this.context.createGain();\n\tthis.gain.connect( this.context.destination );\n\n\tthis.filter = null;\n\n};\n\nTHREE.AudioListener.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.AudioListener,\n\n\tgetInput: function () {\n\n\t\treturn this.gain;\n\n\t},\n\n\tremoveFilter: function ( ) {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\tthis.gain.connect( this.context.destination );\n\t\t\tthis.filter = null;\n\n\t\t}\n\n\t},\n\n\tgetFilter: function () {\n\n\t\treturn this.filter;\n\n\t},\n\n\tsetFilter: function ( value ) {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t} else {\n\n\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t}\n\n\t\tthis.filter = value;\n\t\tthis.gain.connect( this.filter );\n\t\tthis.filter.connect( this.context.destination );\n\n\t},\n\n\tgetMasterVolume: function () {\n\n\t\treturn this.gain.gain.value;\n\n\t},\n\n\tsetMasterVolume: function ( value ) {\n\n\t\tthis.gain.gain.value = value;\n\n\t},\n\n\tupdateMatrixWorld: ( function () {\n\n\t\tvar position = new THREE.Vector3();\n\t\tvar quaternion = new THREE.Quaternion();\n\t\tvar scale = new THREE.Vector3();\n\n\t\tvar orientation = new THREE.Vector3();\n\n\t\treturn function updateMatrixWorld( force ) {\n\n\t\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tvar listener = this.context.listener;\n\t\t\tvar up = this.up;\n\n\t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\n\t\t\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n\t\t\tlistener.setPosition( position.x, position.y, position.z );\n\t\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\n\n\t\t};\n\n\t} )()\n\n} );\n\n// File:src/cameras/Camera.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nTHREE.Camera = function () {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Camera';\n\n\tthis.matrixWorldInverse = new THREE.Matrix4();\n\tthis.projectionMatrix = new THREE.Matrix4();\n\n};\n\nTHREE.Camera.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.Camera.prototype.constructor = THREE.Camera;\n\nTHREE.Camera.prototype.getWorldDirection = function () {\n\n\tvar quaternion = new THREE.Quaternion();\n\n\treturn function getWorldDirection( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\tthis.getWorldQuaternion( quaternion );\n\n\t\treturn result.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n\t};\n\n}();\n\nTHREE.Camera.prototype.lookAt = function () {\n\n\t// This routine does not support cameras with rotated and/or translated parent(s)\n\n\tvar m1 = new THREE.Matrix4();\n\n\treturn function lookAt( vector ) {\n\n\t\tm1.lookAt( this.position, vector, this.up );\n\n\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n\t};\n\n}();\n\nTHREE.Camera.prototype.clone = function () {\n\n\treturn new this.constructor().copy( this );\n\n};\n\nTHREE.Camera.prototype.copy = function ( source ) {\n\n\tTHREE.Object3D.prototype.copy.call( this, source );\n\n\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\tthis.projectionMatrix.copy( source.projectionMatrix );\n\n\treturn this;\n\n};\n\n// File:src/cameras/CubeCamera.js\n\n/**\n * Camera for rendering cube maps\n *\t- renders scene into axis-aligned cube\n *\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.CubeCamera = function ( near, far, cubeResolution ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'CubeCamera';\n\n\tvar fov = 90, aspect = 1;\n\n\tvar cameraPX = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraPX.up.set( 0, - 1, 0 );\n\tcameraPX.lookAt( new THREE.Vector3( 1, 0, 0 ) );\n\tthis.add( cameraPX );\n\n\tvar cameraNX = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraNX.up.set( 0, - 1, 0 );\n\tcameraNX.lookAt( new THREE.Vector3( - 1, 0, 0 ) );\n\tthis.add( cameraNX );\n\n\tvar cameraPY = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraPY.up.set( 0, 0, 1 );\n\tcameraPY.lookAt( new THREE.Vector3( 0, 1, 0 ) );\n\tthis.add( cameraPY );\n\n\tvar cameraNY = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraNY.up.set( 0, 0, - 1 );\n\tcameraNY.lookAt( new THREE.Vector3( 0, - 1, 0 ) );\n\tthis.add( cameraNY );\n\n\tvar cameraPZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraPZ.up.set( 0, - 1, 0 );\n\tcameraPZ.lookAt( new THREE.Vector3( 0, 0, 1 ) );\n\tthis.add( cameraPZ );\n\n\tvar cameraNZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraNZ.up.set( 0, - 1, 0 );\n\tcameraNZ.lookAt( new THREE.Vector3( 0, 0, - 1 ) );\n\tthis.add( cameraNZ );\n\n\tvar options = { format: THREE.RGBFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter };\n\n\tthis.renderTarget = new THREE.WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\n\n\tthis.updateCubeMap = function ( renderer, scene ) {\n\n\t\tif ( this.parent === null ) this.updateMatrixWorld();\n\n\t\tvar renderTarget = this.renderTarget;\n\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\trenderTarget.activeCubeFace = 0;\n\t\trenderer.render( scene, cameraPX, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 1;\n\t\trenderer.render( scene, cameraNX, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 2;\n\t\trenderer.render( scene, cameraPY, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 3;\n\t\trenderer.render( scene, cameraNY, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 4;\n\t\trenderer.render( scene, cameraPZ, renderTarget );\n\n\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\trenderTarget.activeCubeFace = 5;\n\t\trenderer.render( scene, cameraNZ, renderTarget );\n\n\t\trenderer.setRenderTarget( null );\n\n\t};\n\n};\n\nTHREE.CubeCamera.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.CubeCamera.prototype.constructor = THREE.CubeCamera;\n\n// File:src/cameras/OrthographicCamera.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author arose / http://github.com/arose\n */\n\nTHREE.OrthographicCamera = function ( left, right, top, bottom, near, far ) {\n\n\tTHREE.Camera.call( this );\n\n\tthis.type = 'OrthographicCamera';\n\n\tthis.zoom = 1;\n\tthis.view = null;\n\n\tthis.left = left;\n\tthis.right = right;\n\tthis.top = top;\n\tthis.bottom = bottom;\n\n\tthis.near = ( near !== undefined ) ? near : 0.1;\n\tthis.far = ( far !== undefined ) ? far : 2000;\n\n\tthis.updateProjectionMatrix();\n\n};\n\nTHREE.OrthographicCamera.prototype = Object.assign( Object.create( THREE.Camera.prototype ), {\n\n\tconstructor: THREE.OrthographicCamera,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Camera.prototype.copy.call( this, source );\n\n\t\tthis.left = source.left;\n\t\tthis.right = source.right;\n\t\tthis.top = source.top;\n\t\tthis.bottom = source.bottom;\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\n\t\tthis.zoom = source.zoom;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\treturn this;\n\n\t},\n\n\tsetViewOffset: function( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tthis.view = {\n\t\t\tfullWidth: fullWidth,\n\t\t\tfullHeight: fullHeight,\n\t\t\toffsetX: x,\n\t\t\toffsetY: y,\n\t\t\twidth: width,\n\t\t\theight: height\n\t\t};\n\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tclearViewOffset: function() {\n\n\t\tthis.view = null;\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tupdateProjectionMatrix: function () {\n\n\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\tvar cx = ( this.right + this.left ) / 2;\n\t\tvar cy = ( this.top + this.bottom ) / 2;\n\n\t\tvar left = cx - dx;\n\t\tvar right = cx + dx;\n\t\tvar top = cy + dy;\n\t\tvar bottom = cy - dy;\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\n\t\t\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\n\t\t\tvar scaleW = ( this.right - this.left ) / this.view.width;\n\t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\n\n\t\t\tleft += scaleW * ( this.view.offsetX / zoomW );\n\t\t\tright = left + scaleW * ( this.view.width / zoomW );\n\t\t\ttop -= scaleH * ( this.view.offsetY / zoomH );\n\t\t\tbottom = top - scaleH * ( this.view.height / zoomH );\n\n\t\t}\n\n\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.zoom = this.zoom;\n\t\tdata.object.left = this.left;\n\t\tdata.object.right = this.right;\n\t\tdata.object.top = this.top;\n\t\tdata.object.bottom = this.bottom;\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\treturn data;\n\n\t}\n\n} );\n\n// File:src/cameras/PerspectiveCamera.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author greggman / http://games.greggman.com/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author tschw\n */\n\nTHREE.PerspectiveCamera = function( fov, aspect, near, far ) {\n\n\tTHREE.Camera.call( this );\n\n\tthis.type = 'PerspectiveCamera';\n\n\tthis.fov = fov !== undefined ? fov : 50;\n\tthis.zoom = 1;\n\n\tthis.near = near !== undefined ? near : 0.1;\n\tthis.far = far !== undefined ? far : 2000;\n\tthis.focus = 10;\n\n\tthis.aspect = aspect !== undefined ? aspect : 1;\n\tthis.view = null;\n\n\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\tthis.updateProjectionMatrix();\n\n};\n\nTHREE.PerspectiveCamera.prototype = Object.assign( Object.create( THREE.Camera.prototype ), {\n\n\tconstructor: THREE.PerspectiveCamera,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Camera.prototype.copy.call( this, source );\n\n\t\tthis.fov = source.fov;\n\t\tthis.zoom = source.zoom;\n\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\t\tthis.focus = source.focus;\n\n\t\tthis.aspect = source.aspect;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\tthis.filmGauge = source.filmGauge;\n\t\tthis.filmOffset = source.filmOffset;\n\n\t\treturn this;\n\n\t},\n\n\t/**\n\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t *\n\t * The default film gauge is 35, so that the focal length can be specified for\n\t * a 35mm (full frame) camera.\n\t *\n\t * Values for focal length and film gauge must have the same unit.\n\t */\n\tsetFocalLength: function ( focalLength ) {\n\n\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\tthis.fov = THREE.Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\t/**\n\t * Calculates the focal length from the current .fov and .filmGauge.\n\t */\n\tgetFocalLength: function () {\n\n\t\tvar vExtentSlope = Math.tan( THREE.Math.DEG2RAD * 0.5 * this.fov );\n\n\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t},\n\n\tgetEffectiveFOV: function () {\n\n\t\treturn THREE.Math.RAD2DEG * 2 * Math.atan(\n\t\t\t\tMath.tan( THREE.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t},\n\n\tgetFilmWidth: function () {\n\n\t\t// film not completely covered in portrait format (aspect < 1)\n\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t},\n\n\tgetFilmHeight: function () {\n\n\t\t// film not completely covered in landscape format (aspect > 1)\n\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t},\n\n\t/**\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t * multi-monitor/multi-machine setups.\n\t *\n\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t * the monitors are in grid like this\n\t *\n\t *   +---+---+---+\n\t *   | A | B | C |\n\t *   +---+---+---+\n\t *   | D | E | F |\n\t *   +---+---+---+\n\t *\n\t * then for each monitor you would call it like this\n\t *\n\t *   var w = 1920;\n\t *   var h = 1080;\n\t *   var fullWidth = w * 3;\n\t *   var fullHeight = h * 2;\n\t *\n\t *   --A--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t *   --B--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t *   --C--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t *   --D--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t *   --E--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t *   --F--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t *\n\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t */\n\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\tthis.view = {\n\t\t\tfullWidth: fullWidth,\n\t\t\tfullHeight: fullHeight,\n\t\t\toffsetX: x,\n\t\t\toffsetY: y,\n\t\t\twidth: width,\n\t\t\theight: height\n\t\t};\n\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tclearViewOffset: function() {\n\n\t\tthis.view = null;\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tupdateProjectionMatrix: function () {\n\n\t\tvar near = this.near,\n\t\t\ttop = near * Math.tan(\n\t\t\t\t\tTHREE.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n\t\t\theight = 2 * top,\n\t\t\twidth = this.aspect * height,\n\t\t\tleft = - 0.5 * width,\n\t\t\tview = this.view;\n\n\t\tif ( view !== null ) {\n\n\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\twidth *= view.width / fullWidth;\n\t\t\theight *= view.height / fullHeight;\n\n\t\t}\n\n\t\tvar skew = this.filmOffset;\n\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n\t\tthis.projectionMatrix.makeFrustum(\n\t\t\t\tleft, left + width, top - height, top, near, this.far );\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.fov = this.fov;\n\t\tdata.object.zoom = this.zoom;\n\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\t\tdata.object.focus = this.focus;\n\n\t\tdata.object.aspect = this.aspect;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\tdata.object.filmGauge = this.filmGauge;\n\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\treturn data;\n\n\t}\n\n} );\n\n// File:src/cameras/StereoCamera.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.StereoCamera = function () {\n\n\tthis.type = 'StereoCamera';\n\n\tthis.aspect = 1;\n\n\tthis.cameraL = new THREE.PerspectiveCamera();\n\tthis.cameraL.layers.enable( 1 );\n\tthis.cameraL.matrixAutoUpdate = false;\n\n\tthis.cameraR = new THREE.PerspectiveCamera();\n\tthis.cameraR.layers.enable( 2 );\n\tthis.cameraR.matrixAutoUpdate = false;\n\n};\n\nObject.assign( THREE.StereoCamera.prototype, {\n\n\tupdate: ( function () {\n\n\t\tvar focus, fov, aspect, near, far;\n\n\t\tvar eyeRight = new THREE.Matrix4();\n\t\tvar eyeLeft = new THREE.Matrix4();\n\n\t\treturn function update( camera ) {\n\n\t\t\tvar needsUpdate = focus !== camera.focus || fov !== camera.fov ||\n\t\t\t\t\t\t\t\t\t\t\t\taspect !== camera.aspect * this.aspect || near !== camera.near ||\n\t\t\t\t\t\t\t\t\t\t\t\tfar !== camera.far;\n\n\t\t\tif ( needsUpdate ) {\n\n\t\t\t\tfocus = camera.focus;\n\t\t\t\tfov = camera.fov;\n\t\t\t\taspect = camera.aspect * this.aspect;\n\t\t\t\tnear = camera.near;\n\t\t\t\tfar = camera.far;\n\n\t\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\tvar eyeSep = 0.064 / 2;\n\t\t\t\tvar eyeSepOnProjection = eyeSep * near / focus;\n\t\t\t\tvar ymax = near * Math.tan( THREE.Math.DEG2RAD * fov * 0.5 );\n\t\t\t\tvar xmin, xmax;\n\n\t\t\t\t// translate xOffset\n\n\t\t\t\teyeLeft.elements[ 12 ] = - eyeSep;\n\t\t\t\teyeRight.elements[ 12 ] = eyeSep;\n\n\t\t\t\t// for left eye\n\n\t\t\t\txmin = - ymax * aspect + eyeSepOnProjection;\n\t\t\t\txmax = ymax * aspect + eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t\t// for right eye\n\n\t\t\t\txmin = - ymax * aspect - eyeSepOnProjection;\n\t\t\t\txmax = ymax * aspect - eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t}\n\n\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );\n\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );\n\n\t\t};\n\n\t} )()\n\n} );\n\n// File:src/lights/Light.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Light = function ( color, intensity ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Light';\n\n\tthis.color = new THREE.Color( color );\n\tthis.intensity = intensity !== undefined ? intensity : 1;\n\n\tthis.receiveShadow = undefined;\n\n};\n\nTHREE.Light.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.Light,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Object3D.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.intensity = source.intensity;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.color = this.color.getHex();\n\t\tdata.object.intensity = this.intensity;\n\n\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\n\t\treturn data;\n\n\t}\n\n} );\n\n// File:src/lights/LightShadow.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.LightShadow = function ( camera ) {\n\n\tthis.camera = camera;\n\n\tthis.bias = 0;\n\tthis.radius = 1;\n\n\tthis.mapSize = new THREE.Vector2( 512, 512 );\n\n\tthis.map = null;\n\tthis.matrix = new THREE.Matrix4();\n\n};\n\nObject.assign( THREE.LightShadow.prototype, {\n\n\tcopy: function ( source ) {\n\n\t\tthis.camera = source.camera.clone();\n\n\t\tthis.bias = source.bias;\n\t\tthis.radius = source.radius;\n\n\t\tthis.mapSize.copy( source.mapSize );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n} );\n\n// File:src/lights/AmbientLight.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.AmbientLight = function ( color, intensity ) {\n\n\tTHREE.Light.call( this, color, intensity );\n\n\tthis.type = 'AmbientLight';\n\n\tthis.castShadow = undefined;\n\n};\n\nTHREE.AmbientLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\n\n\tconstructor: THREE.AmbientLight\n\n} );\n\n// File:src/lights/DirectionalLight.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.DirectionalLight = function ( color, intensity ) {\n\n\tTHREE.Light.call( this, color, intensity );\n\n\tthis.type = 'DirectionalLight';\n\n\tthis.position.set( 0, 1, 0 );\n\tthis.updateMatrix();\n\n\tthis.target = new THREE.Object3D();\n\n\tthis.shadow = new THREE.DirectionalLightShadow();\n\n};\n\nTHREE.DirectionalLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\n\n\tconstructor: THREE.DirectionalLight,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Light.prototype.copy.call( this, source );\n\n\t\tthis.target = source.target.clone();\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/lights/DirectionalLightShadow.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.DirectionalLightShadow = function ( light ) {\n\n\tTHREE.LightShadow.call( this, new THREE.OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n};\n\nTHREE.DirectionalLightShadow.prototype = Object.assign( Object.create( THREE.LightShadow.prototype ), {\n\n\tconstructor: THREE.DirectionalLightShadow\n\n} );\n\n// File:src/lights/HemisphereLight.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.HemisphereLight = function ( skyColor, groundColor, intensity ) {\n\n\tTHREE.Light.call( this, skyColor, intensity );\n\n\tthis.type = 'HemisphereLight';\n\n\tthis.castShadow = undefined;\n\n\tthis.position.set( 0, 1, 0 );\n\tthis.updateMatrix();\n\n\tthis.groundColor = new THREE.Color( groundColor );\n\n};\n\nTHREE.HemisphereLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\n\n\tconstructor: THREE.HemisphereLight,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Light.prototype.copy.call( this, source );\n\n\t\tthis.groundColor.copy( source.groundColor );\n\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/lights/PointLight.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\n\nTHREE.PointLight = function ( color, intensity, distance, decay ) {\n\n\tTHREE.Light.call( this, color, intensity );\n\n\tthis.type = 'PointLight';\n\n\tObject.defineProperty( this, 'power', {\n\t\tget: function () {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\treturn this.intensity * 4 * Math.PI;\n\n\t\t},\n\t\tset: function ( power ) {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\tthis.intensity = power / ( 4 * Math.PI );\n\t\t}\n\t} );\n\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\tthis.shadow = new THREE.LightShadow( new THREE.PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n};\n\nTHREE.PointLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\n\n\tconstructor: THREE.PointLight,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Light.prototype.copy.call( this, source );\n\n\t\tthis.distance = source.distance;\n\t\tthis.decay = source.decay;\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/lights/SpotLight.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.SpotLight = function ( color, intensity, distance, angle, penumbra, decay ) {\n\n\tTHREE.Light.call( this, color, intensity );\n\n\tthis.type = 'SpotLight';\n\n\tthis.position.set( 0, 1, 0 );\n\tthis.updateMatrix();\n\n\tthis.target = new THREE.Object3D();\n\n\tObject.defineProperty( this, 'power', {\n\t\tget: function () {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\treturn this.intensity * Math.PI;\n\t\t},\n\t\tset: function ( power ) {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\tthis.intensity = power / Math.PI;\n\t\t}\n\t} );\n\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\tthis.shadow = new THREE.SpotLightShadow();\n\n};\n\nTHREE.SpotLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\n\n\tconstructor: THREE.SpotLight,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Light.prototype.copy.call( this, source );\n\n\t\tthis.distance = source.distance;\n\t\tthis.angle = source.angle;\n\t\tthis.penumbra = source.penumbra;\n\t\tthis.decay = source.decay;\n\n\t\tthis.target = source.target.clone();\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/lights/SpotLightShadow.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.SpotLightShadow = function () {\n\n\tTHREE.LightShadow.call( this, new THREE.PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n};\n\nTHREE.SpotLightShadow.prototype = Object.assign( Object.create( THREE.LightShadow.prototype ), {\n\n\tconstructor: THREE.SpotLightShadow,\n\n\tupdate: function ( light ) {\n\n\t\tvar fov = THREE.Math.RAD2DEG * 2 * light.angle;\n\t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t\tvar far = light.distance || 500;\n\n\t\tvar camera = this.camera;\n\n\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\tcamera.fov = fov;\n\t\t\tcamera.aspect = aspect;\n\t\t\tcamera.far = far;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t}\n\n\t}\n\n} );\n\n// File:src/loaders/AudioLoader.js\n\n/**\n * @author Reece Aaron Lecrivain / http://reecenotes.com/\n */\n\nTHREE.AudioLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nObject.assign( THREE.AudioLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tvar context = THREE.AudioContext;\n\n\t\t\tcontext.decodeAudioData( buffer, function ( audioBuffer ) {\n\n\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t} );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n} );\n\n// File:src/loaders/Cache.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Cache = {\n\n\tenabled: false,\n\n\tfiles: {},\n\n\tadd: function ( key, file ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\tthis.files[ key ] = file;\n\n\t},\n\n\tget: function ( key ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\treturn this.files[ key ];\n\n\t},\n\n\tremove: function ( key ) {\n\n\t\tdelete this.files[ key ];\n\n\t},\n\n\tclear: function () {\n\n\t\tthis.files = {};\n\n\t}\n\n};\n\n// File:src/loaders/Loader.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Loader = function () {\n\n\tthis.onLoadStart = function () {};\n\tthis.onLoadProgress = function () {};\n\tthis.onLoadComplete = function () {};\n\n};\n\nTHREE.Loader.prototype = {\n\n\tconstructor: THREE.Loader,\n\n\tcrossOrigin: undefined,\n\n\textractUrlBase: function ( url ) {\n\n\t\tvar parts = url.split( '/' );\n\n\t\tif ( parts.length === 1 ) return './';\n\n\t\tparts.pop();\n\n\t\treturn parts.join( '/' ) + '/';\n\n\t},\n\n\tinitMaterials: function ( materials, texturePath, crossOrigin ) {\n\n\t\tvar array = [];\n\n\t\tfor ( var i = 0; i < materials.length; ++ i ) {\n\n\t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\n\n\t\t}\n\n\t\treturn array;\n\n\t},\n\n\tcreateMaterial: ( function () {\n\n\t\tvar color, textureLoader, materialLoader;\n\n\t\treturn function createMaterial( m, texturePath, crossOrigin ) {\n\n\t\t\tif ( color === undefined ) color = new THREE.Color();\n\t\t\tif ( textureLoader === undefined ) textureLoader = new THREE.TextureLoader();\n\t\t\tif ( materialLoader === undefined ) materialLoader = new THREE.MaterialLoader();\n\n\t\t\t// convert from old material format\n\n\t\t\tvar textures = {};\n\n\t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\n\n\t\t\t\tvar fullPath = texturePath + path;\n\t\t\t\tvar loader = THREE.Loader.Handlers.get( fullPath );\n\n\t\t\t\tvar texture;\n\n\t\t\t\tif ( loader !== null ) {\n\n\t\t\t\t\ttexture = loader.load( fullPath );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttextureLoader.setCrossOrigin( crossOrigin );\n\t\t\t\t\ttexture = textureLoader.load( fullPath );\n\n\t\t\t\t}\n\n\t\t\t\tif ( repeat !== undefined ) {\n\n\t\t\t\t\ttexture.repeat.fromArray( repeat );\n\n\t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = THREE.RepeatWrapping;\n\t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = THREE.RepeatWrapping;\n\n\t\t\t\t}\n\n\t\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\t\ttexture.offset.fromArray( offset );\n\n\t\t\t\t}\n\n\t\t\t\tif ( wrap !== undefined ) {\n\n\t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = THREE.RepeatWrapping;\n\t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = THREE.MirroredRepeatWrapping;\n\n\t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = THREE.RepeatWrapping;\n\t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = THREE.MirroredRepeatWrapping;\n\n\t\t\t\t}\n\n\t\t\t\tif ( anisotropy !== undefined ) {\n\n\t\t\t\t\ttexture.anisotropy = anisotropy;\n\n\t\t\t\t}\n\n\t\t\t\tvar uuid = THREE.Math.generateUUID();\n\n\t\t\t\ttextures[ uuid ] = texture;\n\n\t\t\t\treturn uuid;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar json = {\n\t\t\t\tuuid: THREE.Math.generateUUID(),\n\t\t\t\ttype: 'MeshLambertMaterial'\n\t\t\t};\n\n\t\t\tfor ( var name in m ) {\n\n\t\t\t\tvar value = m[ name ];\n\n\t\t\t\tswitch ( name ) {\n\t\t\t\t\tcase 'DbgColor':\n\t\t\t\t\tcase 'DbgIndex':\n\t\t\t\t\tcase 'opticalDensity':\n\t\t\t\t\tcase 'illumination':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'DbgName':\n\t\t\t\t\t\tjson.name = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'blending':\n\t\t\t\t\t\tjson.blending = THREE[ value ];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'colorAmbient':\n\t\t\t\t\tcase 'mapAmbient':\n\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'colorDiffuse':\n\t\t\t\t\t\tjson.color = color.fromArray( value ).getHex();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'colorSpecular':\n\t\t\t\t\t\tjson.specular = color.fromArray( value ).getHex();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'colorEmissive':\n\t\t\t\t\t\tjson.emissive = color.fromArray( value ).getHex();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'specularCoef':\n\t\t\t\t\t\tjson.shininess = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'shading':\n\t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\n\t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\n\t\t\t\t\t\tif ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapDiffuse':\n\t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapDiffuseRepeat':\n\t\t\t\t\tcase 'mapDiffuseOffset':\n\t\t\t\t\tcase 'mapDiffuseWrap':\n\t\t\t\t\tcase 'mapDiffuseAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapEmissive':\n\t\t\t\t\t\tjson.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapEmissiveRepeat':\n\t\t\t\t\tcase 'mapEmissiveOffset':\n\t\t\t\t\tcase 'mapEmissiveWrap':\n\t\t\t\t\tcase 'mapEmissiveAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapLight':\n\t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapLightRepeat':\n\t\t\t\t\tcase 'mapLightOffset':\n\t\t\t\t\tcase 'mapLightWrap':\n\t\t\t\t\tcase 'mapLightAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapAO':\n\t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapAORepeat':\n\t\t\t\t\tcase 'mapAOOffset':\n\t\t\t\t\tcase 'mapAOWrap':\n\t\t\t\t\tcase 'mapAOAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapBump':\n\t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapBumpScale':\n\t\t\t\t\t\tjson.bumpScale = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapBumpRepeat':\n\t\t\t\t\tcase 'mapBumpOffset':\n\t\t\t\t\tcase 'mapBumpWrap':\n\t\t\t\t\tcase 'mapBumpAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapNormal':\n\t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapNormalFactor':\n\t\t\t\t\t\tjson.normalScale = [ value, value ];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapNormalRepeat':\n\t\t\t\t\tcase 'mapNormalOffset':\n\t\t\t\t\tcase 'mapNormalWrap':\n\t\t\t\t\tcase 'mapNormalAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapSpecular':\n\t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapSpecularRepeat':\n\t\t\t\t\tcase 'mapSpecularOffset':\n\t\t\t\t\tcase 'mapSpecularWrap':\n\t\t\t\t\tcase 'mapSpecularAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapMetalness':\n\t\t\t\t\t\tjson.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapMetalnessRepeat':\n\t\t\t\t\tcase 'mapMetalnessOffset':\n\t\t\t\t\tcase 'mapMetalnessWrap':\n\t\t\t\t\tcase 'mapMetalnessAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapRoughness':\n\t\t\t\t\t\tjson.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapRoughnessRepeat':\n\t\t\t\t\tcase 'mapRoughnessOffset':\n\t\t\t\t\tcase 'mapRoughnessWrap':\n\t\t\t\t\tcase 'mapRoughnessAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapAlpha':\n\t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapAlphaRepeat':\n\t\t\t\t\tcase 'mapAlphaOffset':\n\t\t\t\t\tcase 'mapAlphaWrap':\n\t\t\t\t\tcase 'mapAlphaAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'flipSided':\n\t\t\t\t\t\tjson.side = THREE.BackSide;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'doubleSided':\n\t\t\t\t\t\tjson.side = THREE.DoubleSide;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'transparency':\n\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );\n\t\t\t\t\t\tjson.opacity = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'depthTest':\n\t\t\t\t\tcase 'depthWrite':\n\t\t\t\t\tcase 'colorWrite':\n\t\t\t\t\tcase 'opacity':\n\t\t\t\t\tcase 'reflectivity':\n\t\t\t\t\tcase 'transparent':\n\t\t\t\t\tcase 'visible':\n\t\t\t\t\tcase 'wireframe':\n\t\t\t\t\t\tjson[ name ] = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'vertexColors':\n\t\t\t\t\t\tif ( value === true ) json.vertexColors = THREE.VertexColors;\n\t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = THREE.FaceColors;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'THREE.Loader.createMaterial: Unsupported', name, value );\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.type === 'MeshBasicMaterial' ) delete json.emissive;\n\t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\n\n\t\t\tif ( json.opacity < 1 ) json.transparent = true;\n\n\t\t\tmaterialLoader.setTextures( textures );\n\n\t\t\treturn materialLoader.parse( json );\n\n\t\t};\n\n\t} )()\n\n};\n\nTHREE.Loader.Handlers = {\n\n\thandlers: [],\n\n\tadd: function ( regex, loader ) {\n\n\t\tthis.handlers.push( regex, loader );\n\n\t},\n\n\tget: function ( file ) {\n\n\t\tvar handlers = this.handlers;\n\n\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\tvar regex = handlers[ i ];\n\t\t\tvar loader  = handlers[ i + 1 ];\n\n\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\treturn loader;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n};\n\n// File:src/loaders/XHRLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.XHRLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nObject.assign( THREE.XHRLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\tvar scope = this;\n\n\t\tvar cached = THREE.Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tif ( onLoad ) {\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tonLoad( cached );\n\n\t\t\t\t}, 0 );\n\n\t\t\t}\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tvar request = new XMLHttpRequest();\n\t\trequest.overrideMimeType( 'text/plain' );\n\t\trequest.open( 'GET', url, true );\n\n\t\trequest.addEventListener( 'load', function ( event ) {\n\n\t\t\tvar response = event.target.response;\n\n\t\t\tTHREE.Cache.add( url, response );\n\n\t\t\tif ( this.status === 200 ) {\n\n\t\t\t\tif ( onLoad ) onLoad( response );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} else if ( this.status === 0 ) {\n\n\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\tconsole.warn( 'THREE.XHRLoader: HTTP Status 0 received.' );\n\n\t\t\t\tif ( onLoad ) onLoad( response );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} else {\n\n\t\t\t\tif ( onError ) onError( event );\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, false );\n\n\t\tif ( onProgress !== undefined ) {\n\n\t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\tonProgress( event );\n\n\t\t\t}, false );\n\n\t\t}\n\n\t\trequest.addEventListener( 'error', function ( event ) {\n\n\t\t\tif ( onError ) onError( event );\n\n\t\t\tscope.manager.itemError( url );\n\n\t\t}, false );\n\n\t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\n\t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\n\n\t\trequest.send( null );\n\n\t\tscope.manager.itemStart( url );\n\n\t\treturn request;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t},\n\n\tsetResponseType: function ( value ) {\n\n\t\tthis.responseType = value;\n\t\treturn this;\n\n\t},\n\n\tsetWithCredentials: function ( value ) {\n\n\t\tthis.withCredentials = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/loaders/FontLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.FontLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nObject.assign( THREE.FontLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tvar json;\n\n\t\t\ttry {\n\n\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\n\t\t\t}\n\n\t\t\tvar font = scope.parse( json );\n\n\t\t\tif ( onLoad ) onLoad( font );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( json ) {\n\n\t\treturn new THREE.Font( json );\n\n\t}\n\n} );\n\n// File:src/loaders/ImageLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.ImageLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nObject.assign( THREE.ImageLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n\t\timage.onload = function () {\n\n\t\t\tURL.revokeObjectURL( image.src );\n\t\t\tif ( onLoad ) onLoad( image );\n\n\t\t};\n\n\t\tif ( url.indexOf( 'data:' ) === 0 ) {\n\n\t\t\timage.src = url;\n\n\t\t} else {\n\n\t\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'blob' );\n\t\t\tloader.load( url, function ( blob ) {\n\n\t\t\t\timage.src = URL.createObjectURL( blob );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\treturn image;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/loaders/JSONLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.JSONLoader = function ( manager ) {\n\n\tif ( typeof manager === 'boolean' ) {\n\n\t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\n\t\tmanager = undefined;\n\n\t}\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\tthis.withCredentials = false;\n\n};\n\nObject.assign( THREE.JSONLoader.prototype, {\n\n\tload: function( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar texturePath = this.texturePath && ( typeof this.texturePath === \"string\" ) ? this.texturePath : THREE.Loader.prototype.extractUrlBase( url );\n\n\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tvar json = JSON.parse( text );\n\t\t\tvar metadata = json.metadata;\n\n\t\t\tif ( metadata !== undefined ) {\n\n\t\t\t\tvar type = metadata.type;\n\n\t\t\t\tif ( type !== undefined ) {\n\n\t\t\t\t\tif ( type.toLowerCase() === 'object' ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( type.toLowerCase() === 'scene' ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar object = scope.parse( json, texturePath );\n\t\t\tonLoad( object.geometry, object.materials );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetTexturePath: function ( value ) {\n\n\t\tthis.texturePath = value;\n\n\t},\n\n\tparse: function ( json, texturePath ) {\n\n\t\tvar geometry = new THREE.Geometry(),\n\t\tscale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;\n\n\t\tparseModel( scale );\n\n\t\tparseSkin();\n\t\tparseMorphing( scale );\n\t\tparseAnimations();\n\n\t\tgeometry.computeFaceNormals();\n\t\tgeometry.computeBoundingSphere();\n\n\t\tfunction parseModel( scale ) {\n\n\t\t\tfunction isBitSet( value, position ) {\n\n\t\t\t\treturn value & ( 1 << position );\n\n\t\t\t}\n\n\t\t\tvar i, j, fi,\n\n\t\t\toffset, zLength,\n\n\t\tcolorIndex, normalIndex, uvIndex, materialIndex,\n\n\t\t\ttype,\n\t\t\tisQuad,\n\t\t\thasMaterial,\n\t\t\thasFaceVertexUv,\n\t\t\thasFaceNormal, hasFaceVertexNormal,\n\t\t\thasFaceColor, hasFaceVertexColor,\n\n\t\tvertex, face, faceA, faceB, hex, normal,\n\n\t\t\tuvLayer, uv, u, v,\n\n\t\t\tfaces = json.faces,\n\t\t\tvertices = json.vertices,\n\t\t\tnormals = json.normals,\n\t\t\tcolors = json.colors,\n\n\t\t\tnUvLayers = 0;\n\n\t\t\tif ( json.uvs !== undefined ) {\n\n\t\t\t\t// disregard empty arrays\n\n\t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\n\n\t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\toffset = 0;\n\t\t\tzLength = vertices.length;\n\n\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\tvertex = new THREE.Vector3();\n\n\t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\n\t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\n\t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\n\n\t\t\t\tgeometry.vertices.push( vertex );\n\n\t\t\t}\n\n\t\t\toffset = 0;\n\t\t\tzLength = faces.length;\n\n\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\ttype = faces[ offset ++ ];\n\n\n\t\t\t\tisQuad              = isBitSet( type, 0 );\n\t\t\t\thasMaterial         = isBitSet( type, 1 );\n\t\t\t\thasFaceVertexUv     = isBitSet( type, 3 );\n\t\t\t\thasFaceNormal       = isBitSet( type, 4 );\n\t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\n\t\t\t\thasFaceColor\t     = isBitSet( type, 6 );\n\t\t\t\thasFaceVertexColor  = isBitSet( type, 7 );\n\n\t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\n\t\t\t\tif ( isQuad ) {\n\n\t\t\t\t\tfaceA = new THREE.Face3();\n\t\t\t\t\tfaceA.a = faces[ offset ];\n\t\t\t\t\tfaceA.b = faces[ offset + 1 ];\n\t\t\t\t\tfaceA.c = faces[ offset + 3 ];\n\n\t\t\t\t\tfaceB = new THREE.Face3();\n\t\t\t\t\tfaceB.a = faces[ offset + 1 ];\n\t\t\t\t\tfaceB.b = faces[ offset + 2 ];\n\t\t\t\t\tfaceB.c = faces[ offset + 3 ];\n\n\t\t\t\t\toffset += 4;\n\n\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\tfaceA.materialIndex = materialIndex;\n\t\t\t\t\t\tfaceB.materialIndex = materialIndex;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\n\n\t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\n\n\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\tuv = new THREE.Vector2( u, v );\n\n\t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\n\t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\tfaceA.normal.set(\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tnormal = new THREE.Vector3(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\n\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\n\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\tfaceA.color.setHex( hex );\n\t\t\t\t\t\tfaceB.color.setHex( hex );\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new THREE.Color( hex ) );\n\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new THREE.Color( hex ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.faces.push( faceA );\n\t\t\t\t\tgeometry.faces.push( faceB );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface = new THREE.Face3();\n\t\t\t\t\tface.a = faces[ offset ++ ];\n\t\t\t\t\tface.b = faces[ offset ++ ];\n\t\t\t\t\tface.c = faces[ offset ++ ];\n\n\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\tface.materialIndex = materialIndex;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\n\t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\tuv = new THREE.Vector2( u, v );\n\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\tface.normal.set(\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tnormal = new THREE.Vector3(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tface.vertexNormals.push( normal );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tface.vertexColors.push( new THREE.Color( colors[ colorIndex ] ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.faces.push( face );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseSkin() {\n\n\t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\n\n\t\t\tif ( json.skinWeights ) {\n\n\t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\tvar x =                               json.skinWeights[ i ];\n\t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\n\t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\n\t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\n\n\t\t\t\t\tgeometry.skinWeights.push( new THREE.Vector4( x, y, z, w ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.skinIndices ) {\n\n\t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\tvar a =                               json.skinIndices[ i ];\n\t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\n\t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\n\t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\n\n\t\t\t\t\tgeometry.skinIndices.push( new THREE.Vector4( a, b, c, d ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry.bones = json.bones;\n\n\t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\n\n\t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\n\t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseMorphing( scale ) {\n\n\t\t\tif ( json.morphTargets !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\tgeometry.morphTargets[ i ] = {};\n\t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\n\t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\n\n\t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\n\t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\n\n\t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\n\n\t\t\t\t\t\tvar vertex = new THREE.Vector3();\n\t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\n\t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\n\t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\n\n\t\t\t\t\t\tdstVertices.push( vertex );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\n\n\t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\n\n\t\t\t\tvar faces = geometry.faces;\n\t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\n\n\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseAnimations() {\n\n\t\t\tvar outputAnimations = [];\n\n\t\t\t// parse old style Bone/Hierarchy animations\n\t\t\tvar animations = [];\n\n\t\t\tif ( json.animation !== undefined ) {\n\n\t\t\t\tanimations.push( json.animation );\n\n\t\t\t}\n\n\t\t\tif ( json.animations !== undefined ) {\n\n\t\t\t\tif ( json.animations.length ) {\n\n\t\t\t\t\tanimations = animations.concat( json.animations );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tanimations.push( json.animations );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\n\n\t\t\t\tvar clip = THREE.AnimationClip.parseAnimation( animations[ i ], geometry.bones );\n\t\t\t\tif ( clip ) outputAnimations.push( clip );\n\n\t\t\t}\n\n\t\t\t// parse implicit morph animations\n\t\t\tif ( geometry.morphTargets ) {\n\n\t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\n\t\t\t\tvar morphAnimationClips = THREE.AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\n\t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\n\n\t\t\t}\n\n\t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\n\n\t\t}\n\n\t\tif ( json.materials === undefined || json.materials.length === 0 ) {\n\n\t\t\treturn { geometry: geometry };\n\n\t\t} else {\n\n\t\t\tvar materials = THREE.Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\n\n\t\t\treturn { geometry: geometry, materials: materials };\n\n\t\t}\n\n\t}\n\n} );\n\n// File:src/loaders/LoadingManager.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.LoadingManager = function ( onLoad, onProgress, onError ) {\n\n\tvar scope = this;\n\n\tvar isLoading = false, itemsLoaded = 0, itemsTotal = 0;\n\n\tthis.onStart = undefined;\n\tthis.onLoad = onLoad;\n\tthis.onProgress = onProgress;\n\tthis.onError = onError;\n\n\tthis.itemStart = function ( url ) {\n\n\t\titemsTotal ++;\n\n\t\tif ( isLoading === false ) {\n\n\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t}\n\n\t\tisLoading = true;\n\n\t};\n\n\tthis.itemEnd = function ( url ) {\n\n\t\titemsLoaded ++;\n\n\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t}\n\n\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\tisLoading = false;\n\n\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\tscope.onLoad();\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tthis.itemError = function ( url ) {\n\n\t\tif ( scope.onError !== undefined ) {\n\n\t\t\tscope.onError( url );\n\n\t\t}\n\n\t};\n\n};\n\nTHREE.DefaultLoadingManager = new THREE.LoadingManager();\n\n// File:src/loaders/BufferGeometryLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.BufferGeometryLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nObject.assign( THREE.BufferGeometryLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new THREE.XHRLoader( scope.manager );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( json ) {\n\n\t\tvar geometry = new THREE.BufferGeometry();\n\n\t\tvar index = json.data.index;\n\n\t\tvar TYPED_ARRAYS = {\n\t\t\t'Int8Array': Int8Array,\n\t\t\t'Uint8Array': Uint8Array,\n\t\t\t'Uint8ClampedArray': Uint8ClampedArray,\n\t\t\t'Int16Array': Int16Array,\n\t\t\t'Uint16Array': Uint16Array,\n\t\t\t'Int32Array': Int32Array,\n\t\t\t'Uint32Array': Uint32Array,\n\t\t\t'Float32Array': Float32Array,\n\t\t\t'Float64Array': Float64Array\n\t\t};\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n\t\t\tgeometry.setIndex( new THREE.BufferAttribute( typedArray, 1 ) );\n\n\t\t}\n\n\t\tvar attributes = json.data.attributes;\n\n\t\tfor ( var key in attributes ) {\n\n\t\t\tvar attribute = attributes[ key ];\n\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\n\t\t\tgeometry.addAttribute( key, new THREE.BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );\n\n\t\t}\n\n\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\tif ( groups !== undefined ) {\n\n\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\n\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar boundingSphere = json.data.boundingSphere;\n\n\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\tvar center = new THREE.Vector3();\n\n\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t}\n\n\t\t\tgeometry.boundingSphere = new THREE.Sphere( center, boundingSphere.radius );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n} );\n\n// File:src/loaders/MaterialLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.MaterialLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\tthis.textures = {};\n\n};\n\nObject.assign( THREE.MaterialLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new THREE.XHRLoader( scope.manager );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetTextures: function ( value ) {\n\n\t\tthis.textures = value;\n\n\t},\n\n\tgetTexture: function ( name ) {\n\n\t\tvar textures = this.textures;\n\n\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t}\n\n\t\treturn textures[ name ];\n\n\t},\n\n\tparse: function ( json ) {\n\n\t\tvar material = new THREE[ json.type ];\n\n\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t\tif ( json.name !== undefined ) material.name = json.name;\n\t\tif ( json.color !== undefined ) material.color.setHex( json.color );\n\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\n\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t\tif ( json.uniforms !== undefined ) material.uniforms = json.uniforms;\n\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\n\t\tif ( json.shading !== undefined ) material.shading = json.shading;\n\t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t\tif ( json.side !== undefined ) material.side = json.side;\n\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\n\t\t// for PointsMaterial\n\t\tif ( json.size !== undefined ) material.size = json.size;\n\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n\t\t// maps\n\n\t\tif ( json.map !== undefined ) material.map = this.getTexture( json.map );\n\n\t\tif ( json.alphaMap !== undefined ) {\n\n\t\t\tmaterial.alphaMap = this.getTexture( json.alphaMap );\n\t\t\tmaterial.transparent = true;\n\n\t\t}\n\n\t\tif ( json.bumpMap !== undefined ) material.bumpMap = this.getTexture( json.bumpMap );\n\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n\t\tif ( json.normalMap !== undefined ) material.normalMap = this.getTexture( json.normalMap );\n\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\tvar normalScale = json.normalScale;\n\n\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t}\n\n\t\t\tmaterial.normalScale = new THREE.Vector2().fromArray( normalScale );\n\n\t\t}\n\n\t\tif ( json.displacementMap !== undefined ) material.displacementMap = this.getTexture( json.displacementMap );\n\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = this.getTexture( json.roughnessMap );\n\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = this.getTexture( json.metalnessMap );\n\n\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = this.getTexture( json.emissiveMap );\n\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n\t\tif ( json.specularMap !== undefined ) material.specularMap = this.getTexture( json.specularMap );\n\n\t\tif ( json.envMap !== undefined ) {\n\n\t\t\tmaterial.envMap = this.getTexture( json.envMap );\n\t\t\tmaterial.combine = THREE.MultiplyOperation;\n\n\t\t}\n\n\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\n\t\tif ( json.lightMap !== undefined ) material.lightMap = this.getTexture( json.lightMap );\n\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n\t\tif ( json.aoMap !== undefined ) material.aoMap = this.getTexture( json.aoMap );\n\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n\t\t// MultiMaterial\n\n\t\tif ( json.materials !== undefined ) {\n\n\t\t\tfor ( var i = 0, l = json.materials.length; i < l; i ++ ) {\n\n\t\t\t\tmaterial.materials.push( this.parse( json.materials[ i ] ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn material;\n\n\t}\n\n} );\n\n// File:src/loaders/ObjectLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.ObjectLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\tthis.texturePath = '';\n\n};\n\nObject.assign( THREE.ObjectLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tif ( this.texturePath === '' ) {\n\n\t\t\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\n\n\t\t}\n\n\t\tvar scope = this;\n\n\t\tvar loader = new THREE.XHRLoader( scope.manager );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tscope.parse( JSON.parse( text ), onLoad );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetTexturePath: function ( value ) {\n\n\t\tthis.texturePath = value;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\n\t},\n\n\tparse: function ( json, onLoad ) {\n\n\t\tvar geometries = this.parseGeometries( json.geometries );\n\n\t\tvar images = this.parseImages( json.images, function () {\n\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t} );\n\n\t\tvar textures  = this.parseTextures( json.textures, images );\n\t\tvar materials = this.parseMaterials( json.materials, textures );\n\n\t\tvar object = this.parseObject( json.object, geometries, materials );\n\n\t\tif ( json.animations ) {\n\n\t\t\tobject.animations = this.parseAnimations( json.animations );\n\n\t\t}\n\n\t\tif ( json.images === undefined || json.images.length === 0 ) {\n\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t}\n\n\t\treturn object;\n\n\t},\n\n\tparseGeometries: function ( json ) {\n\n\t\tvar geometries = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tvar geometryLoader = new THREE.JSONLoader();\n\t\t\tvar bufferGeometryLoader = new THREE.BufferGeometryLoader();\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar geometry;\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\tcase 'PlaneBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\tdata.heightSegments\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.depth,\n\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.depthSegments\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\tcase 'CircleBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\tcase 'CylinderBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.radiusTop,\n\t\t\t\t\t\t\tdata.radiusBottom,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\tcase 'ConeBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE [ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\tcase 'SphereBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\tdata.phiLength,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\tcase 'TetrahedronGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.detail\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\tcase 'RingBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.innerRadius,\n\t\t\t\t\t\t\tdata.outerRadius,\n\t\t\t\t\t\t\tdata.thetaSegments,\n\t\t\t\t\t\t\tdata.phiSegments,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\tcase 'TorusBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\tdata.arc\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.p,\n\t\t\t\t\t\t\tdata.q\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\tcase 'LatheBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.points,\n\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\tdata.phiLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'BufferGeometry':\n\n\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Geometry':\n\n\t\t\t\t\t\tgeometry = geometryLoader.parse( data.data, this.texturePath ).geometry;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\n\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn geometries;\n\n\t},\n\n\tparseMaterials: function ( json, textures ) {\n\n\t\tvar materials = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tvar loader = new THREE.MaterialLoader();\n\t\t\tloader.setTextures( textures );\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar material = loader.parse( json[ i ] );\n\t\t\t\tmaterials[ material.uuid ] = material;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn materials;\n\n\t},\n\n\tparseAnimations: function ( json ) {\n\n\t\tvar animations = [];\n\n\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\tvar clip = THREE.AnimationClip.parse( json[ i ] );\n\n\t\t\tanimations.push( clip );\n\n\t\t}\n\n\t\treturn animations;\n\n\t},\n\n\tparseImages: function ( json, onLoad ) {\n\n\t\tvar scope = this;\n\t\tvar images = {};\n\n\t\tfunction loadImage( url ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn loader.load( url, function () {\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\tvar manager = new THREE.LoadingManager( onLoad );\n\n\t\t\tvar loader = new THREE.ImageLoader( manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar image = json[ i ];\n\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\n\n\t\t\t\timages[ image.uuid ] = loadImage( path );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn images;\n\n\t},\n\n\tparseTextures: function ( json, images ) {\n\n\t\tfunction parseConstant( value ) {\n\n\t\t\tif ( typeof( value ) === 'number' ) return value;\n\n\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\treturn THREE[ value ];\n\n\t\t}\n\n\t\tvar textures = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t}\n\n\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t}\n\n\t\t\t\tvar texture = new THREE.Texture( images[ data.image ] );\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping );\n\t\t\t\tif ( data.offset !== undefined ) texture.offset = new THREE.Vector2( data.offset[ 0 ], data.offset[ 1 ] );\n\t\t\t\tif ( data.repeat !== undefined ) texture.repeat = new THREE.Vector2( data.repeat[ 0 ], data.repeat[ 1 ] );\n\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter );\n\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter );\n\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\t\t\t\tif ( Array.isArray( data.wrap ) ) {\n\n\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ] );\n\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ] );\n\n\t\t\t\t}\n\n\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn textures;\n\n\t},\n\n\tparseObject: function () {\n\n\t\tvar matrix = new THREE.Matrix4();\n\n\t\treturn function parseObject( data, geometries, materials ) {\n\n\t\t\tvar object;\n\n\t\t\tfunction getGeometry( name ) {\n\n\t\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn geometries[ name ];\n\n\t\t\t}\n\n\t\t\tfunction getMaterial( name ) {\n\n\t\t\t\tif ( name === undefined ) return undefined;\n\n\t\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn materials[ name ];\n\n\t\t\t}\n\n\t\t\tswitch ( data.type ) {\n\n\t\t\t\tcase 'Scene':\n\n\t\t\t\t\tobject = new THREE.Scene();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\t\tobject = new THREE.PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n\t\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n\t\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n\t\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\t\tobject = new THREE.OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientLight':\n\n\t\t\t\t\tobject = new THREE.AmbientLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DirectionalLight':\n\n\t\t\t\t\tobject = new THREE.DirectionalLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\n\t\t\t\t\tobject = new THREE.PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\n\t\t\t\t\tobject = new THREE.SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\n\t\t\t\t\tobject = new THREE.HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Mesh':\n\n\t\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t\t\t\t\tvar material = getMaterial( data.material );\n\n\t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\n\n\t\t\t\t\t\tobject = new THREE.SkinnedMesh( geometry, material );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tobject = new THREE.Mesh( geometry, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LOD':\n\n\t\t\t\t\tobject = new THREE.LOD();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Line':\n\n\t\t\t\t\tobject = new THREE.Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointCloud':\n\t\t\t\tcase 'Points':\n\n\t\t\t\t\tobject = new THREE.Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Sprite':\n\n\t\t\t\t\tobject = new THREE.Sprite( getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Group':\n\n\t\t\t\t\tobject = new THREE.Group();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tobject = new THREE.Object3D();\n\n\t\t\t}\n\n\t\t\tobject.uuid = data.uuid;\n\n\t\t\tif ( data.name !== undefined ) object.name = data.name;\n\t\t\tif ( data.matrix !== undefined ) {\n\n\t\t\t\tmatrix.fromArray( data.matrix );\n\t\t\t\tmatrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t\t} else {\n\n\t\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n\t\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n\t\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\n\t\t\t}\n\n\t\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n\t\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\n\t\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n\t\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\n\t\t\tif ( data.children !== undefined ) {\n\n\t\t\t\tfor ( var child in data.children ) {\n\n\t\t\t\t\tobject.add( this.parseObject( data.children[ child ], geometries, materials ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( data.type === 'LOD' ) {\n\n\t\t\t\tvar levels = data.levels;\n\n\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\t\tvar level = levels[ l ];\n\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\t\tobject.addLevel( child, level.distance );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t};\n\n\t}()\n\n} );\n\n// File:src/loaders/TextureLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.TextureLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nObject.assign( THREE.TextureLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar texture = new THREE.Texture();\n\n\t\tvar loader = new THREE.ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\t\tloader.load( url, function ( image ) {\n\n\t\t\ttexture.image = image;\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\tonLoad( texture );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t\treturn texture;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/loaders/CubeTextureLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.CubeTextureLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nObject.assign( THREE.CubeTextureLoader.prototype, {\n\n\tload: function ( urls, onLoad, onProgress, onError ) {\n\n\t\tvar texture = new THREE.CubeTexture();\n\n\t\tvar loader = new THREE.ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tvar loaded = 0;\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\tloaded ++;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, undefined, onError );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\n\t\t\tloadTexture( i );\n\n\t\t}\n\n\t\treturn texture;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/loaders/BinaryTextureLoader.js\n\n/**\n * @author Nikos M. / https://github.com/foo123/\n *\n * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n */\n\nTHREE.DataTextureLoader = THREE.BinaryTextureLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t// override in sub classes\n\tthis._parser = null;\n\n};\n\nObject.assign( THREE.BinaryTextureLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar texture = new THREE.DataTexture();\n\n\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tvar texData = scope._parser( buffer );\n\n\t\t\tif ( ! texData ) return;\n\n\t\t\tif ( undefined !== texData.image ) {\n\n\t\t\t\ttexture.image = texData.image;\n\n\t\t\t} else if ( undefined !== texData.data ) {\n\n\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t}\n\n\t\t\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : THREE.ClampToEdgeWrapping;\n\t\t\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : THREE.ClampToEdgeWrapping;\n\n\t\t\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : THREE.LinearFilter;\n\t\t\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : THREE.LinearMipMapLinearFilter;\n\n\t\t\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\n\n\t\t\tif ( undefined !== texData.format ) {\n\n\t\t\t\ttexture.format = texData.format;\n\n\t\t\t}\n\t\t\tif ( undefined !== texData.type ) {\n\n\t\t\t\ttexture.type = texData.type;\n\n\t\t\t}\n\n\t\t\tif ( undefined !== texData.mipmaps ) {\n\n\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\n\t\t\t}\n\n\t\t\tif ( 1 === texData.mipmapCount ) {\n\n\t\t\t\ttexture.minFilter = THREE.LinearFilter;\n\n\t\t\t}\n\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}, onProgress, onError );\n\n\n\t\treturn texture;\n\n\t}\n\n} );\n\n// File:src/loaders/CompressedTextureLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n *\n * Abstract Base class to block based textures loader (dds, pvr, ...)\n */\n\nTHREE.CompressedTextureLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t// override in sub classes\n\tthis._parser = null;\n\n};\n\nObject.assign( THREE.CompressedTextureLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar images = [];\n\n\t\tvar texture = new THREE.CompressedTexture();\n\t\ttexture.image = images;\n\n\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n\t\t\t\timages[ i ] = {\n\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t};\n\n\t\t\t\tloaded += 1;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n\t\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\tif ( Array.isArray( url ) ) {\n\n\t\t\tvar loaded = 0;\n\n\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\timages[ f ] = { mipmaps : [] };\n\n\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\treturn texture;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/materials/Material.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Material = function () {\n\n\tObject.defineProperty( this, 'id', { value: THREE.MaterialIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'Material';\n\n\tthis.fog = true;\n\tthis.lights = true;\n\n\tthis.blending = THREE.NormalBlending;\n\tthis.side = THREE.FrontSide;\n\tthis.shading = THREE.SmoothShading; // THREE.FlatShading, THREE.SmoothShading\n\tthis.vertexColors = THREE.NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\n\tthis.opacity = 1;\n\tthis.transparent = false;\n\n\tthis.blendSrc = THREE.SrcAlphaFactor;\n\tthis.blendDst = THREE.OneMinusSrcAlphaFactor;\n\tthis.blendEquation = THREE.AddEquation;\n\tthis.blendSrcAlpha = null;\n\tthis.blendDstAlpha = null;\n\tthis.blendEquationAlpha = null;\n\n\tthis.depthFunc = THREE.LessEqualDepth;\n\tthis.depthTest = true;\n\tthis.depthWrite = true;\n\n\tthis.clippingPlanes = null;\n\tthis.clipShadows = false;\n\n\tthis.colorWrite = true;\n\n\tthis.precision = null; // override the renderer's default precision for this material\n\n\tthis.polygonOffset = false;\n\tthis.polygonOffsetFactor = 0;\n\tthis.polygonOffsetUnits = 0;\n\n\tthis.alphaTest = 0;\n\tthis.premultipliedAlpha = false;\n\n\tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n\n\tthis.visible = true;\n\n\tthis._needsUpdate = true;\n\n};\n\nTHREE.Material.prototype = {\n\n\tconstructor: THREE.Material,\n\n\tget needsUpdate() {\n\n\t\treturn this._needsUpdate;\n\n\t},\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.update();\n\t\tthis._needsUpdate = value;\n\n\t},\n\n\tsetValues: function ( values ) {\n\n\t\tif ( values === undefined ) return;\n\n\t\tfor ( var key in values ) {\n\n\t\t\tvar newValue = values[ key ];\n\n\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tvar currentValue = this[ key ];\n\n\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( currentValue instanceof THREE.Color ) {\n\n\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t} else if ( currentValue instanceof THREE.Vector3 && newValue instanceof THREE.Vector3 ) {\n\n\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t} else if ( key === 'overdraw' ) {\n\n\t\t\t\t// ensure overdraw is backwards-compatible with legacy boolean type\n\t\t\t\tthis[ key ] = Number( newValue );\n\n\t\t\t} else {\n\n\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar isRoot = meta === undefined;\n\n\t\tif ( isRoot ) {\n\n\t\t\tmeta = {\n\t\t\t\ttextures: {},\n\t\t\t\timages: {}\n\t\t\t};\n\n\t\t}\n\n\t\tvar data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.4,\n\t\t\t\ttype: 'Material',\n\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Material serialization\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.color instanceof THREE.Color ) data.color = this.color.getHex();\n\n\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n\t\tif ( this.emissive instanceof THREE.Color ) data.emissive = this.emissive.getHex();\n\t\tif ( this.specular instanceof THREE.Color ) data.specular = this.specular.getHex();\n\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\n\t\tif ( this.map instanceof THREE.Texture ) data.map = this.map.toJSON( meta ).uuid;\n\t\tif ( this.alphaMap instanceof THREE.Texture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\t\tif ( this.lightMap instanceof THREE.Texture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\n\t\tif ( this.bumpMap instanceof THREE.Texture ) {\n\n\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t}\n\t\tif ( this.normalMap instanceof THREE.Texture ) {\n\n\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t}\n\t\tif ( this.displacementMap instanceof THREE.Texture ) {\n\n\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t}\n\t\tif ( this.roughnessMap instanceof THREE.Texture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t\tif ( this.metalnessMap instanceof THREE.Texture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n\t\tif ( this.emissiveMap instanceof THREE.Texture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t\tif ( this.specularMap instanceof THREE.Texture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\n\t\tif ( this.envMap instanceof THREE.Texture ) {\n\n\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\n\t\t}\n\n\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n\t\tif ( this.blending !== THREE.NormalBlending ) data.blending = this.blending;\n\t\tif ( this.shading !== THREE.SmoothShading ) data.shading = this.shading;\n\t\tif ( this.side !== THREE.FrontSide ) data.side = this.side;\n\t\tif ( this.vertexColors !== THREE.NoColors ) data.vertexColors = this.vertexColors;\n\n\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\n\t\t// TODO: Copied from Object3D.toJSON\n\n\t\tfunction extractFromCache ( cache ) {\n\n\t\t\tvar values = [];\n\n\t\t\tfor ( var key in cache ) {\n\n\t\t\t\tvar data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t\tif ( isRoot ) {\n\n\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\tif ( images.length > 0 ) data.images = images;\n\n\t\t}\n\n\t\treturn data;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.fog = source.fog;\n\t\tthis.lights = source.lights;\n\n\t\tthis.blending = source.blending;\n\t\tthis.side = source.side;\n\t\tthis.shading = source.shading;\n\t\tthis.vertexColors = source.vertexColors;\n\n\t\tthis.opacity = source.opacity;\n\t\tthis.transparent = source.transparent;\n\n\t\tthis.blendSrc = source.blendSrc;\n\t\tthis.blendDst = source.blendDst;\n\t\tthis.blendEquation = source.blendEquation;\n\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\tthis.depthFunc = source.depthFunc;\n\t\tthis.depthTest = source.depthTest;\n\t\tthis.depthWrite = source.depthWrite;\n\n\t\tthis.colorWrite = source.colorWrite;\n\n\t\tthis.precision = source.precision;\n\n\t\tthis.polygonOffset = source.polygonOffset;\n\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\tthis.alphaTest = source.alphaTest;\n\n\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n\t\tthis.overdraw = source.overdraw;\n\n\t\tthis.visible = source.visible;\n\t\tthis.clipShadows = source.clipShadows;\n\n\t\tvar srcPlanes = source.clippingPlanes,\n\t\t\tdstPlanes = null;\n\n\t\tif ( srcPlanes !== null ) {\n\n\t\t\tvar n = srcPlanes.length;\n\t\t\tdstPlanes = new Array( n );\n\n\t\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n\t\t}\n\n\t\tthis.clippingPlanes = dstPlanes;\n\n\t\treturn this;\n\n\t},\n\n\tupdate: function () {\n\n\t\tthis.dispatchEvent( { type: 'update' } );\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n};\n\nObject.assign( THREE.Material.prototype, THREE.EventDispatcher.prototype );\n\nTHREE.MaterialIdCount = 0;\n\n// File:src/materials/LineBasicMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  linewidth: <float>,\n *  linecap: \"round\",\n *  linejoin: \"round\"\n * }\n */\n\nTHREE.LineBasicMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'LineBasicMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff );\n\n\tthis.linewidth = 1;\n\tthis.linecap = 'round';\n\tthis.linejoin = 'round';\n\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.LineBasicMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.LineBasicMaterial.prototype.constructor = THREE.LineBasicMaterial;\n\nTHREE.LineBasicMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.linewidth = source.linewidth;\n\tthis.linecap = source.linecap;\n\tthis.linejoin = source.linejoin;\n\n\treturn this;\n\n};\n\n// File:src/materials/LineDashedMaterial.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  linewidth: <float>,\n *\n *  scale: <float>,\n *  dashSize: <float>,\n *  gapSize: <float>\n * }\n */\n\nTHREE.LineDashedMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'LineDashedMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff );\n\n\tthis.linewidth = 1;\n\n\tthis.scale = 1;\n\tthis.dashSize = 3;\n\tthis.gapSize = 1;\n\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.LineDashedMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.LineDashedMaterial.prototype.constructor = THREE.LineDashedMaterial;\n\nTHREE.LineDashedMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.linewidth = source.linewidth;\n\n\tthis.scale = source.scale;\n\tthis.dashSize = source.dashSize;\n\tthis.gapSize = source.gapSize;\n\n\treturn this;\n\n};\n\n// File:src/materials/MeshBasicMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  shading: THREE.SmoothShading,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>\n * }\n */\n\nTHREE.MeshBasicMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'MeshBasicMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff ); // emissive\n\n\tthis.map = null;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.specularMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.combine = THREE.MultiplyOperation;\n\tthis.reflectivity = 1;\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshBasicMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.MeshBasicMaterial.prototype.constructor = THREE.MeshBasicMaterial;\n\nTHREE.MeshBasicMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.map = source.map;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.specularMap = source.specularMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.combine = source.combine;\n\tthis.reflectivity = source.reflectivity;\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\n\treturn this;\n\n};\n\n// File:src/materials/MeshDepthMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author bhouston / https://clara.io\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>\n * }\n */\n\nTHREE.MeshDepthMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'MeshDepthMaterial';\n\n\tthis.depthPacking = THREE.BasicDepthPacking;\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\n\tthis.map = null;\n\n\tthis.alphaMap = null;\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\n\tthis.fog = false;\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshDepthMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.MeshDepthMaterial.prototype.constructor = THREE.MeshDepthMaterial;\n\nTHREE.MeshDepthMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.depthPacking = source.depthPacking;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\n\tthis.map = source.map;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\treturn this;\n\n};\n\n// File:src/materials/MeshLambertMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nTHREE.MeshLambertMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'MeshLambertMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff ); // diffuse\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\tthis.lightMapIntensity = 1.0;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.emissive = new THREE.Color( 0x000000 );\n\tthis.emissiveIntensity = 1.0;\n\tthis.emissiveMap = null;\n\n\tthis.specularMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.combine = THREE.MultiplyOperation;\n\tthis.reflectivity = 1;\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshLambertMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.MeshLambertMaterial.prototype.constructor = THREE.MeshLambertMaterial;\n\nTHREE.MeshLambertMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.map = source.map;\n\n\tthis.lightMap = source.lightMap;\n\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.emissive.copy( source.emissive );\n\tthis.emissiveMap = source.emissiveMap;\n\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\tthis.specularMap = source.specularMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.combine = source.combine;\n\tthis.reflectivity = source.reflectivity;\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n// File:src/materials/MeshNormalMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n *\n * parameters = {\n *  opacity: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>\n * }\n */\n\nTHREE.MeshNormalMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this, parameters );\n\n\tthis.type = 'MeshNormalMaterial';\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\n\tthis.fog = false;\n\tthis.lights = false;\n\tthis.morphTargets = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshNormalMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.MeshNormalMaterial.prototype.constructor = THREE.MeshNormalMaterial;\n\nTHREE.MeshNormalMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\treturn this;\n\n};\n\n// File:src/materials/MeshPhongMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  specular: <hex>,\n *  shininess: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nTHREE.MeshPhongMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'MeshPhongMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff ); // diffuse\n\tthis.specular = new THREE.Color( 0x111111 );\n\tthis.shininess = 30;\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\tthis.lightMapIntensity = 1.0;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.emissive = new THREE.Color( 0x000000 );\n\tthis.emissiveIntensity = 1.0;\n\tthis.emissiveMap = null;\n\n\tthis.bumpMap = null;\n\tthis.bumpScale = 1;\n\n\tthis.normalMap = null;\n\tthis.normalScale = new THREE.Vector2( 1, 1 );\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.specularMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.combine = THREE.MultiplyOperation;\n\tthis.reflectivity = 1;\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshPhongMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.MeshPhongMaterial.prototype.constructor = THREE.MeshPhongMaterial;\n\nTHREE.MeshPhongMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\tthis.specular.copy( source.specular );\n\tthis.shininess = source.shininess;\n\n\tthis.map = source.map;\n\n\tthis.lightMap = source.lightMap;\n\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.emissive.copy( source.emissive );\n\tthis.emissiveMap = source.emissiveMap;\n\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\tthis.bumpMap = source.bumpMap;\n\tthis.bumpScale = source.bumpScale;\n\n\tthis.normalMap = source.normalMap;\n\tthis.normalScale.copy( source.normalScale );\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\tthis.specularMap = source.specularMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.combine = source.combine;\n\tthis.reflectivity = source.reflectivity;\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n// File:src/materials/MeshStandardMaterial.js\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *  color: <hex>,\n *  roughness: <float>,\n *  metalness: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  roughnessMap: new THREE.Texture( <Image> ),\n *\n *  metalnessMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  envMapIntensity: <float>\n *\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nTHREE.MeshStandardMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.defines = { 'STANDARD': '' };\n\n\tthis.type = 'MeshStandardMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff ); // diffuse\n\tthis.roughness = 0.5;\n\tthis.metalness = 0.5;\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\tthis.lightMapIntensity = 1.0;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.emissive = new THREE.Color( 0x000000 );\n\tthis.emissiveIntensity = 1.0;\n\tthis.emissiveMap = null;\n\n\tthis.bumpMap = null;\n\tthis.bumpScale = 1;\n\n\tthis.normalMap = null;\n\tthis.normalScale = new THREE.Vector2( 1, 1 );\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.roughnessMap = null;\n\n\tthis.metalnessMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.envMapIntensity = 1.0;\n\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshStandardMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.MeshStandardMaterial.prototype.constructor = THREE.MeshStandardMaterial;\n\nTHREE.MeshStandardMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.defines = { 'STANDARD': '' };\n\n\tthis.color.copy( source.color );\n\tthis.roughness = source.roughness;\n\tthis.metalness = source.metalness;\n\n\tthis.map = source.map;\n\n\tthis.lightMap = source.lightMap;\n\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.emissive.copy( source.emissive );\n\tthis.emissiveMap = source.emissiveMap;\n\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\tthis.bumpMap = source.bumpMap;\n\tthis.bumpScale = source.bumpScale;\n\n\tthis.normalMap = source.normalMap;\n\tthis.normalScale.copy( source.normalScale );\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\tthis.roughnessMap = source.roughnessMap;\n\n\tthis.metalnessMap = source.metalnessMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.envMapIntensity = source.envMapIntensity;\n\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n// File:src/materials/MeshPhysicalMaterial.js\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *  reflectivity: <float>\n * }\n */\n\nTHREE.MeshPhysicalMaterial = function ( parameters ) {\n\n\tTHREE.MeshStandardMaterial.call( this );\n\n\tthis.defines = { 'PHYSICAL': '' };\n\n\tthis.type = 'MeshPhysicalMaterial';\n\n\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\tthis.clearCoat = 0.0;\n\tthis.clearCoatRoughness = 0.0;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshPhysicalMaterial.prototype = Object.create( THREE.MeshStandardMaterial.prototype );\nTHREE.MeshPhysicalMaterial.prototype.constructor = THREE.MeshPhysicalMaterial;\n\nTHREE.MeshPhysicalMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.MeshStandardMaterial.prototype.copy.call( this, source );\n\n\tthis.defines = { 'PHYSICAL': '' };\n\n\tthis.reflectivity = source.reflectivity;\n\n\tthis.clearCoat = source.clearCoat;\n\tthis.clearCoatRoughness = source.clearCoatRoughness;\n\n\treturn this;\n\n};\n\n// File:src/materials/MultiMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.MultiMaterial = function ( materials ) {\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.type = 'MultiMaterial';\n\n\tthis.materials = materials instanceof Array ? materials : [];\n\n\tthis.visible = true;\n\n};\n\nTHREE.MultiMaterial.prototype = {\n\n\tconstructor: THREE.MultiMaterial,\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar output = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.2,\n\t\t\t\ttype: 'material',\n\t\t\t\tgenerator: 'MaterialExporter'\n\t\t\t},\n\t\t\tuuid: this.uuid,\n\t\t\ttype: this.type,\n\t\t\tmaterials: []\n\t\t};\n\n\t\tvar materials = this.materials;\n\n\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n\t\t\tvar material = materials[ i ].toJSON( meta );\n\t\t\tdelete material.metadata;\n\n\t\t\toutput.materials.push( material );\n\n\t\t}\n\n\t\toutput.visible = this.visible;\n\n\t\treturn output;\n\n\t},\n\n\tclone: function () {\n\n\t\tvar material = new this.constructor();\n\n\t\tfor ( var i = 0; i < this.materials.length; i ++ ) {\n\n\t\t\tmaterial.materials.push( this.materials[ i ].clone() );\n\n\t\t}\n\n\t\tmaterial.visible = this.visible;\n\n\t\treturn material;\n\n\t}\n\n};\n\n// File:src/materials/PointsMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *  size: <float>,\n *  sizeAttenuation: <bool>\n * }\n */\n\nTHREE.PointsMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'PointsMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff );\n\n\tthis.map = null;\n\n\tthis.size = 1;\n\tthis.sizeAttenuation = true;\n\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.PointsMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.PointsMaterial.prototype.constructor = THREE.PointsMaterial;\n\nTHREE.PointsMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.map = source.map;\n\n\tthis.size = source.size;\n\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\treturn this;\n\n};\n\n// File:src/materials/ShaderMaterial.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  defines: { \"label\" : \"value\" },\n *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n *\n *  fragmentShader: <string>,\n *  vertexShader: <string>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  lights: <bool>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nTHREE.ShaderMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'ShaderMaterial';\n\n\tthis.defines = {};\n\tthis.uniforms = {};\n\n\tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\n\tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\n\n\tthis.linewidth = 1;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\n\tthis.fog = false; // set to use scene fog\n\tthis.lights = false; // set to use scene lights\n\tthis.clipping = false; // set to use user-defined clipping planes\n\n\tthis.skinning = false; // set to use skinning attribute streams\n\tthis.morphTargets = false; // set to use morph targets\n\tthis.morphNormals = false; // set to use morph normals\n\n\tthis.extensions = {\n\t\tderivatives: false, // set to use derivatives\n\t\tfragDepth: false, // set to use fragment depth values\n\t\tdrawBuffers: false, // set to use draw buffers\n\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t};\n\n\t// When rendered geometry doesn't include these attributes but the material does,\n\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\tthis.defaultAttributeValues = {\n\t\t'color': [ 1, 1, 1 ],\n\t\t'uv': [ 0, 0 ],\n\t\t'uv2': [ 0, 0 ]\n\t};\n\n\tthis.index0AttributeName = undefined;\n\n\tif ( parameters !== undefined ) {\n\n\t\tif ( parameters.attributes !== undefined ) {\n\n\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n};\n\nTHREE.ShaderMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.ShaderMaterial.prototype.constructor = THREE.ShaderMaterial;\n\nTHREE.ShaderMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.fragmentShader = source.fragmentShader;\n\tthis.vertexShader = source.vertexShader;\n\n\tthis.uniforms = THREE.UniformsUtils.clone( source.uniforms );\n\n\tthis.defines = source.defines;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\tthis.lights = source.lights;\n\tthis.clipping = source.clipping;\n\n\tthis.skinning = source.skinning;\n\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\tthis.extensions = source.extensions;\n\n\treturn this;\n\n};\n\nTHREE.ShaderMaterial.prototype.toJSON = function ( meta ) {\n\n\tvar data = THREE.Material.prototype.toJSON.call( this, meta );\n\n\tdata.uniforms = this.uniforms;\n\tdata.vertexShader = this.vertexShader;\n\tdata.fragmentShader = this.fragmentShader;\n\n\treturn data;\n\n};\n\n// File:src/materials/RawShaderMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.RawShaderMaterial = function ( parameters ) {\n\n\tTHREE.ShaderMaterial.call( this, parameters );\n\n\tthis.type = 'RawShaderMaterial';\n\n};\n\nTHREE.RawShaderMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );\nTHREE.RawShaderMaterial.prototype.constructor = THREE.RawShaderMaterial;\n\n// File:src/materials/SpriteMaterial.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *\tuvOffset: new THREE.Vector2(),\n *\tuvScale: new THREE.Vector2()\n * }\n */\n\nTHREE.SpriteMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'SpriteMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff );\n\tthis.map = null;\n\n\tthis.rotation = 0;\n\n\tthis.fog = false;\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.SpriteMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.SpriteMaterial.prototype.constructor = THREE.SpriteMaterial;\n\nTHREE.SpriteMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\tthis.map = source.map;\n\n\tthis.rotation = source.rotation;\n\n\treturn this;\n\n};\n\n// File:src/materials/ShadowMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.ShadowMaterial = function () {\n\n\tTHREE.ShaderMaterial.call( this, {\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\t\t\tTHREE.UniformsLib[ \"lights\" ],\n\t\t\t{\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t}\n\t\t] ),\n\t\tvertexShader: THREE.ShaderChunk[ 'shadow_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'shadow_frag' ]\n\t} );\n\n\tthis.lights = true;\n\tthis.transparent = true;\n\n\tObject.defineProperties( this, {\n\t\topacity: {\n\t\t\tenumerable: true,\n\t\t\tget: function () {\n\t\t\t\treturn this.uniforms.opacity.value;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tthis.uniforms.opacity.value = value;\n\t\t\t}\n\t\t}\n\t} );\n\n};\n\nTHREE.ShadowMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );\nTHREE.ShadowMaterial.prototype.constructor = THREE.ShadowMaterial;\n\n// File:src/textures/Texture.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author szimek / https://github.com/szimek/\n */\n\nTHREE.Texture = function ( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\tObject.defineProperty( this, 'id', { value: THREE.TextureIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.sourceFile = '';\n\n\tthis.image = image !== undefined ? image : THREE.Texture.DEFAULT_IMAGE;\n\tthis.mipmaps = [];\n\n\tthis.mapping = mapping !== undefined ? mapping : THREE.Texture.DEFAULT_MAPPING;\n\n\tthis.wrapS = wrapS !== undefined ? wrapS : THREE.ClampToEdgeWrapping;\n\tthis.wrapT = wrapT !== undefined ? wrapT : THREE.ClampToEdgeWrapping;\n\n\tthis.magFilter = magFilter !== undefined ? magFilter : THREE.LinearFilter;\n\tthis.minFilter = minFilter !== undefined ? minFilter : THREE.LinearMipMapLinearFilter;\n\n\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n\tthis.format = format !== undefined ? format : THREE.RGBAFormat;\n\tthis.type = type !== undefined ? type : THREE.UnsignedByteType;\n\n\tthis.offset = new THREE.Vector2( 0, 0 );\n\tthis.repeat = new THREE.Vector2( 1, 1 );\n\n\tthis.generateMipmaps = true;\n\tthis.premultiplyAlpha = false;\n\tthis.flipY = true;\n\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\n\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t//\n\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\tthis.encoding = encoding !== undefined ? encoding :  THREE.LinearEncoding;\n\n\tthis.version = 0;\n\tthis.onUpdate = null;\n\n};\n\nTHREE.Texture.DEFAULT_IMAGE = undefined;\nTHREE.Texture.DEFAULT_MAPPING = THREE.UVMapping;\n\nTHREE.Texture.prototype = {\n\n\tconstructor: THREE.Texture,\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.image = source.image;\n\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\tthis.mapping = source.mapping;\n\n\t\tthis.wrapS = source.wrapS;\n\t\tthis.wrapT = source.wrapT;\n\n\t\tthis.magFilter = source.magFilter;\n\t\tthis.minFilter = source.minFilter;\n\n\t\tthis.anisotropy = source.anisotropy;\n\n\t\tthis.format = source.format;\n\t\tthis.type = source.type;\n\n\t\tthis.offset.copy( source.offset );\n\t\tthis.repeat.copy( source.repeat );\n\n\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\tthis.flipY = source.flipY;\n\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\tthis.encoding = source.encoding;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tif ( meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t}\n\n\t\tfunction getDataURL( image ) {\n\n\t\t\tvar canvas;\n\n\t\t\tif ( image.toDataURL !== undefined ) {\n\n\t\t\t\tcanvas = image;\n\n\t\t\t} else {\n\n\t\t\t\tcanvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\t\tcanvas.width = image.width;\n\t\t\t\tcanvas.height = image.height;\n\n\t\t\t\tcanvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t}\n\n\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t\t} else {\n\n\t\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar output = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.4,\n\t\t\t\ttype: 'Texture',\n\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t},\n\n\t\t\tuuid: this.uuid,\n\t\t\tname: this.name,\n\n\t\t\tmapping: this.mapping,\n\n\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\tminFilter: this.minFilter,\n\t\t\tmagFilter: this.magFilter,\n\t\t\tanisotropy: this.anisotropy\n\t\t};\n\n\t\tif ( this.image !== undefined ) {\n\n\t\t\t// TODO: Move to THREE.Image\n\n\t\t\tvar image = this.image;\n\n\t\t\tif ( image.uuid === undefined ) {\n\n\t\t\t\timage.uuid = THREE.Math.generateUUID(); // UGH\n\n\t\t\t}\n\n\t\t\tif ( meta.images[ image.uuid ] === undefined ) {\n\n\t\t\t\tmeta.images[ image.uuid ] = {\n\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\turl: getDataURL( image )\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\toutput.image = image.uuid;\n\n\t\t}\n\n\t\tmeta.textures[ this.uuid ] = output;\n\n\t\treturn output;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t},\n\n\ttransformUv: function ( uv ) {\n\n\t\tif ( this.mapping !== THREE.UVMapping )  return;\n\n\t\tuv.multiply( this.repeat );\n\t\tuv.add( this.offset );\n\n\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\tcase THREE.RepeatWrapping:\n\n\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\tcase THREE.RepeatWrapping:\n\n\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.flipY ) {\n\n\t\t\tuv.y = 1 - uv.y;\n\n\t\t}\n\n\t}\n\n};\n\nObject.assign( THREE.Texture.prototype, THREE.EventDispatcher.prototype );\n\nTHREE.TextureIdCount = 0;\n\n// File:src/textures/DepthTexture.js\n\n/**\n * @author Matt DesLauriers / @mattdesl\n */\n\nTHREE.DepthTexture = function ( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {\n\n  THREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, THREE.DepthFormat, type, anisotropy );\n\n  this.image = { width: width, height: height };\n\n  this.type = type !== undefined ? type : THREE.UnsignedShortType;\n\n  this.magFilter = magFilter !== undefined ? magFilter : THREE.NearestFilter;\n  this.minFilter = minFilter !== undefined ? minFilter : THREE.NearestFilter;\n\n  this.flipY = false;\n  this.generateMipmaps  = false;\n\n};\n\nTHREE.DepthTexture.prototype = Object.create( THREE.Texture.prototype );\nTHREE.DepthTexture.prototype.constructor = THREE.DepthTexture;\n\n// File:src/textures/CanvasTexture.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.CanvasTexture = function ( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\tTHREE.Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\tthis.needsUpdate = true;\n\n};\n\nTHREE.CanvasTexture.prototype = Object.create( THREE.Texture.prototype );\nTHREE.CanvasTexture.prototype.constructor = THREE.CanvasTexture;\n\n// File:src/textures/CubeTexture.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.CubeTexture = function ( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\timages = images !== undefined ? images : [];\n\tmapping = mapping !== undefined ? mapping : THREE.CubeReflectionMapping;\n\n\tTHREE.Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\tthis.flipY = false;\n\n};\n\nTHREE.CubeTexture.prototype = Object.create( THREE.Texture.prototype );\nTHREE.CubeTexture.prototype.constructor = THREE.CubeTexture;\n\nObject.defineProperty( THREE.CubeTexture.prototype, 'images', {\n\n\tget: function () {\n\n\t\treturn this.image;\n\n\t},\n\n\tset: function ( value ) {\n\n\t\tthis.image = value;\n\n\t}\n\n} );\n\n// File:src/textures/CompressedTexture.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.CompressedTexture = function ( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\tthis.image = { width: width, height: height };\n\tthis.mipmaps = mipmaps;\n\n\t// no flipping for cube textures\n\t// (also flipping doesn't work for compressed textures )\n\n\tthis.flipY = false;\n\n\t// can't generate mipmaps for compressed textures\n\t// mips must be embedded in DDS files\n\n\tthis.generateMipmaps = false;\n\n};\n\nTHREE.CompressedTexture.prototype = Object.create( THREE.Texture.prototype );\nTHREE.CompressedTexture.prototype.constructor = THREE.CompressedTexture;\n\n// File:src/textures/DataTexture.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.DataTexture = function ( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\tthis.image = { data: data, width: width, height: height };\n\n\tthis.magFilter = magFilter !== undefined ? magFilter : THREE.NearestFilter;\n\tthis.minFilter = minFilter !== undefined ? minFilter : THREE.NearestFilter;\n\n\tthis.flipY = false;\n\tthis.generateMipmaps  = false;\n\n};\n\nTHREE.DataTexture.prototype = Object.create( THREE.Texture.prototype );\nTHREE.DataTexture.prototype.constructor = THREE.DataTexture;\n\n// File:src/textures/VideoTexture.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.VideoTexture = function ( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\tTHREE.Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\tthis.generateMipmaps = false;\n\n\tvar scope = this;\n\n\tfunction update() {\n\n\t\trequestAnimationFrame( update );\n\n\t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\tscope.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\tupdate();\n\n};\n\nTHREE.VideoTexture.prototype = Object.create( THREE.Texture.prototype );\nTHREE.VideoTexture.prototype.constructor = THREE.VideoTexture;\n\n// File:src/objects/Group.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Group = function () {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Group';\n\n};\n\nTHREE.Group.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.Group\n\n} );\n\n// File:src/objects/Points.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Points = function ( geometry, material ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Points';\n\n\tthis.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();\n\tthis.material = material !== undefined ? material : new THREE.PointsMaterial( { color: Math.random() * 0xffffff } );\n\n};\n\nTHREE.Points.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.Points,\n\n\traycast: ( function () {\n\n\t\tvar inverseMatrix = new THREE.Matrix4();\n\t\tvar ray = new THREE.Ray();\n\t\tvar sphere = new THREE.Sphere();\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tvar object = this;\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Points.threshold;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t//\n\n\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\t\t\tvar position = new THREE.Vector3();\n\n\t\t\tfunction testPoint( point, index ) {\n\n\t\t\t\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\n\n\t\t\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\t\t\t\tvar intersectPoint = ray.closestPointToPoint( point );\n\t\t\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\t\t\t\tpoint: intersectPoint.clone(),\n\t\t\t\t\t\tindex: index,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tobject: object\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\n\t\t\t\t\t\tposition.fromArray( positions, a * 3 );\n\n\t\t\t\t\t\ttestPoint( position, a );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\n\t\t\t\t\t\tposition.fromArray( positions, i * 3 );\n\n\t\t\t\t\t\ttestPoint( position, i );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\ttestPoint( vertices[ i ], i );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}() ),\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t}\n\n} );\n\n// File:src/objects/Line.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Line = function ( geometry, material, mode ) {\n\n\tif ( mode === 1 ) {\n\n\t\tconsole.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );\n\t\treturn new THREE.LineSegments( geometry, material );\n\n\t}\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Line';\n\n\tthis.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();\n\tthis.material = material !== undefined ? material : new THREE.LineBasicMaterial( { color: Math.random() * 0xffffff } );\n\n};\n\nTHREE.Line.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.Line,\n\n\traycast: ( function () {\n\n\t\tvar inverseMatrix = new THREE.Matrix4();\n\t\tvar ray = new THREE.Ray();\n\t\tvar sphere = new THREE.Sphere();\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tvar precision = raycaster.linePrecision;\n\t\t\tvar precisionSq = precision * precision;\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t//\n\n\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\tvar vStart = new THREE.Vector3();\n\t\t\tvar vEnd = new THREE.Vector3();\n\t\t\tvar interSegment = new THREE.Vector3();\n\t\t\tvar interRay = new THREE.Vector3();\n\t\t\tvar step = this instanceof THREE.LineSegments ? 2 : 1;\n\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\t\t\t\t\t\tvar b = indices[ i + 1 ];\n\n\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\n\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\n\t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\n\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar nbVertices = vertices.length;\n\n\t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\n\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\n\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}() ),\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t}\n\n} );\n\n// File:src/objects/LineSegments.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.LineSegments = function ( geometry, material ) {\n\n\tTHREE.Line.call( this, geometry, material );\n\n\tthis.type = 'LineSegments';\n\n};\n\nTHREE.LineSegments.prototype = Object.assign( Object.create( THREE.Line.prototype ), {\n\n\tconstructor: THREE.LineSegments\n\n} );\n\n// File:src/objects/Mesh.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author jonobr1 / http://jonobr1.com/\n */\n\nTHREE.Mesh = function ( geometry, material ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Mesh';\n\n\tthis.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();\n\tthis.material = material !== undefined ? material : new THREE.MeshBasicMaterial( { color: Math.random() * 0xffffff } );\n\n\tthis.drawMode = THREE.TrianglesDrawMode;\n\n\tthis.updateMorphTargets();\n\n};\n\nTHREE.Mesh.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.Mesh,\n\n\tsetDrawMode: function ( value ) {\n\n\t\tthis.drawMode = value;\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Object3D.prototype.copy.call( this, source );\n\n\t\tthis.drawMode = source.drawMode;\n\n\t\treturn this;\n\n\t},\n\n\tupdateMorphTargets: function () {\n\n\t\tif ( this.geometry.morphTargets !== undefined && this.geometry.morphTargets.length > 0 ) {\n\n\t\t\tthis.morphTargetBase = - 1;\n\t\t\tthis.morphTargetInfluences = [];\n\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\tfor ( var m = 0, ml = this.geometry.morphTargets.length; m < ml; m ++ ) {\n\n\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\tthis.morphTargetDictionary[ this.geometry.morphTargets[ m ].name ] = m;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tgetMorphTargetIndexByName: function ( name ) {\n\n\t\tif ( this.morphTargetDictionary[ name ] !== undefined ) {\n\n\t\t\treturn this.morphTargetDictionary[ name ];\n\n\t\t}\n\n\t\tconsole.warn( 'THREE.Mesh.getMorphTargetIndexByName: morph target ' + name + ' does not exist. Returning 0.' );\n\n\t\treturn 0;\n\n\t},\n\n\traycast: ( function () {\n\n\t\tvar inverseMatrix = new THREE.Matrix4();\n\t\tvar ray = new THREE.Ray();\n\t\tvar sphere = new THREE.Sphere();\n\n\t\tvar vA = new THREE.Vector3();\n\t\tvar vB = new THREE.Vector3();\n\t\tvar vC = new THREE.Vector3();\n\n\t\tvar tempA = new THREE.Vector3();\n\t\tvar tempB = new THREE.Vector3();\n\t\tvar tempC = new THREE.Vector3();\n\n\t\tvar uvA = new THREE.Vector2();\n\t\tvar uvB = new THREE.Vector2();\n\t\tvar uvC = new THREE.Vector2();\n\n\t\tvar barycoord = new THREE.Vector3();\n\n\t\tvar intersectionPoint = new THREE.Vector3();\n\t\tvar intersectionPointWorld = new THREE.Vector3();\n\n\t\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\n\n\t\t\tTHREE.Triangle.barycoordFromPoint( point, p1, p2, p3, barycoord );\n\n\t\t\tuv1.multiplyScalar( barycoord.x );\n\t\t\tuv2.multiplyScalar( barycoord.y );\n\t\t\tuv3.multiplyScalar( barycoord.z );\n\n\t\t\tuv1.add( uv2 ).add( uv3 );\n\n\t\t\treturn uv1.clone();\n\n\t\t}\n\n\t\tfunction checkIntersection( object, raycaster, ray, pA, pB, pC, point ) {\n\n\t\t\tvar intersect;\n\t\t\tvar material = object.material;\n\n\t\t\tif ( material.side === THREE.BackSide ) {\n\n\t\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t\t\t} else {\n\n\t\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== THREE.DoubleSide, point );\n\n\t\t\t}\n\n\t\t\tif ( intersect === null ) return null;\n\n\t\t\tintersectionPointWorld.copy( point );\n\t\t\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\n\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\t\t\treturn {\n\t\t\t\tdistance: distance,\n\t\t\t\tpoint: intersectionPointWorld.clone(),\n\t\t\t\tobject: object\n\t\t\t};\n\n\t\t}\n\n\t\tfunction checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {\n\n\t\t\tvA.fromArray( positions, a * 3 );\n\t\t\tvB.fromArray( positions, b * 3 );\n\t\t\tvC.fromArray( positions, c * 3 );\n\n\t\t\tvar intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );\n\n\t\t\tif ( intersection ) {\n\n\t\t\t\tif ( uvs ) {\n\n\t\t\t\t\tuvA.fromArray( uvs, a * 2 );\n\t\t\t\t\tuvB.fromArray( uvs, b * 2 );\n\t\t\t\t\tuvC.fromArray( uvs, c * 2 );\n\n\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );\n\n\t\t\t\t}\n\n\t\t\t\tintersection.face = new THREE.Face3( a, b, c, THREE.Triangle.normal( vA, vB, vC ) );\n\t\t\t\tintersection.faceIndex = a;\n\n\t\t\t}\n\n\t\t\treturn intersection;\n\n\t\t}\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar material = this.material;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\tif ( material === undefined ) return;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t//\n\n\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\t// Check boundingBox before continuing\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tif ( ray.intersectsBox( geometry.boundingBox ) === false ) return;\n\n\t\t\t}\n\n\t\t\tvar uvs, intersection;\n\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\tvar a, b, c;\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( attributes.uv !== undefined ) {\n\n\t\t\t\t\tuvs = attributes.uv.array;\n\n\t\t\t\t}\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\ta = indices[ i ];\n\t\t\t\t\t\tb = indices[ i + 1 ];\n\t\t\t\t\t\tc = indices[ i + 2 ];\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 9 ) {\n\n\t\t\t\t\t\ta = i / 3;\n\t\t\t\t\t\tb = a + 1;\n\t\t\t\t\t\tc = a + 2;\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.index = a; // triangle number in positions buffer semantics\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\tvar fvA, fvB, fvC;\n\t\t\t\tvar isFaceMaterial = material instanceof THREE.MultiMaterial;\n\t\t\t\tvar materials = isFaceMaterial === true ? material.materials : null;\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar faces = geometry.faces;\n\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\n\n\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tvar face = faces[ f ];\n\t\t\t\t\tvar faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;\n\n\t\t\t\t\tif ( faceMaterial === undefined ) continue;\n\n\t\t\t\t\tfvA = vertices[ face.a ];\n\t\t\t\t\tfvB = vertices[ face.b ];\n\t\t\t\t\tfvC = vertices[ face.c ];\n\n\t\t\t\t\tif ( faceMaterial.morphTargets === true ) {\n\n\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\n\n\t\t\t\t\t\tvA.set( 0, 0, 0 );\n\t\t\t\t\t\tvB.set( 0, 0, 0 );\n\t\t\t\t\t\tvC.set( 0, 0, 0 );\n\n\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\n\n\t\t\t\t\t\t\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\n\t\t\t\t\t\t\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\n\t\t\t\t\t\t\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvA.add( fvA );\n\t\t\t\t\t\tvB.add( fvB );\n\t\t\t\t\t\tvC.add( fvC );\n\n\t\t\t\t\t\tfvA = vA;\n\t\t\t\t\t\tfvB = vB;\n\t\t\t\t\t\tfvC = vC;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tintersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tif ( uvs ) {\n\n\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n\t\t\t\t\t\t\tuvA.copy( uvs_f[ 0 ] );\n\t\t\t\t\t\t\tuvB.copy( uvs_f[ 1 ] );\n\t\t\t\t\t\t\tuvC.copy( uvs_f[ 2 ] );\n\n\t\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tintersection.face = face;\n\t\t\t\t\t\tintersection.faceIndex = f;\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}() ),\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t}\n\n} );\n\n// File:src/objects/Bone.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author ikerr / http://verold.com\n */\n\nTHREE.Bone = function ( skin ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Bone';\n\n\tthis.skin = skin;\n\n};\n\nTHREE.Bone.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.Bone,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Object3D.prototype.copy.call( this, source );\n\n\t\tthis.skin = source.skin;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/objects/Skeleton.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author michael guerrero / http://realitymeltdown.com\n * @author ikerr / http://verold.com\n */\n\nTHREE.Skeleton = function ( bones, boneInverses, useVertexTexture ) {\n\n\tthis.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;\n\n\tthis.identityMatrix = new THREE.Matrix4();\n\n\t// copy the bone array\n\n\tbones = bones || [];\n\n\tthis.bones = bones.slice( 0 );\n\n\t// create a bone texture or an array of floats\n\n\tif ( this.useVertexTexture ) {\n\n\t\t// layout (1 matrix = 4 pixels)\n\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\n\t\tvar size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\tsize = THREE.Math.nextPowerOfTwo( Math.ceil( size ) );\n\t\tsize = Math.max( size, 4 );\n\n\t\tthis.boneTextureWidth = size;\n\t\tthis.boneTextureHeight = size;\n\n\t\tthis.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel\n\t\tthis.boneTexture = new THREE.DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType );\n\n\t} else {\n\n\t\tthis.boneMatrices = new Float32Array( 16 * this.bones.length );\n\n\t}\n\n\t// use the supplied bone inverses or calculate the inverses\n\n\tif ( boneInverses === undefined ) {\n\n\t\tthis.calculateInverses();\n\n\t} else {\n\n\t\tif ( this.bones.length === boneInverses.length ) {\n\n\t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Skeleton bonInverses is the wrong length.' );\n\n\t\t\tthis.boneInverses = [];\n\n\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\t\tthis.boneInverses.push( new THREE.Matrix4() );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n};\n\nObject.assign( THREE.Skeleton.prototype, {\n\n\tcalculateInverses: function () {\n\n\t\tthis.boneInverses = [];\n\n\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\tvar inverse = new THREE.Matrix4();\n\n\t\t\tif ( this.bones[ b ] ) {\n\n\t\t\t\tinverse.getInverse( this.bones[ b ].matrixWorld );\n\n\t\t\t}\n\n\t\t\tthis.boneInverses.push( inverse );\n\n\t\t}\n\n\t},\n\n\tpose: function () {\n\n\t\tvar bone;\n\n\t\t// recover the bind-time world matrices\n\n\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\tbone = this.bones[ b ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ b ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// compute the local matrices, positions, rotations and scales\n\n\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\tbone = this.bones[ b ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tif ( bone.parent instanceof THREE.Bone ) {\n\n\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tupdate: ( function () {\n\n\t\tvar offsetMatrix = new THREE.Matrix4();\n\n\t\treturn function update() {\n\n\t\t\t// flatten bone matrices to array\n\n\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\t\t// compute the offset between the current and the original transform\n\n\t\t\t\tvar matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;\n\n\t\t\t\toffsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );\n\t\t\t\toffsetMatrix.toArray( this.boneMatrices, b * 16 );\n\n\t\t\t}\n\n\t\t\tif ( this.useVertexTexture ) {\n\n\t\t\t\tthis.boneTexture.needsUpdate = true;\n\n\t\t\t}\n\n\t\t};\n\n\t} )(),\n\n\tclone: function () {\n\n\t\treturn new THREE.Skeleton( this.bones, this.boneInverses, this.useVertexTexture );\n\n\t}\n\n} );\n\n// File:src/objects/SkinnedMesh.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author ikerr / http://verold.com\n */\n\nTHREE.SkinnedMesh = function ( geometry, material, useVertexTexture ) {\n\n\tTHREE.Mesh.call( this, geometry, material );\n\n\tthis.type = 'SkinnedMesh';\n\n\tthis.bindMode = \"attached\";\n\tthis.bindMatrix = new THREE.Matrix4();\n\tthis.bindMatrixInverse = new THREE.Matrix4();\n\n\t// init bones\n\n\t// TODO: remove bone creation as there is no reason (other than\n\t// convenience) for THREE.SkinnedMesh to do this.\n\n\tvar bones = [];\n\n\tif ( this.geometry && this.geometry.bones !== undefined ) {\n\n\t\tvar bone, gbone;\n\n\t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\n\t\t\tgbone = this.geometry.bones[ b ];\n\n\t\t\tbone = new THREE.Bone( this );\n\t\t\tbones.push( bone );\n\n\t\t\tbone.name = gbone.name;\n\t\t\tbone.position.fromArray( gbone.pos );\n\t\t\tbone.quaternion.fromArray( gbone.rotq );\n\t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\n\n\t\t}\n\n\t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\n\t\t\tgbone = this.geometry.bones[ b ];\n\n\t\t\tif ( gbone.parent !== - 1 && gbone.parent !== null &&\n\t\t\t\t\tbones[ gbone.parent ] !== undefined ) {\n\n\t\t\t\tbones[ gbone.parent ].add( bones[ b ] );\n\n\t\t\t} else {\n\n\t\t\t\tthis.add( bones[ b ] );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tthis.normalizeSkinWeights();\n\n\tthis.updateMatrixWorld( true );\n\tthis.bind( new THREE.Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );\n\n};\n\n\nTHREE.SkinnedMesh.prototype = Object.assign( Object.create( THREE.Mesh.prototype ), {\n\n\tconstructor: THREE.SkinnedMesh,\n\n\tbind: function( skeleton, bindMatrix ) {\n\n\t\tthis.skeleton = skeleton;\n\n\t\tif ( bindMatrix === undefined ) {\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t}\n\n\t\tthis.bindMatrix.copy( bindMatrix );\n\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\n\t},\n\n\tpose: function () {\n\n\t\tthis.skeleton.pose();\n\n\t},\n\n\tnormalizeSkinWeights: function () {\n\n\t\tif ( this.geometry instanceof THREE.Geometry ) {\n\n\t\t\tfor ( var i = 0; i < this.geometry.skinWeights.length; i ++ ) {\n\n\t\t\t\tvar sw = this.geometry.skinWeights[ i ];\n\n\t\t\t\tvar scale = 1.0 / sw.lengthManhattan();\n\n\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\tsw.multiplyScalar( scale );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsw.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( this.geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\tvar vec = new THREE.Vector4();\n\n\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\tfor ( var i = 0; i < skinWeight.count; i ++ ) {\n\n\t\t\t\tvec.x = skinWeight.getX( i );\n\t\t\t\tvec.y = skinWeight.getY( i );\n\t\t\t\tvec.z = skinWeight.getZ( i );\n\t\t\t\tvec.w = skinWeight.getW( i );\n\n\t\t\t\tvar scale = 1.0 / vec.lengthManhattan();\n\n\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\tvec.multiplyScalar( scale );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvec.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t}\n\n\t\t\t\tskinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tupdateMatrixWorld: function( force ) {\n\n\t\tTHREE.Mesh.prototype.updateMatrixWorld.call( this, true );\n\n\t\tif ( this.bindMode === \"attached\" ) {\n\n\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\n\t\t} else if ( this.bindMode === \"detached\" ) {\n\n\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );\n\n\t\t}\n\n\t},\n\n\tclone: function() {\n\n\t\treturn new this.constructor( this.geometry, this.material, this.skeleton.useVertexTexture ).copy( this );\n\n\t}\n\n} );\n\n// File:src/objects/LOD.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.LOD = function () {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'LOD';\n\n\tObject.defineProperties( this, {\n\t\tlevels: {\n\t\t\tenumerable: true,\n\t\t\tvalue: []\n\t\t}\n\t} );\n\n};\n\n\nTHREE.LOD.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.LOD,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Object3D.prototype.copy.call( this, source, false );\n\n\t\tvar levels = source.levels;\n\n\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tvar level = levels[ i ];\n\n\t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\taddLevel: function ( object, distance ) {\n\n\t\tif ( distance === undefined ) distance = 0;\n\n\t\tdistance = Math.abs( distance );\n\n\t\tvar levels = this.levels;\n\n\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n\t\tthis.add( object );\n\n\t},\n\n\tgetObjectForDistance: function ( distance ) {\n\n\t\tvar levels = this.levels;\n\n\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\tif ( distance < levels[ i ].distance ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn levels[ i - 1 ].object;\n\n\t},\n\n\traycast: ( function () {\n\n\t\tvar matrixPosition = new THREE.Vector3();\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\n\n\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t};\n\n\t}() ),\n\n\tupdate: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\t\tvar v2 = new THREE.Vector3();\n\n\t\treturn function update( camera ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 1 ) {\n\n\t\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = v1.distanceTo( v2 );\n\n\t\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}(),\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.levels = [];\n\n\t\tvar levels = this.levels;\n\n\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tvar level = levels[ i ];\n\n\t\t\tdata.object.levels.push( {\n\t\t\t\tobject: level.object.uuid,\n\t\t\t\tdistance: level.distance\n\t\t\t} );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n} );\n\n// File:src/objects/Sprite.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Sprite = function ( material ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Sprite';\n\n\tthis.material = ( material !== undefined ) ? material : new THREE.SpriteMaterial();\n\n};\n\nTHREE.Sprite.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.Sprite,\n\n\traycast: ( function () {\n\n\t\tvar matrixPosition = new THREE.Vector3();\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tvar distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );\n\t\t\tvar guessSizeSq = this.scale.x * this.scale.y / 4;\n\n\t\t\tif ( distanceSq > guessSizeSq ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tintersects.push( {\n\n\t\t\t\tdistance: Math.sqrt( distanceSq ),\n\t\t\t\tpoint: this.position,\n\t\t\t\tface: null,\n\t\t\t\tobject: this\n\n\t\t\t} );\n\n\t\t};\n\n\t}() ),\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.material ).copy( this );\n\n\t}\n\n} );\n\n// File:src/objects/LensFlare.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.LensFlare = function ( texture, size, distance, blending, color ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.lensFlares = [];\n\n\tthis.positionScreen = new THREE.Vector3();\n\tthis.customUpdateCallback = undefined;\n\n\tif ( texture !== undefined ) {\n\n\t\tthis.add( texture, size, distance, blending, color );\n\n\t}\n\n};\n\nTHREE.LensFlare.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.LensFlare,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Object3D.prototype.copy.call( this, source );\n\n\t\tthis.positionScreen.copy( source.positionScreen );\n\t\tthis.customUpdateCallback = source.customUpdateCallback;\n\n\t\tfor ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {\n\n\t\t\tthis.lensFlares.push( source.lensFlares[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( texture, size, distance, blending, color, opacity ) {\n\n\t\tif ( size === undefined ) size = - 1;\n\t\tif ( distance === undefined ) distance = 0;\n\t\tif ( opacity === undefined ) opacity = 1;\n\t\tif ( color === undefined ) color = new THREE.Color( 0xffffff );\n\t\tif ( blending === undefined ) blending = THREE.NormalBlending;\n\n\t\tdistance = Math.min( distance, Math.max( 0, distance ) );\n\n\t\tthis.lensFlares.push( {\n\t\t\ttexture: texture,\t// THREE.Texture\n\t\t\tsize: size, \t\t// size in pixels (-1 = use texture.width)\n\t\t\tdistance: distance, \t// distance (0-1) from light source (0=at light source)\n\t\t\tx: 0, y: 0, z: 0,\t// screen position (-1 => 1) z = 0 is in front z = 1 is back\n\t\t\tscale: 1, \t\t// scale\n\t\t\trotation: 0, \t\t// rotation\n\t\t\topacity: opacity,\t// opacity\n\t\t\tcolor: color,\t\t// color\n\t\t\tblending: blending\t// blending\n\t\t} );\n\n\t},\n\n\t/*\n\t * Update lens flares update positions on all flares based on the screen position\n\t * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\n\t */\n\n\tupdateLensFlares: function () {\n\n\t\tvar f, fl = this.lensFlares.length;\n\t\tvar flare;\n\t\tvar vecX = - this.positionScreen.x * 2;\n\t\tvar vecY = - this.positionScreen.y * 2;\n\n\t\tfor ( f = 0; f < fl; f ++ ) {\n\n\t\t\tflare = this.lensFlares[ f ];\n\n\t\t\tflare.x = this.positionScreen.x + vecX * flare.distance;\n\t\t\tflare.y = this.positionScreen.y + vecY * flare.distance;\n\n\t\t\tflare.wantedRotation = flare.x * Math.PI * 0.25;\n\t\t\tflare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\n\n\t\t}\n\n\t}\n\n} );\n\n// File:src/scenes/Scene.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Scene = function () {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Scene';\n\n\tthis.background = null;\n\tthis.fog = null;\n\tthis.overrideMaterial = null;\n\n\tthis.autoUpdate = true; // checked by the renderer\n\n};\n\nTHREE.Scene.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.Scene.prototype.constructor = THREE.Scene;\n\nTHREE.Scene.prototype.copy = function ( source, recursive ) {\n\n\tTHREE.Object3D.prototype.copy.call( this, source, recursive );\n\n\tif ( source.background !== null ) this.background = source.background.clone();\n\tif ( source.fog !== null ) this.fog = source.fog.clone();\n\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\n\tthis.autoUpdate = source.autoUpdate;\n\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\treturn this;\n\n};\n\n// File:src/scenes/Fog.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Fog = function ( color, near, far ) {\n\n\tthis.name = '';\n\n\tthis.color = new THREE.Color( color );\n\n\tthis.near = ( near !== undefined ) ? near : 1;\n\tthis.far = ( far !== undefined ) ? far : 1000;\n\n};\n\nTHREE.Fog.prototype.clone = function () {\n\n\treturn new THREE.Fog( this.color.getHex(), this.near, this.far );\n\n};\n\n// File:src/scenes/FogExp2.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.FogExp2 = function ( color, density ) {\n\n\tthis.name = '';\n\n\tthis.color = new THREE.Color( color );\n\tthis.density = ( density !== undefined ) ? density : 0.00025;\n\n};\n\nTHREE.FogExp2.prototype.clone = function () {\n\n\treturn new THREE.FogExp2( this.color.getHex(), this.density );\n\n};\n\n// File:src/renderers/shaders/ShaderChunk.js\n\nTHREE.ShaderChunk = {};\n\n// File:src/renderers/shaders/ShaderChunk/alphamap_fragment.glsl\n\nTHREE.ShaderChunk[ 'alphamap_fragment' ] = \"#ifdef USE_ALPHAMAP\\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/alphamap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'alphamap_pars_fragment' ] = \"#ifdef USE_ALPHAMAP\\n\tuniform sampler2D alphaMap;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/alphatest_fragment.glsl\n\nTHREE.ShaderChunk[ 'alphatest_fragment' ] = \"#ifdef ALPHATEST\\n\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/aomap_fragment.glsl\n\nTHREE.ShaderChunk[ 'aomap_fragment' ] = \"#ifdef USE_AOMAP\\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/aomap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'aomap_pars_fragment' ] = \"#ifdef USE_AOMAP\\n\tuniform sampler2D aoMap;\\n\tuniform float aoMapIntensity;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/begin_vertex.glsl\n\nTHREE.ShaderChunk[ 'begin_vertex' ] = \"\\nvec3 transformed = vec3( position );\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/beginnormal_vertex.glsl\n\nTHREE.ShaderChunk[ 'beginnormal_vertex' ] = \"\\nvec3 objectNormal = vec3( normal );\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/bsdfs.glsl\n\nTHREE.ShaderChunk[ 'bsdfs' ] = \"bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\\n\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\t\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\t\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\t\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\t\t\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\t\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\t\t}\\n\t\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\tfloat alpha = pow2( roughness );\\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\tvec3 F = F_Schlick( specularColor, dotLH );\\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\tfloat D = D_GGX( alpha, dotNH );\\n\treturn F * ( G * D );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\tvec4 r = roughness * c0 + c1;\\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\tvec3 F = F_Schlick( specularColor, dotLH );\\n\tfloat G = G_BlinnPhong_Implicit( );\\n\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/bumpmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'bumpmap_pars_fragment' ] = \"#ifdef USE_BUMPMAP\\n\tuniform sampler2D bumpMap;\\n\tuniform float bumpScale;\\n\tvec2 dHdxy_fwd() {\\n\t\tvec2 dSTdx = dFdx( vUv );\\n\t\tvec2 dSTdy = dFdy( vUv );\\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\t\treturn vec2( dBx, dBy );\\n\t}\\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\t\tvec3 vSigmaX = dFdx( surf_pos );\\n\t\tvec3 vSigmaY = dFdy( surf_pos );\\n\t\tvec3 vN = surf_norm;\\n\t\tvec3 R1 = cross( vSigmaY, vN );\\n\t\tvec3 R2 = cross( vN, vSigmaX );\\n\t\tfloat fDet = dot( vSigmaX, R1 );\\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\t}\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/clipping_planes_fragment.glsl\n\nTHREE.ShaderChunk[ 'clipping_planes_fragment' ] = \"#if NUM_CLIPPING_PLANES > 0\\n\tfor ( int i = 0; i < NUM_CLIPPING_PLANES; ++ i ) {\\n\t\tvec4 plane = clippingPlanes[ i ];\\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\t}\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/clipping_planes_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'clipping_planes_pars_fragment' ] = \"#if NUM_CLIPPING_PLANES > 0\\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\t\tvarying vec3 vViewPosition;\\n\t#endif\\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/clipping_planes_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'clipping_planes_pars_vertex' ] = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\tvarying vec3 vViewPosition;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/clipping_planes_vertex.glsl\n\nTHREE.ShaderChunk[ 'clipping_planes_vertex' ] = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/color_fragment.glsl\n\nTHREE.ShaderChunk[ 'color_fragment' ] = \"#ifdef USE_COLOR\\n\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/color_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'color_pars_fragment' ] = \"#ifdef USE_COLOR\\n\tvarying vec3 vColor;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/color_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'color_pars_vertex' ] = \"#ifdef USE_COLOR\\n\tvarying vec3 vColor;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/color_vertex.glsl\n\nTHREE.ShaderChunk[ 'color_vertex' ] = \"#ifdef USE_COLOR\\n\tvColor.xyz = color.xyz;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/common.glsl\n\nTHREE.ShaderChunk[ 'common' ] = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\tvec3 color;\\n\tvec3 direction;\\n\tbool visible;\\n};\\nstruct ReflectedLight {\\n\tvec3 directDiffuse;\\n\tvec3 directSpecular;\\n\tvec3 indirectDiffuse;\\n\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\tvec3 position;\\n\tvec3 normal;\\n\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/cube_uv_reflection_fragment.glsl\n\nTHREE.ShaderChunk[ 'cube_uv_reflection_fragment' ] = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\tvec3 absDirection = abs(direction);\\n\tint face = -1;\\n\tif( absDirection.x > absDirection.z ) {\\n\t\tif(absDirection.x > absDirection.y )\\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\\n\t\telse\\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\\n\t}\\n\telse {\\n\t\tif(absDirection.z > absDirection.y )\\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\\n\t\telse\\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\\n\t}\\n\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\tfloat dxRoughness = dFdx(roughness);\\n\tfloat dyRoughness = dFdy(roughness);\\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\tfloat mipLevel = 0.5 * log2(d);\\n\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\tbool bRes = mipLevel == 0.0;\\n\tscale =  bRes && (scale < a) ? a : scale;\\n\tvec3 r;\\n\tvec2 offset;\\n\tint face = getFaceFromDirection(direction);\\n\tfloat rcpPowScale = 1.0 / powScale;\\n\tif( face == 0) {\\n\t\tr = vec3(direction.x, -direction.z, direction.y);\\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\t}\\n\telse if( face == 1) {\\n\t\tr = vec3(direction.y, direction.x, direction.z);\\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\t}\\n\telse if( face == 2) {\\n\t\tr = vec3(direction.z, direction.x, direction.y);\\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\t}\\n\telse if( face == 3) {\\n\t\tr = vec3(direction.x, direction.z, direction.y);\\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\t}\\n\telse if( face == 4) {\\n\t\tr = vec3(direction.y, direction.x, -direction.z);\\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\t}\\n\telse {\\n\t\tr = vec3(direction.z, -direction.x, direction.y);\\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\t}\\n\tr = normalize(r);\\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\tvec2 base = offset + vec2( texelOffset );\\n\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\tfloat r1 = floor(roughnessVal);\\n\tfloat r2 = r1 + 1.0;\\n\tfloat t = fract(roughnessVal);\\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\tfloat s = mipInfo.y;\\n\tfloat level0 = mipInfo.x;\\n\tfloat level1 = level0 + 1.0;\\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\tvec4 result = mix(color10, color20, t);\\n\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/defaultnormal_vertex.glsl\n\nTHREE.ShaderChunk[ 'defaultnormal_vertex' ] = \"#ifdef FLIP_SIDED\\n\tobjectNormal = -objectNormal;\\n#endif\\nvec3 transformedNormal = normalMatrix * objectNormal;\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/displacementmap_vertex.glsl\n\nTHREE.ShaderChunk[ 'displacementmap_vertex' ] = \"#ifdef USE_DISPLACEMENTMAP\\n\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/displacementmap_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'displacementmap_pars_vertex' ] = \"#ifdef USE_DISPLACEMENTMAP\\n\tuniform sampler2D displacementMap;\\n\tuniform float displacementScale;\\n\tuniform float displacementBias;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/emissivemap_fragment.glsl\n\nTHREE.ShaderChunk[ 'emissivemap_fragment' ] = \"#ifdef USE_EMISSIVEMAP\\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/emissivemap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'emissivemap_pars_fragment' ] = \"#ifdef USE_EMISSIVEMAP\\n\tuniform sampler2D emissiveMap;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/encodings_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'encodings_pars_fragment' ] = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n  return value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n  float maxComponent = max( max( value.r, value.g ), value.b );\\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n  float maxRGB = max( value.x, max( value.g, value.b ) );\\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n  M            = ceil( M * 255.0 ) / 255.0;\\n  return vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n    float maxRGB = max( value.x, max( value.g, value.b ) );\\n    float D      = max( maxRange / maxRGB, 1.0 );\\n    D            = min( floor( D ) / 255.0, 1.0 );\\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n  vec4 vResult;\\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n  vResult.w = fract(Le);\\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n  return vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n  float Le = value.z * 255.0 + value.w;\\n  vec3 Xp_Y_XYZp;\\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n  return vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/encodings_fragment.glsl\n\nTHREE.ShaderChunk[ 'encodings_fragment' ] = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/envmap_fragment.glsl\n\nTHREE.ShaderChunk[ 'envmap_fragment' ] = \"#ifdef USE_ENVMAP\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\t\t#else\\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\t\t#endif\\n\t#else\\n\t\tvec3 reflectVec = vReflect;\\n\t#endif\\n\t#ifdef ENVMAP_TYPE_CUBE\\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\t\tvec2 sampleUV;\\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\\n\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\t#endif\\n\tenvColor = envMapTexelToLinear( envColor );\\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\t#elif defined( ENVMAP_BLENDING_MIX )\\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\t#elif defined( ENVMAP_BLENDING_ADD )\\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/envmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'envmap_pars_fragment' ] = \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\tuniform float reflectivity;\\n\tuniform float envMapIntenstiy;\\n#endif\\n#ifdef USE_ENVMAP\\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\t\tvarying vec3 vWorldPosition;\\n\t#endif\\n\t#ifdef ENVMAP_TYPE_CUBE\\n\t\tuniform samplerCube envMap;\\n\t#else\\n\t\tuniform sampler2D envMap;\\n\t#endif\\n\tuniform float flipEnvMap;\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\t\tuniform float refractionRatio;\\n\t#else\\n\t\tvarying vec3 vReflect;\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/envmap_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'envmap_pars_vertex' ] = \"#ifdef USE_ENVMAP\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\t\tvarying vec3 vWorldPosition;\\n\t#else\\n\t\tvarying vec3 vReflect;\\n\t\tuniform float refractionRatio;\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/envmap_vertex.glsl\n\nTHREE.ShaderChunk[ 'envmap_vertex' ] = \"#ifdef USE_ENVMAP\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\t\tvWorldPosition = worldPosition.xyz;\\n\t#else\\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\\n\t\t#else\\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\t\t#endif\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/fog_fragment.glsl\n\nTHREE.ShaderChunk[ 'fog_fragment' ] = \"#ifdef USE_FOG\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\\n\t#else\\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\n\t#endif\\n\t#ifdef FOG_EXP2\\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\\n\t#else\\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\\n\t#endif\\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/fog_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'fog_pars_fragment' ] = \"#ifdef USE_FOG\\n\tuniform vec3 fogColor;\\n\t#ifdef FOG_EXP2\\n\t\tuniform float fogDensity;\\n\t#else\\n\t\tuniform float fogNear;\\n\t\tuniform float fogFar;\\n\t#endif\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/lightmap_fragment.glsl\n\nTHREE.ShaderChunk[ 'lightmap_fragment' ] = \"#ifdef USE_LIGHTMAP\\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lightmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'lightmap_pars_fragment' ] = \"#ifdef USE_LIGHTMAP\\n\tuniform sampler2D lightMap;\\n\tuniform float lightMapIntensity;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_lambert_vertex.glsl\n\nTHREE.ShaderChunk[ 'lights_lambert_vertex' ] = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\t\t#endif\\n\t}\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_pars.glsl\n\nTHREE.ShaderChunk[ 'lights_pars' ] = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\tvec3 irradiance = ambientLightColor;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\tstruct DirectionalLight {\\n\t\tvec3 direction;\\n\t\tvec3 color;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\t\tdirectLight.color = directionalLight.color;\\n\t\tdirectLight.direction = directionalLight.direction;\\n\t\tdirectLight.visible = true;\\n\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\tstruct PointLight {\\n\t\tvec3 position;\\n\t\tvec3 color;\\n\t\tfloat distance;\\n\t\tfloat decay;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\t\tvec3 lVector = pointLight.position - geometry.position;\\n\t\tdirectLight.direction = normalize( lVector );\\n\t\tfloat lightDistance = length( lVector );\\n\t\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\\n\t\t\tdirectLight.color = pointLight.color;\\n\t\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\t\t\tdirectLight.visible = true;\\n\t\t} else {\\n\t\t\tdirectLight.color = vec3( 0.0 );\\n\t\t\tdirectLight.visible = false;\\n\t\t}\\n\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\tstruct SpotLight {\\n\t\tvec3 position;\\n\t\tvec3 direction;\\n\t\tvec3 color;\\n\t\tfloat distance;\\n\t\tfloat decay;\\n\t\tfloat coneCos;\\n\t\tfloat penumbraCos;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\t\tvec3 lVector = spotLight.position - geometry.position;\\n\t\tdirectLight.direction = normalize( lVector );\\n\t\tfloat lightDistance = length( lVector );\\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\t\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\t\t\tdirectLight.color = spotLight.color;\\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\t\t\tdirectLight.visible = true;\\n\t\t} else {\\n\t\t\tdirectLight.color = vec3( 0.0 );\\n\t\t\tdirectLight.visible = false;\\n\t\t}\\n\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\tstruct HemisphereLight {\\n\t\tvec3 direction;\\n\t\tvec3 skyColor;\\n\t\tvec3 groundColor;\\n\t};\\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\t\tirradiance *= PI;\\n\t\t#endif\\n\t\treturn irradiance;\\n\t}\\n#endif\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\t\t#include <normal_flip>\\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\t\t#ifdef ENVMAP_TYPE_CUBE\\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\t\t#else\\n\t\t\tvec4 envMapColor = vec4( 0.0 );\\n\t\t#endif\\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\\n\t}\\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\t}\\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\t\t#else\\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\t\t#endif\\n\t\t#include <normal_flip>\\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\t\t#ifdef ENVMAP_TYPE_CUBE\\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\t\t\tvec2 sampleUV;\\n\t\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\t\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\t\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#endif\\n\t\treturn envMapColor.rgb * envMapIntensity;\\n\t}\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_phong_fragment.glsl\n\nTHREE.ShaderChunk[ 'lights_phong_fragment' ] = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_phong_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'lights_phong_pars_fragment' ] = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\tvec3\tdiffuseColor;\\n\tvec3\tspecularColor;\\n\tfloat\tspecularShininess;\\n\tfloat\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\tvec3 irradiance = dotNL * directLight.color;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\t(0)\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_physical_fragment.glsl\n\nTHREE.ShaderChunk[ 'lights_physical_fragment' ] = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_physical_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'lights_physical_pars_fragment' ] = \"struct PhysicalMaterial {\\n\tvec3\tdiffuseColor;\\n\tfloat\tspecularRoughness;\\n\tvec3\tspecularColor;\\n\t#ifndef STANDARD\\n\t\tfloat clearCoat;\\n\t\tfloat clearCoatRoughness;\\n\t#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\tvec3 irradiance = dotNL * directLight.color;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\t#ifndef STANDARD\\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\t#endif\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\treflectedLight.indirectSpecular += radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\t#ifndef STANDARD\\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\t#endif\\n}\\n#define RE_Direct\t\t\t\tRE_Direct_Physical\\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_template.glsl\n\nTHREE.ShaderChunk[ 'lights_template' ] = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\tPointLight pointLight;\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tpointLight = pointLights[ i ];\\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\tSpotLight spotLight;\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tspotLight = spotLights[ i ];\\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\tDirectionalLight directionalLight;\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tdirectionalLight = directionalLights[ i ];\\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\t#ifdef USE_LIGHTMAP\\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\t\tlightMapIrradiance *= PI;\\n\t\t#endif\\n\t\tirradiance += lightMapIrradiance;\\n\t#endif\\n\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\t\t}\\n\t#endif\\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\t \tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\t#endif\\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\t#ifndef STANDARD\\n\t\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\\n\t#else\\n\t\tvec3 clearCoatRadiance = vec3( 0.0 );\\n\t#endif\\n\t\t\\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_fragment.glsl\n\nTHREE.ShaderChunk[ 'logdepthbuf_fragment' ] = \"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'logdepthbuf_pars_fragment' ] = \"#ifdef USE_LOGDEPTHBUF\\n\tuniform float logDepthBufFC;\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvarying float vFragDepth;\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'logdepthbuf_pars_vertex' ] = \"#ifdef USE_LOGDEPTHBUF\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvarying float vFragDepth;\\n\t#endif\\n\tuniform float logDepthBufFC;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_vertex.glsl\n\nTHREE.ShaderChunk[ 'logdepthbuf_vertex' ] = \"#ifdef USE_LOGDEPTHBUF\\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvFragDepth = 1.0 + gl_Position.w;\\n\t#else\\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/map_fragment.glsl\n\nTHREE.ShaderChunk[ 'map_fragment' ] = \"#ifdef USE_MAP\\n\tvec4 texelColor = texture2D( map, vUv );\\n\ttexelColor = mapTexelToLinear( texelColor );\\n\tdiffuseColor *= texelColor;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/map_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'map_pars_fragment' ] = \"#ifdef USE_MAP\\n\tuniform sampler2D map;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/map_particle_fragment.glsl\n\nTHREE.ShaderChunk[ 'map_particle_fragment' ] = \"#ifdef USE_MAP\\n\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/map_particle_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'map_particle_pars_fragment' ] = \"#ifdef USE_MAP\\n\tuniform vec4 offsetRepeat;\\n\tuniform sampler2D map;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/metalnessmap_fragment.glsl\n\nTHREE.ShaderChunk[ 'metalnessmap_fragment' ] = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\tmetalnessFactor *= texelMetalness.r;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/metalnessmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'metalnessmap_pars_fragment' ] = \"#ifdef USE_METALNESSMAP\\n\tuniform sampler2D metalnessMap;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/morphnormal_vertex.glsl\n\nTHREE.ShaderChunk[ 'morphnormal_vertex' ] = \"#ifdef USE_MORPHNORMALS\\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/morphtarget_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'morphtarget_pars_vertex' ] = \"#ifdef USE_MORPHTARGETS\\n\t#ifndef USE_MORPHNORMALS\\n\tuniform float morphTargetInfluences[ 8 ];\\n\t#else\\n\tuniform float morphTargetInfluences[ 4 ];\\n\t#endif\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/morphtarget_vertex.glsl\n\nTHREE.ShaderChunk[ 'morphtarget_vertex' ] = \"#ifdef USE_MORPHTARGETS\\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\t#ifndef USE_MORPHNORMALS\\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/normal_flip.glsl\n\nTHREE.ShaderChunk[ 'normal_flip' ] = \"#ifdef DOUBLE_SIDED\\n\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n#else\\n\tfloat flipNormal = 1.0;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/normal_fragment.glsl\n\nTHREE.ShaderChunk[ 'normal_fragment' ] = \"#ifdef FLAT_SHADED\\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\tvec3 normal = normalize( vNormal ) * flipNormal;\\n#endif\\n#ifdef USE_NORMALMAP\\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/normalmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'normalmap_pars_fragment' ] = \"#ifdef USE_NORMALMAP\\n\tuniform sampler2D normalMap;\\n\tuniform vec2 normalScale;\\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\\n\t\tvec2 st0 = dFdx( vUv.st );\\n\t\tvec2 st1 = dFdy( vUv.st );\\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\t\tvec3 N = normalize( surf_norm );\\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\t\tmapN.xy = normalScale * mapN.xy;\\n\t\tmat3 tsn = mat3( S, T, N );\\n\t\treturn normalize( tsn * mapN );\\n\t}\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/packing.glsl\n\nTHREE.ShaderChunk[ 'packing' ] = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n  return normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n  return 1.0 - 2.0 * rgb.xyz;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n  return ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n  return linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/premultiplied_alpha_fragment.glsl\n\nTHREE.ShaderChunk[ 'premultiplied_alpha_fragment' ] = \"#ifdef PREMULTIPLIED_ALPHA\\n\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/project_vertex.glsl\n\nTHREE.ShaderChunk[ 'project_vertex' ] = \"#ifdef USE_SKINNING\\n\tvec4 mvPosition = modelViewMatrix * skinned;\\n#else\\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\n#endif\\ngl_Position = projectionMatrix * mvPosition;\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/roughnessmap_fragment.glsl\n\nTHREE.ShaderChunk[ 'roughnessmap_fragment' ] = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\troughnessFactor *= texelRoughness.r;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/roughnessmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'roughnessmap_pars_fragment' ] = \"#ifdef USE_ROUGHNESSMAP\\n\tuniform sampler2D roughnessMap;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'shadowmap_pars_fragment' ] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\t#endif\\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\t}\\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\t\tvec2 f = fract( uv * size + 0.5 );\\n\t\tfloat a = mix( lb, lt, f.y );\\n\t\tfloat b = mix( rb, rt, f.y );\\n\t\tfloat c = mix( a, b, f.x );\\n\t\treturn c;\\n\t}\\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\t\tshadowCoord.xyz /= shadowCoord.w;\\n\t\tshadowCoord.z += shadowBias;\\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\t\tbool inFrustum = all( inFrustumVec );\\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\t\tbool frustumTest = all( frustumTestVec );\\n\t\tif ( frustumTest ) {\\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\\n\t\t\treturn (\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\\n\t\t\treturn (\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#else\\n\t\t\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\t\t#endif\\n\t\t}\\n\t\treturn 1.0;\\n\t}\\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\t\tvec3 absV = abs( v );\\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\t\tabsV *= scaleToCube;\\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\t\tvec2 planar = v.xy;\\n\t\tfloat almostATexel = 1.5 * texelSizeY;\\n\t\tfloat almostOne = 1.0 - almostATexel;\\n\t\tif ( absV.z >= almostOne ) {\\n\t\t\tif ( v.z > 0.0 )\\n\t\t\t\tplanar.x = 4.0 - v.x;\\n\t\t} else if ( absV.x >= almostOne ) {\\n\t\t\tfloat signX = sign( v.x );\\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\\n\t\t} else if ( absV.y >= almostOne ) {\\n\t\t\tfloat signY = sign( v.y );\\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\t\t\tplanar.y = v.z * signY - 2.0;\\n\t\t}\\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\t}\\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\t\tvec3 lightToPosition = shadowCoord.xyz;\\n\t\tvec3 bd3D = normalize( lightToPosition );\\n\t\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\t\t\treturn (\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#else\\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\t\t#endif\\n\t}\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'shadowmap_pars_vertex' ] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/shadowmap_vertex.glsl\n\nTHREE.ShaderChunk[ 'shadowmap_vertex' ] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/shadowmask_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'shadowmask_pars_fragment' ] = \"float getShadowMask() {\\n\tfloat shadow = 1.0;\\n\t#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\tDirectionalLight directionalLight;\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tdirectionalLight = directionalLights[ i ];\\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\tSpotLight spotLight;\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tspotLight = spotLights[ i ];\\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\tPointLight pointLight;\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tpointLight = pointLights[ i ];\\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#endif\\n\treturn shadow;\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/skinbase_vertex.glsl\n\nTHREE.ShaderChunk[ 'skinbase_vertex' ] = \"#ifdef USE_SKINNING\\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/skinning_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'skinning_pars_vertex' ] = \"#ifdef USE_SKINNING\\n\tuniform mat4 bindMatrix;\\n\tuniform mat4 bindMatrixInverse;\\n\t#ifdef BONE_TEXTURE\\n\t\tuniform sampler2D boneTexture;\\n\t\tuniform int boneTextureWidth;\\n\t\tuniform int boneTextureHeight;\\n\t\tmat4 getBoneMatrix( const in float i ) {\\n\t\t\tfloat j = i * 4.0;\\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\\n\t\t\ty = dy * ( y + 0.5 );\\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\t\t\treturn bone;\\n\t\t}\\n\t#else\\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\t\tmat4 getBoneMatrix( const in float i ) {\\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\\n\t\t\treturn bone;\\n\t\t}\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/skinning_vertex.glsl\n\nTHREE.ShaderChunk[ 'skinning_vertex' ] = \"#ifdef USE_SKINNING\\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\tvec4 skinned = vec4( 0.0 );\\n\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\tskinned  = bindMatrixInverse * skinned;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/skinnormal_vertex.glsl\n\nTHREE.ShaderChunk[ 'skinnormal_vertex' ] = \"#ifdef USE_SKINNING\\n\tmat4 skinMatrix = mat4( 0.0 );\\n\tskinMatrix += skinWeight.x * boneMatX;\\n\tskinMatrix += skinWeight.y * boneMatY;\\n\tskinMatrix += skinWeight.z * boneMatZ;\\n\tskinMatrix += skinWeight.w * boneMatW;\\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/specularmap_fragment.glsl\n\nTHREE.ShaderChunk[ 'specularmap_fragment' ] = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\tspecularStrength = texelSpecular.r;\\n#else\\n\tspecularStrength = 1.0;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/specularmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'specularmap_pars_fragment' ] = \"#ifdef USE_SPECULARMAP\\n\tuniform sampler2D specularMap;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/tonemapping_fragment.glsl\n\nTHREE.ShaderChunk[ 'tonemapping_fragment' ] = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/tonemapping_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'tonemapping_pars_fragment' ] = \"#define saturate(a) clamp( a, 0.0, 1.0 )\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n  return toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  color = max( vec3( 0.0 ), color - 0.004 );\\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/uv2_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'uv2_pars_fragment' ] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tvarying vec2 vUv2;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/uv2_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'uv2_pars_vertex' ] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tattribute vec2 uv2;\\n\tvarying vec2 vUv2;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/uv2_vertex.glsl\n\nTHREE.ShaderChunk[ 'uv2_vertex' ] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tvUv2 = uv2;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/uv_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'uv_pars_fragment' ] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvarying vec2 vUv;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/uv_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'uv_pars_vertex' ] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvarying vec2 vUv;\\n\tuniform vec4 offsetRepeat;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/uv_vertex.glsl\n\nTHREE.ShaderChunk[ 'uv_vertex' ] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/worldpos_vertex.glsl\n\nTHREE.ShaderChunk[ 'worldpos_vertex' ] = \"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\\n\t#ifdef USE_SKINNING\\n\t\tvec4 worldPosition = modelMatrix * skinned;\\n\t#else\\n\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/UniformsUtils.js\n\n/**\n * Uniform Utilities\n */\n\nTHREE.UniformsUtils = {\n\n\tmerge: function ( uniforms ) {\n\n\t\tvar merged = {};\n\n\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\n\t\t\tvar tmp = this.clone( uniforms[ u ] );\n\n\t\t\tfor ( var p in tmp ) {\n\n\t\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn merged;\n\n\t},\n\n\tclone: function ( uniforms_src ) {\n\n\t\tvar uniforms_dst = {};\n\n\t\tfor ( var u in uniforms_src ) {\n\n\t\t\tuniforms_dst[ u ] = {};\n\n\t\t\tfor ( var p in uniforms_src[ u ] ) {\n\n\t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\n\n\t\t\t\tif ( parameter_src instanceof THREE.Color ||\n\t\t\t\t\t parameter_src instanceof THREE.Vector2 ||\n\t\t\t\t\t parameter_src instanceof THREE.Vector3 ||\n\t\t\t\t\t parameter_src instanceof THREE.Vector4 ||\n\t\t\t\t\t parameter_src instanceof THREE.Matrix3 ||\n\t\t\t\t\t parameter_src instanceof THREE.Matrix4 ||\n\t\t\t\t\t parameter_src instanceof THREE.Texture ) {\n\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\n\n\t\t\t\t} else if ( Array.isArray( parameter_src ) ) {\n\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn uniforms_dst;\n\n\t}\n\n};\n\n// File:src/renderers/shaders/UniformsLib.js\n\n/**\n * Uniforms library for shared webgl shaders\n */\n\nTHREE.UniformsLib = {\n\n\tcommon: {\n\n\t\t\"diffuse\": { value: new THREE.Color( 0xeeeeee ) },\n\t\t\"opacity\": { value: 1.0 },\n\n\t\t\"map\": { value: null },\n\t\t\"offsetRepeat\": { value: new THREE.Vector4( 0, 0, 1, 1 ) },\n\n\t\t\"specularMap\": { value: null },\n\t\t\"alphaMap\": { value: null },\n\n\t\t\"envMap\": { value: null },\n\t\t\"flipEnvMap\": { value: - 1 },\n\t\t\"reflectivity\": { value: 1.0 },\n\t\t\"refractionRatio\": { value: 0.98 }\n\n\t},\n\n\taomap: {\n\n\t\t\"aoMap\": { value: null },\n\t\t\"aoMapIntensity\": { value: 1 }\n\n\t},\n\n\tlightmap: {\n\n\t\t\"lightMap\": { value: null },\n\t\t\"lightMapIntensity\": { value: 1 }\n\n\t},\n\n\temissivemap: {\n\n\t\t\"emissiveMap\": { value: null }\n\n\t},\n\n\tbumpmap: {\n\n\t\t\"bumpMap\": { value: null },\n\t\t\"bumpScale\": { value: 1 }\n\n\t},\n\n\tnormalmap: {\n\n\t\t\"normalMap\": { value: null },\n\t\t\"normalScale\": { value: new THREE.Vector2( 1, 1 ) }\n\n\t},\n\n\tdisplacementmap: {\n\n\t\t\"displacementMap\": { value: null },\n\t\t\"displacementScale\": { value: 1 },\n\t\t\"displacementBias\": { value: 0 }\n\n\t},\n\n\troughnessmap: {\n\n\t\t\"roughnessMap\": { value: null }\n\n\t},\n\n\tmetalnessmap: {\n\n\t\t\"metalnessMap\": { value: null }\n\n\t},\n\n\tfog: {\n\n\t\t\"fogDensity\": { value: 0.00025 },\n\t\t\"fogNear\": { value: 1 },\n\t\t\"fogFar\": { value: 2000 },\n\t\t\"fogColor\": { value: new THREE.Color( 0xffffff ) }\n\n\t},\n\n\tlights: {\n\n\t\t\"ambientLightColor\": { value: [] },\n\n\t\t\"directionalLights\": { value: [], properties: {\n\t\t\t\"direction\": {},\n\t\t\t\"color\": {},\n\n\t\t\t\"shadow\": {},\n\t\t\t\"shadowBias\": {},\n\t\t\t\"shadowRadius\": {},\n\t\t\t\"shadowMapSize\": {}\n\t\t} },\n\n\t\t\"directionalShadowMap\": { value: [] },\n\t\t\"directionalShadowMatrix\": { value: [] },\n\n\t\t\"spotLights\": { value: [], properties: {\n\t\t\t\"color\": {},\n\t\t\t\"position\": {},\n\t\t\t\"direction\": {},\n\t\t\t\"distance\": {},\n\t\t\t\"coneCos\": {},\n\t\t\t\"penumbraCos\": {},\n\t\t\t\"decay\": {},\n\n\t\t\t\"shadow\": {},\n\t\t\t\"shadowBias\": {},\n\t\t\t\"shadowRadius\": {},\n\t\t\t\"shadowMapSize\": {}\n\t\t} },\n\n\t\t\"spotShadowMap\": { value: [] },\n\t\t\"spotShadowMatrix\": { value: [] },\n\n\t\t\"pointLights\": { value: [], properties: {\n\t\t\t\"color\": {},\n\t\t\t\"position\": {},\n\t\t\t\"decay\": {},\n\t\t\t\"distance\": {},\n\n\t\t\t\"shadow\": {},\n\t\t\t\"shadowBias\": {},\n\t\t\t\"shadowRadius\": {},\n\t\t\t\"shadowMapSize\": {}\n\t\t} },\n\n\t\t\"pointShadowMap\": { value: [] },\n\t\t\"pointShadowMatrix\": { value: [] },\n\n\t\t\"hemisphereLights\": { value: [], properties: {\n\t\t\t\"direction\": {},\n\t\t\t\"skyColor\": {},\n\t\t\t\"groundColor\": {}\n\t\t} }\n\n\t},\n\n\tpoints: {\n\n\t\t\"diffuse\": { value: new THREE.Color( 0xeeeeee ) },\n\t\t\"opacity\": { value: 1.0 },\n\t\t\"size\": { value: 1.0 },\n\t\t\"scale\": { value: 1.0 },\n\t\t\"map\": { value: null },\n\t\t\"offsetRepeat\": { value: new THREE.Vector4( 0, 0, 1, 1 ) }\n\n\t}\n\n};\n\n// File:src/renderers/shaders/ShaderLib/cube_frag.glsl\n\nTHREE.ShaderChunk[ 'cube_frag' ] = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\t#include <logdepthbuf_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/cube_vert.glsl\n\nTHREE.ShaderChunk[ 'cube_vert' ] = \"varying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\tvWorldPosition = transformDirection( position, modelMatrix );\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/depth_frag.glsl\n\nTHREE.ShaderChunk[ 'depth_frag' ] = \"#if DEPTH_PACKING == 3200\\n\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( 1.0 );\\n\t#if DEPTH_PACKING == 3200\\n\t\tdiffuseColor.a = opacity;\\n\t#endif\\n\t#include <map_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <logdepthbuf_fragment>\\n\t#if DEPTH_PACKING == 3200\\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\n\t#elif DEPTH_PACKING == 3201\\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\t#endif\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/depth_vert.glsl\n\nTHREE.ShaderChunk[ 'depth_vert' ] = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/distanceRGBA_frag.glsl\n\nTHREE.ShaderChunk[ 'distanceRGBA_frag' ] = \"uniform vec3 lightPos;\\nvarying vec4 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\t#include <clipping_planes_fragment>\\n\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/distanceRGBA_vert.glsl\n\nTHREE.ShaderChunk[ 'distanceRGBA_vert' ] = \"varying vec4 vWorldPosition;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <skinbase_vertex>\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <clipping_planes_vertex>\\n\tvWorldPosition = worldPosition;\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/equirect_frag.glsl\n\nTHREE.ShaderChunk[ 'equirect_frag' ] = \"uniform sampler2D tEquirect;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec3 direction = normalize( vWorldPosition );\\n\tvec2 sampleUV;\\n\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n\t#include <logdepthbuf_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/equirect_vert.glsl\n\nTHREE.ShaderChunk[ 'equirect_vert' ] = \"varying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\tvWorldPosition = transformDirection( position, modelMatrix );\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/linedashed_frag.glsl\n\nTHREE.ShaderChunk[ 'linedashed_frag' ] = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\t\tdiscard;\\n\t}\\n\tvec3 outgoingLight = vec3( 0.0 );\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <color_fragment>\\n\toutgoingLight = diffuseColor.rgb;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/linedashed_vert.glsl\n\nTHREE.ShaderChunk[ 'linedashed_vert' ] = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <color_vertex>\\n\tvLineDistance = scale * lineDistance;\\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\tgl_Position = projectionMatrix * mvPosition;\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/meshbasic_frag.glsl\n\nTHREE.ShaderChunk[ 'meshbasic_frag' ] = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\tReflectedLight reflectedLight;\\n\treflectedLight.directDiffuse = vec3( 0.0 );\\n\treflectedLight.directSpecular = vec3( 0.0 );\\n\treflectedLight.indirectDiffuse = diffuseColor.rgb;\\n\treflectedLight.indirectSpecular = vec3( 0.0 );\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\t#include <normal_flip>\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/meshbasic_vert.glsl\n\nTHREE.ShaderChunk[ 'meshbasic_vert' ] = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <skinbase_vertex>\\n\t#ifdef USE_ENVMAP\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n\t#endif\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <clipping_planes_vertex>\\n\t#include <envmap_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/meshlambert_frag.glsl\n\nTHREE.ShaderChunk[ 'meshlambert_frag' ] = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <emissivemap_fragment>\\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\t#include <lightmap_fragment>\\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\t#ifdef DOUBLE_SIDED\\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\t#else\\n\t\treflectedLight.directDiffuse = vLightFront;\\n\t#endif\\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\t#include <normal_flip>\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/meshlambert_vert.glsl\n\nTHREE.ShaderChunk[ 'meshlambert_vert' ] = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <envmap_vertex>\\n\t#include <lights_lambert_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/meshphong_frag.glsl\n\nTHREE.ShaderChunk[ 'meshphong_frag' ] = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <normal_flip>\\n\t#include <normal_fragment>\\n\t#include <emissivemap_fragment>\\n\t#include <lights_phong_fragment>\\n\t#include <lights_template>\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/meshphong_vert.glsl\n\nTHREE.ShaderChunk[ 'meshphong_vert' ] = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\tvNormal = normalize( transformedNormal );\\n#endif\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\tvViewPosition = - mvPosition.xyz;\\n\t#include <worldpos_vertex>\\n\t#include <envmap_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/meshphysical_frag.glsl\n\nTHREE.ShaderChunk[ 'meshphysical_frag' ] = \"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifndef STANDARD\\n\tuniform float clearCoat;\\n\tuniform float clearCoatRoughness;\\n#endif\\nuniform float envMapIntensity;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <roughnessmap_fragment>\\n\t#include <metalnessmap_fragment>\\n\t#include <normal_flip>\\n\t#include <normal_fragment>\\n\t#include <emissivemap_fragment>\\n\t#include <lights_physical_fragment>\\n\t#include <lights_template>\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/meshphysical_vert.glsl\n\nTHREE.ShaderChunk[ 'meshphysical_vert' ] = \"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\tvNormal = normalize( transformedNormal );\\n#endif\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\tvViewPosition = - mvPosition.xyz;\\n\t#include <worldpos_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/normal_frag.glsl\n\nTHREE.ShaderChunk[ 'normal_frag' ] = \"uniform float opacity;\\nvarying vec3 vNormal;\\n#include <common>\\n#include <packing>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tgl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\\n\t#include <logdepthbuf_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/normal_vert.glsl\n\nTHREE.ShaderChunk[ 'normal_vert' ] = \"varying vec3 vNormal;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\tvNormal = normalize( normalMatrix * normal );\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/points_frag.glsl\n\nTHREE.ShaderChunk[ 'points_frag' ] = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec3 outgoingLight = vec3( 0.0 );\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_particle_fragment>\\n\t#include <color_fragment>\\n\t#include <alphatest_fragment>\\n\toutgoingLight = diffuseColor.rgb;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/points_vert.glsl\n\nTHREE.ShaderChunk[ 'points_vert' ] = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <color_vertex>\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#ifdef USE_SIZEATTENUATION\\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\t#else\\n\t\tgl_PointSize = size;\\n\t#endif\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/shadow_frag.glsl\n\nTHREE.ShaderChunk[ 'shadow_frag' ] = \"uniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/shadow_vert.glsl\n\nTHREE.ShaderChunk[ 'shadow_vert' ] = \"#include <shadowmap_pars_vertex>\\nvoid main() {\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib.js\n\n/**\n * Webgl Shader Library for three.js\n *\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n */\n\n\nTHREE.ShaderLib = {\n\n\t'basic': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\tTHREE.UniformsLib[ 'aomap' ],\n\t\t\tTHREE.UniformsLib[ 'fog' ]\n\n\t\t] ),\n\n\t\tvertexShader: THREE.ShaderChunk[ 'meshbasic_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'meshbasic_frag' ]\n\n\t},\n\n\t'lambert': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\tTHREE.UniformsLib[ 'aomap' ],\n\t\t\tTHREE.UniformsLib[ 'lightmap' ],\n\t\t\tTHREE.UniformsLib[ 'emissivemap' ],\n\t\t\tTHREE.UniformsLib[ 'fog' ],\n\t\t\tTHREE.UniformsLib[ 'lights' ],\n\n\t\t\t{\n\t\t\t\t\"emissive\" : { value: new THREE.Color( 0x000000 ) }\n\t\t\t}\n\n\t\t] ),\n\n\t\tvertexShader: THREE.ShaderChunk[ 'meshlambert_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'meshlambert_frag' ]\n\n\t},\n\n\t'phong': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\tTHREE.UniformsLib[ 'aomap' ],\n\t\t\tTHREE.UniformsLib[ 'lightmap' ],\n\t\t\tTHREE.UniformsLib[ 'emissivemap' ],\n\t\t\tTHREE.UniformsLib[ 'bumpmap' ],\n\t\t\tTHREE.UniformsLib[ 'normalmap' ],\n\t\t\tTHREE.UniformsLib[ 'displacementmap' ],\n\t\t\tTHREE.UniformsLib[ 'fog' ],\n\t\t\tTHREE.UniformsLib[ 'lights' ],\n\n\t\t\t{\n\t\t\t\t\"emissive\" : { value: new THREE.Color( 0x000000 ) },\n\t\t\t\t\"specular\" : { value: new THREE.Color( 0x111111 ) },\n\t\t\t\t\"shininess\": { value: 30 }\n\t\t\t}\n\n\t\t] ),\n\n\t\tvertexShader: THREE.ShaderChunk[ 'meshphong_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'meshphong_frag' ]\n\n\t},\n\n\t'standard': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\tTHREE.UniformsLib[ 'aomap' ],\n\t\t\tTHREE.UniformsLib[ 'lightmap' ],\n\t\t\tTHREE.UniformsLib[ 'emissivemap' ],\n\t\t\tTHREE.UniformsLib[ 'bumpmap' ],\n\t\t\tTHREE.UniformsLib[ 'normalmap' ],\n\t\t\tTHREE.UniformsLib[ 'displacementmap' ],\n\t\t\tTHREE.UniformsLib[ 'roughnessmap' ],\n\t\t\tTHREE.UniformsLib[ 'metalnessmap' ],\n\t\t\tTHREE.UniformsLib[ 'fog' ],\n\t\t\tTHREE.UniformsLib[ 'lights' ],\n\n\t\t\t{\n\t\t\t\t\"emissive\" : { value: new THREE.Color( 0x000000 ) },\n\t\t\t\t\"roughness\": { value: 0.5 },\n\t\t\t\t\"metalness\": { value: 0 },\n\t\t\t\t\"envMapIntensity\" : { value: 1 }, // temporary\n\t\t\t}\n\n\t\t] ),\n\n\t\tvertexShader: THREE.ShaderChunk[ 'meshphysical_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'meshphysical_frag' ]\n\n\t},\n\n\t'points': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ 'points' ],\n\t\t\tTHREE.UniformsLib[ 'fog' ]\n\n\t\t] ),\n\n\t\tvertexShader: THREE.ShaderChunk[ 'points_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'points_frag' ]\n\n\t},\n\n\t'dashed': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\tTHREE.UniformsLib[ 'fog' ],\n\n\t\t\t{\n\t\t\t\t\"scale\"    : { value: 1 },\n\t\t\t\t\"dashSize\" : { value: 1 },\n\t\t\t\t\"totalSize\": { value: 2 }\n\t\t\t}\n\n\t\t] ),\n\n\t\tvertexShader: THREE.ShaderChunk[ 'linedashed_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'linedashed_frag' ]\n\n\t},\n\n\t'depth': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\tTHREE.UniformsLib[ 'displacementmap' ]\n\n\t\t] ),\n\n\t\tvertexShader: THREE.ShaderChunk[ 'depth_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'depth_frag' ]\n\n\t},\n\n\t'normal': {\n\n\t\tuniforms: {\n\n\t\t\t\"opacity\" : { value: 1.0 }\n\n\t\t},\n\n\t\tvertexShader: THREE.ShaderChunk[ 'normal_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'normal_frag' ]\n\n\t},\n\n\t/* -------------------------------------------------------------------------\n\t//\tCube map shader\n\t ------------------------------------------------------------------------- */\n\n\t'cube': {\n\n\t\tuniforms: {\n\t\t\t\"tCube\": { value: null },\n\t\t\t\"tFlip\": { value: - 1 }\n\t\t},\n\n\t\tvertexShader: THREE.ShaderChunk[ 'cube_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'cube_frag' ]\n\n\t},\n\n\t/* -------------------------------------------------------------------------\n\t//\tCube map shader\n\t ------------------------------------------------------------------------- */\n\n\t'equirect': {\n\n\t\tuniforms: {\n\t\t\t\"tEquirect\": { value: null },\n\t\t\t\"tFlip\": { value: - 1 }\n\t\t},\n\n\t\tvertexShader: THREE.ShaderChunk[ 'equirect_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'equirect_frag' ]\n\n\t},\n\n\t'distanceRGBA': {\n\n\t\tuniforms: {\n\n\t\t\t\"lightPos\": { value: new THREE.Vector3() }\n\n\t\t},\n\n\t\tvertexShader: THREE.ShaderChunk[ 'distanceRGBA_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'distanceRGBA_frag' ]\n\n\t}\n\n};\n\nTHREE.ShaderLib[ 'physical' ] = {\n\n\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\tTHREE.ShaderLib[ 'standard' ].uniforms,\n\n\t\t{\n\t\t\t\"clearCoat\": { value: 0 },\n\t\t\t\"clearCoatRoughness\": { value: 0 }\n\t\t}\n\n\t] ),\n\n\tvertexShader: THREE.ShaderChunk[ 'meshphysical_vert' ],\n\tfragmentShader: THREE.ShaderChunk[ 'meshphysical_frag' ]\n\n};\n\n// File:src/renderers/WebGLRenderer.js\n\n/**\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author szimek / https://github.com/szimek/\n * @author tschw\n */\n\nTHREE.WebGLRenderer = function ( parameters ) {\n\n\tconsole.log( 'THREE.WebGLRenderer', THREE.REVISION );\n\n\tparameters = parameters || {};\n\n\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;\n\n\tvar lights = [];\n\n\tvar opaqueObjects = [];\n\tvar opaqueObjectsLastIndex = - 1;\n\tvar transparentObjects = [];\n\tvar transparentObjectsLastIndex = - 1;\n\n\tvar morphInfluences = new Float32Array( 8 );\n\n\tvar sprites = [];\n\tvar lensFlares = [];\n\n\t// public properties\n\n\tthis.domElement = _canvas;\n\tthis.context = null;\n\n\t// clearing\n\n\tthis.autoClear = true;\n\tthis.autoClearColor = true;\n\tthis.autoClearDepth = true;\n\tthis.autoClearStencil = true;\n\n\t// scene graph\n\n\tthis.sortObjects = true;\n\n\t// user-defined clipping\n\n\tthis.clippingPlanes = [];\n\tthis.localClippingEnabled = false;\n\n\t// physically based shading\n\n\tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\tthis.gammaInput = false;\n\tthis.gammaOutput = false;\n\n\t// physical lights\n\n\tthis.physicallyCorrectLights = false;\n\n\t// tone mapping\n\n\tthis.toneMapping = THREE.LinearToneMapping;\n\tthis.toneMappingExposure = 1.0;\n\tthis.toneMappingWhitePoint = 1.0;\n\n\t// morphs\n\n\tthis.maxMorphTargets = 8;\n\tthis.maxMorphNormals = 4;\n\n\t// internal properties\n\n\tvar _this = this,\n\n\t// internal state cache\n\n\t_currentProgram = null,\n\t_currentRenderTarget = null,\n\t_currentFramebuffer = null,\n\t_currentMaterialId = - 1,\n\t_currentGeometryProgram = '',\n\t_currentCamera = null,\n\n\t_currentScissor = new THREE.Vector4(),\n\t_currentScissorTest = null,\n\n\t_currentViewport = new THREE.Vector4(),\n\n\t//\n\n\t_usedTextureUnits = 0,\n\n\t//\n\n\t_clearColor = new THREE.Color( 0x000000 ),\n\t_clearAlpha = 0,\n\n\t_width = _canvas.width,\n\t_height = _canvas.height,\n\n\t_pixelRatio = 1,\n\n\t_scissor = new THREE.Vector4( 0, 0, _width, _height ),\n\t_scissorTest = false,\n\n\t_viewport = new THREE.Vector4( 0, 0, _width, _height ),\n\n\t// frustum\n\n\t_frustum = new THREE.Frustum(),\n\n\t// clipping\n\n\t_clipping = new THREE.WebGLClipping(),\n\t_clippingEnabled = false,\n\t_localClippingEnabled = false,\n\n\t_sphere = new THREE.Sphere(),\n\n\t// camera matrices cache\n\n\t_projScreenMatrix = new THREE.Matrix4(),\n\n\t_vector3 = new THREE.Vector3(),\n\n\t// light arrays cache\n\n\t_lights = {\n\n\t\thash: '',\n\n\t\tambient: [ 0, 0, 0 ],\n\t\tdirectional: [],\n\t\tdirectionalShadowMap: [],\n\t\tdirectionalShadowMatrix: [],\n\t\tspot: [],\n\t\tspotShadowMap: [],\n\t\tspotShadowMatrix: [],\n\t\tpoint: [],\n\t\tpointShadowMap: [],\n\t\tpointShadowMatrix: [],\n\t\themi: [],\n\n\t\tshadows: []\n\n\t},\n\n\t// info\n\n\t_infoRender = {\n\n\t\tcalls: 0,\n\t\tvertices: 0,\n\t\tfaces: 0,\n\t\tpoints: 0\n\n\t};\n\n\tthis.info = {\n\n\t\trender: _infoRender,\n\t\tmemory: {\n\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\n\t\t},\n\t\tprograms: null\n\n\t};\n\n\n\t// initialize\n\n\tvar _gl;\n\n\ttry {\n\n\t\tvar attributes = {\n\t\t\talpha: _alpha,\n\t\t\tdepth: _depth,\n\t\t\tstencil: _stencil,\n\t\t\tantialias: _antialias,\n\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer\n\t\t};\n\n\t\t_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );\n\n\t\tif ( _gl === null ) {\n\n\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\n\t\t\t\tthrow 'Error creating WebGL context with your selected attributes.';\n\n\t\t\t} else {\n\n\t\t\t\tthrow 'Error creating WebGL context.';\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t};\n\n\t\t}\n\n\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\n\t} catch ( error ) {\n\n\t\tconsole.error( 'THREE.WebGLRenderer: ' + error );\n\n\t}\n\n\tvar extensions = new THREE.WebGLExtensions( _gl );\n\n\textensions.get( 'WEBGL_depth_texture' );\n\textensions.get( 'OES_texture_float' );\n\textensions.get( 'OES_texture_float_linear' );\n\textensions.get( 'OES_texture_half_float' );\n\textensions.get( 'OES_texture_half_float_linear' );\n\textensions.get( 'OES_standard_derivatives' );\n\textensions.get( 'ANGLE_instanced_arrays' );\n\n\tif ( extensions.get( 'OES_element_index_uint' ) ) {\n\n\t\tTHREE.BufferGeometry.MaxIndex = 4294967296;\n\n\t}\n\n\tvar capabilities = new THREE.WebGLCapabilities( _gl, extensions, parameters );\n\n\tvar state = new THREE.WebGLState( _gl, extensions, paramThreeToGL );\n\tvar properties = new THREE.WebGLProperties();\n\tvar textures = new THREE.WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, this.info );\n\tvar objects = new THREE.WebGLObjects( _gl, properties, this.info );\n\tvar programCache = new THREE.WebGLPrograms( this, capabilities );\n\tvar lightCache = new THREE.WebGLLights();\n\n\tthis.info.programs = programCache.programs;\n\n\tvar bufferRenderer = new THREE.WebGLBufferRenderer( _gl, extensions, _infoRender );\n\tvar indexedBufferRenderer = new THREE.WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );\n\n\t//\n\n\tvar backgroundCamera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar backgroundCamera2 = new THREE.PerspectiveCamera();\n\tvar backgroundPlaneMesh = new THREE.Mesh(\n\t\tnew THREE.PlaneBufferGeometry( 2, 2 ),\n\t\tnew THREE.MeshBasicMaterial( { depthTest: false, depthWrite: false } )\n\t);\n\tvar backgroundBoxShader = THREE.ShaderLib[ 'cube' ];\n\tvar backgroundBoxMesh = new THREE.Mesh(\n\t\tnew THREE.BoxBufferGeometry( 5, 5, 5 ),\n\t\tnew THREE.ShaderMaterial( {\n\t\t\tuniforms: backgroundBoxShader.uniforms,\n\t\t\tvertexShader: backgroundBoxShader.vertexShader,\n\t\t\tfragmentShader: backgroundBoxShader.fragmentShader,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\tside: THREE.BackSide\n\t\t} )\n\t);\n\tobjects.update( backgroundPlaneMesh );\n\tobjects.update( backgroundBoxMesh );\n\n\t//\n\n\tfunction getTargetPixelRatio() {\n\n\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t}\n\n\tfunction glClearColor( r, g, b, a ) {\n\n\t\tif ( _premultipliedAlpha === true ) {\n\n\t\t\tr *= a; g *= a; b *= a;\n\n\t\t}\n\n\t\tstate.clearColor( r, g, b, a );\n\n\t}\n\n\tfunction setDefaultGLState() {\n\n\t\tstate.init();\n\n\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\n\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\n\n\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n\t}\n\n\tfunction resetGLState() {\n\n\t\t_currentProgram = null;\n\t\t_currentCamera = null;\n\n\t\t_currentGeometryProgram = '';\n\t\t_currentMaterialId = - 1;\n\n\t\tstate.reset();\n\n\t}\n\n\tsetDefaultGLState();\n\n\tthis.context = _gl;\n\tthis.capabilities = capabilities;\n\tthis.extensions = extensions;\n\tthis.properties = properties;\n\tthis.state = state;\n\n\t// shadow map\n\n\tvar shadowMap = new THREE.WebGLShadowMap( this, _lights, objects );\n\n\tthis.shadowMap = shadowMap;\n\n\n\t// Plugins\n\n\tvar spritePlugin = new THREE.SpritePlugin( this, sprites );\n\tvar lensFlarePlugin = new THREE.LensFlarePlugin( this, lensFlares );\n\n\t// API\n\n\tthis.getContext = function () {\n\n\t\treturn _gl;\n\n\t};\n\n\tthis.getContextAttributes = function () {\n\n\t\treturn _gl.getContextAttributes();\n\n\t};\n\n\tthis.forceContextLoss = function () {\n\n\t\textensions.get( 'WEBGL_lose_context' ).loseContext();\n\n\t};\n\n\tthis.getMaxAnisotropy = function () {\n\n\t\treturn capabilities.getMaxAnisotropy();\n\n\t};\n\n\tthis.getPrecision = function () {\n\n\t\treturn capabilities.precision;\n\n\t};\n\n\tthis.getPixelRatio = function () {\n\n\t\treturn _pixelRatio;\n\n\t};\n\n\tthis.setPixelRatio = function ( value ) {\n\n\t\tif ( value === undefined ) return;\n\n\t\t_pixelRatio = value;\n\n\t\tthis.setSize( _viewport.z, _viewport.w, false );\n\n\t};\n\n\tthis.getSize = function () {\n\n\t\treturn {\n\t\t\twidth: _width,\n\t\t\theight: _height\n\t\t};\n\n\t};\n\n\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\t_width = width;\n\t\t_height = height;\n\n\t\t_canvas.width = width * _pixelRatio;\n\t\t_canvas.height = height * _pixelRatio;\n\n\t\tif ( updateStyle !== false ) {\n\n\t\t\t_canvas.style.width = width + 'px';\n\t\t\t_canvas.style.height = height + 'px';\n\n\t\t}\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\tstate.viewport( _viewport.set( x, y, width, height ) );\n\n\t};\n\n\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\tstate.scissor( _scissor.set( x, y, width, height ) );\n\n\t};\n\n\tthis.setScissorTest = function ( boolean ) {\n\n\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t};\n\n\t// Clearing\n\n\tthis.getClearColor = function () {\n\n\t\treturn _clearColor;\n\n\t};\n\n\tthis.setClearColor = function ( color, alpha ) {\n\n\t\t_clearColor.set( color );\n\n\t\t_clearAlpha = alpha !== undefined ? alpha : 1;\n\n\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n\t};\n\n\tthis.getClearAlpha = function () {\n\n\t\treturn _clearAlpha;\n\n\t};\n\n\tthis.setClearAlpha = function ( alpha ) {\n\n\t\t_clearAlpha = alpha;\n\n\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n\t};\n\n\tthis.clear = function ( color, depth, stencil ) {\n\n\t\tvar bits = 0;\n\n\t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\n\t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\n\t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t_gl.clear( bits );\n\n\t};\n\n\tthis.clearColor = function () {\n\n\t\tthis.clear( true, false, false );\n\n\t};\n\n\tthis.clearDepth = function () {\n\n\t\tthis.clear( false, true, false );\n\n\t};\n\n\tthis.clearStencil = function () {\n\n\t\tthis.clear( false, false, true );\n\n\t};\n\n\tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\n\n\t\tthis.setRenderTarget( renderTarget );\n\t\tthis.clear( color, depth, stencil );\n\n\t};\n\n\t// Reset\n\n\tthis.resetGLState = resetGLState;\n\n\tthis.dispose = function() {\n\n\t\ttransparentObjects = [];\n\t\ttransparentObjectsLastIndex = -1;\n\t\topaqueObjects = [];\n\t\topaqueObjectsLastIndex = -1;\n\n\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\n\t};\n\n\t// Events\n\n\tfunction onContextLost( event ) {\n\n\t\tevent.preventDefault();\n\n\t\tresetGLState();\n\t\tsetDefaultGLState();\n\n\t\tproperties.clear();\n\n\t}\n\n\tfunction onMaterialDispose( event ) {\n\n\t\tvar material = event.target;\n\n\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\tdeallocateMaterial( material );\n\n\t}\n\n\t// Buffer deallocation\n\n\tfunction deallocateMaterial( material ) {\n\n\t\treleaseMaterialProgramReference( material );\n\n\t\tproperties.delete( material );\n\n\t}\n\n\n\tfunction releaseMaterialProgramReference( material ) {\n\n\t\tvar programInfo = properties.get( material ).program;\n\n\t\tmaterial.program = undefined;\n\n\t\tif ( programInfo !== undefined ) {\n\n\t\t\tprogramCache.releaseProgram( programInfo );\n\n\t\t}\n\n\t}\n\n\t// Buffer rendering\n\n\tthis.renderBufferImmediate = function ( object, program, material ) {\n\n\t\tstate.initAttributes();\n\n\t\tvar buffers = properties.get( object );\n\n\t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\n\t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\n\t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\n\t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\n\n\t\tvar attributes = program.getAttributes();\n\n\t\tif ( object.hasPositions ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( attributes.position );\n\t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasNormals ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\n\n\t\t\tif ( material.type !== 'MeshPhongMaterial' && material.type !== 'MeshStandardMaterial' && material.type !== 'MeshPhysicalMaterial' && material.shading === THREE.FlatShading ) {\n\n\t\t\t\tfor ( var i = 0, l = object.count * 3; i < l; i += 9 ) {\n\n\t\t\t\t\tvar array = object.normalArray;\n\n\t\t\t\t\tvar nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;\n\t\t\t\t\tvar ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;\n\t\t\t\t\tvar nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;\n\n\t\t\t\t\tarray[ i + 0 ] = nx;\n\t\t\t\t\tarray[ i + 1 ] = ny;\n\t\t\t\t\tarray[ i + 2 ] = nz;\n\n\t\t\t\t\tarray[ i + 3 ] = nx;\n\t\t\t\t\tarray[ i + 4 ] = ny;\n\t\t\t\t\tarray[ i + 5 ] = nz;\n\n\t\t\t\t\tarray[ i + 6 ] = nx;\n\t\t\t\t\tarray[ i + 7 ] = ny;\n\t\t\t\t\tarray[ i + 8 ] = nz;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( attributes.normal );\n\n\t\t\t_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasUvs && material.map ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( attributes.uv );\n\n\t\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasColors && material.vertexColors !== THREE.NoColors ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( attributes.color );\n\n\t\t\t_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tstate.disableUnusedAttributes();\n\n\t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\n\n\t\tobject.count = 0;\n\n\t};\n\n\tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\n\n\t\tsetMaterial( material );\n\n\t\tvar program = setProgram( camera, fog, material, object );\n\n\t\tvar updateBuffers = false;\n\t\tvar geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;\n\n\t\tif ( geometryProgram !== _currentGeometryProgram ) {\n\n\t\t\t_currentGeometryProgram = geometryProgram;\n\t\t\tupdateBuffers = true;\n\n\t\t}\n\n\t\t// morph targets\n\n\t\tvar morphTargetInfluences = object.morphTargetInfluences;\n\n\t\tif ( morphTargetInfluences !== undefined ) {\n\n\t\t\tvar activeInfluences = [];\n\n\t\t\tfor ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {\n\n\t\t\t\tvar influence = morphTargetInfluences[ i ];\n\t\t\t\tactiveInfluences.push( [ influence, i ] );\n\n\t\t\t}\n\n\t\t\tactiveInfluences.sort( absNumericalSort );\n\n\t\t\tif ( activeInfluences.length > 8 ) {\n\n\t\t\t\tactiveInfluences.length = 8;\n\n\t\t\t}\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {\n\n\t\t\t\tvar influence = activeInfluences[ i ];\n\t\t\t\tmorphInfluences[ i ] = influence[ 0 ];\n\n\t\t\t\tif ( influence[ 0 ] !== 0 ) {\n\n\t\t\t\t\tvar index = influence[ 1 ];\n\n\t\t\t\t\tif ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );\n\t\t\t\t\tif ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );\n\t\t\t\t\tif ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tprogram.getUniforms().setValue(\n\t\t\t\t\t_gl, 'morphTargetInfluences', morphInfluences );\n\n\t\t\tupdateBuffers = true;\n\n\t\t}\n\n\t\t//\n\n\t\tvar index = geometry.index;\n\t\tvar position = geometry.attributes.position;\n\n\t\tif ( material.wireframe === true ) {\n\n\t\t\tindex = objects.getWireframeAttribute( geometry );\n\n\t\t}\n\n\t\tvar renderer;\n\n\t\tif ( index !== null ) {\n\n\t\t\trenderer = indexedBufferRenderer;\n\t\t\trenderer.setIndex( index );\n\n\t\t} else {\n\n\t\t\trenderer = bufferRenderer;\n\n\t\t}\n\n\t\tif ( updateBuffers ) {\n\n\t\t\tsetupVertexAttributes( material, program, geometry );\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar dataStart = 0;\n\t\tvar dataCount = Infinity;\n\n\t\tif ( index !== null ) {\n\n\t\t\tdataCount = index.count;\n\n\t\t} else if ( position !== undefined ) {\n\n\t\t\tdataCount = position.count;\n\n\t\t}\n\n\t\tvar rangeStart = geometry.drawRange.start;\n\t\tvar rangeCount = geometry.drawRange.count;\n\n\t\tvar groupStart = group !== null ? group.start : 0;\n\t\tvar groupCount = group !== null ? group.count : Infinity;\n\n\t\tvar drawStart = Math.max( dataStart, rangeStart, groupStart );\n\t\tvar drawEnd = Math.min( dataStart + dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n\t\t//\n\n\t\tif ( object instanceof THREE.Mesh ) {\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t} else {\n\n\t\t\t\tswitch ( object.drawMode ) {\n\n\t\t\t\t\tcase THREE.TrianglesDrawMode:\n\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.TriangleStripDrawMode:\n\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_STRIP );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.TriangleFanDrawMode:\n\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_FAN );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t} else if ( object instanceof THREE.Line ) {\n\n\t\t\tvar lineWidth = material.linewidth;\n\n\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\n\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\tif ( object instanceof THREE.LineSegments ) {\n\n\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setMode( _gl.LINE_STRIP );\n\n\t\t\t}\n\n\t\t} else if ( object instanceof THREE.Points ) {\n\n\t\t\trenderer.setMode( _gl.POINTS );\n\n\t\t}\n\n\t\tif ( geometry instanceof THREE.InstancedBufferGeometry ) {\n\n\t\t\tif ( geometry.maxInstancedCount > 0 ) {\n\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t}\n\n\t};\n\n\tfunction setupVertexAttributes( material, program, geometry, startIndex ) {\n\n\t\tvar extension;\n\n\t\tif ( geometry instanceof THREE.InstancedBufferGeometry ) {\n\n\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( startIndex === undefined ) startIndex = 0;\n\n\t\tstate.initAttributes();\n\n\t\tvar geometryAttributes = geometry.attributes;\n\n\t\tvar programAttributes = program.getAttributes();\n\n\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\tfor ( var name in programAttributes ) {\n\n\t\t\tvar programAttribute = programAttributes[ name ];\n\n\t\t\tif ( programAttribute >= 0 ) {\n\n\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\tvar type = _gl.FLOAT;\n\t\t\t\t\tvar array = geometryAttribute.array;\n\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\n\t\t\t\t\tif ( array instanceof Float32Array ) {\n\n\t\t\t\t\t\ttype = _gl.FLOAT;\n\n\t\t\t\t\t} else if ( array instanceof Float64Array ) {\n\n\t\t\t\t\t\tconsole.warn(\"Unsupported data buffer format: Float64Array\");\n\n\t\t\t\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\t\t\t\ttype = _gl.UNSIGNED_SHORT;\n\n\t\t\t\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\t\t\t\ttype = _gl.SHORT;\n\n\t\t\t\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\t\t\t\ttype = _gl.UNSIGNED_INT;\n\n\t\t\t\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\t\t\t\ttype = _gl.INT;\n\n\t\t\t\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\t\t\t\ttype = _gl.BYTE;\n\n\t\t\t\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\t\t\t\ttype = _gl.UNSIGNED_BYTE;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\t\t\t\t\tvar buffer = objects.getAttributeBuffer( geometryAttribute );\n\n\t\t\t\t\tif ( geometryAttribute instanceof THREE.InterleavedBufferAttribute ) {\n\n\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n\t\t\t\t\t\tif ( data instanceof THREE.InstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );\n\n\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( geometryAttribute instanceof THREE.InstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );\n\n\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * geometryAttribute.array.BYTES_PER_ELEMENT );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.disableUnusedAttributes();\n\n\t}\n\n\t// Sorting\n\n\tfunction absNumericalSort( a, b ) {\n\n\t\treturn Math.abs( b[ 0 ] ) - Math.abs( a[ 0 ] );\n\n\t}\n\n\tfunction painterSortStable ( a, b ) {\n\n\t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\n\t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\n\t\t} else if ( a.material.id !== b.material.id ) {\n\n\t\t\treturn a.material.id - b.material.id;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn a.z - b.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\tfunction reversePainterSortStable ( a, b ) {\n\n\t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\n\t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\n\t\t} if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\t// Rendering\n\n\tthis.render = function ( scene, camera, renderTarget, forceClear ) {\n\n\t\tif ( camera instanceof THREE.Camera === false ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar fog = scene.fog;\n\n\t\t// reset caching for this frame\n\n\t\t_currentGeometryProgram = '';\n\t\t_currentMaterialId = - 1;\n\t\t_currentCamera = null;\n\n\t\t// update scene graph\n\n\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t// update camera matrices and frustum\n\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\tlights.length = 0;\n\n\t\topaqueObjectsLastIndex = - 1;\n\t\ttransparentObjectsLastIndex = - 1;\n\n\t\tsprites.length = 0;\n\t\tlensFlares.length = 0;\n\n\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n\t\tprojectObject( scene, camera );\n\n\t\topaqueObjects.length = opaqueObjectsLastIndex + 1;\n\t\ttransparentObjects.length = transparentObjectsLastIndex + 1;\n\n\t\tif ( _this.sortObjects === true ) {\n\n\t\t\topaqueObjects.sort( painterSortStable );\n\t\t\ttransparentObjects.sort( reversePainterSortStable );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( _clippingEnabled ) _clipping.beginShadows();\n\n\t\tsetupShadows( lights );\n\n\t\tshadowMap.render( scene, camera );\n\n\t\tsetupLights( lights, camera );\n\n\t\tif ( _clippingEnabled ) _clipping.endShadows();\n\n\t\t//\n\n\t\t_infoRender.calls = 0;\n\t\t_infoRender.vertices = 0;\n\t\t_infoRender.faces = 0;\n\t\t_infoRender.points = 0;\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\trenderTarget = null;\n\n\t\t}\n\n\t\tthis.setRenderTarget( renderTarget );\n\n\t\t//\n\n\t\tvar background = scene.background;\n\n\t\tif ( background === null ) {\n\n\t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n\t\t} else if ( background instanceof THREE.Color ) {\n\n\t\t\tglClearColor( background.r, background.g, background.b, 1 );\n\n\t\t}\n\n\t\tif ( this.autoClear || forceClear ) {\n\n\t\t\tthis.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );\n\n\t\t}\n\n\t\tif ( background instanceof THREE.CubeTexture ) {\n\n\t\t\tbackgroundCamera2.projectionMatrix.copy( camera.projectionMatrix );\n\n\t\t\tbackgroundCamera2.matrixWorld.extractRotation( camera.matrixWorld );\n\t\t\tbackgroundCamera2.matrixWorldInverse.getInverse( backgroundCamera2.matrixWorld );\n\n\t\t\tbackgroundBoxMesh.material.uniforms[ \"tCube\" ].value = background;\n\t\t\tbackgroundBoxMesh.modelViewMatrix.multiplyMatrices( backgroundCamera2.matrixWorldInverse, backgroundBoxMesh.matrixWorld );\n\n\t\t\t_this.renderBufferDirect( backgroundCamera2, null, backgroundBoxMesh.geometry, backgroundBoxMesh.material, backgroundBoxMesh, null );\n\n\t\t} else if ( background instanceof THREE.Texture ) {\n\n\t\t\tbackgroundPlaneMesh.material.map = background;\n\n\t\t\t_this.renderBufferDirect( backgroundCamera, null, backgroundPlaneMesh.geometry, backgroundPlaneMesh.material, backgroundPlaneMesh, null );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( scene.overrideMaterial ) {\n\n\t\t\tvar overrideMaterial = scene.overrideMaterial;\n\n\t\t\trenderObjects( opaqueObjects, camera, fog, overrideMaterial );\n\t\t\trenderObjects( transparentObjects, camera, fog, overrideMaterial );\n\n\t\t} else {\n\n\t\t\t// opaque pass (front-to-back order)\n\n\t\t\tstate.setBlending( THREE.NoBlending );\n\t\t\trenderObjects( opaqueObjects, camera, fog );\n\n\t\t\t// transparent pass (back-to-front order)\n\n\t\t\trenderObjects( transparentObjects, camera, fog );\n\n\t\t}\n\n\t\t// custom render plugins (post pass)\n\n\t\tspritePlugin.render( scene, camera );\n\t\tlensFlarePlugin.render( scene, camera, _currentViewport );\n\n\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\tif ( renderTarget ) {\n\n\t\t\ttextures.updateRenderTargetMipmap( renderTarget );\n\n\t\t}\n\n\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\tstate.setDepthTest( true );\n\t\tstate.setDepthWrite( true );\n\t\tstate.setColorWrite( true );\n\n\t\t// _gl.finish();\n\n\t};\n\n\tfunction pushRenderItem( object, geometry, material, z, group ) {\n\n\t\tvar array, index;\n\n\t\t// allocate the next position in the appropriate array\n\n\t\tif ( material.transparent ) {\n\n\t\t\tarray = transparentObjects;\n\t\t\tindex = ++ transparentObjectsLastIndex;\n\n\t\t} else {\n\n\t\t\tarray = opaqueObjects;\n\t\t\tindex = ++ opaqueObjectsLastIndex;\n\n\t\t}\n\n\t\t// recycle existing render item or grow the array\n\n\t\tvar renderItem = array[ index ];\n\n\t\tif ( renderItem !== undefined ) {\n\n\t\t\trenderItem.id = object.id;\n\t\t\trenderItem.object = object;\n\t\t\trenderItem.geometry = geometry;\n\t\t\trenderItem.material = material;\n\t\t\trenderItem.z = _vector3.z;\n\t\t\trenderItem.group = group;\n\n\t\t} else {\n\n\t\t\trenderItem = {\n\t\t\t\tid: object.id,\n\t\t\t\tobject: object,\n\t\t\t\tgeometry: geometry,\n\t\t\t\tmaterial: material,\n\t\t\t\tz: _vector3.z,\n\t\t\t\tgroup: group\n\t\t\t};\n\n\t\t\t// assert( index === array.length );\n\t\t\tarray.push( renderItem );\n\n\t\t}\n\n\t}\n\n\t// TODO Duplicated code (Frustum)\n\n\tfunction isObjectViewable( object ) {\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( geometry.boundingSphere === null )\n\t\t\tgeometry.computeBoundingSphere();\n\n\t\t_sphere.copy( geometry.boundingSphere ).\n\t\t\tapplyMatrix4( object.matrixWorld );\n\n\t\treturn isSphereViewable( _sphere );\n\n\t}\n\n\tfunction isSpriteViewable( sprite ) {\n\n\t\t_sphere.center.set( 0, 0, 0 );\n\t\t_sphere.radius = 0.7071067811865476;\n\t\t_sphere.applyMatrix4( sprite.matrixWorld );\n\n\t\treturn isSphereViewable( _sphere );\n\n\t}\n\n\tfunction isSphereViewable( sphere ) {\n\n\t\tif ( ! _frustum.intersectsSphere( sphere ) ) return false;\n\n\t\tvar numPlanes = _clipping.numPlanes;\n\n\t\tif ( numPlanes === 0 ) return true;\n\n\t\tvar planes = _this.clippingPlanes,\n\n\t\t\tcenter = sphere.center,\n\t\t\tnegRad = - sphere.radius,\n\t\t\ti = 0;\n\n\t\tdo {\n\n\t\t\t// out when deeper than radius in the negative halfspace\n\t\t\tif ( planes[ i ].distanceToPoint( center ) < negRad ) return false;\n\n\t\t} while ( ++ i !== numPlanes );\n\n\t\treturn true;\n\n\t}\n\n\tfunction projectObject( object, camera ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tif ( object.layers.test( camera.layers ) ) {\n\n\t\t\tif ( object instanceof THREE.Light ) {\n\n\t\t\t\tlights.push( object );\n\n\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\n\t\t\t\tif ( object.frustumCulled === false || isSpriteViewable( object ) === true ) {\n\n\t\t\t\t\tsprites.push( object );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object instanceof THREE.LensFlare ) {\n\n\t\t\t\tlensFlares.push( object );\n\n\t\t\t} else if ( object instanceof THREE.ImmediateRenderObject ) {\n\n\t\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\n\t\t\t\t}\n\n\t\t\t\tpushRenderItem( object, null, object.material, _vector3.z, null );\n\n\t\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) {\n\n\t\t\t\tif ( object instanceof THREE.SkinnedMesh ) {\n\n\t\t\t\t\tobject.skeleton.update();\n\n\t\t\t\t}\n\n\t\t\t\tif ( object.frustumCulled === false || isObjectViewable( object ) === true ) {\n\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( material.visible === true ) {\n\n\t\t\t\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update( object );\n\n\t\t\t\t\t\tif ( material instanceof THREE.MultiMaterial ) {\n\n\t\t\t\t\t\t\tvar groups = geometry.groups;\n\t\t\t\t\t\t\tvar materials = material.materials;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\n\t\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\n\t\t\t\t\t\t\t\t\tpushRenderItem( object, geometry, groupMaterial, _vector3.z, group );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tpushRenderItem( object, geometry, material, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar children = object.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tprojectObject( children[ i ], camera );\n\n\t\t}\n\n\t}\n\n\tfunction renderObjects( renderList, camera, fog, overrideMaterial ) {\n\n\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\tvar renderItem = renderList[ i ];\n\n\t\t\tvar object = renderItem.object;\n\t\t\tvar geometry = renderItem.geometry;\n\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n\t\t\tvar group = renderItem.group;\n\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\t\tif ( object instanceof THREE.ImmediateRenderObject ) {\n\n\t\t\t\tsetMaterial( material );\n\n\t\t\t\tvar program = setProgram( camera, fog, material, object );\n\n\t\t\t\t_currentGeometryProgram = '';\n\n\t\t\t\tobject.render( function ( object ) {\n\n\t\t\t\t\t_this.renderBufferImmediate( object, program, material );\n\n\t\t\t\t} );\n\n\t\t\t} else {\n\n\t\t\t\t_this.renderBufferDirect( camera, fog, geometry, material, object, group );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction initMaterial( material, fog, object ) {\n\n\t\tvar materialProperties = properties.get( material );\n\n\t\tvar parameters = programCache.getParameters(\n\t\t\t\tmaterial, _lights, fog, _clipping.numPlanes, object );\n\n\t\tvar code = programCache.getProgramCode( material, parameters );\n\n\t\tvar program = materialProperties.program;\n\t\tvar programChange = true;\n\n\t\tif ( program === undefined ) {\n\n\t\t\t// new material\n\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t} else if ( program.code !== code ) {\n\n\t\t\t// changed glsl or parameters\n\t\t\treleaseMaterialProgramReference( material );\n\n\t\t} else if ( parameters.shaderID !== undefined ) {\n\n\t\t\t// same glsl and uniform list\n\t\t\treturn;\n\n\t\t} else {\n\n\t\t\t// only rebuild uniform list\n\t\t\tprogramChange = false;\n\n\t\t}\n\n\t\tif ( programChange ) {\n\n\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\tvar shader = THREE.ShaderLib[ parameters.shaderID ];\n\n\t\t\t\tmaterialProperties.__webglShader = {\n\t\t\t\t\tname: material.type,\n\t\t\t\t\tuniforms: THREE.UniformsUtils.clone( shader.uniforms ),\n\t\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\t\tfragmentShader: shader.fragmentShader\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tmaterialProperties.__webglShader = {\n\t\t\t\t\tname: material.type,\n\t\t\t\t\tuniforms: material.uniforms,\n\t\t\t\t\tvertexShader: material.vertexShader,\n\t\t\t\t\tfragmentShader: material.fragmentShader\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tmaterial.__webglShader = materialProperties.__webglShader;\n\n\t\t\tprogram = programCache.acquireProgram( material, parameters, code );\n\n\t\t\tmaterialProperties.program = program;\n\t\t\tmaterial.program = program;\n\n\t\t}\n\n\t\tvar attributes = program.getAttributes();\n\n\t\tif ( material.morphTargets ) {\n\n\t\t\tmaterial.numSupportedMorphTargets = 0;\n\n\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\n\t\t\t\tif ( attributes[ 'morphTarget' + i ] >= 0 ) {\n\n\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.morphNormals ) {\n\n\t\t\tmaterial.numSupportedMorphNormals = 0;\n\n\t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\n\t\t\t\tif ( attributes[ 'morphNormal' + i ] >= 0 ) {\n\n\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar uniforms = materialProperties.__webglShader.uniforms;\n\n\t\tif ( ! ( material instanceof THREE.ShaderMaterial ) &&\n\t\t\t\t! ( material instanceof THREE.RawShaderMaterial ) ||\n\t\t\t\tmaterial.clipping === true ) {\n\n\t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n\t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\n\t\t}\n\n\t\tif ( material.lights ) {\n\n\t\t\t// store the light setup it was created for\n\n\t\t\tmaterialProperties.lightsHash = _lights.hash;\n\n\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\tuniforms.ambientLightColor.value = _lights.ambient;\n\t\t\tuniforms.directionalLights.value = _lights.directional;\n\t\t\tuniforms.spotLights.value = _lights.spot;\n\t\t\tuniforms.pointLights.value = _lights.point;\n\t\t\tuniforms.hemisphereLights.value = _lights.hemi;\n\n\t\t\tuniforms.directionalShadowMap.value = _lights.directionalShadowMap;\n\t\t\tuniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;\n\t\t\tuniforms.spotShadowMap.value = _lights.spotShadowMap;\n\t\t\tuniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;\n\t\t\tuniforms.pointShadowMap.value = _lights.pointShadowMap;\n\t\t\tuniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;\n\n\t\t}\n\n\t\tvar progUniforms = materialProperties.program.getUniforms(),\n\t\t\tuniformsList =\n\t\t\t\t\tTHREE.WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\tmaterialProperties.uniformsList = uniformsList;\n\t\tmaterialProperties.dynamicUniforms =\n\t\t\t\tTHREE.WebGLUniforms.splitDynamic( uniformsList, uniforms );\n\n\t}\n\n\tfunction setMaterial( material ) {\n\n\t\tif ( material.side !== THREE.DoubleSide )\n\t\t\tstate.enable( _gl.CULL_FACE );\n\t\telse\n\t\t\tstate.disable( _gl.CULL_FACE );\n\n\t\tstate.setFlipSided( material.side === THREE.BackSide );\n\n\t\tif ( material.transparent === true ) {\n\n\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\n\t\t} else {\n\n\t\t\tstate.setBlending( THREE.NoBlending );\n\n\t\t}\n\n\t\tstate.setDepthFunc( material.depthFunc );\n\t\tstate.setDepthTest( material.depthTest );\n\t\tstate.setDepthWrite( material.depthWrite );\n\t\tstate.setColorWrite( material.colorWrite );\n\t\tstate.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t}\n\n\tfunction setProgram( camera, fog, material, object ) {\n\n\t\t_usedTextureUnits = 0;\n\n\t\tvar materialProperties = properties.get( material );\n\n\t\tif ( _clippingEnabled ) {\n\n\t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\n\t\t\t\tvar useCache =\n\t\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t// (#8465, #8379)\n\t\t\t\t_clipping.setState(\n\t\t\t\t\t\tmaterial.clippingPlanes, material.clipShadows,\n\t\t\t\t\t\tcamera, materialProperties, useCache );\n\n\t\t\t}\n\n\t\t\tif ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\tmaterialProperties.numClippingPlanes !== _clipping.numPlanes ) {\n\n\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialProperties.program === undefined ) {\n\n\t\t\tmaterial.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( materialProperties.lightsHash !== undefined &&\n\t\t\tmaterialProperties.lightsHash !== _lights.hash ) {\n\n\t\t\tmaterial.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( material.needsUpdate ) {\n\n\t\t\tinitMaterial( material, fog, object );\n\t\t\tmaterial.needsUpdate = false;\n\n\t\t}\n\n\t\tvar refreshProgram = false;\n\t\tvar refreshMaterial = false;\n\t\tvar refreshLights = false;\n\n\t\tvar program = materialProperties.program,\n\t\t\tp_uniforms = program.getUniforms(),\n\t\t\tm_uniforms = materialProperties.__webglShader.uniforms;\n\n\t\tif ( program.id !== _currentProgram ) {\n\n\t\t\t_gl.useProgram( program.program );\n\t\t\t_currentProgram = program.id;\n\n\t\t\trefreshProgram = true;\n\t\t\trefreshMaterial = true;\n\t\t\trefreshLights = true;\n\n\t\t}\n\n\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t_currentMaterialId = material.id;\n\n\t\t\trefreshMaterial = true;\n\n\t\t}\n\n\t\tif ( refreshProgram || camera !== _currentCamera ) {\n\n\t\t\tp_uniforms.set( _gl, camera, 'projectionMatrix' );\n\n\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t}\n\n\n\t\t\tif ( camera !== _currentCamera ) {\n\n\t\t\t\t_currentCamera = camera;\n\n\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t}\n\n\t\t\t// load material specific uniforms\n\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\tif ( material instanceof THREE.ShaderMaterial ||\n\t\t\t\t material instanceof THREE.MeshPhongMaterial ||\n\t\t\t\t material instanceof THREE.MeshStandardMaterial ||\n\t\t\t\t material.envMap ) {\n\n\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material instanceof THREE.MeshPhongMaterial ||\n\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\n\t\t\t\t material instanceof THREE.MeshBasicMaterial ||\n\t\t\t\t material instanceof THREE.MeshStandardMaterial ||\n\t\t\t\t material instanceof THREE.ShaderMaterial ||\n\t\t\t\t material.skinning ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t}\n\n\t\t\tp_uniforms.set( _gl, _this, 'toneMappingExposure' );\n\t\t\tp_uniforms.set( _gl, _this, 'toneMappingWhitePoint' );\n\n\t\t}\n\n\t\t// skinning uniforms must be set even if material didn't change\n\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t// not sure why, but otherwise weird things happen\n\n\t\tif ( material.skinning ) {\n\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\tvar skeleton = object.skeleton;\n\n\t\t\tif ( skeleton ) {\n\n\t\t\t\tif ( capabilities.floatVertexTextures && skeleton.useVertexTexture ) {\n\n\t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTexture' );\n\t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureWidth' );\n\t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureHeight' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( refreshMaterial ) {\n\n\t\t\tif ( material.lights ) {\n\n\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t// values\n\t\t\t\t//\n\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t// the GL state when required\n\n\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t}\n\n\t\t\t// refresh uniforms common to several materials\n\n\t\t\tif ( fog && material.fog ) {\n\n\t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\n\t\t\t}\n\n\t\t\tif ( material instanceof THREE.MeshBasicMaterial ||\n\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\n\t\t\t\t material instanceof THREE.MeshPhongMaterial ||\n\t\t\t\t material instanceof THREE.MeshStandardMaterial ||\n\t\t\t\t material instanceof THREE.MeshDepthMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t}\n\n\t\t\t// refresh single material specific uniforms\n\n\t\t\tif ( material instanceof THREE.LineBasicMaterial ) {\n\n\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.LineDashedMaterial ) {\n\n\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\t\t\t\trefreshUniformsDash( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.PointsMaterial ) {\n\n\t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.MeshLambertMaterial ) {\n\n\t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.MeshPhongMaterial ) {\n\n\t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.MeshPhysicalMaterial ) {\n\n\t\t\t\trefreshUniformsPhysical( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.MeshStandardMaterial ) {\n\n\t\t\t\trefreshUniformsStandard( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.MeshDepthMaterial ) {\n\n\t\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\t\tm_uniforms.displacementMap.value = material.displacementMap;\n\t\t\t\t\tm_uniforms.displacementScale.value = material.displacementScale;\n\t\t\t\t\tm_uniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t\t}\n\n\t\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\n\n\t\t\t\tm_uniforms.opacity.value = material.opacity;\n\n\t\t\t}\n\n\t\t\tTHREE.WebGLUniforms.upload(\n\t\t\t\t\t_gl, materialProperties.uniformsList, m_uniforms, _this );\n\n\t\t}\n\n\n\t\t// common matrices\n\n\t\tp_uniforms.set( _gl, object, 'modelViewMatrix' );\n\t\tp_uniforms.set( _gl, object, 'normalMatrix' );\n\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\n\t\t// dynamic uniforms\n\n\t\tvar dynUniforms = materialProperties.dynamicUniforms;\n\n\t\tif ( dynUniforms !== null ) {\n\n\t\t\tTHREE.WebGLUniforms.evalDynamic(\n\t\t\t\t\tdynUniforms, m_uniforms, object, camera );\n\n\t\t\tTHREE.WebGLUniforms.upload( _gl, dynUniforms, m_uniforms, _this );\n\n\t\t}\n\n\t\treturn program;\n\n\t}\n\n\t// Uniforms (refresh uniforms objects)\n\n\tfunction refreshUniformsCommon ( uniforms, material ) {\n\n\t\tuniforms.opacity.value = material.opacity;\n\n\t\tuniforms.diffuse.value = material.color;\n\n\t\tif ( material.emissive ) {\n\n\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t}\n\n\t\tuniforms.map.value = material.map;\n\t\tuniforms.specularMap.value = material.specularMap;\n\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\tif ( material.aoMap ) {\n\n\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. specular map\n\t\t// 3. normal map\n\t\t// 4. bump map\n\t\t// 5. alpha map\n\t\t// 6. emissive map\n\n\t\tvar uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.specularMap ) {\n\n\t\t\tuvScaleMap = material.specularMap;\n\n\t\t} else if ( material.displacementMap ) {\n\n\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t} else if ( material.normalMap ) {\n\n\t\t\tuvScaleMap = material.normalMap;\n\n\t\t} else if ( material.bumpMap ) {\n\n\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t} else if ( material.roughnessMap ) {\n\n\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t} else if ( material.metalnessMap ) {\n\n\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t} else if ( material.emissiveMap ) {\n\n\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t// backwards compatibility\n\t\t\tif ( uvScaleMap instanceof THREE.WebGLRenderTarget ) {\n\n\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t}\n\n\t\t\tvar offset = uvScaleMap.offset;\n\t\t\tvar repeat = uvScaleMap.repeat;\n\n\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\n\t\t}\n\n\t\tuniforms.envMap.value = material.envMap;\n\n\t\t// don't flip CubeTexture envMaps, flip everything else:\n\t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\n\t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n\t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n\t\tuniforms.flipEnvMap.value = ( ! ( material.envMap instanceof THREE.CubeTexture ) ) ? 1 : - 1;\n\n\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t}\n\n\tfunction refreshUniformsLine ( uniforms, material ) {\n\n\t\tuniforms.diffuse.value = material.color;\n\t\tuniforms.opacity.value = material.opacity;\n\n\t}\n\n\tfunction refreshUniformsDash ( uniforms, material ) {\n\n\t\tuniforms.dashSize.value = material.dashSize;\n\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\tuniforms.scale.value = material.scale;\n\n\t}\n\n\tfunction refreshUniformsPoints ( uniforms, material ) {\n\n\t\tuniforms.diffuse.value = material.color;\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.size.value = material.size * _pixelRatio;\n\t\tuniforms.scale.value = _canvas.clientHeight * 0.5;\n\n\t\tuniforms.map.value = material.map;\n\n\t\tif ( material.map !== null ) {\n\n\t\t\tvar offset = material.map.offset;\n\t\t\tvar repeat = material.map.repeat;\n\n\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsFog ( uniforms, fog ) {\n\n\t\tuniforms.fogColor.value = fog.color;\n\n\t\tif ( fog instanceof THREE.Fog ) {\n\n\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t} else if ( fog instanceof THREE.FogExp2 ) {\n\n\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsLambert ( uniforms, material ) {\n\n\t\tif ( material.lightMap ) {\n\n\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhong ( uniforms, material ) {\n\n\t\tuniforms.specular.value = material.specular;\n\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\tif ( material.lightMap ) {\n\n\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsStandard ( uniforms, material ) {\n\n\t\tuniforms.roughness.value = material.roughness;\n\t\tuniforms.metalness.value = material.metalness;\n\n\t\tif ( material.roughnessMap ) {\n\n\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t}\n\n\t\tif ( material.metalnessMap ) {\n\n\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t}\n\n\t\tif ( material.lightMap ) {\n\n\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t\tif ( material.envMap ) {\n\n\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhysical ( uniforms, material ) {\n\n\t\tuniforms.clearCoat.value = material.clearCoat;\n\t\tuniforms.clearCoatRoughness.value = material.clearCoatRoughness;\n\n\t\trefreshUniformsStandard( uniforms, material );\n\n\t}\n\n\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\tfunction markUniformsLightsNeedsUpdate ( uniforms, value ) {\n\n\t\tuniforms.ambientLightColor.needsUpdate = value;\n\n\t\tuniforms.directionalLights.needsUpdate = value;\n\t\tuniforms.pointLights.needsUpdate = value;\n\t\tuniforms.spotLights.needsUpdate = value;\n\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t}\n\n\t// Lighting\n\n\tfunction setupShadows ( lights ) {\n\n\t\tvar lightShadowsLength = 0;\n\n\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\tvar light = lights[ i ];\n\n\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t_lights.shadows[ lightShadowsLength ++ ] = light;\n\n\t\t\t}\n\n\t\t}\n\n\t\t_lights.shadows.length = lightShadowsLength;\n\n\t}\n\n\tfunction setupLights ( lights, camera ) {\n\n\t\tvar l, ll, light,\n\t\tr = 0, g = 0, b = 0,\n\t\tcolor,\n\t\tintensity,\n\t\tdistance,\n\t\tshadowMap,\n\n\t\tviewMatrix = camera.matrixWorldInverse,\n\n\t\tdirectionalLength = 0,\n\t\tpointLength = 0,\n\t\tspotLength = 0,\n\t\themiLength = 0;\n\n\t\tfor ( l = 0, ll = lights.length; l < ll; l ++ ) {\n\n\t\t\tlight = lights[ l ];\n\n\t\t\tcolor = light.color;\n\t\t\tintensity = light.intensity;\n\t\t\tdistance = light.distance;\n\n\t\t\tshadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\tif ( light instanceof THREE.AmbientLight ) {\n\n\t\t\t\tr += color.r * intensity;\n\t\t\t\tg += color.g * intensity;\n\t\t\t\tb += color.b * intensity;\n\n\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\n\n\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( _vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\n\t\t\t\t}\n\n\t\t\t\t_lights.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t_lights.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\t\t\t\t_lights.directional[ directionalLength ++ ] = uniforms;\n\n\t\t\t} else if ( light instanceof THREE.SpotLight ) {\n\n\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\t\t\t\tuniforms.distance = distance;\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( _vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\n\t\t\t\t}\n\n\t\t\t\t_lights.spotShadowMap[ spotLength ] = shadowMap;\n\t\t\t\t_lights.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\t\t\t\t_lights.spot[ spotLength ++ ] = uniforms;\n\n\t\t\t} else if ( light instanceof THREE.PointLight ) {\n\n\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\n\t\t\t\t}\n\n\t\t\t\t_lights.pointShadowMap[ pointLength ] = shadowMap;\n\n\t\t\t\tif ( _lights.pointShadowMatrix[ pointLength ] === undefined ) {\n\n\t\t\t\t\t_lights.pointShadowMatrix[ pointLength ] = new THREE.Matrix4();\n\n\t\t\t\t}\n\n\t\t\t\t// for point lights we set the shadow matrix to be a translation-only matrix\n\t\t\t\t// equal to inverse of the light's position\n\t\t\t\t_vector3.setFromMatrixPosition( light.matrixWorld ).negate();\n\t\t\t\t_lights.pointShadowMatrix[ pointLength ].identity().setPosition( _vector3 );\n\n\t\t\t\t_lights.point[ pointLength ++ ] = uniforms;\n\n\t\t\t} else if ( light instanceof THREE.HemisphereLight ) {\n\n\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\t\t\tuniforms.direction.normalize();\n\n\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\n\t\t\t\t_lights.hemi[ hemiLength ++ ] = uniforms;\n\n\t\t\t}\n\n\t\t}\n\n\t\t_lights.ambient[ 0 ] = r;\n\t\t_lights.ambient[ 1 ] = g;\n\t\t_lights.ambient[ 2 ] = b;\n\n\t\t_lights.directional.length = directionalLength;\n\t\t_lights.spot.length = spotLength;\n\t\t_lights.point.length = pointLength;\n\t\t_lights.hemi.length = hemiLength;\n\n\t\t_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + hemiLength + ',' + _lights.shadows.length;\n\n\t}\n\n\t// GL state setting\n\n\tthis.setFaceCulling = function ( cullFace, frontFaceDirection ) {\n\n\t\tstate.setCullFace( cullFace );\n\t\tstate.setFlipSided( frontFaceDirection === THREE.FrontFaceDirectionCW );\n\n\t};\n\n\t// Textures\n\n\tfunction allocTextureUnit() {\n\n\t\tvar textureUnit = _usedTextureUnits;\n\n\t\tif ( textureUnit >= capabilities.maxTextures ) {\n\n\t\t\tconsole.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\n\n\t\t}\n\n\t\t_usedTextureUnits += 1;\n\n\t\treturn textureUnit;\n\n\t}\n\n\tthis.allocTextureUnit = allocTextureUnit;\n\n\t// this.setTexture2D = setTexture2D;\n\tthis.setTexture2D = ( function() {\n\n\t\tvar warned = false;\n\n\t\t// backwards compatibility: peel texture.texture\n\t\treturn function setTexture2D( texture, slot ) {\n\n\t\t\tif ( texture instanceof THREE.WebGLRenderTarget ) {\n\n\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarned = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\ttextures.setTexture2D( texture, slot );\n\n\t\t};\n\n\t}() );\n\n\tthis.setTexture = ( function() {\n\n\t\tvar warned = false;\n\n\t\treturn function setTexture( texture, slot ) {\n\n\t\t\tif ( ! warned ) {\n\n\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\" );\n\t\t\t\twarned = true;\n\n\t\t\t}\n\n\t\t\ttextures.setTexture2D( texture, slot );\n\n\t\t};\n\n\t}() );\n\n\tthis.setTextureCube = ( function() {\n\n\t\tvar warned = false;\n\n\t\treturn function setTextureCube( texture, slot ) {\n\n\t\t\t// backwards compatibility: peel texture.texture\n\t\t\tif ( texture instanceof THREE.WebGLRenderTargetCube ) {\n\n\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarned = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n\t\t\t// TODO: unify these code paths\n\t\t\tif ( texture instanceof THREE.CubeTexture ||\n\t\t\t\t ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\n\t\t\t\t// CompressedTexture can have Array in image :/\n\n\t\t\t\t// this function alone should take care of cube textures\n\t\t\t\ttextures.setTextureCube( texture, slot );\n\n\t\t\t} else {\n\n\t\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\n\n\t\t\t\ttextures.setTextureCubeDynamic( texture, slot );\n\n\t\t\t}\n\n\t\t};\n\n\t}() );\n\n\tthis.getCurrentRenderTarget = function() {\n\n\t\treturn _currentRenderTarget;\n\n\t};\n\n\tthis.setRenderTarget = function ( renderTarget ) {\n\n\t\t_currentRenderTarget = renderTarget;\n\n\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t}\n\n\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\n\t\tvar framebuffer;\n\n\t\tif ( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];\n\n\t\t\t} else {\n\n\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer;\n\n\t\t\t}\n\n\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t\t_currentViewport.copy( renderTarget.viewport );\n\n\t\t} else {\n\n\t\t\tframebuffer = null;\n\n\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );\n\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );\n\n\t\t}\n\n\t\tif ( _currentFramebuffer !== framebuffer ) {\n\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t\t_currentFramebuffer = framebuffer;\n\n\t\t}\n\n\t\tstate.scissor( _currentScissor );\n\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\tstate.viewport( _currentViewport );\n\n\t\tif ( isCube ) {\n\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );\n\n\t\t}\n\n\t};\n\n\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\n\n\t\tif ( renderTarget instanceof THREE.WebGLRenderTarget === false ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\tif ( framebuffer ) {\n\n\t\t\tvar restore = false;\n\n\t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\t\trestore = true;\n\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\tvar texture = renderTarget.texture;\n\n\t\t\t\tif ( texture.format !== THREE.RGBAFormat && paramThreeToGL( texture.format ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.type !== THREE.UnsignedByteType &&\n\t\t\t\t     paramThreeToGL( texture.type ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) &&\n\t\t\t\t     ! ( texture.type === THREE.FloatType && extensions.get( 'WEBGL_color_buffer_float' ) ) &&\n\t\t\t\t     ! ( texture.type === THREE.HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\n\n\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t\t_gl.readPixels( x, y, width, height, paramThreeToGL( texture.format ), paramThreeToGL( texture.type ), buffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n\t\t\t\t}\n\n\t\t\t} finally {\n\n\t\t\t\tif ( restore ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t// Map three.js constants to WebGL constants\n\n\tfunction paramThreeToGL ( p ) {\n\n\t\tvar extension;\n\n\t\tif ( p === THREE.RepeatWrapping ) return _gl.REPEAT;\n\t\tif ( p === THREE.ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;\n\t\tif ( p === THREE.MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;\n\n\t\tif ( p === THREE.NearestFilter ) return _gl.NEAREST;\n\t\tif ( p === THREE.NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;\n\t\tif ( p === THREE.NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;\n\n\t\tif ( p === THREE.LinearFilter ) return _gl.LINEAR;\n\t\tif ( p === THREE.LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;\n\t\tif ( p === THREE.LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;\n\n\t\tif ( p === THREE.UnsignedByteType ) return _gl.UNSIGNED_BYTE;\n\t\tif ( p === THREE.UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;\n\t\tif ( p === THREE.UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;\n\t\tif ( p === THREE.UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;\n\n\t\tif ( p === THREE.ByteType ) return _gl.BYTE;\n\t\tif ( p === THREE.ShortType ) return _gl.SHORT;\n\t\tif ( p === THREE.UnsignedShortType ) return _gl.UNSIGNED_SHORT;\n\t\tif ( p === THREE.IntType ) return _gl.INT;\n\t\tif ( p === THREE.UnsignedIntType ) return _gl.UNSIGNED_INT;\n\t\tif ( p === THREE.FloatType ) return _gl.FLOAT;\n\n\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tif ( p === THREE.HalfFloatType ) return extension.HALF_FLOAT_OES;\n\n\t\t}\n\n\t\tif ( p === THREE.AlphaFormat ) return _gl.ALPHA;\n\t\tif ( p === THREE.RGBFormat ) return _gl.RGB;\n\t\tif ( p === THREE.RGBAFormat ) return _gl.RGBA;\n\t\tif ( p === THREE.LuminanceFormat ) return _gl.LUMINANCE;\n\t\tif ( p === THREE.LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;\n\t\tif ( p === THREE.DepthFormat ) return _gl.DEPTH_COMPONENT;\n\n\t\tif ( p === THREE.AddEquation ) return _gl.FUNC_ADD;\n\t\tif ( p === THREE.SubtractEquation ) return _gl.FUNC_SUBTRACT;\n\t\tif ( p === THREE.ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;\n\n\t\tif ( p === THREE.ZeroFactor ) return _gl.ZERO;\n\t\tif ( p === THREE.OneFactor ) return _gl.ONE;\n\t\tif ( p === THREE.SrcColorFactor ) return _gl.SRC_COLOR;\n\t\tif ( p === THREE.OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;\n\t\tif ( p === THREE.SrcAlphaFactor ) return _gl.SRC_ALPHA;\n\t\tif ( p === THREE.OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;\n\t\tif ( p === THREE.DstAlphaFactor ) return _gl.DST_ALPHA;\n\t\tif ( p === THREE.OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;\n\n\t\tif ( p === THREE.DstColorFactor ) return _gl.DST_COLOR;\n\t\tif ( p === THREE.OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;\n\t\tif ( p === THREE.SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;\n\n\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tif ( p === THREE.RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n\t\t}\n\n\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tif ( p === THREE.RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\tif ( p === THREE.RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\tif ( p === THREE.RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\tif ( p === THREE.RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n\t\t}\n\n\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tif ( p === THREE.RGB_ETC1_Format ) return extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t}\n\n\t\textension = extensions.get( 'EXT_blend_minmax' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tif ( p === THREE.MinEquation ) return extension.MIN_EXT;\n\t\t\tif ( p === THREE.MaxEquation ) return extension.MAX_EXT;\n\n\t\t}\n\n\t\treturn 0;\n\n\t}\n\n};\n\n// File:src/renderers/WebGLRenderTarget.js\n\n/**\n * @author szimek / https://github.com/szimek/\n * @author alteredq / http://alteredqualia.com/\n * @author Marius Kintel / https://github.com/kintel\n */\n\n/*\n In options, we can specify:\n * Texture parameters for an auto-generated target texture\n * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n*/\nTHREE.WebGLRenderTarget = function ( width, height, options ) {\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.width = width;\n\tthis.height = height;\n\n\tthis.scissor = new THREE.Vector4( 0, 0, width, height );\n\tthis.scissorTest = false;\n\n\tthis.viewport = new THREE.Vector4( 0, 0, width, height );\n\n\toptions = options || {};\n\n\tif ( options.minFilter === undefined ) options.minFilter = THREE.LinearFilter;\n\n\tthis.texture = new THREE.Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\tthis.depthTexture = null;\n\n};\n\nObject.assign( THREE.WebGLRenderTarget.prototype, THREE.EventDispatcher.prototype, {\n\n\tsetSize: function ( width, height ) {\n\n\t\tif ( this.width !== width || this.height !== height ) {\n\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\n\t\t\tthis.dispose();\n\n\t\t}\n\n\t\tthis.viewport.set( 0, 0, width, height );\n\t\tthis.scissor.set( 0, 0, width, height );\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\n\t\tthis.viewport.copy( source.viewport );\n\n\t\tthis.texture = source.texture.clone();\n\n\t\tthis.depthBuffer = source.depthBuffer;\n\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\tthis.depthTexture = source.depthTexture;\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\n// File:src/renderers/WebGLRenderTargetCube.js\n\n/**\n * @author alteredq / http://alteredqualia.com\n */\n\nTHREE.WebGLRenderTargetCube = function ( width, height, options ) {\n\n\tTHREE.WebGLRenderTarget.call( this, width, height, options );\n\n\tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n\tthis.activeMipMapLevel = 0;\n\n};\n\nTHREE.WebGLRenderTargetCube.prototype = Object.create( THREE.WebGLRenderTarget.prototype );\nTHREE.WebGLRenderTargetCube.prototype.constructor = THREE.WebGLRenderTargetCube;\n\n// File:src/renderers/webgl/WebGLBufferRenderer.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLBufferRenderer = function ( _gl, extensions, _infoRender ) {\n\n\tvar mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\t_gl.drawArrays( mode, start, count );\n\n\t\t_infoRender.calls ++;\n\t\t_infoRender.vertices += count;\n\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;\n\n\t}\n\n\tfunction renderInstances( geometry ) {\n\n\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\tif ( extension === null ) {\n\n\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar position = geometry.attributes.position;\n\n\t\tvar count = 0;\n\n\t\tif ( position instanceof THREE.InterleavedBufferAttribute ) {\n\n\t\t\tcount = position.data.count;\n\n\t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\n\t\t} else {\n\n\t\t\tcount = position.count;\n\n\t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\n\t\t}\n\n\t\t_infoRender.calls ++;\n\t\t_infoRender.vertices += count * geometry.maxInstancedCount;\n\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += geometry.maxInstancedCount * count / 3;\n\n\t}\n\n\tthis.setMode = setMode;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n};\n\n// File:src/renderers/webgl/WebGLClipping.js\n\nTHREE.WebGLClipping = function() {\n\n\tvar scope = this,\n\n\t\tglobalState = null,\n\t\tnumGlobalPlanes = 0,\n\t\tlocalClippingEnabled = false,\n\t\trenderingShadows = false,\n\n\t\tplane = new THREE.Plane(),\n\t\tviewNormalMatrix = new THREE.Matrix3(),\n\n\t\tuniform = { value: null, needsUpdate: false };\n\n\tthis.uniform = uniform;\n\tthis.numPlanes = 0;\n\n\tthis.init = function( planes, enableLocalClipping, camera ) {\n\n\t\tvar enabled =\n\t\t\tplanes.length !== 0 ||\n\t\t\tenableLocalClipping ||\n\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t// run another frame in order to reset the state:\n\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\tlocalClippingEnabled;\n\n\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\tglobalState = projectPlanes( planes, camera, 0 );\n\t\tnumGlobalPlanes = planes.length;\n\n\t\treturn enabled;\n\n\t};\n\n\tthis.beginShadows = function() {\n\n\t\trenderingShadows = true;\n\t\tprojectPlanes( null );\n\n\t};\n\n\tthis.endShadows = function() {\n\n\t\trenderingShadows = false;\n\t\tresetGlobalState();\n\n\t};\n\n\tthis.setState = function( planes, clipShadows, camera, cache, fromCache ) {\n\n\t\tif ( ! localClippingEnabled ||\n\t\t\t\tplanes === null || planes.length === 0 ||\n\t\t\t\trenderingShadows && ! clipShadows ) {\n\t\t\t// there's no local clipping\n\n\t\t\tif ( renderingShadows ) {\n\t\t\t\t// there's no global clipping\n\n\t\t\t\tprojectPlanes( null );\n\n\t\t\t} else {\n\n\t\t\t\tresetGlobalState();\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\tlGlobal = nGlobal * 4,\n\n\t\t\t\tdstArray = cache.clippingState || null;\n\n\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\n\t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t}\n\n\t\t\tcache.clippingState = dstArray;\n\t\t\tthis.numPlanes += nGlobal;\n\n\t\t}\n\n\n\t};\n\n\tfunction resetGlobalState() {\n\n\t\tif ( uniform.value !== globalState ) {\n\n\t\t\tuniform.value = globalState;\n\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t}\n\n\t\tscope.numPlanes = numGlobalPlanes;\n\n\t}\n\n\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\tvar nPlanes = planes !== null ? planes.length : 0,\n\t\t\tdstArray = null;\n\n\t\tif ( nPlanes !== 0 ) {\n\n\t\t\tdstArray = uniform.value;\n\n\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0, i4 = dstOffset;\n\t\t\t\t\t\t\t\t\ti !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\tplane.copy( planes[ i ] ).\n\t\t\t\t\t\t\tapplyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tuniform.value = dstArray;\n\t\t\tuniform.needsUpdate = true;\n\n\t\t}\n\n\t\tscope.numPlanes = nPlanes;\n\t\treturn dstArray;\n\n\t}\n\n};\n\n\n// File:src/renderers/webgl/WebGLIndexedBufferRenderer.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLIndexedBufferRenderer = function ( _gl, extensions, _infoRender ) {\n\n\tvar mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tvar type, size;\n\n\tfunction setIndex( index ) {\n\n\t\tif ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {\n\n\t\t\ttype = _gl.UNSIGNED_INT;\n\t\t\tsize = 4;\n\n\t\t} else {\n\n\t\t\ttype = _gl.UNSIGNED_SHORT;\n\t\t\tsize = 2;\n\n\t\t}\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\t_gl.drawElements( mode, count, type, start * size );\n\n\t\t_infoRender.calls ++;\n\t\t_infoRender.vertices += count;\n\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;\n\n\t}\n\n\tfunction renderInstances( geometry, start, count ) {\n\n\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\tif ( extension === null ) {\n\n\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\textension.drawElementsInstancedANGLE( mode, count, type, start * size, geometry.maxInstancedCount );\n\n\t\t_infoRender.calls ++;\n\t\t_infoRender.vertices += count * geometry.maxInstancedCount;\n\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += geometry.maxInstancedCount * count / 3;\n\t}\n\n\tthis.setMode = setMode;\n\tthis.setIndex = setIndex;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n};\n\n// File:src/renderers/webgl/WebGLExtensions.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLExtensions = function ( gl ) {\n\n\tvar extensions = {};\n\n\tthis.get = function ( name ) {\n\n\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\treturn extensions[ name ];\n\n\t\t}\n\n\t\tvar extension;\n\n\t\tswitch ( name ) {\n\n\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_etc1':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\textension = gl.getExtension( name );\n\n\t\t}\n\n\t\tif ( extension === null ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t}\n\n\t\textensions[ name ] = extension;\n\n\t\treturn extension;\n\n\t};\n\n};\n\n// File:src/renderers/webgl/WebGLCapabilities.js\n\nTHREE.WebGLCapabilities = function ( gl, extensions, parameters ) {\n\n\tvar maxAnisotropy;\n\n\tfunction getMaxAnisotropy() {\n\n\t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t} else {\n\n\t\t\tmaxAnisotropy = 0;\n\n\t\t}\n\n\t\treturn maxAnisotropy;\n\n\t}\n\n\tfunction getMaxPrecision( precision ) {\n\n\t\tif ( precision === 'highp' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\n\t\t\t\treturn 'highp';\n\n\t\t\t}\n\n\t\t\tprecision = 'mediump';\n\n\t\t}\n\n\t\tif ( precision === 'mediump' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\n\t\t\t\treturn 'mediump';\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn 'lowp';\n\n\t}\n\n\tthis.getMaxAnisotropy = getMaxAnisotropy;\n\tthis.getMaxPrecision = getMaxPrecision;\n\n\tthis.precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\tthis.logarithmicDepthBuffer = parameters.logarithmicDepthBuffer !== undefined ? parameters.logarithmicDepthBuffer : false;\n\n\tthis.maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\tthis.maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n\tthis.maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n\tthis.maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\n\tthis.maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\tthis.maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n\tthis.maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n\tthis.maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\n\tthis.vertexTextures = this.maxVertexTextures > 0;\n\tthis.floatFragmentTextures = !! extensions.get( 'OES_texture_float' );\n\tthis.floatVertexTextures = this.vertexTextures && this.floatFragmentTextures;\n\n\tvar _maxPrecision = getMaxPrecision( this.precision );\n\n\tif ( _maxPrecision !== this.precision ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer:', this.precision, 'not supported, using', _maxPrecision, 'instead.' );\n\t\tthis.precision = _maxPrecision;\n\n\t}\n\n\tif ( this.logarithmicDepthBuffer ) {\n\n\t\tthis.logarithmicDepthBuffer = !! extensions.get( 'EXT_frag_depth' );\n\n\t}\n\n};\n\n// File:src/renderers/webgl/WebGLGeometries.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLGeometries = function ( gl, properties, info ) {\n\n\tvar geometries = {};\n\n\tfunction get( object ) {\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( geometries[ geometry.id ] !== undefined ) {\n\n\t\t\treturn geometries[ geometry.id ];\n\n\t\t}\n\n\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\tvar buffergeometry;\n\n\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\tbuffergeometry = geometry;\n\n\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\n\t\t\t\tgeometry._bufferGeometry = new THREE.BufferGeometry().setFromObject( object );\n\n\t\t\t}\n\n\t\t\tbuffergeometry = geometry._bufferGeometry;\n\n\t\t}\n\n\t\tgeometries[ geometry.id ] = buffergeometry;\n\n\t\tinfo.memory.geometries ++;\n\n\t\treturn buffergeometry;\n\n\t}\n\n\tfunction onGeometryDispose( event ) {\n\n\t\tvar geometry = event.target;\n\t\tvar buffergeometry = geometries[ geometry.id ];\n\n\t\tif ( buffergeometry.index !== null ) {\n\n\t\t\tdeleteAttribute( buffergeometry.index );\n\n\t\t}\n\n\t\tdeleteAttributes( buffergeometry.attributes );\n\n\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\tdelete geometries[ geometry.id ];\n\n\t\t// TODO\n\n\t\tvar property = properties.get( geometry );\n\n\t\tif ( property.wireframe ) {\n\n\t\t\tdeleteAttribute( property.wireframe );\n\n\t\t}\n\n\t\tproperties.delete( geometry );\n\n\t\tvar bufferproperty = properties.get( buffergeometry );\n\n\t\tif ( bufferproperty.wireframe ) {\n\n\t\t\tdeleteAttribute( bufferproperty.wireframe );\n\n\t\t}\n\n\t\tproperties.delete( buffergeometry );\n\n\t\t//\n\n\t\tinfo.memory.geometries --;\n\n\t}\n\n\tfunction getAttributeBuffer( attribute ) {\n\n\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\n\n\t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\n\t\t}\n\n\t\treturn properties.get( attribute ).__webglBuffer;\n\n\t}\n\n\tfunction deleteAttribute( attribute ) {\n\n\t\tvar buffer = getAttributeBuffer( attribute );\n\n\t\tif ( buffer !== undefined ) {\n\n\t\t\tgl.deleteBuffer( buffer );\n\t\t\tremoveAttributeBuffer( attribute );\n\n\t\t}\n\n\t}\n\n\tfunction deleteAttributes( attributes ) {\n\n\t\tfor ( var name in attributes ) {\n\n\t\t\tdeleteAttribute( attributes[ name ] );\n\n\t\t}\n\n\t}\n\n\tfunction removeAttributeBuffer( attribute ) {\n\n\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\n\n\t\t\tproperties.delete( attribute.data );\n\n\t\t} else {\n\n\t\t\tproperties.delete( attribute );\n\n\t\t}\n\n\t}\n\n\tthis.get = get;\n\n};\n\n// File:src/renderers/webgl/WebGLLights.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLLights = function () {\n\n\tvar lights = {};\n\n\tthis.get = function ( light ) {\n\n\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\treturn lights[ light.id ];\n\n\t\t}\n\n\t\tvar uniforms;\n\n\t\tswitch ( light.type ) {\n\n\t\t\tcase 'DirectionalLight':\n\t\t\t\tuniforms = {\n\t\t\t\t\tdirection: new THREE.Vector3(),\n\t\t\t\t\tcolor: new THREE.Color(),\n\n\t\t\t\t\tshadow: false,\n\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\tshadowMapSize: new THREE.Vector2()\n\t\t\t\t};\n\t\t\t\tbreak;\n\n\t\t\tcase 'SpotLight':\n\t\t\t\tuniforms = {\n\t\t\t\t\tposition: new THREE.Vector3(),\n\t\t\t\t\tdirection: new THREE.Vector3(),\n\t\t\t\t\tcolor: new THREE.Color(),\n\t\t\t\t\tdistance: 0,\n\t\t\t\t\tconeCos: 0,\n\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\tshadow: false,\n\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\tshadowMapSize: new THREE.Vector2()\n\t\t\t\t};\n\t\t\t\tbreak;\n\n\t\t\tcase 'PointLight':\n\t\t\t\tuniforms = {\n\t\t\t\t\tposition: new THREE.Vector3(),\n\t\t\t\t\tcolor: new THREE.Color(),\n\t\t\t\t\tdistance: 0,\n\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\tshadow: false,\n\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\tshadowMapSize: new THREE.Vector2()\n\t\t\t\t};\n\t\t\t\tbreak;\n\n\t\t\tcase 'HemisphereLight':\n\t\t\t\tuniforms = {\n\t\t\t\t\tdirection: new THREE.Vector3(),\n\t\t\t\t\tskyColor: new THREE.Color(),\n\t\t\t\t\tgroundColor: new THREE.Color()\n\t\t\t\t};\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tlights[ light.id ] = uniforms;\n\n\t\treturn uniforms;\n\n\t};\n\n};\n\n// File:src/renderers/webgl/WebGLObjects.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLObjects = function ( gl, properties, info ) {\n\n\tvar geometries = new THREE.WebGLGeometries( gl, properties, info );\n\n\t//\n\n\tfunction update( object ) {\n\n\t\t// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.\n\n\t\tvar geometry = geometries.get( object );\n\n\t\tif ( object.geometry instanceof THREE.Geometry ) {\n\n\t\t\tgeometry.updateFromObject( object );\n\n\t\t}\n\n\t\tvar index = geometry.index;\n\t\tvar attributes = geometry.attributes;\n\n\t\tif ( index !== null ) {\n\n\t\t\tupdateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );\n\n\t\t}\n\n\t\tfor ( var name in attributes ) {\n\n\t\t\tupdateAttribute( attributes[ name ], gl.ARRAY_BUFFER );\n\n\t\t}\n\n\t\t// morph targets\n\n\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\tfor ( var name in morphAttributes ) {\n\n\t\t\tvar array = morphAttributes[ name ];\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tupdateAttribute( array[ i ], gl.ARRAY_BUFFER );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n\tfunction updateAttribute( attribute, bufferType ) {\n\n\t\tvar data = ( attribute instanceof THREE.InterleavedBufferAttribute ) ? attribute.data : attribute;\n\n\t\tvar attributeProperties = properties.get( data );\n\n\t\tif ( attributeProperties.__webglBuffer === undefined ) {\n\n\t\t\tcreateBuffer( attributeProperties, data, bufferType );\n\n\t\t} else if ( attributeProperties.version !== data.version ) {\n\n\t\t\tupdateBuffer( attributeProperties, data, bufferType );\n\n\t\t}\n\n\t}\n\n\tfunction createBuffer( attributeProperties, data, bufferType ) {\n\n\t\tattributeProperties.__webglBuffer = gl.createBuffer();\n\t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\n\t\tvar usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\n\t\tgl.bufferData( bufferType, data.array, usage );\n\n\t\tattributeProperties.version = data.version;\n\n\t}\n\n\tfunction updateBuffer( attributeProperties, data, bufferType ) {\n\n\t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\n\t\tif ( data.dynamic === false || data.updateRange.count === - 1 ) {\n\n\t\t\t// Not using update ranges\n\n\t\t\tgl.bufferSubData( bufferType, 0, data.array );\n\n\t\t} else if ( data.updateRange.count === 0 ) {\n\n\t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\n\n\t\t} else {\n\n\t\t\tgl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\t\t  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );\n\n\t\t\tdata.updateRange.count = 0; // reset range\n\n\t\t}\n\n\t\tattributeProperties.version = data.version;\n\n\t}\n\n\tfunction getAttributeBuffer( attribute ) {\n\n\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\n\n\t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\n\t\t}\n\n\t\treturn properties.get( attribute ).__webglBuffer;\n\n\t}\n\n\tfunction getWireframeAttribute( geometry ) {\n\n\t\tvar property = properties.get( geometry );\n\n\t\tif ( property.wireframe !== undefined ) {\n\n\t\t\treturn property.wireframe;\n\n\t\t}\n\n\t\tvar indices = [];\n\n\t\tvar index = geometry.index;\n\t\tvar attributes = geometry.attributes;\n\t\tvar position = attributes.position;\n\n\t\t// console.time( 'wireframe' );\n\n\t\tif ( index !== null ) {\n\n\t\t\tvar edges = {};\n\t\t\tvar array = index.array;\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tvar a = array[ i + 0 ];\n\t\t\t\tvar b = array[ i + 1 ];\n\t\t\t\tvar c = array[ i + 2 ];\n\n\t\t\t\tif ( checkEdge( edges, a, b ) ) indices.push( a, b );\n\t\t\t\tif ( checkEdge( edges, b, c ) ) indices.push( b, c );\n\t\t\t\tif ( checkEdge( edges, c, a ) ) indices.push( c, a );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tvar array = attributes.position.array;\n\n\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\t\tvar a = i + 0;\n\t\t\t\tvar b = i + 1;\n\t\t\t\tvar c = i + 2;\n\n\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// console.timeEnd( 'wireframe' );\n\n\t\tvar TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;\n\t\tvar attribute = new THREE.BufferAttribute( new TypeArray( indices ), 1 );\n\n\t\tupdateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );\n\n\t\tproperty.wireframe = attribute;\n\n\t\treturn attribute;\n\n\t}\n\n\tfunction checkEdge( edges, a, b ) {\n\n\t\tif ( a > b ) {\n\n\t\t\tvar tmp = a;\n\t\t\ta = b;\n\t\t\tb = tmp;\n\n\t\t}\n\n\t\tvar list = edges[ a ];\n\n\t\tif ( list === undefined ) {\n\n\t\t\tedges[ a ] = [ b ];\n\t\t\treturn true;\n\n\t\t} else if ( list.indexOf( b ) === -1 ) {\n\n\t\t\tlist.push( b );\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tthis.getAttributeBuffer = getAttributeBuffer;\n\tthis.getWireframeAttribute = getWireframeAttribute;\n\n\tthis.update = update;\n\n};\n\n// File:src/renderers/webgl/WebGLProgram.js\n\nTHREE.WebGLProgram = ( function () {\n\n\tvar programIdCount = 0;\n\n\tfunction getEncodingComponents( encoding ) {\n\n\t\tswitch ( encoding ) {\n\n\t\t\tcase THREE.LinearEncoding:\n\t\t\t\treturn [ 'Linear','( value )' ];\n\t\t\tcase THREE.sRGBEncoding:\n\t\t\t\treturn [ 'sRGB','( value )' ];\n\t\t\tcase THREE.RGBEEncoding:\n\t\t\t\treturn [ 'RGBE','( value )' ];\n\t\t\tcase THREE.RGBM7Encoding:\n\t\t\t\treturn [ 'RGBM','( value, 7.0 )' ];\n\t\t\tcase THREE.RGBM16Encoding:\n\t\t\t\treturn [ 'RGBM','( value, 16.0 )' ];\n\t\t\tcase THREE.RGBDEncoding:\n\t\t\t\treturn [ 'RGBD','( value, 256.0 )' ];\n\t\t\tcase THREE.GammaEncoding:\n\t\t\t\treturn [ 'Gamma','( value, float( GAMMA_FACTOR ) )' ];\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\n\n\t\t}\n\n\t}\n\n\tfunction getTexelDecodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn \"vec4 \" + functionName + \"( vec4 value ) { return \" + components[ 0 ] + \"ToLinear\" + components[ 1 ] + \"; }\";\n\n\t}\n\n\tfunction getTexelEncodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn \"vec4 \" + functionName + \"( vec4 value ) { return LinearTo\" + components[ 0 ] + components[ 1 ] + \"; }\";\n\n\t}\n\n\tfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\t\tvar toneMappingName;\n\n\t\tswitch ( toneMapping ) {\n\n\t\t\tcase THREE.LinearToneMapping:\n\t\t\t\ttoneMappingName = \"Linear\";\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.ReinhardToneMapping:\n\t\t\t\ttoneMappingName = \"Reinhard\";\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.Uncharted2ToneMapping:\n\t\t\t\ttoneMappingName = \"Uncharted2\";\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.CineonToneMapping:\n\t\t\t\ttoneMappingName = \"OptimizedCineon\";\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\n\n\t\t}\n\n\t\treturn \"vec3 \" + functionName + \"( vec3 color ) { return \" + toneMappingName + \"ToneMapping( color ); }\";\n\n\t}\n\n\tfunction generateExtensions( extensions, parameters, rendererExtensions ) {\n\n\t\textensions = extensions || {};\n\n\t\tvar chunks = [\n\t\t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : '',\n\t\t];\n\n\t\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n\t}\n\n\tfunction generateDefines( defines ) {\n\n\t\tvar chunks = [];\n\n\t\tfor ( var name in defines ) {\n\n\t\t\tvar value = defines[ name ];\n\n\t\t\tif ( value === false ) continue;\n\n\t\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t\t}\n\n\t\treturn chunks.join( '\\n' );\n\n\t}\n\n\tfunction fetchAttributeLocations( gl, program, identifiers ) {\n\n\t\tvar attributes = {};\n\n\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\n\n\t\tfor ( var i = 0; i < n; i ++ ) {\n\n\t\t\tvar info = gl.getActiveAttrib( program, i );\n\t\t\tvar name = info.name;\n\n\t\t\t// console.log(\"THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:\", name, i );\n\n\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\n\t\t}\n\n\t\treturn attributes;\n\n\t}\n\n\tfunction filterEmptyLine( string ) {\n\n\t\treturn string !== '';\n\n\t}\n\n\tfunction replaceLightNums( string, parameters ) {\n\n\t\treturn string\n\t\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );\n\n\t}\n\n\tfunction parseIncludes( string ) {\n\n\t\tvar pattern = /#include +<([\\w\\d.]+)>/g;\n\n\t\tfunction replace( match, include ) {\n\n\t\t\tvar replace = THREE.ShaderChunk[ include ];\n\n\t\t\tif ( replace === undefined ) {\n\n\t\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t\t\t}\n\n\t\t\treturn parseIncludes( replace );\n\n\t\t}\n\n\t\treturn string.replace( pattern, replace );\n\n\t}\n\n\tfunction unrollLoops( string ) {\n\n\t\tvar pattern = /for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\n\t\tfunction replace( match, start, end, snippet ) {\n\n\t\t\tvar unroll = '';\n\n\t\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\t\t\tunroll += snippet.replace( /\\[ i \\]/g, '[ ' + i + ' ]' );\n\n\t\t\t}\n\n\t\t\treturn unroll;\n\n\t\t}\n\n\t\treturn string.replace( pattern, replace );\n\n\t}\n\n\treturn function WebGLProgram( renderer, code, material, parameters ) {\n\n\t\tvar gl = renderer.context;\n\n\t\tvar extensions = material.extensions;\n\t\tvar defines = material.defines;\n\n\t\tvar vertexShader = material.__webglShader.vertexShader;\n\t\tvar fragmentShader = material.__webglShader.fragmentShader;\n\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif ( parameters.shadowMapType === THREE.PCFShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t\t} else if ( parameters.shadowMapType === THREE.PCFSoftShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t\t}\n\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( material.envMap.mapping ) {\n\n\t\t\t\tcase THREE.CubeReflectionMapping:\n\t\t\t\tcase THREE.CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.CubeUVReflectionMapping:\n\t\t\t\tcase THREE.CubeUVRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.EquirectangularReflectionMapping:\n\t\t\t\tcase THREE.EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.SphericalReflectionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tswitch ( material.envMap.mapping ) {\n\n\t\t\t\tcase THREE.CubeRefractionMapping:\n\t\t\t\tcase THREE.EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tswitch ( material.combine ) {\n\n\t\t\t\tcase THREE.MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n\t\t// console.log( 'building new program ' );\n\n\t\t//\n\n\t\tvar customExtensions = generateExtensions( extensions, parameters, renderer.extensions );\n\n\t\tvar customDefines = generateDefines( defines );\n\n\t\t//\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar prefixVertex, prefixFragment;\n\n\t\tif ( material instanceof THREE.RawShaderMaterial ) {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t} else {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t\t'precision ' + parameters.precision + ' int;',\n\n\t\t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\n\t\t\t\t'attribute vec3 position;',\n\t\t\t\t'attribute vec3 normal;',\n\t\t\t\t'attribute vec2 uv;',\n\n\t\t\t\t'#ifdef USE_COLOR',\n\n\t\t\t\t'\tattribute vec3 color;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_MORPHTARGETS',\n\n\t\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t\t'\t#else',\n\n\t\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t\t'\t#endif',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\n\t\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t\t'precision ' + parameters.precision + ' int;',\n\n\t\t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.premultipliedAlpha ? \"#define PREMULTIPLIED_ALPHA\" : '',\n\n\t\t\t\tparameters.physicallyCorrectLights ? \"#define PHYSICALLY_CORRECT_LIGHTS\" : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\tparameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',\n\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\n\t\t\t\t( parameters.toneMapping !== THREE.NoToneMapping ) ? \"#define TONE_MAPPING\" : '',\n\t\t\t\t( parameters.toneMapping !== THREE.NoToneMapping ) ? THREE.ShaderChunk[ 'tonemapping_pars_fragment' ] : '',  // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t\t( parameters.toneMapping !== THREE.NoToneMapping ) ? getToneMappingFunction( \"toneMapping\", parameters.toneMapping ) : '',\n\n\t\t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? THREE.ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t\t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t\t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t\t\t\tparameters.outputEncoding ? getTexelEncodingFunction( \"linearToOutputTexel\", parameters.outputEncoding ) : '',\n\n\t\t\t\tparameters.depthPacking ? \"#define DEPTH_PACKING \" + material.depthPacking : '',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t}\n\n\t\tvertexShader = parseIncludes( vertexShader, parameters );\n\t\tvertexShader = replaceLightNums( vertexShader, parameters );\n\n\t\tfragmentShader = parseIncludes( fragmentShader, parameters );\n\t\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\n\t\tif ( material instanceof THREE.ShaderMaterial === false ) {\n\n\t\t\tvertexShader = unrollLoops( vertexShader );\n\t\t\tfragmentShader = unrollLoops( fragmentShader );\n\n\t\t}\n\n\t\tvar vertexGlsl = prefixVertex + vertexShader;\n\t\tvar fragmentGlsl = prefixFragment + fragmentShader;\n\n\t\t// console.log( '*VERTEX*', vertexGlsl );\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\tvar glVertexShader = THREE.WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\n\t\tvar glFragmentShader = THREE.WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\n\n\t\tgl.attachShader( program, glVertexShader );\n\t\tgl.attachShader( program, glFragmentShader );\n\n\t\t// Force a particular attribute to index 0.\n\n\t\tif ( material.index0AttributeName !== undefined ) {\n\n\t\t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\n\n\t\t} else if ( parameters.morphTargets === true ) {\n\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t\t}\n\n\t\tgl.linkProgram( program );\n\n\t\tvar programLog = gl.getProgramInfoLog( program );\n\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader );\n\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader );\n\n\t\tvar runnable = true;\n\t\tvar haveDiagnostics = true;\n\n\t\t// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\n\t\t// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\n\n\t\tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\n\n\t\t\trunnable = false;\n\n\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\n\n\t\t} else if ( programLog !== '' ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\n\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\t\thaveDiagnostics = false;\n\n\t\t}\n\n\t\tif ( haveDiagnostics ) {\n\n\t\t\tthis.diagnostics = {\n\n\t\t\t\trunnable: runnable,\n\t\t\t\tmaterial: material,\n\n\t\t\t\tprogramLog: programLog,\n\n\t\t\t\tvertexShader: {\n\n\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\tprefix: prefixVertex\n\n\t\t\t\t},\n\n\t\t\t\tfragmentShader: {\n\n\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\tprefix: prefixFragment\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\t// clean up\n\n\t\tgl.deleteShader( glVertexShader );\n\t\tgl.deleteShader( glFragmentShader );\n\n\t\t// set up caching for uniform locations\n\n\t\tvar cachedUniforms;\n\n\t\tthis.getUniforms = function() {\n\n\t\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\t\tcachedUniforms =\n\t\t\t\t\t\tnew THREE.WebGLUniforms( gl, program, renderer );\n\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\n\t\t};\n\n\t\t// set up caching for attribute locations\n\n\t\tvar cachedAttributes;\n\n\t\tthis.getAttributes = function() {\n\n\t\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\n\t\t};\n\n\t\t// free resource\n\n\t\tthis.destroy = function() {\n\n\t\t\tgl.deleteProgram( program );\n\t\t\tthis.program = undefined;\n\n\t\t};\n\n\t\t// DEPRECATED\n\n\t\tObject.defineProperties( this, {\n\n\t\t\tuniforms: {\n\t\t\t\tget: function() {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\n\t\t\t\t\treturn this.getUniforms();\n\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tattributes: {\n\t\t\t\tget: function() {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\n\t\t\t\t\treturn this.getAttributes();\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t} );\n\n\n\t\t//\n\n\t\tthis.id = programIdCount ++;\n\t\tthis.code = code;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\n\t\treturn this;\n\n\t};\n\n} )();\n\n// File:src/renderers/webgl/WebGLPrograms.js\n\nTHREE.WebGLPrograms = function ( renderer, capabilities ) {\n\n\tvar programs = [];\n\n\tvar shaderIDs = {\n\t\tMeshDepthMaterial: 'depth',\n\t\tMeshNormalMaterial: 'normal',\n\t\tMeshBasicMaterial: 'basic',\n\t\tMeshLambertMaterial: 'lambert',\n\t\tMeshPhongMaterial: 'phong',\n\t\tMeshStandardMaterial: 'physical',\n\t\tMeshPhysicalMaterial: 'physical',\n\t\tLineBasicMaterial: 'basic',\n\t\tLineDashedMaterial: 'dashed',\n\t\tPointsMaterial: 'points'\n\t};\n\n\tvar parameterNames = [\n\t\t\"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\",\n\t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\",\n\t\t\"roughnessMap\", \"metalnessMap\",\n\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\n\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\",\n\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"depthPacking\"\n\t];\n\n\n\tfunction allocateBones ( object ) {\n\n\t\tif ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {\n\n\t\t\treturn 1024;\n\n\t\t} else {\n\n\t\t\t// default for when object is not specified\n\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t//\n\t\t\t//  - leave some extra space for other uniforms\n\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t//    (up to 54 should be safe)\n\n\t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\n\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\tvar maxBones = nVertexMatrices;\n\n\t\t\tif ( object !== undefined && object instanceof THREE.SkinnedMesh ) {\n\n\t\t\t\tmaxBones = Math.min( object.skeleton.bones.length, maxBones );\n\n\t\t\t\tif ( maxBones < object.skeleton.bones.length ) {\n\n\t\t\t\t\tconsole.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn maxBones;\n\n\t\t}\n\n\t}\n\n\tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\n\n\t\tvar encoding;\n\n\t\tif ( ! map ) {\n\n\t\t\tencoding = THREE.LinearEncoding;\n\n\t\t} else if ( map instanceof THREE.Texture ) {\n\n\t\t\tencoding = map.encoding;\n\n\t\t} else if ( map instanceof THREE.WebGLRenderTarget ) {\n\n\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\tencoding = map.texture.encoding;\n\n\t\t}\n\n\t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n\t\tif ( encoding === THREE.LinearEncoding && gammaOverrideLinear ) {\n\n\t\t\tencoding = THREE.GammaEncoding;\n\n\t\t}\n\n\t\treturn encoding;\n\n\t}\n\n\tthis.getParameters = function ( material, lights, fog, nClipPlanes, object ) {\n\n\t\tvar shaderID = shaderIDs[ material.type ];\n\n\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t// (not to blow over maxLights budget)\n\n\t\tvar maxBones = allocateBones( object );\n\t\tvar precision = renderer.getPrecision();\n\n\t\tif ( material.precision !== null ) {\n\n\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar currentRenderTarget = renderer.getCurrentRenderTarget();\n\n\t\tvar parameters = {\n\n\t\t\tshaderID: shaderID,\n\n\t\t\tprecision: precision,\n\t\t\tsupportsVertexTextures: capabilities.vertexTextures,\n\t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\n\t\t\tmap: !! material.map,\n\t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\n\t\t\tenvMap: !! material.envMap,\n\t\t\tenvMapMode: material.envMap && material.envMap.mapping,\n\t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\n\t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === THREE.CubeUVReflectionMapping ) || ( material.envMap.mapping === THREE.CubeUVRefractionMapping ) ),\n\t\t\tlightMap: !! material.lightMap,\n\t\t\taoMap: !! material.aoMap,\n\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\n\t\t\tbumpMap: !! material.bumpMap,\n\t\t\tnormalMap: !! material.normalMap,\n\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\tspecularMap: !! material.specularMap,\n\t\t\talphaMap: !! material.alphaMap,\n\n\t\t\tcombine: material.combine,\n\n\t\t\tvertexColors: material.vertexColors,\n\n\t\t\tfog: fog,\n\t\t\tuseFog: material.fog,\n\t\t\tfogExp: fog instanceof THREE.FogExp2,\n\n\t\t\tflatShading: material.shading === THREE.FlatShading,\n\n\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\n\n\t\t\tskinning: material.skinning,\n\t\t\tmaxBones: maxBones,\n\t\t\tuseVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,\n\n\t\t\tmorphTargets: material.morphTargets,\n\t\t\tmorphNormals: material.morphNormals,\n\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n\t\t\tnumDirLights: lights.directional.length,\n\t\t\tnumPointLights: lights.point.length,\n\t\t\tnumSpotLights: lights.spot.length,\n\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\tnumClippingPlanes: nClipPlanes,\n\n\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,\n\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\ttoneMapping: renderer.toneMapping,\n\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\talphaTest: material.alphaTest,\n\t\t\tdoubleSided: material.side === THREE.DoubleSide,\n\t\t\tflipSided: material.side === THREE.BackSide,\n\n\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\n\n\t\t};\n\n\t\treturn parameters;\n\n\t};\n\n\tthis.getProgramCode = function ( material, parameters ) {\n\n\t\tvar array = [];\n\n\t\tif ( parameters.shaderID ) {\n\n\t\t\tarray.push( parameters.shaderID );\n\n\t\t} else {\n\n\t\t\tarray.push( material.fragmentShader );\n\t\t\tarray.push( material.vertexShader );\n\n\t\t}\n\n\t\tif ( material.defines !== undefined ) {\n\n\t\t\tfor ( var name in material.defines ) {\n\n\t\t\t\tarray.push( name );\n\t\t\t\tarray.push( material.defines[ name ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\n\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n\t\t}\n\n\t\treturn array.join();\n\n\t};\n\n\tthis.acquireProgram = function ( material, parameters, code ) {\n\n\t\tvar program;\n\n\t\t// Check if code has been already compiled\n\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\tvar programInfo = programs[ p ];\n\n\t\t\tif ( programInfo.code === code ) {\n\n\t\t\t\tprogram = programInfo;\n\t\t\t\t++ program.usedTimes;\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( program === undefined ) {\n\n\t\t\tprogram = new THREE.WebGLProgram( renderer, code, material, parameters );\n\t\t\tprograms.push( program );\n\n\t\t}\n\n\t\treturn program;\n\n\t};\n\n\tthis.releaseProgram = function( program ) {\n\n\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t// Remove from unordered set\n\t\t\tvar i = programs.indexOf( program );\n\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\tprograms.pop();\n\n\t\t\t// Free WebGL resources\n\t\t\tprogram.destroy();\n\n\t\t}\n\n\t};\n\n\t// Exposed for resource monitoring & error feedback via renderer.info:\n\tthis.programs = programs;\n\n};\n\n// File:src/renderers/webgl/WebGLProperties.js\n\n/**\n* @author fordacious / fordacious.github.io\n*/\n\nTHREE.WebGLProperties = function () {\n\n\tvar properties = {};\n\n\tthis.get = function ( object ) {\n\n\t\tvar uuid = object.uuid;\n\t\tvar map = properties[ uuid ];\n\n\t\tif ( map === undefined ) {\n\n\t\t\tmap = {};\n\t\t\tproperties[ uuid ] = map;\n\n\t\t}\n\n\t\treturn map;\n\n\t};\n\n\tthis.delete = function ( object ) {\n\n\t\tdelete properties[ object.uuid ];\n\n\t};\n\n\tthis.clear = function () {\n\n\t\tproperties = {};\n\n\t};\n\n};\n\n// File:src/renderers/webgl/WebGLShader.js\n\nTHREE.WebGLShader = ( function () {\n\n\tfunction addLineNumbers( string ) {\n\n\t\tvar lines = string.split( '\\n' );\n\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n\t\t}\n\n\t\treturn lines.join( '\\n' );\n\n\t}\n\n\treturn function WebGLShader( gl, type, string ) {\n\n\t\tvar shader = gl.createShader( type );\n\n\t\tgl.shaderSource( shader, string );\n\t\tgl.compileShader( shader );\n\n\t\tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\n\n\t\t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\n\n\t\t}\n\n\t\tif ( gl.getShaderInfoLog( shader ) !== '' ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\n\n\t\t}\n\n\t\t// --enable-privileged-webgl-extension\n\t\t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\treturn shader;\n\n\t};\n\n} )();\n\n// File:src/renderers/webgl/WebGLShadowMap.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.WebGLShadowMap = function ( _renderer, _lights, _objects ) {\n\n\tvar _gl = _renderer.context,\n\t_state = _renderer.state,\n\t_frustum = new THREE.Frustum(),\n\t_projScreenMatrix = new THREE.Matrix4(),\n\n\t_lightShadows = _lights.shadows,\n\n\t_shadowMapSize = new THREE.Vector2(),\n\n\t_lookTarget = new THREE.Vector3(),\n\t_lightPositionWorld = new THREE.Vector3(),\n\n\t_renderList = [],\n\n\t_MorphingFlag = 1,\n\t_SkinningFlag = 2,\n\n\t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\n\n\t_depthMaterials = new Array( _NumberOfMaterialVariants ),\n\t_distanceMaterials = new Array( _NumberOfMaterialVariants ),\n\n\t_materialCache = {};\n\n\tvar cubeDirections = [\n\t\tnew THREE.Vector3( 1, 0, 0 ), new THREE.Vector3( - 1, 0, 0 ), new THREE.Vector3( 0, 0, 1 ),\n\t\tnew THREE.Vector3( 0, 0, - 1 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, - 1, 0 )\n\t];\n\n\tvar cubeUps = [\n\t\tnew THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ),\n\t\tnew THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 0, 1 ),\tnew THREE.Vector3( 0, 0, - 1 )\n\t];\n\n\tvar cube2DViewPorts = [\n\t\tnew THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4(),\n\t\tnew THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4()\n\t];\n\n\t// init\n\n\tvar depthMaterialTemplate = new THREE.MeshDepthMaterial();\n\tdepthMaterialTemplate.depthPacking = THREE.RGBADepthPacking;\n\tdepthMaterialTemplate.clipping = true;\n\n\tvar distanceShader = THREE.ShaderLib[ \"distanceRGBA\" ];\n\tvar distanceUniforms = THREE.UniformsUtils.clone( distanceShader.uniforms );\n\n\tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\n\n\t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\n\t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\n\n\t\tvar depthMaterial = depthMaterialTemplate.clone();\n\t\tdepthMaterial.morphTargets = useMorphing;\n\t\tdepthMaterial.skinning = useSkinning;\n\n\t\t_depthMaterials[ i ] = depthMaterial;\n\n\t\tvar distanceMaterial = new THREE.ShaderMaterial( {\n\t\t\tdefines: {\n\t\t\t\t'USE_SHADOWMAP': ''\n\t\t\t},\n\t\t\tuniforms: distanceUniforms,\n\t\t\tvertexShader: distanceShader.vertexShader,\n\t\t\tfragmentShader: distanceShader.fragmentShader,\n\t\t\tmorphTargets: useMorphing,\n\t\t\tskinning: useSkinning,\n\t\t\tclipping: true\n\t\t} );\n\n\t\t_distanceMaterials[ i ] = distanceMaterial;\n\n\t}\n\n\t//\n\n\tvar scope = this;\n\n\tthis.enabled = false;\n\n\tthis.autoUpdate = true;\n\tthis.needsUpdate = false;\n\n\tthis.type = THREE.PCFShadowMap;\n\n\tthis.renderReverseSided = true;\n\tthis.renderSingleSided = true;\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tif ( scope.enabled === false ) return;\n\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\n\t\tif ( _lightShadows.length === 0 ) return;\n\n\t\t// Set GL state for depth map.\n\t\t_state.clearColor( 1, 1, 1, 1 );\n\t\t_state.disable( _gl.BLEND );\n\t\t_state.setDepthTest( true );\n\t\t_state.setScissorTest( false );\n\n\t\t// render depth map\n\n\t\tvar faceCount, isPointLight;\n\n\t\tfor ( var i = 0, il = _lightShadows.length; i < il; i ++ ) {\n\n\t\t\tvar light = _lightShadows[ i ];\n\t\t\tvar shadow = light.shadow;\n\n\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tvar shadowCamera = shadow.camera;\n\n\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\n\t\t\tif ( light instanceof THREE.PointLight ) {\n\n\t\t\t\tfaceCount = 6;\n\t\t\t\tisPointLight = true;\n\n\t\t\t\tvar vpWidth = _shadowMapSize.x;\n\t\t\t\tvar vpHeight = _shadowMapSize.y;\n\n\t\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t\t// following orientation:\n\t\t\t\t//\n\t\t\t\t//  xzXZ\n\t\t\t\t//   y Y\n\t\t\t\t//\n\t\t\t\t// X - Positive x direction\n\t\t\t\t// x - Negative x direction\n\t\t\t\t// Y - Positive y direction\n\t\t\t\t// y - Negative y direction\n\t\t\t\t// Z - Positive z direction\n\t\t\t\t// z - Negative z direction\n\n\t\t\t\t// positive X\n\t\t\t\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\n\t\t\t\t// negative X\n\t\t\t\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\n\t\t\t\t// positive Z\n\t\t\t\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\n\t\t\t\t// negative Z\n\t\t\t\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\n\t\t\t\t// positive Y\n\t\t\t\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\n\t\t\t\t// negative Y\n\t\t\t\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\n\n\t\t\t\t_shadowMapSize.x *= 4.0;\n\t\t\t\t_shadowMapSize.y *= 2.0;\n\n\t\t\t} else {\n\n\t\t\t\tfaceCount = 1;\n\t\t\t\tisPointLight = false;\n\n\t\t\t}\n\n\t\t\tif ( shadow.map === null ) {\n\n\t\t\t\tvar pars = { minFilter: THREE.NearestFilter, magFilter: THREE.NearestFilter, format: THREE.RGBAFormat };\n\n\t\t\t\tshadow.map = new THREE.WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\n\t\t\t\tshadowCamera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t\tif ( shadow instanceof THREE.SpotLightShadow ) {\n\n\t\t\t\tshadow.update( light );\n\n\t\t\t}\n\n\t\t\tvar shadowMap = shadow.map;\n\t\t\tvar shadowMatrix = shadow.matrix;\n\n\t\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\tshadowCamera.position.copy( _lightPositionWorld );\n\n\t\t\t_renderer.setRenderTarget( shadowMap );\n\t\t\t_renderer.clear();\n\n\t\t\t// render shadow map for each cube face (if omni-directional) or\n\t\t\t// run a single pass if not\n\n\t\t\tfor ( var face = 0; face < faceCount; face ++ ) {\n\n\t\t\t\tif ( isPointLight ) {\n\n\t\t\t\t\t_lookTarget.copy( shadowCamera.position );\n\t\t\t\t\t_lookTarget.add( cubeDirections[ face ] );\n\t\t\t\t\tshadowCamera.up.copy( cubeUps[ face ] );\n\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\n\t\t\t\t\tvar vpDimensions = cube2DViewPorts[ face ];\n\t\t\t\t\t_state.viewport( vpDimensions );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\n\t\t\t\t}\n\n\t\t\t\tshadowCamera.updateMatrixWorld();\n\t\t\t\tshadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );\n\n\t\t\t\t// compute shadow matrix\n\n\t\t\t\tshadowMatrix.set(\n\t\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t\t\t);\n\n\t\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n\t\t\t\t// update camera matrices and frustum\n\n\t\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\t\t\t// set object matrices & frustum culling\n\n\t\t\t\t_renderList.length = 0;\n\n\t\t\t\tprojectObject( scene, camera, shadowCamera );\n\n\t\t\t\t// render shadow map\n\t\t\t\t// render regular objects\n\n\t\t\t\tfor ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar object = _renderList[ j ];\n\t\t\t\t\tvar geometry = _objects.update( object );\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( material instanceof THREE.MultiMaterial ) {\n\n\t\t\t\t\t\tvar groups = geometry.groups;\n\t\t\t\t\t\tvar materials = material.materials;\n\n\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\t\tvar group = groups[ k ];\n\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );\n\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Restore GL state.\n\t\tvar clearColor = _renderer.getClearColor(),\n\t\tclearAlpha = _renderer.getClearAlpha();\n\t\t_renderer.setClearColor( clearColor, clearAlpha );\n\n\t\tscope.needsUpdate = false;\n\n\t};\n\n\tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {\n\n\t\tvar geometry = object.geometry;\n\n\t\tvar result = null;\n\n\t\tvar materialVariants = _depthMaterials;\n\t\tvar customMaterial = object.customDepthMaterial;\n\n\t\tif ( isPointLight ) {\n\n\t\t\tmaterialVariants = _distanceMaterials;\n\t\t\tcustomMaterial = object.customDistanceMaterial;\n\n\t\t}\n\n\t\tif ( ! customMaterial ) {\n\n\t\t\tvar useMorphing = geometry.morphTargets !== undefined &&\n\t\t\t\t\tgeometry.morphTargets.length > 0 && material.morphTargets;\n\n\t\t\tvar useSkinning = object instanceof THREE.SkinnedMesh && material.skinning;\n\n\t\t\tvar variantIndex = 0;\n\n\t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\n\t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\n\n\t\t\tresult = materialVariants[ variantIndex ];\n\n\t\t} else {\n\n\t\t\tresult = customMaterial;\n\n\t\t}\n\n\t\tif ( _renderer.localClippingEnabled &&\n\t\t\t material.clipShadows === true &&\n\t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\n\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t// appropriate state\n\n\t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\n\t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\n\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t}\n\n\t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n\t\t\t}\n\n\t\t\tresult = cachedMaterial;\n\n\t\t}\n\n\t\tresult.visible = material.visible;\n\t\tresult.wireframe = material.wireframe;\n\n\t\tvar side = material.side;\n\n\t\tif ( scope.renderSingleSided && side == THREE.DoubleSide ) {\n\n\t\t\tside = THREE.FrontSide;\n\n\t\t}\n\n\t\tif ( scope.renderReverseSided ) {\n\n\t\t\tif ( side === THREE.FrontSide ) side = THREE.BackSide;\n\t\t\telse if ( side === THREE.BackSide ) side = THREE.FrontSide;\n\n\t\t}\n\n\t\tresult.side = side;\n\n\t\tresult.clipShadows = material.clipShadows;\n\t\tresult.clippingPlanes = material.clippingPlanes;\n\n\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\tresult.linewidth = material.linewidth;\n\n\t\tif ( isPointLight && result.uniforms.lightPos !== undefined ) {\n\n\t\t\tresult.uniforms.lightPos.value.copy( lightPositionWorld );\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tfunction projectObject( object, camera, shadowCamera ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tif ( object.layers.test( camera.layers ) && ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) ) {\n\n\t\t\tif ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {\n\n\t\t\t\tvar material = object.material;\n\n\t\t\t\tif ( material.visible === true ) {\n\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\t\t\t\t\t_renderList.push( object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar children = object.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tprojectObject( children[ i ], camera, shadowCamera );\n\n\t\t}\n\n\t}\n\n};\n\n// File:src/renderers/webgl/WebGLState.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLState = function ( gl, extensions, paramThreeToGL ) {\n\n\tvar _this = this;\n\n\tthis.buffers = {\n\t\tcolor: new THREE.WebGLColorBuffer( gl, this ),\n\t\tdepth: new THREE.WebGLDepthBuffer( gl, this ),\n\t\tstencil: new THREE.WebGLStencilBuffer( gl, this )\n\t};\n\n\tvar maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\tvar newAttributes = new Uint8Array( maxVertexAttributes );\n\tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n\tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\n\tvar capabilities = {};\n\n\tvar compressedTextureFormats = null;\n\n\tvar currentBlending = null;\n\tvar currentBlendEquation = null;\n\tvar currentBlendSrc = null;\n\tvar currentBlendDst = null;\n\tvar currentBlendEquationAlpha = null;\n\tvar currentBlendSrcAlpha = null;\n\tvar currentBlendDstAlpha = null;\n\tvar currentPremultipledAlpha = false;\n\n\tvar currentFlipSided = null;\n\tvar currentCullFace = null;\n\n\tvar currentLineWidth = null;\n\n\tvar currentPolygonOffsetFactor = null;\n\tvar currentPolygonOffsetUnits = null;\n\n\tvar currentScissorTest = null;\n\n\tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\n\tvar currentTextureSlot = null;\n\tvar currentBoundTextures = {};\n\n\tvar currentScissor = new THREE.Vector4();\n\tvar currentViewport = new THREE.Vector4();\n\n\tfunction createTexture( type, target, count ) {\n\n\t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\tvar texture = gl.createTexture();\n\n\t\tgl.bindTexture( type, texture );\n\t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\n\t\tfor ( var i = 0; i < count; i ++ ) {\n\n\t\t\tgl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tvar emptyTextures = {};\n\temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\n\temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\n\n\t//\n\n\tthis.init = function () {\n\n\t\tthis.clearColor( 0, 0, 0, 1 );\n\t\tthis.clearDepth( 1 );\n\t\tthis.clearStencil( 0 );\n\n\t\tthis.enable( gl.DEPTH_TEST );\n\t\tthis.setDepthFunc( THREE.LessEqualDepth );\n\n\t\tthis.setFlipSided( false );\n\t\tthis.setCullFace( THREE.CullFaceBack );\n\t\tthis.enable( gl.CULL_FACE );\n\n\t\tthis.enable( gl.BLEND );\n\t\tthis.setBlending( THREE.NormalBlending );\n\n\t};\n\n\tthis.initAttributes = function () {\n\n\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\n\t\t\tnewAttributes[ i ] = 0;\n\n\t\t}\n\n\t};\n\n\tthis.enableAttribute = function ( attribute ) {\n\n\t\tnewAttributes[ attribute ] = 1;\n\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t}\n\n\t\tif ( attributeDivisors[ attribute ] !== 0 ) {\n\n\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\textension.vertexAttribDivisorANGLE( attribute, 0 );\n\t\t\tattributeDivisors[ attribute ] = 0;\n\n\t\t}\n\n\t};\n\n\tthis.enableAttributeAndDivisor = function ( attribute, meshPerAttribute, extension ) {\n\n\t\tnewAttributes[ attribute ] = 1;\n\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t}\n\n\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\textension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );\n\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t}\n\n\t};\n\n\tthis.disableUnusedAttributes = function () {\n\n\t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\n\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tthis.enable = function ( id ) {\n\n\t\tif ( capabilities[ id ] !== true ) {\n\n\t\t\tgl.enable( id );\n\t\t\tcapabilities[ id ] = true;\n\n\t\t}\n\n\t};\n\n\tthis.disable = function ( id ) {\n\n\t\tif ( capabilities[ id ] !== false ) {\n\n\t\t\tgl.disable( id );\n\t\t\tcapabilities[ id ] = false;\n\n\t\t}\n\n\t};\n\n\tthis.getCompressedTextureFormats = function () {\n\n\t\tif ( compressedTextureFormats === null ) {\n\n\t\t\tcompressedTextureFormats = [];\n\n\t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\n\t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||\n\t\t\t     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {\n\n\t\t\t\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\n\n\t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\n\n\t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn compressedTextureFormats;\n\n\t};\n\n\tthis.setBlending = function ( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\tif ( blending !== THREE.NoBlending ) {\n\n\t\t\tthis.enable( gl.BLEND );\n\n\t\t} else {\n\n\t\t\tthis.disable( gl.BLEND );\n\t\t\tcurrentBlending = blending; // no blending, that is\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n\t\t\tif ( blending === THREE.AdditiveBlending ) {\n\n\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\n\n\t\t\t\t}\n\n\t\t\t} else if ( blending === THREE.SubtractiveBlending ) {\n\n\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\n\n\t\t\t\t}\n\n\t\t\t} else if ( blending === THREE.MultiplyBlending ) {\n\n\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tcurrentBlending = blending;\n\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t\t}\n\n\t\tif ( blending === THREE.CustomBlending ) {\n\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\t\tgl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );\n\n\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t\t}\n\n\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\t\tgl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );\n\n\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tcurrentBlendEquation = null;\n\t\t\tcurrentBlendSrc = null;\n\t\t\tcurrentBlendDst = null;\n\t\t\tcurrentBlendEquationAlpha = null;\n\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t}\n\n\t};\n\n\t// TODO Deprecate\n\n\tthis.setColorWrite = function ( colorWrite ) {\n\n\t\tthis.buffers.color.setMask( colorWrite );\n\n\t};\n\n\tthis.setDepthTest = function ( depthTest ) {\n\n\t\tthis.buffers.depth.setTest( depthTest );\n\n\t};\n\n\tthis.setDepthWrite = function ( depthWrite ) {\n\n\t\tthis.buffers.depth.setMask( depthWrite );\n\n\t};\n\n\tthis.setDepthFunc = function ( depthFunc ) {\n\n\t\tthis.buffers.depth.setFunc( depthFunc );\n\n\t};\n\n\tthis.setStencilTest = function ( stencilTest ) {\n\n\t\tthis.buffers.stencil.setTest( stencilTest );\n\n\t};\n\n\tthis.setStencilWrite = function ( stencilWrite ) {\n\n\t\tthis.buffers.stencil.setMask( stencilWrite );\n\n\t};\n\n\tthis.setStencilFunc = function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\tthis.buffers.stencil.setFunc( stencilFunc, stencilRef, stencilMask );\n\n\t};\n\n\tthis.setStencilOp = function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\tthis.buffers.stencil.setOp( stencilFail, stencilZFail, stencilZPass );\n\n\t};\n\n\t//\n\n\tthis.setFlipSided = function ( flipSided ) {\n\n\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\tif ( flipSided ) {\n\n\t\t\t\tgl.frontFace( gl.CW );\n\n\t\t\t} else {\n\n\t\t\t\tgl.frontFace( gl.CCW );\n\n\t\t\t}\n\n\t\t\tcurrentFlipSided = flipSided;\n\n\t\t}\n\n\t};\n\n\tthis.setCullFace = function ( cullFace ) {\n\n\t\tif ( cullFace !== THREE.CullFaceNone ) {\n\n\t\t\tthis.enable( gl.CULL_FACE );\n\n\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\tif ( cullFace === THREE.CullFaceBack ) {\n\n\t\t\t\t\tgl.cullFace( gl.BACK );\n\n\t\t\t\t} else if ( cullFace === THREE.CullFaceFront ) {\n\n\t\t\t\t\tgl.cullFace( gl.FRONT );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.disable( gl.CULL_FACE );\n\n\t\t}\n\n\t\tcurrentCullFace = cullFace;\n\n\t};\n\n\tthis.setLineWidth = function ( width ) {\n\n\t\tif ( width !== currentLineWidth ) {\n\n\t\t\tgl.lineWidth( width );\n\n\t\t\tcurrentLineWidth = width;\n\n\t\t}\n\n\t};\n\n\tthis.setPolygonOffset = function ( polygonOffset, factor, units ) {\n\n\t\tif ( polygonOffset ) {\n\n\t\t\tthis.enable( gl.POLYGON_OFFSET_FILL );\n\n\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.disable( gl.POLYGON_OFFSET_FILL );\n\n\t\t}\n\n\t};\n\n\tthis.getScissorTest = function () {\n\n\t\treturn currentScissorTest;\n\n\t};\n\n\tthis.setScissorTest = function ( scissorTest ) {\n\n\t\tcurrentScissorTest = scissorTest;\n\n\t\tif ( scissorTest ) {\n\n\t\t\tthis.enable( gl.SCISSOR_TEST );\n\n\t\t} else {\n\n\t\t\tthis.disable( gl.SCISSOR_TEST );\n\n\t\t}\n\n\t};\n\n\t// texture\n\n\tthis.activeTexture = function ( webglSlot ) {\n\n\t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\tgl.activeTexture( webglSlot );\n\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t}\n\n\t};\n\n\tthis.bindTexture = function ( webglType, webglTexture ) {\n\n\t\tif ( currentTextureSlot === null ) {\n\n\t\t\t_this.activeTexture();\n\n\t\t}\n\n\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\tif ( boundTexture === undefined ) {\n\n\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n\t\t}\n\n\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\tboundTexture.type = webglType;\n\t\t\tboundTexture.texture = webglTexture;\n\n\t\t}\n\n\t};\n\n\tthis.compressedTexImage2D = function () {\n\n\t\ttry {\n\n\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( error );\n\n\t\t}\n\n\t};\n\n\tthis.texImage2D = function () {\n\n\t\ttry {\n\n\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( error );\n\n\t\t}\n\n\t};\n\n\t// TODO Deprecate\n\n\tthis.clearColor = function ( r, g, b, a ) {\n\n\t\tthis.buffers.color.setClear( r, g, b, a );\n\n\t};\n\n\tthis.clearDepth = function ( depth ) {\n\n\t\tthis.buffers.depth.setClear( depth );\n\n\t};\n\n\tthis.clearStencil = function ( stencil ) {\n\n\t\tthis.buffers.stencil.setClear( stencil );\n\n\t};\n\n\t//\n\n\tthis.scissor = function ( scissor ) {\n\n\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\tcurrentScissor.copy( scissor );\n\n\t\t}\n\n\t};\n\n\tthis.viewport = function ( viewport ) {\n\n\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\tcurrentViewport.copy( viewport );\n\n\t\t}\n\n\t};\n\n\t//\n\n\tthis.reset = function () {\n\n\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\n\t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\n\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tcapabilities = {};\n\n\t\tcompressedTextureFormats = null;\n\n\t\tcurrentTextureSlot = null;\n\t\tcurrentBoundTextures = {};\n\n\t\tcurrentBlending = null;\n\n\t\tcurrentFlipSided = null;\n\t\tcurrentCullFace = null;\n\n\t\tthis.buffers.color.reset();\n\t\tthis.buffers.depth.reset();\n\t\tthis.buffers.stencil.reset();\n\n\t};\n\n};\n\nTHREE.WebGLColorBuffer = function ( gl, state ) {\n\n\tvar locked = false;\n\n\tvar color = new THREE.Vector4();\n\tvar currentColorMask = null;\n\tvar currentColorClear = new THREE.Vector4();\n\n\tthis.setMask = function ( colorMask ) {\n\n\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\tcurrentColorMask = colorMask;\n\n\t\t}\n\n\t};\n\n\tthis.setLocked = function ( lock ) {\n\n\t\tlocked = lock;\n\n\t};\n\n\tthis.setClear = function ( r, g, b, a ) {\n\n\t\tcolor.set( r, g, b, a );\n\n\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\tgl.clearColor( r, g, b, a );\n\t\t\tcurrentColorClear.copy( color );\n\n\t\t}\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tlocked = false;\n\n\t\tcurrentColorMask = null;\n\t\tcurrentColorClear = new THREE.Vector4();\n\n\t};\n\n};\n\nTHREE.WebGLDepthBuffer = function( gl, state ) {\n\n\tvar locked = false;\n\n\tvar currentDepthMask = null;\n\tvar currentDepthFunc = null;\n\tvar currentDepthClear = null;\n\n\tthis.setTest = function ( depthTest ) {\n\n\t\tif ( depthTest ) {\n\n\t\t\tstate.enable( gl.DEPTH_TEST );\n\n\t\t} else {\n\n\t\t\tstate.disable( gl.DEPTH_TEST );\n\n\t\t}\n\n\t};\n\n\tthis.setMask = function( depthMask ){\n\n\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\tgl.depthMask( depthMask );\n\t\t\tcurrentDepthMask = depthMask;\n\n\t\t}\n\n\t};\n\n\tthis.setFunc = function ( depthFunc ) {\n\n\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\tif ( depthFunc ) {\n\n\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\tcase THREE.NeverDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.AlwaysDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.LessDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.LESS );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.LessEqualDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.EqualDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.GreaterEqualDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.GreaterDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.NotEqualDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t}\n\n\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t}\n\n\t};\n\n\tthis.setLocked = function ( lock ) {\n\n\t\tlocked = lock;\n\n\t};\n\n\tthis.setClear = function ( depth ) {\n\n\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\tgl.clearDepth( depth );\n\t\t\tcurrentDepthClear = depth;\n\n\t\t}\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tlocked = false;\n\n\t\tcurrentDepthMask = null;\n\t\tcurrentDepthFunc = null;\n\t\tcurrentDepthClear = null;\n\n\t};\n\n};\n\nTHREE.WebGLStencilBuffer = function ( gl, state ) {\n\n\tvar locked = false;\n\n\tvar currentStencilMask = null;\n\tvar currentStencilFunc = null;\n\tvar currentStencilRef = null;\n\tvar currentStencilFuncMask = null;\n\tvar currentStencilFail  = null;\n\tvar currentStencilZFail = null;\n\tvar currentStencilZPass = null;\n\tvar currentStencilClear = null;\n\n\tthis.setTest = function ( stencilTest ) {\n\n\t\tif ( stencilTest ) {\n\n\t\t\tstate.enable( gl.STENCIL_TEST );\n\n\t\t} else {\n\n\t\t\tstate.disable( gl.STENCIL_TEST );\n\n\t\t}\n\n\t};\n\n\tthis.setMask = function ( stencilMask ) {\n\n\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\tgl.stencilMask( stencilMask );\n\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t}\n\n\t};\n\n\tthis.setFunc = function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t     currentStencilRef \t!== stencilRef \t||\n\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\tgl.stencilFunc( stencilFunc,  stencilRef, stencilMask );\n\n\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\tcurrentStencilRef  = stencilRef;\n\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t}\n\n\t};\n\n\tthis.setOp\t = function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\tif ( currentStencilFail\t !== stencilFail \t||\n\t\t     currentStencilZFail !== stencilZFail ||\n\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\tgl.stencilOp( stencilFail,  stencilZFail, stencilZPass );\n\n\t\t\tcurrentStencilFail  = stencilFail;\n\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t}\n\n\t};\n\n\tthis.setLocked = function ( lock ) {\n\n\t\tlocked = lock;\n\n\t};\n\n\tthis.setClear = function ( stencil ) {\n\n\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\tgl.clearStencil( stencil );\n\t\t\tcurrentStencilClear = stencil;\n\n\t\t}\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tlocked = false;\n\n\t\tcurrentStencilMask = null;\n\t\tcurrentStencilFunc = null;\n\t\tcurrentStencilRef = null;\n\t\tcurrentStencilFuncMask = null;\n\t\tcurrentStencilFail = null;\n\t\tcurrentStencilZFail = null;\n\t\tcurrentStencilZPass = null;\n\t\tcurrentStencilClear = null;\n\n\t};\n\n};\n\n// File:src/renderers/webgl/WebGLTextures.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLTextures = function ( _gl, extensions, state, properties, capabilities, paramThreeToGL, info ) {\n\n\tvar _infoMemory = info.memory;\n\tvar _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext );\n\n\t//\n\n\tfunction clampToMaxSize ( image, maxSize ) {\n\n\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\t// Warning: Scaling through the canvas will only work with images that use\n\t\t\t// premultiplied alpha.\n\n\t\t\tvar scale = maxSize / Math.max( image.width, image.height );\n\n\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\tcanvas.width = Math.floor( image.width * scale );\n\t\t\tcanvas.height = Math.floor( image.height * scale );\n\n\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n\t\t\treturn canvas;\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\tfunction isPowerOfTwo( image ) {\n\n\t\treturn THREE.Math.isPowerOfTwo( image.width ) && THREE.Math.isPowerOfTwo( image.height );\n\n\t}\n\n\tfunction makePowerOfTwo( image ) {\n\n\t\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {\n\n\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\tcanvas.width = THREE.Math.nearestPowerOfTwo( image.width );\n\t\t\tcanvas.height = THREE.Math.nearestPowerOfTwo( image.height );\n\n\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n\t\t\treturn canvas;\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\tif ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) return true;\n\t\tif ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) return true;\n\n\t\treturn false;\n\n\t}\n\n\t// Fallback filters for non-power-of-2 textures\n\n\tfunction filterFallback ( f ) {\n\n\t\tif ( f === THREE.NearestFilter || f === THREE.NearestMipMapNearestFilter || f === THREE.NearestMipMapLinearFilter ) {\n\n\t\t\treturn _gl.NEAREST;\n\n\t\t}\n\n\t\treturn _gl.LINEAR;\n\n\t}\n\n\t//\n\n\tfunction onTextureDispose( event ) {\n\n\t\tvar texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tdeallocateTexture( texture );\n\n\t\t_infoMemory.textures --;\n\n\n\t}\n\n\tfunction onRenderTargetDispose( event ) {\n\n\t\tvar renderTarget = event.target;\n\n\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tdeallocateRenderTarget( renderTarget );\n\n\t\t_infoMemory.textures --;\n\n\t}\n\n\t//\n\n\tfunction deallocateTexture( texture ) {\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\n\n\t\t\t// cube texture\n\n\t\t\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\n\n\t\t} else {\n\n\t\t\t// 2D texture\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t}\n\n\t\t// remove all webgl properties\n\t\tproperties.delete( texture );\n\n\t}\n\n\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\tif ( ! renderTarget ) return;\n\n\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t}\n\n\t\tif ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\n\t\t}\n\n\t\tproperties.delete( renderTarget.texture );\n\t\tproperties.delete( renderTarget );\n\n\t}\n\n\t//\n\n\n\n\tfunction setTexture2D( texture, slot ) {\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tvar image = texture.image;\n\n\t\t\tif ( image === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );\n\n\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );\n\n\t\t\t} else {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n\t}\n\n\tfunction setTextureCube ( texture, slot ) {\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( texture.image.length === 6 ) {\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tif ( ! textureProperties.__image__webglTextureCube ) {\n\n\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\n\n\t\t\t\t\t_infoMemory.textures ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n\t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\n\t\t\t\tvar isCompressed = texture instanceof THREE.CompressedTexture;\n\t\t\t\tvar isDataTexture = texture.image[ 0 ] instanceof THREE.DataTexture;\n\n\t\t\t\tvar cubeImage = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar image = cubeImage[ 0 ],\n\t\t\t\tisPowerOfTwoImage = isPowerOfTwo( image ),\n\t\t\t\tglFormat = paramThreeToGL( texture.format ),\n\t\t\t\tglType = paramThreeToGL( texture.type );\n\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( ! isCompressed ) {\n\n\t\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tmipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\tif ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {\n\n\t\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\" );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) {\n\n\t\t\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t\t} else {\n\n\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction setTextureCubeDynamic ( texture, slot ) {\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\n\n\t}\n\n\tfunction setTextureParameters ( textureType, texture, isPowerOfTwoImage ) {\n\n\t\tvar extension;\n\n\t\tif ( isPowerOfTwoImage ) {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );\n\n\t\t} else {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n\n\t\t\tif ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );\n\n\t\t\t}\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\n\n\t\t\tif ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );\n\n\t\t\t}\n\n\t\t}\n\n\t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\tif ( extension ) {\n\n\t\t\tif ( texture.type === THREE.FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\n\t\t\tif ( texture.type === THREE.HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;\n\n\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t_infoMemory.textures ++;\n\n\t\t}\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\n\t\tvar image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\n\n\t\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {\n\n\t\t\timage = makePowerOfTwo( image );\n\n\t\t}\n\n\t\tvar isPowerOfTwoImage = isPowerOfTwo( image ),\n\t\tglFormat = paramThreeToGL( texture.format ),\n\t\tglType = paramThreeToGL( texture.type );\n\n\t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );\n\n\t\tvar mipmap, mipmaps = texture.mipmaps;\n\n\t\tif ( texture instanceof THREE.DepthTexture ) {\n\n\t\t\t// populate depth texture with dummy data\n\n\t\t\tvar internalFormat = _gl.DEPTH_COMPONENT;\n\n\t\t\tif ( texture.type === THREE.FloatType ) {\n\n\t\t\t\tif ( !_isWebGL2 ) throw new Error('Float Depth Texture only supported in WebGL2.0');\n\t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT32F;\n\n\t\t\t} else if ( _isWebGL2 ) {\n\n\t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\n\t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT16;\n\n\t\t\t}\n\n\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t} else if ( texture instanceof THREE.DataTexture ) {\n\n\t\t\t// use manually created mipmaps if available\n\t\t\t// if there are no manual mipmaps\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\n\t\t\t}\n\n\t\t} else if ( texture instanceof THREE.CompressedTexture ) {\n\n\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\tif ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {\n\n\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\" );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t// use manually created mipmaps if available\n\t\t\t// if there are no manual mipmaps\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\n\t\ttextureProperties.__version = texture.version;\n\n\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t}\n\n\t// Render targets\n\n\t// Setup storage for target texture and bind it to correct framebuffer\n\tfunction setupFrameBufferTexture ( framebuffer, renderTarget, attachment, textureTarget ) {\n\n\t\tvar glFormat = paramThreeToGL( renderTarget.texture.format );\n\t\tvar glType = paramThreeToGL( renderTarget.texture.type );\n\t\tstate.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t}\n\n\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\tfunction setupRenderBufferStorage ( renderbuffer, renderTarget ) {\n\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\n\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t} else {\n\n\t\t\t// FIXME: We don't support !depth !stencil\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\n\n\t\t}\n\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\n\t}\n\n\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\tfunction setupDepthTexture ( framebuffer, renderTarget ) {\n\n\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\n\t\tif ( isCube ) throw new Error('Depth Texture with cube render targets is not supported!');\n\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\tif ( !( renderTarget.depthTexture instanceof THREE.DepthTexture ) ) {\n\n\t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n\n\t\t}\n\n\t\t// upload an empty depth texture with framebuffer size\n\t\tif ( !properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\t\t}\n\n\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t}\n\n\t// Setup GL resources for a non-texture depth buffer\n\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\n\n\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\tif ( isCube ) throw new Error('target.depthTexture not supported in Cube render targets');\n\n\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t} else {\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t}\n\n\t// Set up GL resources for the render target\n\tfunction setupRenderTarget( renderTarget ) {\n\n\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t_infoMemory.textures ++;\n\n\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\n\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\n\t\t// Setup framebuffer\n\n\t\tif ( isCube ) {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t}\n\n\t\t// Setup color buffer\n\n\t\tif ( isCube ) {\n\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\n\n\t\t} else {\n\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\n\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\n\n\t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\n\n\t\t}\n\n\t\t// Setup depth and stencil buffers\n\n\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t}\n\n\t}\n\n\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\tvar texture = renderTarget.texture;\n\n\t\tif ( texture.generateMipmaps && isPowerOfTwo( renderTarget ) &&\n\t\t\t\ttexture.minFilter !== THREE.NearestFilter &&\n\t\t\t\ttexture.minFilter !== THREE.LinearFilter ) {\n\n\t\t\tvar target = renderTarget instanceof THREE.WebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\t_gl.generateMipmap( target );\n\t\t\tstate.bindTexture( target, null );\n\n\t\t}\n\n\t}\n\n\tthis.setTexture2D = setTexture2D;\n\tthis.setTextureCube = setTextureCube;\n\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n\tthis.setupRenderTarget = setupRenderTarget;\n\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\n};\n\n// File:src/renderers/webgl/WebGLUniforms.js\n\n/**\n *\n * Uniforms of a program.\n * Those form a tree structure with a special top-level container for the root,\n * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.\n *\n *\n * Properties of inner nodes including the top-level container:\n *\n * .seq - array of nested uniforms\n * .map - nested uniforms by name\n *\n *\n * Methods of all nodes except the top-level container:\n *\n * .setValue( gl, value, [renderer] )\n *\n * \t\tuploads a uniform value(s)\n *  \tthe 'renderer' parameter is needed for sampler uniforms\n *\n *\n * Static methods of the top-level container (renderer factorizations):\n *\n * .upload( gl, seq, values, renderer )\n *\n * \t\tsets uniforms in 'seq' to 'values[id].value'\n *\n * .seqWithValue( seq, values ) : filteredSeq\n *\n * \t\tfilters 'seq' entries with corresponding entry in values\n *\n * .splitDynamic( seq, values ) : filteredSeq\n *\n * \t\tfilters 'seq' entries with dynamic entry and removes them from 'seq'\n *\n *\n * Methods of the top-level container (renderer factorizations):\n *\n * .setValue( gl, name, value )\n *\n * \t\tsets uniform with  name 'name' to 'value'\n *\n * .set( gl, obj, prop )\n *\n * \t\tsets uniform from object and property with same name than uniform\n *\n * .setOptional( gl, obj, prop )\n *\n * \t\tlike .set for an optional property of the object\n *\n *\n * @author tschw\n *\n */\n\nTHREE.WebGLUniforms = ( function() { // scope\n\n\tvar emptyTexture = new THREE.Texture();\n\tvar emptyCubeTexture = new THREE.CubeTexture();\n\n\t// --- Base for inner nodes (including the root) ---\n\n\tvar UniformContainer = function() {\n\n\t\t\tthis.seq = [];\n\t\t\tthis.map = {};\n\n\t\t},\n\n\t// --- Utilities ---\n\n\t// Array Caches (provide typed arrays for temporary by size)\n\n\t\tarrayCacheF32 = [],\n\t\tarrayCacheI32 = [],\n\n\t\tuncacheTemporaryArrays = function() {\n\n\t\t\tarrayCacheF32.length = 0;\n\t\t\tarrayCacheI32.length = 0;\n\n\t\t},\n\n\t// Flattening for arrays of vectors and matrices\n\n\t\tflatten = function( array, nBlocks, blockSize ) {\n\n\t\t\tvar firstElem = array[ 0 ];\n\n\t\t\tif ( firstElem <= 0 || firstElem > 0 ) return array;\n\t\t\t// unoptimized: ! isNaN( firstElem )\n\t\t\t// see http://jacksondunstan.com/articles/983\n\n\t\t\tvar n = nBlocks * blockSize,\n\t\t\t\tr = arrayCacheF32[ n ];\n\n\t\t\tif ( r === undefined ) {\n\n\t\t\t\tr = new Float32Array( n );\n\t\t\t\tarrayCacheF32[ n ] = r;\n\n\t\t\t}\n\n\t\t\tif ( nBlocks !== 0 ) {\n\n\t\t\t\tfirstElem.toArray( r, 0 );\n\n\t\t\t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\t\t\toffset += blockSize;\n\t\t\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn r;\n\n\t\t},\n\n\t// Texture unit allocation\n\n\t\tallocTexUnits = function( renderer, n ) {\n\n\t\t\tvar r = arrayCacheI32[ n ];\n\n\t\t\tif ( r === undefined ) {\n\n\t\t\t\tr = new Int32Array( n );\n\t\t\t\tarrayCacheI32[ n ] = r;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t\tr[ i ] = renderer.allocTextureUnit();\n\n\t\t\treturn r;\n\n\t\t},\n\n\t// --- Setters ---\n\n\t// Note: Defining these methods externally, because they come in a bunch\n\t// and this way their names minify.\n\n\t\t// Single scalar\n\n\t\tsetValue1f = function( gl, v ) { gl.uniform1f( this.addr, v ); },\n\t\tsetValue1i = function( gl, v ) { gl.uniform1i( this.addr, v ); },\n\n\t\t// Single float vector (from flat array or THREE.VectorN)\n\n\t\tsetValue2fv = function( gl, v ) {\n\n\t\t\tif ( v.x === undefined ) gl.uniform2fv( this.addr, v );\n\t\t\telse gl.uniform2f( this.addr, v.x, v.y );\n\n\t\t},\n\n\t\tsetValue3fv = function( gl, v ) {\n\n\t\t\tif ( v.x !== undefined )\n\t\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\t\t\telse if ( v.r !== undefined )\n\t\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\t\t\telse\n\t\t\t\tgl.uniform3fv( this.addr, v );\n\n\t\t},\n\n\t\tsetValue4fv = function( gl, v ) {\n\n\t\t\tif ( v.x === undefined ) gl.uniform4fv( this.addr, v );\n\t\t\telse gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t},\n\n\t\t// Single matrix (from flat array or MatrixN)\n\n\t\tsetValue2fm = function( gl, v ) {\n\n\t\t\tgl.uniformMatrix2fv( this.addr, false, v.elements || v );\n\n\t\t},\n\n\t\tsetValue3fm = function( gl, v ) {\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, v.elements || v );\n\n\t\t},\n\n\t\tsetValue4fm = function( gl, v ) {\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, v.elements || v );\n\n\t\t},\n\n\t\t// Single texture (2D / Cube)\n\n\t\tsetValueT1 = function( gl, v, renderer ) {\n\n\t\t\tvar unit = renderer.allocTextureUnit();\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\trenderer.setTexture2D( v || emptyTexture, unit );\n\n\t\t},\n\n\t\tsetValueT6 = function( gl, v, renderer ) {\n\n\t\t\tvar unit = renderer.allocTextureUnit();\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\trenderer.setTextureCube( v || emptyCubeTexture, unit );\n\n\t\t},\n\n\t\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n\t\tsetValue2iv = function( gl, v ) { gl.uniform2iv( this.addr, v ); },\n\t\tsetValue3iv = function( gl, v ) { gl.uniform3iv( this.addr, v ); },\n\t\tsetValue4iv = function( gl, v ) { gl.uniform4iv( this.addr, v ); },\n\n\t\t// Helper to pick the right setter for the singular case\n\n\t\tgetSingularSetter = function( type ) {\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 0x1406: return setValue1f; // FLOAT\n\t\t\t\tcase 0x8b50: return setValue2fv; // _VEC2\n\t\t\t\tcase 0x8b51: return setValue3fv; // _VEC3\n\t\t\t\tcase 0x8b52: return setValue4fv; // _VEC4\n\n\t\t\t\tcase 0x8b5a: return setValue2fm; // _MAT2\n\t\t\t\tcase 0x8b5b: return setValue3fm; // _MAT3\n\t\t\t\tcase 0x8b5c: return setValue4fm; // _MAT4\n\n\t\t\t\tcase 0x8b5e: return setValueT1; // SAMPLER_2D\n\t\t\t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\n\n\t\t\t\tcase 0x1404: case 0x8b56: return setValue1i; // INT, BOOL\n\t\t\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t\t\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t\t\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n\t\t\t}\n\n\t\t},\n\n\t\t// Array of scalars\n\n\t\tsetValue1fv = function( gl, v ) { gl.uniform1fv( this.addr, v ); },\n\t\tsetValue1iv = function( gl, v ) { gl.uniform1iv( this.addr, v ); },\n\n\t\t// Array of vectors (flat or from THREE classes)\n\n\t\tsetValueV2a = function( gl, v ) {\n\n\t\t\tgl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );\n\n\t\t},\n\n\t\tsetValueV3a = function( gl, v ) {\n\n\t\t\tgl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );\n\n\t\t},\n\n\t\tsetValueV4a = function( gl, v ) {\n\n\t\t\tgl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );\n\n\t\t},\n\n\t\t// Array of matrices (flat or from THREE clases)\n\n\t\tsetValueM2a = function( gl, v ) {\n\n\t\t\tgl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );\n\n\t\t},\n\n\t\tsetValueM3a = function( gl, v ) {\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );\n\n\t\t},\n\n\t\tsetValueM4a = function( gl, v ) {\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );\n\n\t\t},\n\n\t\t// Array of textures (2D / Cube)\n\n\t\tsetValueT1a = function( gl, v, renderer ) {\n\n\t\t\tvar n = v.length,\n\t\t\t\tunits = allocTexUnits( renderer, n );\n\n\t\t\tgl.uniform1iv( this.addr, units );\n\n\t\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\t\trenderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t\t\t}\n\n\t\t},\n\n\t\tsetValueT6a = function( gl, v, renderer ) {\n\n\t\t\tvar n = v.length,\n\t\t\t\tunits = allocTexUnits( renderer, n );\n\n\t\t\tgl.uniform1iv( this.addr, units );\n\n\t\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\t\trenderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t\t\t}\n\n\t\t},\n\n\n\t\t// Helper to pick the right setter for a pure (bottom-level) array\n\n\t\tgetPureArraySetter = function( type ) {\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 0x1406: return setValue1fv; // FLOAT\n\t\t\t\tcase 0x8b50: return setValueV2a; // _VEC2\n\t\t\t\tcase 0x8b51: return setValueV3a; // _VEC3\n\t\t\t\tcase 0x8b52: return setValueV4a; // _VEC4\n\n\t\t\t\tcase 0x8b5a: return setValueM2a; // _MAT2\n\t\t\t\tcase 0x8b5b: return setValueM3a; // _MAT3\n\t\t\t\tcase 0x8b5c: return setValueM4a; // _MAT4\n\n\t\t\t\tcase 0x8b5e: return setValueT1a; // SAMPLER_2D\n\t\t\t\tcase 0x8b60: return setValueT6a; // SAMPLER_CUBE\n\n\t\t\t\tcase 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL\n\t\t\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t\t\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t\t\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n\t\t\t}\n\n\t\t},\n\n\t// --- Uniform Classes ---\n\n\t\tSingleUniform = function SingleUniform( id, activeInfo, addr ) {\n\n\t\t\tthis.id = id;\n\t\t\tthis.addr = addr;\n\t\t\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t\t\t// this.path = activeInfo.name; // DEBUG\n\n\t\t},\n\n\t\tPureArrayUniform = function( id, activeInfo, addr ) {\n\n\t\t\tthis.id = id;\n\t\t\tthis.addr = addr;\n\t\t\tthis.size = activeInfo.size;\n\t\t\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t\t\t// this.path = activeInfo.name; // DEBUG\n\n\t\t},\n\n\t\tStructuredUniform = function( id ) {\n\n\t\t\tthis.id = id;\n\n\t\t\tUniformContainer.call( this ); // mix-in\n\n\t\t};\n\n\tStructuredUniform.prototype.setValue = function( gl, value ) {\n\n\t\t// Note: Don't need an extra 'renderer' parameter, since samplers\n\t\t// are not allowed in structured uniforms.\n\n\t\tvar seq = this.seq;\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tu.setValue( gl, value[ u.id ] );\n\n\t\t}\n\n\t};\n\n\t// --- Top-level ---\n\n\t// Parser - builds up the property tree from the path strings\n\n\tvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g,\n\t\t// extracts\n\t\t// \t- the identifier (member name or array index)\n\t\t//  - followed by an optional right bracket (found when array index)\n\t\t//  - followed by an optional left bracket or dot (type of subscript)\n\t\t//\n\t\t// Note: These portions can be read in a non-overlapping fashion and\n\t\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t\t// in the uniform names.\n\n\t\taddUniform = function( container, uniformObject ) {\n\n\t\t\tcontainer.seq.push( uniformObject );\n\t\t\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n\t\t},\n\n\t\tparseUniform = function( activeInfo, addr, container ) {\n\n\t\t\tvar path = activeInfo.name,\n\t\t\t\tpathLength = path.length;\n\n\t\t\t// reset RegExp object, because of the early exit of a previous run\n\t\t\tRePathPart.lastIndex = 0;\n\n\t\t\tfor (; ;) {\n\n\t\t\t\tvar match = RePathPart.exec( path ),\n\t\t\t\t\tmatchEnd = RePathPart.lastIndex,\n\n\t\t\t\t\tid = match[ 1 ],\n\t\t\t\t\tidIsIndex = match[ 2 ] === ']',\n\t\t\t\t\tsubscript = match[ 3 ];\n\n\t\t\t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\n\t\t\t\tif ( subscript === undefined ||\n\t\t\t\t\t\tsubscript === '[' && matchEnd + 2 === pathLength ) {\n\t\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t} else {\n\t\t\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\t\t\tvar map = container.map,\n\t\t\t\t\t\tnext = map[ id ];\n\n\t\t\t\t\tif ( next === undefined ) {\n\n\t\t\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\t\t\taddUniform( container, next );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcontainer = next;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t// Root Container\n\n\t\tWebGLUniforms = function WebGLUniforms( gl, program, renderer ) {\n\n\t\t\tUniformContainer.call( this );\n\n\t\t\tthis.renderer = renderer;\n\n\t\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\n\n\t\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\t\tvar info = gl.getActiveUniform( program, i ),\n\t\t\t\t\tpath = info.name,\n\t\t\t\t\taddr = gl.getUniformLocation( program, path );\n\n\t\t\t\tparseUniform( info, addr, this );\n\n\t\t\t}\n\n\t\t};\n\n\n\tWebGLUniforms.prototype.setValue = function( gl, name, value ) {\n\n\t\tvar u = this.map[ name ];\n\n\t\tif ( u !== undefined ) u.setValue( gl, value, this.renderer );\n\n\t};\n\n\tWebGLUniforms.prototype.set = function( gl, object, name ) {\n\n\t\tvar u = this.map[ name ];\n\n\t\tif ( u !== undefined ) u.setValue( gl, object[ name ], this.renderer );\n\n\t};\n\n\tWebGLUniforms.prototype.setOptional = function( gl, object, name ) {\n\n\t\tvar v = object[ name ];\n\n\t\tif ( v !== undefined ) this.setValue( gl, name, v );\n\n\t};\n\n\n\t// Static interface\n\n\tWebGLUniforms.upload = function( gl, seq, values, renderer ) {\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ],\n\t\t\t\tv = values[ u.id ];\n\n\t\t\tif ( v.needsUpdate !== false ) {\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\n\t\t\t\tu.setValue( gl, v.value, renderer );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tWebGLUniforms.seqWithValue = function( seq, values ) {\n\n\t\tvar r = [];\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tif ( u.id in values ) r.push( u );\n\n\t\t}\n\n\t\treturn r;\n\n\t};\n\n\tWebGLUniforms.splitDynamic = function( seq, values ) {\n\n\t\tvar r = null,\n\t\t\tn = seq.length,\n\t\t\tw = 0;\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ],\n\t\t\t\tv = values[ u.id ];\n\n\t\t\tif ( v && v.dynamic === true ) {\n\n\t\t\t\tif ( r === null ) r = [];\n\t\t\t\tr.push( u );\n\n\t\t\t} else {\n\n\t\t\t\t// in-place compact 'seq', removing the matches\n\t\t\t\tif ( w < i ) seq[ w ] = u;\n\t\t\t\t++ w;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( w < n ) seq.length = w;\n\n\t\treturn r;\n\n\t};\n\n\tWebGLUniforms.evalDynamic = function( seq, values, object, camera ) {\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar v = values[ seq[ i ].id ],\n\t\t\t\tf = v.onUpdateCallback;\n\n\t\t\tif ( f !== undefined ) f.call( v, object, camera );\n\n\t\t}\n\n\t};\n\n\treturn WebGLUniforms;\n\n} )();\n\n// File:src/renderers/webgl/plugins/LensFlarePlugin.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.LensFlarePlugin = function ( renderer, flares ) {\n\n\tvar gl = renderer.context;\n\tvar state = renderer.state;\n\n\tvar vertexBuffer, elementBuffer;\n\tvar shader, program, attributes, uniforms;\n\n\tvar tempTexture, occlusionTexture;\n\n\tfunction init() {\n\n\t\tvar vertices = new Float32Array( [\n\t\t\t- 1, - 1,  0, 0,\n\t\t\t 1, - 1,  1, 0,\n\t\t\t 1,  1,  1, 1,\n\t\t\t- 1,  1,  0, 1\n\t\t] );\n\n\t\tvar faces = new Uint16Array( [\n\t\t\t0, 1, 2,\n\t\t\t0, 2, 3\n\t\t] );\n\n\t\t// buffers\n\n\t\tvertexBuffer     = gl.createBuffer();\n\t\telementBuffer    = gl.createBuffer();\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n\t\t// textures\n\n\t\ttempTexture      = gl.createTexture();\n\t\tocclusionTexture = gl.createTexture();\n\n\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n\t\tshader = {\n\n\t\t\tvertexShader: [\n\n\t\t\t\t\"uniform lowp int renderType;\",\n\n\t\t\t\t\"uniform vec3 screenPosition;\",\n\t\t\t\t\"uniform vec2 scale;\",\n\t\t\t\t\"uniform float rotation;\",\n\n\t\t\t\t\"uniform sampler2D occlusionMap;\",\n\n\t\t\t\t\"attribute vec2 position;\",\n\t\t\t\t\"attribute vec2 uv;\",\n\n\t\t\t\t\"varying vec2 vUV;\",\n\t\t\t\t\"varying float vVisibility;\",\n\n\t\t\t\t\"void main() {\",\n\n\t\t\t\t\t\"vUV = uv;\",\n\n\t\t\t\t\t\"vec2 pos = position;\",\n\n\t\t\t\t\t\"if ( renderType == 2 ) {\",\n\n\t\t\t\t\t\t\"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\",\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\",\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\",\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\",\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\",\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\",\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\",\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\",\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\",\n\n\t\t\t\t\t\t\"vVisibility =        visibility.r / 9.0;\",\n\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.g / 9.0;\",\n\t\t\t\t\t\t\"vVisibility *=       visibility.b / 9.0;\",\n\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.a / 9.0;\",\n\n\t\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\n\t\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\n\n\t\t\t\t\t\"}\",\n\n\t\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\n\n\t\t\t\t\"}\"\n\n\t\t\t].join( \"\\n\" ),\n\n\t\t\tfragmentShader: [\n\n\t\t\t\t\"uniform lowp int renderType;\",\n\n\t\t\t\t\"uniform sampler2D map;\",\n\t\t\t\t\"uniform float opacity;\",\n\t\t\t\t\"uniform vec3 color;\",\n\n\t\t\t\t\"varying vec2 vUV;\",\n\t\t\t\t\"varying float vVisibility;\",\n\n\t\t\t\t\"void main() {\",\n\n\t\t\t\t\t// pink square\n\n\t\t\t\t\t\"if ( renderType == 0 ) {\",\n\n\t\t\t\t\t\t\"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\",\n\n\t\t\t\t\t// restore\n\n\t\t\t\t\t\"} else if ( renderType == 1 ) {\",\n\n\t\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\n\n\t\t\t\t\t// flare\n\n\t\t\t\t\t\"} else {\",\n\n\t\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\n\t\t\t\t\t\t\"texture.a *= opacity * vVisibility;\",\n\t\t\t\t\t\t\"gl_FragColor = texture;\",\n\t\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\n\n\t\t\t\t\t\"}\",\n\n\t\t\t\t\"}\"\n\n\t\t\t].join( \"\\n\" )\n\n\t\t};\n\n\t\tprogram = createProgram( shader );\n\n\t\tattributes = {\n\t\t\tvertex: gl.getAttribLocation ( program, \"position\" ),\n\t\t\tuv:     gl.getAttribLocation ( program, \"uv\" )\n\t\t};\n\n\t\tuniforms = {\n\t\t\trenderType:     gl.getUniformLocation( program, \"renderType\" ),\n\t\t\tmap:            gl.getUniformLocation( program, \"map\" ),\n\t\t\tocclusionMap:   gl.getUniformLocation( program, \"occlusionMap\" ),\n\t\t\topacity:        gl.getUniformLocation( program, \"opacity\" ),\n\t\t\tcolor:          gl.getUniformLocation( program, \"color\" ),\n\t\t\tscale:          gl.getUniformLocation( program, \"scale\" ),\n\t\t\trotation:       gl.getUniformLocation( program, \"rotation\" ),\n\t\t\tscreenPosition: gl.getUniformLocation( program, \"screenPosition\" )\n\t\t};\n\n\t}\n\n\t/*\n\t * Render lens flares\n\t * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\n\t *         reads these back and calculates occlusion.\n\t */\n\n\tthis.render = function ( scene, camera, viewport ) {\n\n\t\tif ( flares.length === 0 ) return;\n\n\t\tvar tempPosition = new THREE.Vector3();\n\n\t\tvar invAspect = viewport.w / viewport.z,\n\t\t\thalfViewportWidth = viewport.z * 0.5,\n\t\t\thalfViewportHeight = viewport.w * 0.5;\n\n\t\tvar size = 16 / viewport.w,\n\t\t\tscale = new THREE.Vector2( size * invAspect, size );\n\n\t\tvar screenPosition = new THREE.Vector3( 1, 1, 0 ),\n\t\t\tscreenPositionPixels = new THREE.Vector2( 1, 1 );\n\n\t\tvar validArea = new THREE.Box2();\n\n\t\tvalidArea.min.set( 0, 0 );\n\t\tvalidArea.max.set( viewport.z - 16, viewport.w - 16 );\n\n\t\tif ( program === undefined ) {\n\n\t\t\tinit();\n\n\t\t}\n\n\t\tgl.useProgram( program );\n\n\t\tstate.initAttributes();\n\t\tstate.enableAttribute( attributes.vertex );\n\t\tstate.enableAttribute( attributes.uv );\n\t\tstate.disableUnusedAttributes();\n\n\t\t// loop through all lens flares to update their occlusion and positions\n\t\t// setup gl and common used attribs/uniforms\n\n\t\tgl.uniform1i( uniforms.occlusionMap, 0 );\n\t\tgl.uniform1i( uniforms.map, 1 );\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\tgl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n\t\tstate.disable( gl.CULL_FACE );\n\t\tstate.setDepthWrite( false );\n\n\t\tfor ( var i = 0, l = flares.length; i < l; i ++ ) {\n\n\t\t\tsize = 16 / viewport.w;\n\t\t\tscale.set( size * invAspect, size );\n\n\t\t\t// calc object screen position\n\n\t\t\tvar flare = flares[ i ];\n\n\t\t\ttempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );\n\n\t\t\ttempPosition.applyMatrix4( camera.matrixWorldInverse );\n\t\t\ttempPosition.applyProjection( camera.projectionMatrix );\n\n\t\t\t// setup arrays for gl programs\n\n\t\t\tscreenPosition.copy( tempPosition );\n\n\t\t\t// horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\n\t\t\tscreenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;\n\t\t\tscreenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;\n\n\t\t\t// screen cull\n\n\t\t\tif ( validArea.containsPoint( screenPositionPixels ) === true ) {\n\n\t\t\t\t// save current RGB to temp texture\n\n\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, null );\n\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\n\n\t\t\t\t// render pink quad\n\n\t\t\t\tgl.uniform1i( uniforms.renderType, 0 );\n\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\n\t\t\t\tstate.disable( gl.BLEND );\n\t\t\t\tstate.enable( gl.DEPTH_TEST );\n\n\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n\t\t\t\t// copy result to occlusionMap\n\n\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\n\n\t\t\t\t// restore graphics\n\n\t\t\t\tgl.uniform1i( uniforms.renderType, 1 );\n\t\t\t\tstate.disable( gl.DEPTH_TEST );\n\n\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n\t\t\t\t// update object positions\n\n\t\t\t\tflare.positionScreen.copy( screenPosition );\n\n\t\t\t\tif ( flare.customUpdateCallback ) {\n\n\t\t\t\t\tflare.customUpdateCallback( flare );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tflare.updateLensFlares();\n\n\t\t\t\t}\n\n\t\t\t\t// render flares\n\n\t\t\t\tgl.uniform1i( uniforms.renderType, 2 );\n\t\t\t\tstate.enable( gl.BLEND );\n\n\t\t\t\tfor ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar sprite = flare.lensFlares[ j ];\n\n\t\t\t\t\tif ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\n\n\t\t\t\t\t\tscreenPosition.x = sprite.x;\n\t\t\t\t\t\tscreenPosition.y = sprite.y;\n\t\t\t\t\t\tscreenPosition.z = sprite.z;\n\n\t\t\t\t\t\tsize = sprite.size * sprite.scale / viewport.w;\n\n\t\t\t\t\t\tscale.x = size * invAspect;\n\t\t\t\t\t\tscale.y = size;\n\n\t\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\t\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t\t\t\t\t\tgl.uniform1f( uniforms.rotation, sprite.rotation );\n\n\t\t\t\t\t\tgl.uniform1f( uniforms.opacity, sprite.opacity );\n\t\t\t\t\t\tgl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\n\n\t\t\t\t\t\tstate.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\n\t\t\t\t\t\trenderer.setTexture2D( sprite.texture, 1 );\n\n\t\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// restore gl\n\n\t\tstate.enable( gl.CULL_FACE );\n\t\tstate.enable( gl.DEPTH_TEST );\n\t\tstate.setDepthWrite( true );\n\n\t\trenderer.resetGLState();\n\n\t};\n\n\tfunction createProgram ( shader ) {\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\n\t\tvar prefix = \"precision \" + renderer.getPrecision() + \" float;\\n\";\n\n\t\tgl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\n\t\tgl.shaderSource( vertexShader, prefix + shader.vertexShader );\n\n\t\tgl.compileShader( fragmentShader );\n\t\tgl.compileShader( vertexShader );\n\n\t\tgl.attachShader( program, fragmentShader );\n\t\tgl.attachShader( program, vertexShader );\n\n\t\tgl.linkProgram( program );\n\n\t\treturn program;\n\n\t}\n\n};\n\n// File:src/renderers/webgl/plugins/SpritePlugin.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.SpritePlugin = function ( renderer, sprites ) {\n\n\tvar gl = renderer.context;\n\tvar state = renderer.state;\n\n\tvar vertexBuffer, elementBuffer;\n\tvar program, attributes, uniforms;\n\n\tvar texture;\n\n\t// decompose matrixWorld\n\n\tvar spritePosition = new THREE.Vector3();\n\tvar spriteRotation = new THREE.Quaternion();\n\tvar spriteScale = new THREE.Vector3();\n\n\tfunction init() {\n\n\t\tvar vertices = new Float32Array( [\n\t\t\t- 0.5, - 0.5,  0, 0,\n\t\t\t  0.5, - 0.5,  1, 0,\n\t\t\t  0.5,   0.5,  1, 1,\n\t\t\t- 0.5,   0.5,  0, 1\n\t\t] );\n\n\t\tvar faces = new Uint16Array( [\n\t\t\t0, 1, 2,\n\t\t\t0, 2, 3\n\t\t] );\n\n\t\tvertexBuffer  = gl.createBuffer();\n\t\telementBuffer = gl.createBuffer();\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n\t\tprogram = createProgram();\n\n\t\tattributes = {\n\t\t\tposition:\t\t\tgl.getAttribLocation ( program, 'position' ),\n\t\t\tuv:\t\t\t\t\tgl.getAttribLocation ( program, 'uv' )\n\t\t};\n\n\t\tuniforms = {\n\t\t\tuvOffset:\t\t\tgl.getUniformLocation( program, 'uvOffset' ),\n\t\t\tuvScale:\t\t\tgl.getUniformLocation( program, 'uvScale' ),\n\n\t\t\trotation:\t\t\tgl.getUniformLocation( program, 'rotation' ),\n\t\t\tscale:\t\t\t\tgl.getUniformLocation( program, 'scale' ),\n\n\t\t\tcolor:\t\t\t\tgl.getUniformLocation( program, 'color' ),\n\t\t\tmap:\t\t\t\tgl.getUniformLocation( program, 'map' ),\n\t\t\topacity:\t\t\tgl.getUniformLocation( program, 'opacity' ),\n\n\t\t\tmodelViewMatrix: \tgl.getUniformLocation( program, 'modelViewMatrix' ),\n\t\t\tprojectionMatrix:\tgl.getUniformLocation( program, 'projectionMatrix' ),\n\n\t\t\tfogType:\t\t\tgl.getUniformLocation( program, 'fogType' ),\n\t\t\tfogDensity:\t\t\tgl.getUniformLocation( program, 'fogDensity' ),\n\t\t\tfogNear:\t\t\tgl.getUniformLocation( program, 'fogNear' ),\n\t\t\tfogFar:\t\t\t\tgl.getUniformLocation( program, 'fogFar' ),\n\t\t\tfogColor:\t\t\tgl.getUniformLocation( program, 'fogColor' ),\n\n\t\t\talphaTest:\t\t\tgl.getUniformLocation( program, 'alphaTest' )\n\t\t};\n\n\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\tcanvas.width = 8;\n\t\tcanvas.height = 8;\n\n\t\tvar context = canvas.getContext( '2d' );\n\t\tcontext.fillStyle = 'white';\n\t\tcontext.fillRect( 0, 0, 8, 8 );\n\n\t\ttexture = new THREE.Texture( canvas );\n\t\ttexture.needsUpdate = true;\n\n\t}\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tif ( sprites.length === 0 ) return;\n\n\t\t// setup gl\n\n\t\tif ( program === undefined ) {\n\n\t\t\tinit();\n\n\t\t}\n\n\t\tgl.useProgram( program );\n\n\t\tstate.initAttributes();\n\t\tstate.enableAttribute( attributes.position );\n\t\tstate.enableAttribute( attributes.uv );\n\t\tstate.disableUnusedAttributes();\n\n\t\tstate.disable( gl.CULL_FACE );\n\t\tstate.enable( gl.BLEND );\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\tgl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n\t\tgl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\n\n\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\tgl.uniform1i( uniforms.map, 0 );\n\n\t\tvar oldFogType = 0;\n\t\tvar sceneFogType = 0;\n\t\tvar fog = scene.fog;\n\n\t\tif ( fog ) {\n\n\t\t\tgl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\n\n\t\t\tif ( fog instanceof THREE.Fog ) {\n\n\t\t\t\tgl.uniform1f( uniforms.fogNear, fog.near );\n\t\t\t\tgl.uniform1f( uniforms.fogFar, fog.far );\n\n\t\t\t\tgl.uniform1i( uniforms.fogType, 1 );\n\t\t\t\toldFogType = 1;\n\t\t\t\tsceneFogType = 1;\n\n\t\t\t} else if ( fog instanceof THREE.FogExp2 ) {\n\n\t\t\t\tgl.uniform1f( uniforms.fogDensity, fog.density );\n\n\t\t\t\tgl.uniform1i( uniforms.fogType, 2 );\n\t\t\t\toldFogType = 2;\n\t\t\t\tsceneFogType = 2;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl.uniform1i( uniforms.fogType, 0 );\n\t\t\toldFogType = 0;\n\t\t\tsceneFogType = 0;\n\n\t\t}\n\n\n\t\t// update positions and sort\n\n\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n\t\t\tvar sprite = sprites[ i ];\n\n\t\t\tsprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\n\t\t\tsprite.z = - sprite.modelViewMatrix.elements[ 14 ];\n\n\t\t}\n\n\t\tsprites.sort( painterSortStable );\n\n\t\t// render all sprites\n\n\t\tvar scale = [];\n\n\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n\t\t\tvar sprite = sprites[ i ];\n\t\t\tvar material = sprite.material;\n\n\t\t\tgl.uniform1f( uniforms.alphaTest, material.alphaTest );\n\t\t\tgl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );\n\n\t\t\tsprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );\n\n\t\t\tscale[ 0 ] = spriteScale.x;\n\t\t\tscale[ 1 ] = spriteScale.y;\n\n\t\t\tvar fogType = 0;\n\n\t\t\tif ( scene.fog && material.fog ) {\n\n\t\t\t\tfogType = sceneFogType;\n\n\t\t\t}\n\n\t\t\tif ( oldFogType !== fogType ) {\n\n\t\t\t\tgl.uniform1i( uniforms.fogType, fogType );\n\t\t\t\toldFogType = fogType;\n\n\t\t\t}\n\n\t\t\tif ( material.map !== null ) {\n\n\t\t\t\tgl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );\n\t\t\t\tgl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );\n\n\t\t\t} else {\n\n\t\t\t\tgl.uniform2f( uniforms.uvOffset, 0, 0 );\n\t\t\t\tgl.uniform2f( uniforms.uvScale, 1, 1 );\n\n\t\t\t}\n\n\t\t\tgl.uniform1f( uniforms.opacity, material.opacity );\n\t\t\tgl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\n\n\t\t\tgl.uniform1f( uniforms.rotation, material.rotation );\n\t\t\tgl.uniform2fv( uniforms.scale, scale );\n\n\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\n\t\t\tstate.setDepthTest( material.depthTest );\n\t\t\tstate.setDepthWrite( material.depthWrite );\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\trenderer.setTexture2D( material.map, 0 );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setTexture2D( texture, 0 );\n\n\t\t\t}\n\n\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\t\t}\n\n\t\t// restore gl\n\n\t\tstate.enable( gl.CULL_FACE );\n\n\t\trenderer.resetGLState();\n\n\t};\n\n\tfunction createProgram () {\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\n\t\tgl.shaderSource( vertexShader, [\n\n\t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\n\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t'uniform float rotation;',\n\t\t\t'uniform vec2 scale;',\n\t\t\t'uniform vec2 uvOffset;',\n\t\t\t'uniform vec2 uvScale;',\n\n\t\t\t'attribute vec2 position;',\n\t\t\t'attribute vec2 uv;',\n\n\t\t\t'varying vec2 vUV;',\n\n\t\t\t'void main() {',\n\n\t\t\t\t'vUV = uvOffset + uv * uvScale;',\n\n\t\t\t\t'vec2 alignedPosition = position * scale;',\n\n\t\t\t\t'vec2 rotatedPosition;',\n\t\t\t\t'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',\n\t\t\t\t'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',\n\n\t\t\t\t'vec4 finalPosition;',\n\n\t\t\t\t'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',\n\t\t\t\t'finalPosition.xy += rotatedPosition;',\n\t\t\t\t'finalPosition = projectionMatrix * finalPosition;',\n\n\t\t\t\t'gl_Position = finalPosition;',\n\n\t\t\t'}'\n\n\t\t].join( '\\n' ) );\n\n\t\tgl.shaderSource( fragmentShader, [\n\n\t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\n\t\t\t'uniform vec3 color;',\n\t\t\t'uniform sampler2D map;',\n\t\t\t'uniform float opacity;',\n\n\t\t\t'uniform int fogType;',\n\t\t\t'uniform vec3 fogColor;',\n\t\t\t'uniform float fogDensity;',\n\t\t\t'uniform float fogNear;',\n\t\t\t'uniform float fogFar;',\n\t\t\t'uniform float alphaTest;',\n\n\t\t\t'varying vec2 vUV;',\n\n\t\t\t'void main() {',\n\n\t\t\t\t'vec4 texture = texture2D( map, vUV );',\n\n\t\t\t\t'if ( texture.a < alphaTest ) discard;',\n\n\t\t\t\t'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',\n\n\t\t\t\t'if ( fogType > 0 ) {',\n\n\t\t\t\t\t'float depth = gl_FragCoord.z / gl_FragCoord.w;',\n\t\t\t\t\t'float fogFactor = 0.0;',\n\n\t\t\t\t\t'if ( fogType == 1 ) {',\n\n\t\t\t\t\t\t'fogFactor = smoothstep( fogNear, fogFar, depth );',\n\n\t\t\t\t\t'} else {',\n\n\t\t\t\t\t\t'const float LOG2 = 1.442695;',\n\t\t\t\t\t\t'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',\n\t\t\t\t\t\t'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',\n\n\t\t\t\t\t'}',\n\n\t\t\t\t\t'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',\n\n\t\t\t\t'}',\n\n\t\t\t'}'\n\n\t\t].join( '\\n' ) );\n\n\t\tgl.compileShader( vertexShader );\n\t\tgl.compileShader( fragmentShader );\n\n\t\tgl.attachShader( program, vertexShader );\n\t\tgl.attachShader( program, fragmentShader );\n\n\t\tgl.linkProgram( program );\n\n\t\treturn program;\n\n\t}\n\n\tfunction painterSortStable ( a, b ) {\n\t\t\n\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else {\n\n\t\t\treturn b.id - a.id;\n\n\t\t}\n\n\t}\n\n};\n\n// File:src/Three.Legacy.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nObject.assign( THREE, {\n\tFace4: function ( a, b, c, d, normal, color, materialIndex ) {\n\t\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n\t\treturn new THREE.Face3( a, b, c, normal, color, materialIndex );\n\t},\n\tLineStrip: 0,\n\tLinePieces: 1,\n\tMeshFaceMaterial: THREE.MultiMaterial,\n\tPointCloud: function ( geometry, material ) {\n\t\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\t\treturn new THREE.Points( geometry, material );\n\t},\n\tParticle: THREE.Sprite,\n\tParticleSystem: function ( geometry, material ) {\n\t\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\t\treturn new THREE.Points( geometry, material );\n\t},\n\tPointCloudMaterial: function ( parameters ) {\n\t\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new THREE.PointsMaterial( parameters );\n\t},\n\tParticleBasicMaterial: function ( parameters ) {\n\t\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new THREE.PointsMaterial( parameters );\n\t},\n\tParticleSystemMaterial: function ( parameters ) {\n\t\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new THREE.PointsMaterial( parameters );\n\t},\n\tVertex: function ( x, y, z ) {\n\t\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\t\treturn new THREE.Vector3( x, y, z );\n\t}\n} );\n\n//\n\nObject.assign( THREE.Box2.prototype, {\n\tempty: function () {\n\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\t\treturn this.isEmpty();\n\t},\n\tisIntersectionBox: function ( box ) {\n\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\treturn this.intersectsBox( box );\n\t}\n} );\n\nObject.assign( THREE.Box3.prototype, {\n\tempty: function () {\n\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\t\treturn this.isEmpty();\n\t},\n\tisIntersectionBox: function ( box ) {\n\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\treturn this.intersectsBox( box );\n\t},\n\tisIntersectionSphere: function ( sphere ) {\n\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\treturn this.intersectsSphere( sphere );\n\t}\n} );\n\nObject.assign( THREE.Matrix3.prototype, {\n\tmultiplyVector3: function ( vector ) {\n\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\t\treturn vector.applyMatrix3( this );\n\t},\n\tmultiplyVector3Array: function ( a ) {\n\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n\t\treturn this.applyToVector3Array( a );\n\t}\n} );\n\nObject.assign( THREE.Matrix4.prototype, {\n\textractPosition: function ( m ) {\n\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\t\treturn this.copyPosition( m );\n\t},\n\tsetRotationFromQuaternion: function ( q ) {\n\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\t\treturn this.makeRotationFromQuaternion( q );\n\t},\n\tmultiplyVector3: function ( vector ) {\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );\n\t\treturn vector.applyProjection( this );\n\t},\n\tmultiplyVector4: function ( vector ) {\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\treturn vector.applyMatrix4( this );\n\t},\n\tmultiplyVector3Array: function ( a ) {\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n\t\treturn this.applyToVector3Array( a );\n\t},\n\trotateAxis: function ( v ) {\n\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\t\tv.transformDirection( this );\n\t},\n\tcrossVector: function ( vector ) {\n\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\treturn vector.applyMatrix4( this );\n\t},\n\ttranslate: function ( v ) {\n\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\t},\n\trotateX: function ( angle ) {\n\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\t},\n\trotateY: function ( angle ) {\n\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\t},\n\trotateZ: function ( angle ) {\n\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\t},\n\trotateByAxis: function ( axis, angle ) {\n\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\t}\n} );\n\nObject.assign( THREE.Plane.prototype, {\n\tisIntersectionLine: function ( line ) {\n\t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\t\treturn this.intersectsLine( line );\n\t}\n} );\n\nObject.assign( THREE.Quaternion.prototype, {\n\tmultiplyVector3: function ( vector ) {\n\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\t\treturn vector.applyQuaternion( this );\n\t}\n} );\n\nObject.assign( THREE.Ray.prototype, {\n\tisIntersectionBox: function ( box ) {\n\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\treturn this.intersectsBox( box );\n\t},\n\tisIntersectionPlane: function ( plane ) {\n\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\t\treturn this.intersectsPlane( plane );\n\t},\n\tisIntersectionSphere: function ( sphere ) {\n\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\treturn this.intersectsSphere( sphere );\n\t}\n} );\n\nObject.assign( THREE.Vector3.prototype, {\n\tsetEulerFromRotationMatrix: function () {\n\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\t},\n\tsetEulerFromQuaternion: function () {\n\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\t},\n\tgetPositionFromMatrix: function ( m ) {\n\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\t\treturn this.setFromMatrixPosition( m );\n\t},\n\tgetScaleFromMatrix: function ( m ) {\n\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\t\treturn this.setFromMatrixScale( m );\n\t},\n\tgetColumnFromMatrix: function ( index, matrix ) {\n\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\t\treturn this.setFromMatrixColumn( matrix, index );\n\t}\n} );\n\n//\n\nObject.assign( THREE.Object3D.prototype, {\n\tgetChildByName: function ( name ) {\n\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\t\treturn this.getObjectByName( name );\n\t},\n\trenderDepth: function ( value ) {\n\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\t},\n\ttranslate: function ( distance, axis ) {\n\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\t\treturn this.translateOnAxis( axis, distance );\n\t}\n} );\n\nObject.defineProperties( THREE.Object3D.prototype, {\n\teulerOrder: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\treturn this.rotation.order;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\tthis.rotation.order = value;\n\t\t}\n\t},\n\tuseQuaternion: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\t\t}\n\t}\n} );\n\nObject.defineProperties( THREE.LOD.prototype, {\n\tobjects: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n\t\t\treturn this.levels;\n\t\t}\n\t}\n} );\n\n//\n\nTHREE.PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n\tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n\t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\n\tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\n\tthis.setFocalLength( focalLength );\n\n};\n\n//\n\nObject.defineProperties( THREE.Light.prototype, {\n\tonlyShadow: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\t\t}\n\t},\n\tshadowCameraFov: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t\t\tthis.shadow.camera.fov = value;\n\t\t}\n\t},\n\tshadowCameraLeft: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t\t\tthis.shadow.camera.left = value;\n\t\t}\n\t},\n\tshadowCameraRight: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t\t\tthis.shadow.camera.right = value;\n\t\t}\n\t},\n\tshadowCameraTop: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t\t\tthis.shadow.camera.top = value;\n\t\t}\n\t},\n\tshadowCameraBottom: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t\t\tthis.shadow.camera.bottom = value;\n\t\t}\n\t},\n\tshadowCameraNear: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t\t\tthis.shadow.camera.near = value;\n\t\t}\n\t},\n\tshadowCameraFar: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t\t\tthis.shadow.camera.far = value;\n\t\t}\n\t},\n\tshadowCameraVisible: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\t\t}\n\t},\n\tshadowBias: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t\t\tthis.shadow.bias = value;\n\t\t}\n\t},\n\tshadowDarkness: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\t\t}\n\t},\n\tshadowMapWidth: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t\t\tthis.shadow.mapSize.width = value;\n\t\t}\n\t},\n\tshadowMapHeight: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t\t\tthis.shadow.mapSize.height = value;\n\t\t}\n\t}\n} );\n\n//\n\nObject.defineProperties( THREE.BufferAttribute.prototype, {\n\tlength: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\n\t\t\treturn this.array.length;\n\t\t}\n\t}\n} );\n\nObject.assign( THREE.BufferGeometry.prototype, {\n\taddIndex: function ( index ) {\n\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\t\tthis.setIndex( index );\n\t},\n\taddDrawCall: function ( start, count, indexOffset ) {\n\t\tif ( indexOffset !== undefined ) {\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\t\t}\n\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\t\tthis.addGroup( start, count );\n\t},\n\tclearDrawCalls: function () {\n\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\t\tthis.clearGroups();\n\t},\n\tcomputeTangents: function () {\n\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n\t},\n\tcomputeOffsets: function () {\n\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\t}\n} );\n\nObject.defineProperties( THREE.BufferGeometry.prototype, {\n\tdrawcalls: {\n\t\tget: function () {\n\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t\t\treturn this.groups;\n\t\t}\n\t},\n\toffsets: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t\t\treturn this.groups;\n\t\t}\n\t}\n} );\n\n//\n\nObject.defineProperties( THREE.Material.prototype, {\n\twrapAround: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n\t\t}\n\t},\n\twrapRGB: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );\n\t\t\treturn new THREE.Color();\n\t\t}\n\t}\n} );\n\nObject.defineProperties( THREE.MeshPhongMaterial.prototype, {\n\tmetal: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n\t\t\treturn false;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n\t\t}\n\t}\n} );\n\nObject.defineProperties( THREE.ShaderMaterial.prototype, {\n\tderivatives: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\treturn this.extensions.derivatives;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\tthis.extensions.derivatives = value;\n\t\t}\n\t}\n} );\n\n//\n\nTHREE.EventDispatcher.prototype = Object.assign( Object.create( {\n\n\t// Note: Extra base ensures these properties are not 'assign'ed.\n\n\tconstructor: THREE.EventDispatcher,\n\n\tapply: function ( target ) {\n\n\t\tconsole.warn( \"THREE.EventDispatcher: .apply is deprecated, \" +\n\t\t\t\t\"just inherit or Object.assign the prototype to mix-in.\" );\n\n\t\tObject.assign( target, this );\n\n\t}\n\n} ), THREE.EventDispatcher.prototype );\n\n//\n\nObject.assign( THREE.WebGLRenderer.prototype, {\n\tsupportsFloatTextures: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\t\treturn this.extensions.get( 'OES_texture_float' );\n\t},\n\tsupportsHalfFloatTextures: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\t\treturn this.extensions.get( 'OES_texture_half_float' );\n\t},\n\tsupportsStandardDerivatives: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\t\treturn this.extensions.get( 'OES_standard_derivatives' );\n\t},\n\tsupportsCompressedTextureS3TC: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\t},\n\tsupportsCompressedTexturePVRTC: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\t},\n\tsupportsBlendMinMax: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\t\treturn this.extensions.get( 'EXT_blend_minmax' );\n\t},\n\tsupportsVertexTextures: function () {\n\t\treturn this.capabilities.vertexTextures;\n\t},\n\tsupportsInstancedArrays: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\t},\n\tenableScissorTest: function ( boolean ) {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\t\tthis.setScissorTest( boolean );\n\t},\n\tinitMaterial: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\t},\n\taddPrePlugin: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\t},\n\taddPostPlugin: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\t},\n\tupdateShadowMap: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\t}\n} );\n\nObject.defineProperties( THREE.WebGLRenderer.prototype, {\n\tshadowMapEnabled: {\n\t\tget: function () {\n\t\t\treturn this.shadowMap.enabled;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t\t\tthis.shadowMap.enabled = value;\n\t\t}\n\t},\n\tshadowMapType: {\n\t\tget: function () {\n\t\t\treturn this.shadowMap.type;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t\t\tthis.shadowMap.type = value;\n\t\t}\n\t},\n\tshadowMapCullFace: {\n\t\tget: function () {\n\t\t\treturn this.shadowMap.cullFace;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );\n\t\t\tthis.shadowMap.cullFace = value;\n\t\t}\n\t}\n} );\n\nObject.defineProperties( THREE.WebGLShadowMap.prototype, {\n\tcullFace: {\n\t\tget: function () {\n\t\t\treturn this.renderReverseSided ? THREE.CullFaceFront : THREE.CullFaceBack;\n\t\t},\n\t\tset: function ( cullFace ) {\n\t\t\tvar value = ( cullFace !== THREE.CullFaceBack );\n\t\t\tconsole.warn( \"WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to \" + value + \".\" );\n\t\t\tthis.renderReverseSided = value;\n\t\t}\n\t}\n} );\n\n//\n\nObject.defineProperties( THREE.WebGLRenderTarget.prototype, {\n\twrapS: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\treturn this.texture.wrapS;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\tthis.texture.wrapS = value;\n\t\t}\n\t},\n\twrapT: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\treturn this.texture.wrapT;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\tthis.texture.wrapT = value;\n\t\t}\n\t},\n\tmagFilter: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\treturn this.texture.magFilter;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\tthis.texture.magFilter = value;\n\t\t}\n\t},\n\tminFilter: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\treturn this.texture.minFilter;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\tthis.texture.minFilter = value;\n\t\t}\n\t},\n\tanisotropy: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\treturn this.texture.anisotropy;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\tthis.texture.anisotropy = value;\n\t\t}\n\t},\n\toffset: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\treturn this.texture.offset;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\tthis.texture.offset = value;\n\t\t}\n\t},\n\trepeat: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\treturn this.texture.repeat;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\tthis.texture.repeat = value;\n\t\t}\n\t},\n\tformat: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\treturn this.texture.format;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\tthis.texture.format = value;\n\t\t}\n\t},\n\ttype: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\treturn this.texture.type;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\tthis.texture.type = value;\n\t\t}\n\t},\n\tgenerateMipmaps: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\treturn this.texture.generateMipmaps;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\tthis.texture.generateMipmaps = value;\n\t\t}\n\t}\n} );\n\n//\n\nObject.assign( THREE.Audio.prototype, {\n\tload: function ( file ) {\n\t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.' );\n\t\tvar scope = this;\n\t\tvar audioLoader = new THREE.AudioLoader();\n\t\taudioLoader.load( file, function ( buffer ) {\n\t\t\tscope.setBuffer( buffer );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\nObject.assign( THREE.AudioAnalyser.prototype, {\n\tgetData: function ( file ) {\n\t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\t\treturn this.getFrequencyData();\n\t}\n} );\n\n//\n\nTHREE.GeometryUtils = {\n\n\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\n\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\n\t\tvar matrix;\n\n\t\tif ( geometry2 instanceof THREE.Mesh ) {\n\n\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\n\t\t\tmatrix = geometry2.matrix;\n\t\t\tgeometry2 = geometry2.geometry;\n\n\t\t}\n\n\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\n\t},\n\n\tcenter: function ( geometry ) {\n\n\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n\t\treturn geometry.center();\n\n\t}\n\n};\n\nTHREE.ImageUtils = {\n\n\tcrossOrigin: undefined,\n\n\tloadTexture: function ( url, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n\t\tvar loader = new THREE.TextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\n\t\tif ( mapping ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t},\n\n\tloadTextureCube: function ( urls, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n\t\tvar loader = new THREE.CubeTextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\n\t\tif ( mapping ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t},\n\n\tloadCompressedTexture: function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n\t},\n\n\tloadCompressedTextureCube: function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n\t}\n\n};\n\n//\n\nTHREE.Projector = function () {\n\n\tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\n\n\tthis.projectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\tvector.project( camera );\n\n\t};\n\n\tthis.unprojectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\tvector.unproject( camera );\n\n\t};\n\n\tthis.pickingRay = function ( vector, camera ) {\n\n\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\n\t};\n\n};\n\n//\n\nTHREE.CanvasRenderer = function () {\n\n\tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\n\n\tthis.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\tthis.clear = function () {};\n\tthis.render = function () {};\n\tthis.setClearColor = function () {};\n\tthis.setSize = function () {};\n\n};\n\n// File:src/extras/CurveUtils.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n */\n\nTHREE.CurveUtils = {\n\n\ttangentQuadraticBezier: function ( t, p0, p1, p2 ) {\n\n\t\treturn 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );\n\n\t},\n\n\t// Puay Bing, thanks for helping with this derivative!\n\n\ttangentCubicBezier: function ( t, p0, p1, p2, p3 ) {\n\n\t\treturn - 3 * p0 * ( 1 - t ) * ( 1 - t )  +\n\t\t\t3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +\n\t\t\t6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +\n\t\t\t3 * t * t * p3;\n\n\t},\n\n\ttangentSpline: function ( t, p0, p1, p2, p3 ) {\n\n\t\t// To check if my formulas are correct\n\n\t\tvar h00 = 6 * t * t - 6 * t; \t// derived from 2t^3 − 3t^2 + 1\n\t\tvar h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t\n\t\tvar h01 = - 6 * t * t + 6 * t; \t// − 2t3 + 3t2\n\t\tvar h11 = 3 * t * t - 2 * t;\t// t3 − t2\n\n\t\treturn h00 + h10 + h01 + h11;\n\n\t},\n\n\t// Catmull-Rom\n\n\tinterpolate: function( p0, p1, p2, p3, t ) {\n\n\t\tvar v0 = ( p2 - p0 ) * 0.5;\n\t\tvar v1 = ( p3 - p1 ) * 0.5;\n\t\tvar t2 = t * t;\n\t\tvar t3 = t * t2;\n\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n\t}\n\n};\n\n// File:src/extras/SceneUtils.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.SceneUtils = {\n\n\tcreateMultiMaterialObject: function ( geometry, materials ) {\n\n\t\tvar group = new THREE.Group();\n\n\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n\t\t\tgroup.add( new THREE.Mesh( geometry, materials[ i ] ) );\n\n\t\t}\n\n\t\treturn group;\n\n\t},\n\n\tdetach: function ( child, parent, scene ) {\n\n\t\tchild.applyMatrix( parent.matrixWorld );\n\t\tparent.remove( child );\n\t\tscene.add( child );\n\n\t},\n\n\tattach: function ( child, scene, parent ) {\n\n\t\tvar matrixWorldInverse = new THREE.Matrix4();\n\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\n\t\tchild.applyMatrix( matrixWorldInverse );\n\n\t\tscene.remove( child );\n\t\tparent.add( child );\n\n\t}\n\n};\n\n// File:src/extras/ShapeUtils.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n */\n\nTHREE.ShapeUtils = {\n\n\t// calculate area of the contour polygon\n\n\tarea: function ( contour ) {\n\n\t\tvar n = contour.length;\n\t\tvar a = 0.0;\n\n\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t}\n\n\t\treturn a * 0.5;\n\n\t},\n\n\ttriangulate: ( function () {\n\n\t\t/**\n\t\t * This code is a quick port of code written in C++ which was submitted to\n\t\t * flipcode.com by John W. Ratcliff  // July 22, 2000\n\t\t * See original code and more information here:\n\t\t * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\n\t\t *\n\t\t * ported to actionscript by Zevan Rosser\n\t\t * www.actionsnippet.com\n\t\t *\n\t\t * ported to javascript by Joshua Koo\n\t\t * http://www.lab4games.net/zz85/blog\n\t\t *\n\t\t */\n\n\t\tfunction snip( contour, u, v, w, n, verts ) {\n\n\t\t\tvar p;\n\t\t\tvar ax, ay, bx, by;\n\t\t\tvar cx, cy, px, py;\n\n\t\t\tax = contour[ verts[ u ] ].x;\n\t\t\tay = contour[ verts[ u ] ].y;\n\n\t\t\tbx = contour[ verts[ v ] ].x;\n\t\t\tby = contour[ verts[ v ] ].y;\n\n\t\t\tcx = contour[ verts[ w ] ].x;\n\t\t\tcy = contour[ verts[ w ] ].y;\n\n\t\t\tif ( Number.EPSILON > ( ( ( bx - ax ) * ( cy - ay ) ) - ( ( by - ay ) * ( cx - ax ) ) ) ) return false;\n\n\t\t\tvar aX, aY, bX, bY, cX, cY;\n\t\t\tvar apx, apy, bpx, bpy, cpx, cpy;\n\t\t\tvar cCROSSap, bCROSScp, aCROSSbp;\n\n\t\t\taX = cx - bx;  aY = cy - by;\n\t\t\tbX = ax - cx;  bY = ay - cy;\n\t\t\tcX = bx - ax;  cY = by - ay;\n\n\t\t\tfor ( p = 0; p < n; p ++ ) {\n\n\t\t\t\tpx = contour[ verts[ p ] ].x;\n\t\t\t\tpy = contour[ verts[ p ] ].y;\n\n\t\t\t\tif ( ( ( px === ax ) && ( py === ay ) ) ||\n\t\t\t\t\t ( ( px === bx ) && ( py === by ) ) ||\n\t\t\t\t\t ( ( px === cx ) && ( py === cy ) ) )\tcontinue;\n\n\t\t\t\tapx = px - ax;  apy = py - ay;\n\t\t\t\tbpx = px - bx;  bpy = py - by;\n\t\t\t\tcpx = px - cx;  cpy = py - cy;\n\n\t\t\t\t// see if p is inside triangle abc\n\n\t\t\t\taCROSSbp = aX * bpy - aY * bpx;\n\t\t\t\tcCROSSap = cX * apy - cY * apx;\n\t\t\t\tbCROSScp = bX * cpy - bY * cpx;\n\n\t\t\t\tif ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\t// takes in an contour array and returns\n\n\t\treturn function triangulate( contour, indices ) {\n\n\t\t\tvar n = contour.length;\n\n\t\t\tif ( n < 3 ) return null;\n\n\t\t\tvar result = [],\n\t\t\t\tverts = [],\n\t\t\t\tvertIndices = [];\n\n\t\t\t/* we want a counter-clockwise polygon in verts */\n\n\t\t\tvar u, v, w;\n\n\t\t\tif ( THREE.ShapeUtils.area( contour ) > 0.0 ) {\n\n\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = v;\n\n\t\t\t} else {\n\n\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;\n\n\t\t\t}\n\n\t\t\tvar nv = n;\n\n\t\t\t/*  remove nv - 2 vertices, creating 1 triangle every time */\n\n\t\t\tvar count = 2 * nv;   /* error detection */\n\n\t\t\tfor ( v = nv - 1; nv > 2; ) {\n\n\t\t\t\t/* if we loop, it is probably a non-simple polygon */\n\n\t\t\t\tif ( ( count -- ) <= 0 ) {\n\n\t\t\t\t\t//** Triangulate: ERROR - probable bad polygon!\n\n\t\t\t\t\t//throw ( \"Warning, unable to triangulate polygon!\" );\n\t\t\t\t\t//return null;\n\t\t\t\t\t// Sometimes warning is fine, especially polygons are triangulated in reverse.\n\t\t\t\t\tconsole.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );\n\n\t\t\t\t\tif ( indices ) return vertIndices;\n\t\t\t\t\treturn result;\n\n\t\t\t\t}\n\n\t\t\t\t/* three consecutive vertices in current polygon, <u,v,w> */\n\n\t\t\t\tu = v; \t \tif ( nv <= u ) u = 0;     /* previous */\n\t\t\t\tv = u + 1;  if ( nv <= v ) v = 0;     /* new v    */\n\t\t\t\tw = v + 1;  if ( nv <= w ) w = 0;     /* next     */\n\n\t\t\t\tif ( snip( contour, u, v, w, nv, verts ) ) {\n\n\t\t\t\t\tvar a, b, c, s, t;\n\n\t\t\t\t\t/* true names of the vertices */\n\n\t\t\t\t\ta = verts[ u ];\n\t\t\t\t\tb = verts[ v ];\n\t\t\t\t\tc = verts[ w ];\n\n\t\t\t\t\t/* output Triangle */\n\n\t\t\t\t\tresult.push( [ contour[ a ],\n\t\t\t\t\t\tcontour[ b ],\n\t\t\t\t\t\tcontour[ c ] ] );\n\n\n\t\t\t\t\tvertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );\n\n\t\t\t\t\t/* remove v from the remaining polygon */\n\n\t\t\t\t\tfor ( s = v, t = v + 1; t < nv; s ++, t ++ ) {\n\n\t\t\t\t\t\tverts[ s ] = verts[ t ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnv --;\n\n\t\t\t\t\t/* reset error detection counter */\n\n\t\t\t\t\tcount = 2 * nv;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( indices ) return vertIndices;\n\t\t\treturn result;\n\n\t\t}\n\n\t} )(),\n\n\ttriangulateShape: function ( contour, holes ) {\n\n\t\tfunction point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {\n\n\t\t\t// inOtherPt needs to be collinear to the inSegment\n\t\t\tif ( inSegPt1.x !== inSegPt2.x ) {\n\n\t\t\t\tif ( inSegPt1.x < inSegPt2.x ) {\n\n\t\t\t\t\treturn\t( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn\t( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( inSegPt1.y < inSegPt2.y ) {\n\n\t\t\t\t\treturn\t( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn\t( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {\n\n\t\t\tvar seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;\n\t\t\tvar seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;\n\n\t\t\tvar seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;\n\t\t\tvar seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;\n\n\t\t\tvar limit\t\t= seg1dy * seg2dx - seg1dx * seg2dy;\n\t\t\tvar perpSeg1\t= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;\n\n\t\t\tif ( Math.abs( limit ) > Number.EPSILON ) {\n\n\t\t\t\t// not parallel\n\n\t\t\t\tvar perpSeg2;\n\t\t\t\tif ( limit > 0 ) {\n\n\t\t\t\t\tif ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) \t\treturn [];\n\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t\t\t\t\tif ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) \t\treturn [];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) \t\treturn [];\n\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t\t\t\t\tif ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) \t\treturn [];\n\n\t\t\t\t}\n\n\t\t\t\t// i.e. to reduce rounding errors\n\t\t\t\t// intersection at endpoint of segment#1?\n\t\t\t\tif ( perpSeg2 === 0 ) {\n\n\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n\t\t\t\t\treturn [ inSeg1Pt1 ];\n\n\t\t\t\t}\n\t\t\t\tif ( perpSeg2 === limit ) {\n\n\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n\t\t\t\t\treturn [ inSeg1Pt2 ];\n\n\t\t\t\t}\n\t\t\t\t// intersection at endpoint of segment#2?\n\t\t\t\tif ( perpSeg1 === 0 )\t\treturn [ inSeg2Pt1 ];\n\t\t\t\tif ( perpSeg1 === limit )\treturn [ inSeg2Pt2 ];\n\n\t\t\t\t// return real intersection point\n\t\t\t\tvar factorSeg1 = perpSeg2 / limit;\n\t\t\t\treturn\t[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,\n\t\t\t\t\t\t\ty: inSeg1Pt1.y + factorSeg1 * seg1dy } ];\n\n\t\t\t} else {\n\n\t\t\t\t// parallel or collinear\n\t\t\t\tif ( ( perpSeg1 !== 0 ) ||\n\t\t\t\t\t ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) \t\t\treturn [];\n\n\t\t\t\t// they are collinear or degenerate\n\t\t\t\tvar seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );\t// segment1 is just a point?\n\t\t\t\tvar seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );\t// segment2 is just a point?\n\t\t\t\t// both segments are points\n\t\t\t\tif ( seg1Pt && seg2Pt ) {\n\n\t\t\t\t\tif ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||\n\t\t\t\t\t\t ( inSeg1Pt1.y !== inSeg2Pt1.y ) )\t\treturn [];\t// they are distinct  points\n\t\t\t\t\treturn [ inSeg1Pt1 ];                 \t\t\t\t\t\t// they are the same point\n\n\t\t\t\t}\n\t\t\t\t// segment#1  is a single point\n\t\t\t\tif ( seg1Pt ) {\n\n\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )\t\treturn [];\t\t// but not in segment#2\n\t\t\t\t\treturn [ inSeg1Pt1 ];\n\n\t\t\t\t}\n\t\t\t\t// segment#2  is a single point\n\t\t\t\tif ( seg2Pt ) {\n\n\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )\t\treturn [];\t\t// but not in segment#1\n\t\t\t\t\treturn [ inSeg2Pt1 ];\n\n\t\t\t\t}\n\n\t\t\t\t// they are collinear segments, which might overlap\n\t\t\t\tvar seg1min, seg1max, seg1minVal, seg1maxVal;\n\t\t\t\tvar seg2min, seg2max, seg2minVal, seg2maxVal;\n\t\t\t\tif ( seg1dx !== 0 ) {\n\n\t\t\t\t\t// the segments are NOT on a vertical line\n\t\t\t\t\tif ( inSeg1Pt1.x < inSeg1Pt2.x ) {\n\n\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;\n\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;\n\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( inSeg2Pt1.x < inSeg2Pt2.x ) {\n\n\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;\n\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;\n\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// the segments are on a vertical line\n\t\t\t\t\tif ( inSeg1Pt1.y < inSeg1Pt2.y ) {\n\n\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;\n\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;\n\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( inSeg2Pt1.y < inSeg2Pt2.y ) {\n\n\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;\n\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;\n\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\tif ( seg1minVal <= seg2minVal ) {\n\n\t\t\t\t\tif ( seg1maxVal <  seg2minVal )\treturn [];\n\t\t\t\t\tif ( seg1maxVal === seg2minVal )\t{\n\n\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t\t\t\t\t\treturn [ seg2min ];\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg2min, seg1max ];\n\t\t\t\t\treturn\t[ seg2min, seg2max ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( seg1minVal >  seg2maxVal )\treturn [];\n\t\t\t\t\tif ( seg1minVal === seg2maxVal )\t{\n\n\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t\t\t\t\t\treturn [ seg1min ];\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg1min, seg1max ];\n\t\t\t\t\treturn\t[ seg1min, seg2max ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {\n\n\t\t\t// The order of legs is important\n\n\t\t\t// translation of all points, so that Vertex is at (0,0)\n\t\t\tvar legFromPtX\t= inLegFromPt.x - inVertex.x,  legFromPtY\t= inLegFromPt.y - inVertex.y;\n\t\t\tvar legToPtX\t= inLegToPt.x\t- inVertex.x,  legToPtY\t\t= inLegToPt.y\t- inVertex.y;\n\t\t\tvar otherPtX\t= inOtherPt.x\t- inVertex.x,  otherPtY\t\t= inOtherPt.y\t- inVertex.y;\n\n\t\t\t// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.\n\t\t\tvar from2toAngle\t= legFromPtX * legToPtY - legFromPtY * legToPtX;\n\t\t\tvar from2otherAngle\t= legFromPtX * otherPtY - legFromPtY * otherPtX;\n\n\t\t\tif ( Math.abs( from2toAngle ) > Number.EPSILON ) {\n\n\t\t\t\t// angle != 180 deg.\n\n\t\t\t\tvar other2toAngle\t\t= otherPtX * legToPtY - otherPtY * legToPtX;\n\t\t\t\t// console.log( \"from2to: \" + from2toAngle + \", from2other: \" + from2otherAngle + \", other2to: \" + other2toAngle );\n\n\t\t\t\tif ( from2toAngle > 0 ) {\n\n\t\t\t\t\t// main angle < 180 deg.\n\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// main angle > 180 deg.\n\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// angle == 180 deg.\n\t\t\t\t// console.log( \"from2to: 180 deg., from2other: \" + from2otherAngle  );\n\t\t\t\treturn\t( from2otherAngle > 0 );\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tfunction removeHoles( contour, holes ) {\n\n\t\t\tvar shape = contour.concat(); // work on this shape\n\t\t\tvar hole;\n\n\t\t\tfunction isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {\n\n\t\t\t\t// Check if hole point lies within angle around shape point\n\t\t\t\tvar lastShapeIdx = shape.length - 1;\n\n\t\t\t\tvar prevShapeIdx = inShapeIdx - 1;\n\t\t\t\tif ( prevShapeIdx < 0 )\t\t\tprevShapeIdx = lastShapeIdx;\n\n\t\t\t\tvar nextShapeIdx = inShapeIdx + 1;\n\t\t\t\tif ( nextShapeIdx > lastShapeIdx )\tnextShapeIdx = 0;\n\n\t\t\t\tvar insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );\n\t\t\t\tif ( ! insideAngle ) {\n\n\t\t\t\t\t// console.log( \"Vertex (Shape): \" + inShapeIdx + \", Point: \" + hole[inHoleIdx].x + \"/\" + hole[inHoleIdx].y );\n\t\t\t\t\treturn\tfalse;\n\n\t\t\t\t}\n\n\t\t\t\t// Check if shape point lies within angle around hole point\n\t\t\t\tvar lastHoleIdx = hole.length - 1;\n\n\t\t\t\tvar prevHoleIdx = inHoleIdx - 1;\n\t\t\t\tif ( prevHoleIdx < 0 )\t\t\tprevHoleIdx = lastHoleIdx;\n\n\t\t\t\tvar nextHoleIdx = inHoleIdx + 1;\n\t\t\t\tif ( nextHoleIdx > lastHoleIdx )\tnextHoleIdx = 0;\n\n\t\t\t\tinsideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );\n\t\t\t\tif ( ! insideAngle ) {\n\n\t\t\t\t\t// console.log( \"Vertex (Hole): \" + inHoleIdx + \", Point: \" + shape[inShapeIdx].x + \"/\" + shape[inShapeIdx].y );\n\t\t\t\t\treturn\tfalse;\n\n\t\t\t\t}\n\n\t\t\t\treturn\ttrue;\n\n\t\t\t}\n\n\t\t\tfunction intersectsShapeEdge( inShapePt, inHolePt ) {\n\n\t\t\t\t// checks for intersections with shape edges\n\t\t\t\tvar sIdx, nextIdx, intersection;\n\t\t\t\tfor ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {\n\n\t\t\t\t\tnextIdx = sIdx + 1; nextIdx %= shape.length;\n\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );\n\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\n\t\t\t\t}\n\n\t\t\t\treturn\tfalse;\n\n\t\t\t}\n\n\t\t\tvar indepHoles = [];\n\n\t\t\tfunction intersectsHoleEdge( inShapePt, inHolePt ) {\n\n\t\t\t\t// checks for intersections with hole edges\n\t\t\t\tvar ihIdx, chkHole,\n\t\t\t\t\thIdx, nextIdx, intersection;\n\t\t\t\tfor ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {\n\n\t\t\t\t\tchkHole = holes[ indepHoles[ ihIdx ]];\n\t\t\t\t\tfor ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {\n\n\t\t\t\t\t\tnextIdx = hIdx + 1; nextIdx %= chkHole.length;\n\t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );\n\t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\treturn\tfalse;\n\n\t\t\t}\n\n\t\t\tvar holeIndex, shapeIndex,\n\t\t\t\tshapePt, holePt,\n\t\t\t\tholeIdx, cutKey, failedCuts = [],\n\t\t\t\ttmpShape1, tmpShape2,\n\t\t\t\ttmpHole1, tmpHole2;\n\n\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tindepHoles.push( h );\n\n\t\t\t}\n\n\t\t\tvar minShapeIndex = 0;\n\t\t\tvar counter = indepHoles.length * 2;\n\t\t\twhile ( indepHoles.length > 0 ) {\n\n\t\t\t\tcounter --;\n\t\t\t\tif ( counter < 0 ) {\n\n\t\t\t\t\tconsole.log( \"Infinite Loop! Holes left:\" + indepHoles.length + \", Probably Hole outside Shape!\" );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\t// search for shape-vertex and hole-vertex,\n\t\t\t\t// which can be connected without intersections\n\t\t\t\tfor ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {\n\n\t\t\t\t\tshapePt = shape[ shapeIndex ];\n\t\t\t\t\tholeIndex\t= - 1;\n\n\t\t\t\t\t// search for hole which can be reached without intersections\n\t\t\t\t\tfor ( var h = 0; h < indepHoles.length; h ++ ) {\n\n\t\t\t\t\t\tholeIdx = indepHoles[ h ];\n\n\t\t\t\t\t\t// prevent multiple checks\n\t\t\t\t\t\tcutKey = shapePt.x + \":\" + shapePt.y + \":\" + holeIdx;\n\t\t\t\t\t\tif ( failedCuts[ cutKey ] !== undefined )\t\t\tcontinue;\n\n\t\t\t\t\t\thole = holes[ holeIdx ];\n\t\t\t\t\t\tfor ( var h2 = 0; h2 < hole.length; h2 ++ ) {\n\n\t\t\t\t\t\t\tholePt = hole[ h2 ];\n\t\t\t\t\t\t\tif ( ! isCutLineInsideAngles( shapeIndex, h2 ) )\t\tcontinue;\n\t\t\t\t\t\t\tif ( intersectsShapeEdge( shapePt, holePt ) )\t\tcontinue;\n\t\t\t\t\t\t\tif ( intersectsHoleEdge( shapePt, holePt ) )\t\tcontinue;\n\n\t\t\t\t\t\t\tholeIndex = h2;\n\t\t\t\t\t\t\tindepHoles.splice( h, 1 );\n\n\t\t\t\t\t\t\ttmpShape1 = shape.slice( 0, shapeIndex + 1 );\n\t\t\t\t\t\t\ttmpShape2 = shape.slice( shapeIndex );\n\t\t\t\t\t\t\ttmpHole1 = hole.slice( holeIndex );\n\t\t\t\t\t\t\ttmpHole2 = hole.slice( 0, holeIndex + 1 );\n\n\t\t\t\t\t\t\tshape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );\n\n\t\t\t\t\t\t\tminShapeIndex = shapeIndex;\n\n\t\t\t\t\t\t\t// Debug only, to show the selected cuts\n\t\t\t\t\t\t\t// glob_CutLines.push( [ shapePt, holePt ] );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\n\t\t\t\t\t\tfailedCuts[ cutKey ] = true;\t\t\t// remember failure\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn shape; \t\t\t/* shape with no holes */\n\n\t\t}\n\n\n\t\tvar i, il, f, face,\n\t\t\tkey, index,\n\t\t\tallPointsMap = {};\n\n\t\t// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\n\n\t\tvar allpoints = contour.concat();\n\n\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tArray.prototype.push.apply( allpoints, holes[ h ] );\n\n\t\t}\n\n\t\t//console.log( \"allpoints\",allpoints, allpoints.length );\n\n\t\t// prepare all points map\n\n\t\tfor ( i = 0, il = allpoints.length; i < il; i ++ ) {\n\n\t\t\tkey = allpoints[ i ].x + \":\" + allpoints[ i ].y;\n\n\t\t\tif ( allPointsMap[ key ] !== undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.Shape: Duplicate point\", key );\n\n\t\t\t}\n\n\t\t\tallPointsMap[ key ] = i;\n\n\t\t}\n\n\t\t// remove holes by cutting paths to holes and adding them to the shape\n\t\tvar shapeWithoutHoles = removeHoles( contour, holes );\n\n\t\tvar triangles = THREE.ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape\n\t\t//console.log( \"triangles\",triangles, triangles.length );\n\n\t\t// check all face vertices against all points map\n\n\t\tfor ( i = 0, il = triangles.length; i < il; i ++ ) {\n\n\t\t\tface = triangles[ i ];\n\n\t\t\tfor ( f = 0; f < 3; f ++ ) {\n\n\t\t\t\tkey = face[ f ].x + \":\" + face[ f ].y;\n\n\t\t\t\tindex = allPointsMap[ key ];\n\n\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\tface[ f ] = index;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn triangles.concat();\n\n\t},\n\n\tisClockWise: function ( pts ) {\n\n\t\treturn THREE.ShapeUtils.area( pts ) < 0;\n\n\t},\n\n\t// Bezier Curves formulas obtained from\n\t// http://en.wikipedia.org/wiki/B%C3%A9zier_curve\n\n\t// Quad Bezier Functions\n\n\tb2: ( function () {\n\n\t\tfunction b2p0( t, p ) {\n\n\t\t\tvar k = 1 - t;\n\t\t\treturn k * k * p;\n\n\t\t}\n\n\t\tfunction b2p1( t, p ) {\n\n\t\t\treturn 2 * ( 1 - t ) * t * p;\n\n\t\t}\n\n\t\tfunction b2p2( t, p ) {\n\n\t\t\treturn t * t * p;\n\n\t\t}\n\n\t\treturn function b2( t, p0, p1, p2 ) {\n\n\t\t\treturn b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );\n\n\t\t};\n\n\t} )(),\n\n\t// Cubic Bezier Functions\n\n\tb3: ( function () {\n\n\t\tfunction b3p0( t, p ) {\n\n\t\t\tvar k = 1 - t;\n\t\t\treturn k * k * k * p;\n\n\t\t}\n\n\t\tfunction b3p1( t, p ) {\n\n\t\t\tvar k = 1 - t;\n\t\t\treturn 3 * k * k * t * p;\n\n\t\t}\n\n\t\tfunction b3p2( t, p ) {\n\n\t\t\tvar k = 1 - t;\n\t\t\treturn 3 * k * t * t * p;\n\n\t\t}\n\n\t\tfunction b3p3( t, p ) {\n\n\t\t\treturn t * t * t * p;\n\n\t\t}\n\n\t\treturn function b3( t, p0, p1, p2, p3 ) {\n\n\t\t\treturn b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );\n\n\t\t};\n\n\t} )()\n\n};\n\n// File:src/extras/core/Curve.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Extensible curve object\n *\n * Some common of Curve methods\n * .getPoint(t), getTangent(t)\n * .getPointAt(u), getTagentAt(u)\n * .getPoints(), .getSpacedPoints()\n * .getLength()\n * .updateArcLengths()\n *\n * This following classes subclasses THREE.Curve:\n *\n * -- 2d classes --\n * THREE.LineCurve\n * THREE.QuadraticBezierCurve\n * THREE.CubicBezierCurve\n * THREE.SplineCurve\n * THREE.ArcCurve\n * THREE.EllipseCurve\n *\n * -- 3d classes --\n * THREE.LineCurve3\n * THREE.QuadraticBezierCurve3\n * THREE.CubicBezierCurve3\n * THREE.SplineCurve3\n *\n * A series of curves can be represented as a THREE.CurvePath\n *\n **/\n\n/**************************************************************\n *\tAbstract Curve base class\n **************************************************************/\n\nTHREE.Curve = function () {\n\n};\n\nTHREE.Curve.prototype = {\n\n\tconstructor: THREE.Curve,\n\n\t// Virtual base class method to overwrite and implement in subclasses\n\t//\t- t [0 .. 1]\n\n\tgetPoint: function ( t ) {\n\n\t\tconsole.warn( \"THREE.Curve: Warning, getPoint() not implemented!\" );\n\t\treturn null;\n\n\t},\n\n\t// Get point at relative position in curve according to arc length\n\t// - u [0 .. 1]\n\n\tgetPointAt: function ( u ) {\n\n\t\tvar t = this.getUtoTmapping( u );\n\t\treturn this.getPoint( t );\n\n\t},\n\n\t// Get sequence of points using getPoint( t )\n\n\tgetPoints: function ( divisions ) {\n\n\t\tif ( ! divisions ) divisions = 5;\n\n\t\tvar d, pts = [];\n\n\t\tfor ( d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpts.push( this.getPoint( d / divisions ) );\n\n\t\t}\n\n\t\treturn pts;\n\n\t},\n\n\t// Get sequence of points using getPointAt( u )\n\n\tgetSpacedPoints: function ( divisions ) {\n\n\t\tif ( ! divisions ) divisions = 5;\n\n\t\tvar d, pts = [];\n\n\t\tfor ( d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpts.push( this.getPointAt( d / divisions ) );\n\n\t\t}\n\n\t\treturn pts;\n\n\t},\n\n\t// Get total curve arc length\n\n\tgetLength: function () {\n\n\t\tvar lengths = this.getLengths();\n\t\treturn lengths[ lengths.length - 1 ];\n\n\t},\n\n\t// Get list of cumulative segment lengths\n\n\tgetLengths: function ( divisions ) {\n\n\t\tif ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;\n\n\t\tif ( this.cacheArcLengths\n\t\t\t&& ( this.cacheArcLengths.length === divisions + 1 )\n\t\t\t&& ! this.needsUpdate ) {\n\n\t\t\t//console.log( \"cached\", this.cacheArcLengths );\n\t\t\treturn this.cacheArcLengths;\n\n\t\t}\n\n\t\tthis.needsUpdate = false;\n\n\t\tvar cache = [];\n\t\tvar current, last = this.getPoint( 0 );\n\t\tvar p, sum = 0;\n\n\t\tcache.push( 0 );\n\n\t\tfor ( p = 1; p <= divisions; p ++ ) {\n\n\t\t\tcurrent = this.getPoint ( p / divisions );\n\t\t\tsum += current.distanceTo( last );\n\t\t\tcache.push( sum );\n\t\t\tlast = current;\n\n\t\t}\n\n\t\tthis.cacheArcLengths = cache;\n\n\t\treturn cache; // { sums: cache, sum:sum }; Sum is in the last element.\n\n\t},\n\n\tupdateArcLengths: function() {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.getLengths();\n\n\t},\n\n\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\tgetUtoTmapping: function ( u, distance ) {\n\n\t\tvar arcLengths = this.getLengths();\n\n\t\tvar i = 0, il = arcLengths.length;\n\n\t\tvar targetArcLength; // The targeted u distance value to get\n\n\t\tif ( distance ) {\n\n\t\t\ttargetArcLength = distance;\n\n\t\t} else {\n\n\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t}\n\n\t\t//var time = Date.now();\n\n\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\tvar low = 0, high = il - 1, comparison;\n\n\t\twhile ( low <= high ) {\n\n\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\tlow = i + 1;\n\n\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\thigh = i - 1;\n\n\t\t\t} else {\n\n\t\t\t\thigh = i;\n\t\t\t\tbreak;\n\n\t\t\t\t// DONE\n\n\t\t\t}\n\n\t\t}\n\n\t\ti = high;\n\n\t\t//console.log('b' , i, low, high, Date.now()- time);\n\n\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\tvar t = i / ( il - 1 );\n\t\t\treturn t;\n\n\t\t}\n\n\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\tvar lengthBefore = arcLengths[ i ];\n\t\tvar lengthAfter = arcLengths[ i + 1 ];\n\n\t\tvar segmentLength = lengthAfter - lengthBefore;\n\n\t\t// determine where we are between the 'before' and 'after' points\n\n\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t// add that fractional amount to t\n\n\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\treturn t;\n\n\t},\n\n\t// Returns a unit vector tangent at t\n\t// In case any sub curve does not implement its tangent derivation,\n\t// 2 points a small delta apart will be used to find its gradient\n\t// which seems to give a reasonable approximation\n\n\tgetTangent: function( t ) {\n\n\t\tvar delta = 0.0001;\n\t\tvar t1 = t - delta;\n\t\tvar t2 = t + delta;\n\n\t\t// Capping in case of danger\n\n\t\tif ( t1 < 0 ) t1 = 0;\n\t\tif ( t2 > 1 ) t2 = 1;\n\n\t\tvar pt1 = this.getPoint( t1 );\n\t\tvar pt2 = this.getPoint( t2 );\n\n\t\tvar vec = pt2.clone().sub( pt1 );\n\t\treturn vec.normalize();\n\n\t},\n\n\tgetTangentAt: function ( u ) {\n\n\t\tvar t = this.getUtoTmapping( u );\n\t\treturn this.getTangent( t );\n\n\t}\n\n};\n\n// TODO: Transformation for Curves?\n\n/**************************************************************\n *\t3D Curves\n **************************************************************/\n\n// A Factory method for creating new curve subclasses\n\nTHREE.Curve.create = function ( constructor, getPointFunc ) {\n\n\tconstructor.prototype = Object.create( THREE.Curve.prototype );\n\tconstructor.prototype.constructor = constructor;\n\tconstructor.prototype.getPoint = getPointFunc;\n\n\treturn constructor;\n\n};\n\n// File:src/extras/core/CurvePath.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n *\n **/\n\n/**************************************************************\n *\tCurved Path - a curve path is simply a array of connected\n *  curves, but retains the api of a curve\n **************************************************************/\n\nTHREE.CurvePath = function () {\n\n\tthis.curves = [];\n\n\tthis.autoClose = false; // Automatically closes the path\n\n};\n\nTHREE.CurvePath.prototype = Object.assign( Object.create( THREE.Curve.prototype ), {\n\n\tconstructor: THREE.CurvePath,\n\n\tadd: function ( curve ) {\n\n\t\tthis.curves.push( curve );\n\n\t},\n\n\tclosePath: function () {\n\n\t\t// TODO Test\n\t\t// and verify for vector3 (needs to implement equals)\n\t\t// Add a line curve if start and end of lines are not connected\n\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\tthis.curves.push( new THREE.LineCurve( endPoint, startPoint ) );\n\n\t\t}\n\n\t},\n\n\t// To get accurate point with reference to\n\t// entire path distance at time t,\n\t// following has to be done:\n\n\t// 1. Length of each sub path have to be known\n\t// 2. Locate and identify type of curve\n\t// 3. Get t for the curve\n\t// 4. Return curve.getPointAt(t')\n\n\tgetPoint: function ( t ) {\n\n\t\tvar d = t * this.getLength();\n\t\tvar curveLengths = this.getCurveLengths();\n\t\tvar i = 0;\n\n\t\t// To think about boundaries points.\n\n\t\twhile ( i < curveLengths.length ) {\n\n\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\tvar diff = curveLengths[ i ] - d;\n\t\t\t\tvar curve = this.curves[ i ];\n\n\t\t\t\tvar u = 1 - diff / curve.getLength();\n\n\t\t\t\treturn curve.getPointAt( u );\n\n\t\t\t}\n\n\t\t\ti ++;\n\n\t\t}\n\n\t\treturn null;\n\n\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t},\n\n\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t// getPoint() depends on getLength\n\n\tgetLength: function () {\n\n\t\tvar lens = this.getCurveLengths();\n\t\treturn lens[ lens.length - 1 ];\n\n\t},\n\n\t// cacheLengths must be recalculated.\n\tupdateArcLengths: function () {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.cacheLengths = null;\n\t\tthis.getLengths();\n\n\t},\n\n\t// Compute lengths and cache them\n\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\tgetCurveLengths: function () {\n\n\t\t// We use cache values if curves and cache array are same length\n\n\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\treturn this.cacheLengths;\n\n\t\t}\n\n\t\t// Get length of sub-curve\n\t\t// Push sums into cached array\n\n\t\tvar lengths = [], sums = 0;\n\n\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\tsums += this.curves[ i ].getLength();\n\t\t\tlengths.push( sums );\n\n\t\t}\n\n\t\tthis.cacheLengths = lengths;\n\n\t\treturn lengths;\n\n\t},\n\n\t/**************************************************************\n\t *\tCreate Geometries Helpers\n\t **************************************************************/\n\n\t/// Generate geometry from path points (for Line or Points objects)\n\n\tcreatePointsGeometry: function ( divisions ) {\n\n\t\tvar pts = this.getPoints( divisions );\n\t\treturn this.createGeometry( pts );\n\n\t},\n\n\t// Generate geometry from equidistant sampling along the path\n\n\tcreateSpacedPointsGeometry: function ( divisions ) {\n\n\t\tvar pts = this.getSpacedPoints( divisions );\n\t\treturn this.createGeometry( pts );\n\n\t},\n\n\tcreateGeometry: function ( points ) {\n\n\t\tvar geometry = new THREE.Geometry();\n\n\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tvar point = points[ i ];\n\t\t\tgeometry.vertices.push( new THREE.Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n} );\n\n// File:src/extras/core/Font.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Font = function ( data ) {\n\n\tthis.data = data;\n\n};\n\nObject.assign( THREE.Font.prototype, {\n\n\tgenerateShapes: function ( text, size, divisions ) {\n\n\t\tfunction createPaths( text ) {\n\n\t\t\tvar chars = String( text ).split( '' );\n\t\t\tvar scale = size / data.resolution;\n\t\t\tvar offset = 0;\n\n\t\t\tvar paths = [];\n\n\t\t\tfor ( var i = 0; i < chars.length; i ++ ) {\n\n\t\t\t\tvar ret = createPath( chars[ i ], scale, offset );\n\t\t\t\toffset += ret.offset;\n\n\t\t\t\tpaths.push( ret.path );\n\n\t\t\t}\n\n\t\t\treturn paths;\n\n\t\t}\n\n\t\tfunction createPath( c, scale, offset ) {\n\n\t\t\tvar glyph = data.glyphs[ c ] || data.glyphs[ '?' ];\n\n\t\t\tif ( ! glyph ) return;\n\n\t\t\tvar path = new THREE.Path();\n\n\t\t\tvar pts = [], b2 = THREE.ShapeUtils.b2, b3 = THREE.ShapeUtils.b3;\n\t\t\tvar x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;\n\n\t\t\tif ( glyph.o ) {\n\n\t\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\n\t\t\t\t\tvar action = outline[ i ++ ];\n\n\t\t\t\t\tswitch ( action ) {\n\n\t\t\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\n\t\t\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\n\t\t\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n\t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n\n\t\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\n\t\t\t\t\t\t\tif ( laste ) {\n\n\t\t\t\t\t\t\t\tcpx0 = laste.x;\n\t\t\t\t\t\t\t\tcpy0 = laste.y;\n\n\t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\n\t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n\t\t\t\t\t\t\t\t\tb2( t, cpx0, cpx1, cpx );\n\t\t\t\t\t\t\t\t\tb2( t, cpy0, cpy1, cpy );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n\t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n\t\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale;\n\n\t\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\n\t\t\t\t\t\t\tif ( laste ) {\n\n\t\t\t\t\t\t\t\tcpx0 = laste.x;\n\t\t\t\t\t\t\t\tcpy0 = laste.y;\n\n\t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\n\t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n\t\t\t\t\t\t\t\t\tb3( t, cpx0, cpx1, cpx2, cpx );\n\t\t\t\t\t\t\t\t\tb3( t, cpy0, cpy1, cpy2, cpy );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn { offset: glyph.ha * scale, path: path };\n\n\t\t}\n\n\t\t//\n\n\t\tif ( size === undefined ) size = 100;\n\t\tif ( divisions === undefined ) divisions = 4;\n\n\t\tvar data = this.data;\n\n\t\tvar paths = createPaths( text );\n\t\tvar shapes = [];\n\n\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n\t\t}\n\n\t\treturn shapes;\n\n\t}\n\n} );\n\n// File:src/extras/core/Path.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Creates free form 2d path using series of points, lines or curves.\n *\n **/\n\nTHREE.Path = function ( points ) {\n\n\tTHREE.CurvePath.call( this );\n\n\tthis.actions = [];\n\n\tif ( points ) {\n\n\t\tthis.fromPoints( points );\n\n\t}\n\n};\n\nTHREE.Path.prototype = Object.assign( Object.create( THREE.CurvePath.prototype ), {\n\n\tconstructor: THREE.Path,\n\n\t// TODO Clean up PATH API\n\n\t// Create path using straight lines to connect all points\n\t// - vectors: array of Vector2\n\n\tfromPoints: function ( vectors ) {\n\n\t\tthis.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );\n\n\t\tfor ( var i = 1, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tthis.lineTo( vectors[ i ].x, vectors[ i ].y );\n\n\t\t}\n\n\t},\n\n\tmoveTo: function ( x, y ) {\n\n\t\tthis.actions.push( { action: 'moveTo', args: [ x, y ] } );\n\n\t},\n\n\tlineTo: function ( x, y ) {\n\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\n\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\n\n\t\tvar curve = new THREE.LineCurve( new THREE.Vector2( x0, y0 ), new THREE.Vector2( x, y ) );\n\t\tthis.curves.push( curve );\n\n\t\tthis.actions.push( { action: 'lineTo', args: [ x, y ] } );\n\n\t},\n\n\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\n\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\n\n\t\tvar curve = new THREE.QuadraticBezierCurve(\n\t\t\tnew THREE.Vector2( x0, y0 ),\n\t\t\tnew THREE.Vector2( aCPx, aCPy ),\n\t\t\tnew THREE.Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.actions.push( { action: 'quadraticCurveTo', args: [ aCPx, aCPy, aX, aY ] } );\n\n\t},\n\n\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\n\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\n\n\t\tvar curve = new THREE.CubicBezierCurve(\n\t\t\tnew THREE.Vector2( x0, y0 ),\n\t\t\tnew THREE.Vector2( aCP1x, aCP1y ),\n\t\t\tnew THREE.Vector2( aCP2x, aCP2y ),\n\t\t\tnew THREE.Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.actions.push( { action: 'bezierCurveTo', args: [ aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ] } );\n\n\t},\n\n\tsplineThru: function ( pts /*Array of Vector*/ ) {\n\n\t\tvar args = Array.prototype.slice.call( arguments );\n\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\n\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\n\n\t\tvar npts = [ new THREE.Vector2( x0, y0 ) ];\n\t\tArray.prototype.push.apply( npts, pts );\n\n\t\tvar curve = new THREE.SplineCurve( npts );\n\t\tthis.curves.push( curve );\n\n\t\tvar lastPoint = pts[ pts.length - 1 ];\n\t\targs.push( lastPoint.x );\n\t\targs.push( lastPoint.y );\n\n\t\tthis.actions.push( { action: 'splineThru', args: args } );\n\n\t},\n\n\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\n\n\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t},\n\n\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t},\n\n\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\n\n\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t},\n\n\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tvar args = [\n\t\t\taX, aY,\n\t\t\txRadius, yRadius,\n\t\t\taStartAngle, aEndAngle,\n\t\t\taClockwise,\n\t\t\taRotation || 0 // aRotation is optional.\n\t\t];\n\n\t\tvar curve = new THREE.EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\t\tthis.curves.push( curve );\n\n\t\tvar lastPoint = curve.getPoint( 1 );\n\t\targs.push( lastPoint.x );\n\t\targs.push( lastPoint.y );\n\n\t\tthis.actions.push( { action: 'ellipse', args: args } );\n\n\t},\n\n\tgetSpacedPoints: function ( divisions ) {\n\n\t\tif ( ! divisions ) divisions = 40;\n\n\t\tvar points = [];\n\n\t\tfor ( var i = 0; i < divisions; i ++ ) {\n\n\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t\t//if ( !this.getPoint( i / divisions ) ) throw \"DIE\";\n\n\t\t}\n\n\t\tif ( this.autoClose ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t},\n\n\tgetPoints: function ( divisions ) {\n\n\t\tdivisions = divisions || 12;\n\n\t\tvar b2 = THREE.ShapeUtils.b2;\n\t\tvar b3 = THREE.ShapeUtils.b3;\n\n\t\tvar points = [];\n\n\t\tvar cpx, cpy, cpx2, cpy2, cpx1, cpy1, cpx0, cpy0,\n\t\t\tlaste, tx, ty;\n\n\t\tfor ( var i = 0, l = this.actions.length; i < l; i ++ ) {\n\n\t\t\tvar item = this.actions[ i ];\n\n\t\t\tvar action = item.action;\n\t\t\tvar args = item.args;\n\n\t\t\tswitch ( action ) {\n\n\t\t\tcase 'moveTo':\n\n\t\t\t\tpoints.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'lineTo':\n\n\t\t\t\tpoints.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'quadraticCurveTo':\n\n\t\t\t\tcpx  = args[ 2 ];\n\t\t\t\tcpy  = args[ 3 ];\n\n\t\t\t\tcpx1 = args[ 0 ];\n\t\t\t\tcpy1 = args[ 1 ];\n\n\t\t\t\tif ( points.length > 0 ) {\n\n\t\t\t\t\tlaste = points[ points.length - 1 ];\n\n\t\t\t\t\tcpx0 = laste.x;\n\t\t\t\t\tcpy0 = laste.y;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tlaste = this.actions[ i - 1 ].args;\n\n\t\t\t\t\tcpx0 = laste[ laste.length - 2 ];\n\t\t\t\t\tcpy0 = laste[ laste.length - 1 ];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 1; j <= divisions; j ++ ) {\n\n\t\t\t\t\tvar t = j / divisions;\n\n\t\t\t\t\ttx = b2( t, cpx0, cpx1, cpx );\n\t\t\t\t\tty = b2( t, cpy0, cpy1, cpy );\n\n\t\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'bezierCurveTo':\n\n\t\t\t\tcpx  = args[ 4 ];\n\t\t\t\tcpy  = args[ 5 ];\n\n\t\t\t\tcpx1 = args[ 0 ];\n\t\t\t\tcpy1 = args[ 1 ];\n\n\t\t\t\tcpx2 = args[ 2 ];\n\t\t\t\tcpy2 = args[ 3 ];\n\n\t\t\t\tif ( points.length > 0 ) {\n\n\t\t\t\t\tlaste = points[ points.length - 1 ];\n\n\t\t\t\t\tcpx0 = laste.x;\n\t\t\t\t\tcpy0 = laste.y;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tlaste = this.actions[ i - 1 ].args;\n\n\t\t\t\t\tcpx0 = laste[ laste.length - 2 ];\n\t\t\t\t\tcpy0 = laste[ laste.length - 1 ];\n\n\t\t\t\t}\n\n\n\t\t\t\tfor ( var j = 1; j <= divisions; j ++ ) {\n\n\t\t\t\t\tvar t = j / divisions;\n\n\t\t\t\t\ttx = b3( t, cpx0, cpx1, cpx2, cpx );\n\t\t\t\t\tty = b3( t, cpy0, cpy1, cpy2, cpy );\n\n\t\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'splineThru':\n\n\t\t\t\tlaste = this.actions[ i - 1 ].args;\n\n\t\t\t\tvar last = new THREE.Vector2( laste[ laste.length - 2 ], laste[ laste.length - 1 ] );\n\t\t\t\tvar spts = [ last ];\n\n\t\t\t\tvar n = divisions * args[ 0 ].length;\n\n\t\t\t\tspts = spts.concat( args[ 0 ] );\n\n\t\t\t\tvar spline = new THREE.SplineCurve( spts );\n\n\t\t\t\tfor ( var j = 1; j <= n; j ++ ) {\n\n\t\t\t\t\tpoints.push( spline.getPointAt( j / n ) );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'arc':\n\n\t\t\t\tvar aX = args[ 0 ], aY = args[ 1 ],\n\t\t\t\t\taRadius = args[ 2 ],\n\t\t\t\t\taStartAngle = args[ 3 ], aEndAngle = args[ 4 ],\n\t\t\t\t\taClockwise = !! args[ 5 ];\n\n\t\t\t\tvar deltaAngle = aEndAngle - aStartAngle;\n\t\t\t\tvar angle;\n\t\t\t\tvar tdivisions = divisions * 2;\n\n\t\t\t\tfor ( var j = 1; j <= tdivisions; j ++ ) {\n\n\t\t\t\t\tvar t = j / tdivisions;\n\n\t\t\t\t\tif ( ! aClockwise ) {\n\n\t\t\t\t\t\tt = 1 - t;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tangle = aStartAngle + t * deltaAngle;\n\n\t\t\t\t\ttx = aX + aRadius * Math.cos( angle );\n\t\t\t\t\tty = aY + aRadius * Math.sin( angle );\n\n\t\t\t\t\t//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);\n\n\t\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\n\n\t\t\t\t}\n\n\t\t\t\t//console.log(points);\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'ellipse':\n\n\t\t\t\tvar aX = args[ 0 ], aY = args[ 1 ],\n\t\t\t\t\txRadius = args[ 2 ],\n\t\t\t\t\tyRadius = args[ 3 ],\n\t\t\t\t\taStartAngle = args[ 4 ], aEndAngle = args[ 5 ],\n\t\t\t\t\taClockwise = !! args[ 6 ],\n\t\t\t\t\taRotation = args[ 7 ];\n\n\n\t\t\t\tvar deltaAngle = aEndAngle - aStartAngle;\n\t\t\t\tvar angle;\n\t\t\t\tvar tdivisions = divisions * 2;\n\n\t\t\t\tvar cos, sin;\n\t\t\t\tif ( aRotation !== 0 ) {\n\n\t\t\t\t\tcos = Math.cos( aRotation );\n\t\t\t\t\tsin = Math.sin( aRotation );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 1; j <= tdivisions; j ++ ) {\n\n\t\t\t\t\tvar t = j / tdivisions;\n\n\t\t\t\t\tif ( ! aClockwise ) {\n\n\t\t\t\t\t\tt = 1 - t;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tangle = aStartAngle + t * deltaAngle;\n\n\t\t\t\t\ttx = aX + xRadius * Math.cos( angle );\n\t\t\t\t\tty = aY + yRadius * Math.sin( angle );\n\n\t\t\t\t\tif ( aRotation !== 0 ) {\n\n\t\t\t\t\t\tvar x = tx, y = ty;\n\n\t\t\t\t\t\t// Rotate the point about the center of the ellipse.\n\t\t\t\t\t\ttx = ( x - aX ) * cos - ( y - aY ) * sin + aX;\n\t\t\t\t\t\tty = ( x - aX ) * sin + ( y - aY ) * cos + aY;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);\n\n\t\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\n\n\t\t\t\t}\n\n\t\t\t\t//console.log(points);\n\n\t\t\t\tbreak;\n\n\t\t\t} // end switch\n\n\t\t}\n\n\n\n\t\t// Normalize to remove the closing point by default.\n\t\tvar lastPoint = points[ points.length - 1 ];\n\t\tif ( Math.abs( lastPoint.x - points[ 0 ].x ) < Number.EPSILON &&\n\t\t\t\t Math.abs( lastPoint.y - points[ 0 ].y ) < Number.EPSILON )\n\t\t\tpoints.splice( points.length - 1, 1 );\n\n\t\tif ( this.autoClose ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t},\n\n\ttoShapes: function ( isCCW, noHoles ) {\n\n\t\tfunction extractSubpaths( inActions ) {\n\n\t\t\tvar subPaths = [], lastPath = new THREE.Path();\n\n\t\t\tfor ( var i = 0, l = inActions.length; i < l; i ++ ) {\n\n\t\t\t\tvar item = inActions[ i ];\n\n\t\t\t\tvar args = item.args;\n\t\t\t\tvar action = item.action;\n\n\t\t\t\tif ( action === 'moveTo' ) {\n\n\t\t\t\t\tif ( lastPath.actions.length !== 0 ) {\n\n\t\t\t\t\t\tsubPaths.push( lastPath );\n\t\t\t\t\t\tlastPath = new THREE.Path();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tlastPath[ action ].apply( lastPath, args );\n\n\t\t\t}\n\n\t\t\tif ( lastPath.actions.length !== 0 ) {\n\n\t\t\t\tsubPaths.push( lastPath );\n\n\t\t\t}\n\n\t\t\t// console.log(subPaths);\n\n\t\t\treturn\tsubPaths;\n\n\t\t}\n\n\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\tvar shapes = [];\n\n\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\tvar tmpPath = inSubpaths[ i ];\n\n\t\t\t\tvar tmpShape = new THREE.Shape();\n\t\t\t\ttmpShape.actions = tmpPath.actions;\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t}\n\n\t\t\t//console.log(\"shape\", shapes);\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\tvar polyLen = inPolygon.length;\n\n\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\tvar inside = false;\n\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\tvar edgeLowPt  = inPolygon[ p ];\n\t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\n\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not parallel\n\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\tedgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\n\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// parallel or collinear\n\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n\t\t\t\t\t// continue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn\tinside;\n\n\t\t}\n\n\t\tvar isClockWise = THREE.ShapeUtils.isClockWise;\n\n\t\tvar subPaths = extractSubpaths( this.actions );\n\t\tif ( subPaths.length === 0 ) return [];\n\n\t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\tvar solid, tmpPath, tmpShape, shapes = [];\n\n\t\tif ( subPaths.length === 1 ) {\n\n\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\ttmpShape = new THREE.Shape();\n\t\t\ttmpShape.actions = tmpPath.actions;\n\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\tshapes.push( tmpShape );\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\tvar betterShapeHoles = [];\n\t\tvar newShapes = [];\n\t\tvar newShapeHoles = [];\n\t\tvar mainIdx = 0;\n\t\tvar tmpPoints;\n\n\t\tnewShapes[ mainIdx ] = undefined;\n\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\ttmpPath = subPaths[ i ];\n\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\tif ( solid ) {\n\n\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\n\t\t\t\tnewShapes[ mainIdx ] = { s: new THREE.Shape(), p: tmpPoints };\n\t\t\t\tnewShapes[ mainIdx ].s.actions = tmpPath.actions;\n\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\tif ( holesFirst )\tmainIdx ++;\n\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t//console.log('cw', i);\n\n\t\t\t} else {\n\n\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t//console.log('ccw', i);\n\n\t\t\t}\n\n\t\t}\n\n\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\tif ( newShapes.length > 1 ) {\n\n\t\t\tvar ambiguous = false;\n\t\t\tvar toChange = [];\n\n\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t}\n\n\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tvar sho = newShapeHoles[ sIdx ];\n\n\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\tvar ho = sho[ hIdx ];\n\t\t\t\t\tvar hole_unassigned = true;\n\n\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\n\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t// console.log(\"ambiguous: \", ambiguous);\n\t\t\tif ( toChange.length > 0 ) {\n\n\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar tmpHoles;\n\n\t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\n\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\tshapes.push( tmpShape );\n\t\t\ttmpHoles = newShapeHoles[ i ];\n\n\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//console.log(\"shape\", shapes);\n\n\t\treturn shapes;\n\n\t}\n\n} );\n\n// File:src/extras/core/Shape.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Defines a 2d shape plane using paths.\n **/\n\n// STEP 1 Create a path.\n// STEP 2 Turn path into shape.\n// STEP 3 ExtrudeGeometry takes in Shape/Shapes\n// STEP 3a - Extract points from each shape, turn to vertices\n// STEP 3b - Triangulate each shape, add faces.\n\nTHREE.Shape = function () {\n\n\tTHREE.Path.apply( this, arguments );\n\n\tthis.holes = [];\n\n};\n\nTHREE.Shape.prototype = Object.assign( Object.create( THREE.Path.prototype ), {\n\n\tconstructor: THREE.Shape,\n\n\t// Convenience method to return ExtrudeGeometry\n\n\textrude: function ( options ) {\n\n\t\treturn new THREE.ExtrudeGeometry( this, options );\n\n\t},\n\n\t// Convenience method to return ShapeGeometry\n\n\tmakeGeometry: function ( options ) {\n\n\t\treturn new THREE.ShapeGeometry( this, options );\n\n\t},\n\n\tgetPointsHoles: function ( divisions ) {\n\n\t\tvar holesPts = [];\n\n\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t}\n\n\t\treturn holesPts;\n\n\t},\n\n\t// Get points of shape and holes (keypoints based on segments parameter)\n\n\textractAllPoints: function ( divisions ) {\n\n\t\treturn {\n\n\t\t\tshape: this.getPoints( divisions ),\n\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t};\n\n\t},\n\n\textractPoints: function ( divisions ) {\n\n\t\treturn this.extractAllPoints( divisions );\n\n\t}\n\n} );\n\n// File:src/extras/curves/LineCurve.js\n\n/**************************************************************\n *\tLine\n **************************************************************/\n\nTHREE.LineCurve = function ( v1, v2 ) {\n\n\tthis.v1 = v1;\n\tthis.v2 = v2;\n\n};\n\nTHREE.LineCurve.prototype = Object.create( THREE.Curve.prototype );\nTHREE.LineCurve.prototype.constructor = THREE.LineCurve;\n\nTHREE.LineCurve.prototype.getPoint = function ( t ) {\n\n\tvar point = this.v2.clone().sub( this.v1 );\n\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\treturn point;\n\n};\n\n// Line curve is linear, so we can overwrite default getPointAt\n\nTHREE.LineCurve.prototype.getPointAt = function ( u ) {\n\n\treturn this.getPoint( u );\n\n};\n\nTHREE.LineCurve.prototype.getTangent = function( t ) {\n\n\tvar tangent = this.v2.clone().sub( this.v1 );\n\n\treturn tangent.normalize();\n\n};\n\n// File:src/extras/curves/QuadraticBezierCurve.js\n\n/**************************************************************\n *\tQuadratic Bezier curve\n **************************************************************/\n\n\nTHREE.QuadraticBezierCurve = function ( v0, v1, v2 ) {\n\n\tthis.v0 = v0;\n\tthis.v1 = v1;\n\tthis.v2 = v2;\n\n};\n\nTHREE.QuadraticBezierCurve.prototype = Object.create( THREE.Curve.prototype );\nTHREE.QuadraticBezierCurve.prototype.constructor = THREE.QuadraticBezierCurve;\n\n\nTHREE.QuadraticBezierCurve.prototype.getPoint = function ( t ) {\n\n\tvar b2 = THREE.ShapeUtils.b2;\n\n\treturn new THREE.Vector2(\n\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n\t\tb2( t, this.v0.y, this.v1.y, this.v2.y )\n\t);\n\n};\n\n\nTHREE.QuadraticBezierCurve.prototype.getTangent = function( t ) {\n\n\tvar tangentQuadraticBezier = THREE.CurveUtils.tangentQuadraticBezier;\n\n\treturn new THREE.Vector2(\n\t\ttangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),\n\t\ttangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )\n\t).normalize();\n\n};\n\n// File:src/extras/curves/CubicBezierCurve.js\n\n/**************************************************************\n *\tCubic Bezier curve\n **************************************************************/\n\nTHREE.CubicBezierCurve = function ( v0, v1, v2, v3 ) {\n\n\tthis.v0 = v0;\n\tthis.v1 = v1;\n\tthis.v2 = v2;\n\tthis.v3 = v3;\n\n};\n\nTHREE.CubicBezierCurve.prototype = Object.create( THREE.Curve.prototype );\nTHREE.CubicBezierCurve.prototype.constructor = THREE.CubicBezierCurve;\n\nTHREE.CubicBezierCurve.prototype.getPoint = function ( t ) {\n\n\tvar b3 = THREE.ShapeUtils.b3;\n\n\treturn new THREE.Vector2( \n\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n\t);\n\n};\n\nTHREE.CubicBezierCurve.prototype.getTangent = function( t ) {\n\n\tvar tangentCubicBezier = THREE.CurveUtils.tangentCubicBezier;\n\n\treturn new THREE.Vector2( \n\t\ttangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t\ttangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n\t).normalize();\n\n};\n\n// File:src/extras/curves/SplineCurve.js\n\n/**************************************************************\n *\tSpline curve\n **************************************************************/\n\nTHREE.SplineCurve = function ( points /* array of Vector2 */ ) {\n\n\tthis.points = ( points == undefined ) ? [] : points;\n\n};\n\nTHREE.SplineCurve.prototype = Object.create( THREE.Curve.prototype );\nTHREE.SplineCurve.prototype.constructor = THREE.SplineCurve;\n\nTHREE.SplineCurve.prototype.getPoint = function ( t ) {\n\n\tvar points = this.points;\n\tvar point = ( points.length - 1 ) * t;\n\n\tvar intPoint = Math.floor( point );\n\tvar weight = point - intPoint;\n\n\tvar point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\tvar point1 = points[ intPoint ];\n\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\tvar interpolate = THREE.CurveUtils.interpolate;\n\n\treturn new THREE.Vector2(\n\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight )\n\t);\n\n};\n\n// File:src/extras/curves/EllipseCurve.js\n\n/**************************************************************\n *\tEllipse curve\n **************************************************************/\n\nTHREE.EllipseCurve = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\tthis.aX = aX;\n\tthis.aY = aY;\n\n\tthis.xRadius = xRadius;\n\tthis.yRadius = yRadius;\n\n\tthis.aStartAngle = aStartAngle;\n\tthis.aEndAngle = aEndAngle;\n\n\tthis.aClockwise = aClockwise;\n\t\n\tthis.aRotation = aRotation || 0;\n\n};\n\nTHREE.EllipseCurve.prototype = Object.create( THREE.Curve.prototype );\nTHREE.EllipseCurve.prototype.constructor = THREE.EllipseCurve;\n\nTHREE.EllipseCurve.prototype.getPoint = function ( t ) {\n\n\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\n\tif ( deltaAngle < 0 ) deltaAngle += Math.PI * 2;\n\tif ( deltaAngle > Math.PI * 2 ) deltaAngle -= Math.PI * 2;\n\n\tvar angle;\n\n\tif ( this.aClockwise === true ) {\n\n\t\tangle = this.aEndAngle + ( 1 - t ) * ( Math.PI * 2 - deltaAngle );\n\n\t} else {\n\n\t\tangle = this.aStartAngle + t * deltaAngle;\n\n\t}\n\t\n\tvar x = this.aX + this.xRadius * Math.cos( angle );\n\tvar y = this.aY + this.yRadius * Math.sin( angle );\n\n\tif ( this.aRotation !== 0 ) {\n\n\t\tvar cos = Math.cos( this.aRotation );\n\t\tvar sin = Math.sin( this.aRotation );\n\n\t\tvar tx = x, ty = y;\n\n\t\t// Rotate the point about the center of the ellipse.\n\t\tx = ( tx - this.aX ) * cos - ( ty - this.aY ) * sin + this.aX;\n\t\ty = ( tx - this.aX ) * sin + ( ty - this.aY ) * cos + this.aY;\n\n\t}\n\n\treturn new THREE.Vector2( x, y );\n\n};\n\n// File:src/extras/curves/ArcCurve.js\n\n/**************************************************************\n *\tArc curve\n **************************************************************/\n\nTHREE.ArcCurve = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\tTHREE.EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n};\n\nTHREE.ArcCurve.prototype = Object.create( THREE.EllipseCurve.prototype );\nTHREE.ArcCurve.prototype.constructor = THREE.ArcCurve;\n\n// File:src/extras/curves/LineCurve3.js\n\n/**************************************************************\n *\tLine3D\n **************************************************************/\n\nTHREE.LineCurve3 = THREE.Curve.create(\n\n\tfunction ( v1, v2 ) {\n\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t},\n\n\tfunction ( t ) {\n\n\t\tvar vector = new THREE.Vector3();\n\n\t\tvector.subVectors( this.v2, this.v1 ); // diff\n\t\tvector.multiplyScalar( t );\n\t\tvector.add( this.v1 );\n\n\t\treturn vector;\n\n\t}\n\n);\n\n// File:src/extras/curves/QuadraticBezierCurve3.js\n\n/**************************************************************\n *\tQuadratic Bezier 3D curve\n **************************************************************/\n\nTHREE.QuadraticBezierCurve3 = THREE.Curve.create(\n\n\tfunction ( v0, v1, v2 ) {\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t},\n\n\tfunction ( t ) {\n\n\t\tvar b2 = THREE.ShapeUtils.b2;\t\t\n\n\t\treturn new THREE.Vector3(\n\t\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n\t\t\tb2( t, this.v0.y, this.v1.y, this.v2.y ),\n\t\t\tb2( t, this.v0.z, this.v1.z, this.v2.z )\n\t\t);\n\n\t}\n\n);\n\n// File:src/extras/curves/CubicBezierCurve3.js\n\n/**************************************************************\n *\tCubic Bezier 3D curve\n **************************************************************/\n\nTHREE.CubicBezierCurve3 = THREE.Curve.create(\n\n\tfunction ( v0, v1, v2, v3 ) {\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\n\t},\n\n\tfunction ( t ) {\n\n\t\tvar b3 = THREE.ShapeUtils.b3;\n\n\t\treturn new THREE.Vector3(\n\t\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),\n\t\t\tb3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )\n\t\t);\n\n\t}\n\n);\n\n// File:src/extras/curves/SplineCurve3.js\n\n/**************************************************************\n *\tSpline 3D curve\n **************************************************************/\n\n\nTHREE.SplineCurve3 = THREE.Curve.create(\n\n\tfunction ( points /* array of Vector3 */ ) {\n\n\t\tconsole.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );\n\t\tthis.points = ( points == undefined ) ? [] : points;\n\n\t},\n\n\tfunction ( t ) {\n\n\t\tvar points = this.points;\n\t\tvar point = ( points.length - 1 ) * t;\n\n\t\tvar intPoint = Math.floor( point );\n\t\tvar weight = point - intPoint;\n\n\t\tvar point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];\n\t\tvar point1 = points[ intPoint ];\n\t\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\tvar interpolate = THREE.CurveUtils.interpolate;\n\n\t\treturn new THREE.Vector3(\n\t\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n\t\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight ),\n\t\t\tinterpolate( point0.z, point1.z, point2.z, point3.z, weight )\n\t\t);\n\n\t}\n\n);\n\n// File:src/extras/curves/CatmullRomCurve3.js\n\n/**\n * @author zz85 https://github.com/zz85\n *\n * Centripetal CatmullRom Curve - which is useful for avoiding\n * cusps and self-intersections in non-uniform catmull rom curves.\n * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n *\n * curve.type accepts centripetal(default), chordal and catmullrom\n * curve.tension is used for catmullrom which defaults to 0.5\n */\n\nTHREE.CatmullRomCurve3 = ( function() {\n\n\tvar\n\t\ttmp = new THREE.Vector3(),\n\t\tpx = new CubicPoly(),\n\t\tpy = new CubicPoly(),\n\t\tpz = new CubicPoly();\n\n\t/*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tfunction CubicPoly() {\n\n\t}\n\n\t/*\n\t * Compute coefficients for a cubic polynomial\n\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t * such that\n\t *   p(0) = x0, p(1) = x1\n\t *  and\n\t *   p'(0) = t0, p'(1) = t1.\n\t */\n\tCubicPoly.prototype.init = function( x0, x1, t0, t1 ) {\n\n\t\tthis.c0 = x0;\n\t\tthis.c1 = t0;\n\t\tthis.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\tthis.c3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t};\n\n\tCubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t// compute tangents when parameterized in [t1,t2]\n\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t// rescale tangents for parametrization in [0,1]\n\t\tt1 *= dt1;\n\t\tt2 *= dt1;\n\n\t\t// initCubicPoly\n\t\tthis.init( x1, x2, t1, t2 );\n\n\t};\n\n\t// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4\n\tCubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {\n\n\t\tthis.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t};\n\n\tCubicPoly.prototype.calc = function( t ) {\n\n\t\tvar t2 = t * t;\n\t\tvar t3 = t2 * t;\n\t\treturn this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;\n\n\t};\n\n\t// Subclass Three.js curve\n\treturn THREE.Curve.create(\n\n\t\tfunction ( p /* array of Vector3 */ ) {\n\n\t\t\tthis.points = p || [];\n\t\t\tthis.closed = false;\n\n\t\t},\n\n\t\tfunction ( t ) {\n\n\t\t\tvar points = this.points,\n\t\t\t\tpoint, intPoint, weight, l;\n\n\t\t\tl = points.length;\n\n\t\t\tif ( l < 2 ) console.log( 'duh, you need at least 2 points' );\n\n\t\t\tpoint = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\t\tintPoint = Math.floor( point );\n\t\t\tweight = point - intPoint;\n\n\t\t\tif ( this.closed ) {\n\n\t\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\n\n\t\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\t\tintPoint = l - 2;\n\t\t\t\tweight = 1;\n\n\t\t\t}\n\n\t\t\tvar p0, p1, p2, p3; // 4 points\n\n\t\t\tif ( this.closed || intPoint > 0 ) {\n\n\t\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t\t\t} else {\n\n\t\t\t\t// extrapolate first point\n\t\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\t\tp0 = tmp;\n\n\t\t\t}\n\n\t\t\tp1 = points[ intPoint % l ];\n\t\t\tp2 = points[ ( intPoint + 1 ) % l ];\n\n\t\t\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t\t\t} else {\n\n\t\t\t\t// extrapolate last point\n\t\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\t\tp3 = tmp;\n\n\t\t\t}\n\n\t\t\tif ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {\n\n\t\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\t\tvar pow = this.type === 'chordal' ? 0.5 : 0.25;\n\t\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t\t// safety check for repeated points\n\t\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n\t\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t\t} else if ( this.type === 'catmullrom' ) {\n\n\t\t\t\tvar tension = this.tension !== undefined ? this.tension : 0.5;\n\t\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );\n\t\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );\n\t\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );\n\n\t\t\t}\n\n\t\t\tvar v = new THREE.Vector3(\n\t\t\t\tpx.calc( weight ),\n\t\t\t\tpy.calc( weight ),\n\t\t\t\tpz.calc( weight )\n\t\t\t);\n\n\t\t\treturn v;\n\n\t\t}\n\n\t);\n\n} )();\n\n// File:src/extras/curves/ClosedSplineCurve3.js\n\n/**************************************************************\n *\tClosed Spline 3D curve\n **************************************************************/\n\n\nTHREE.ClosedSplineCurve3 = function ( points ) {\n\n\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.' );\n\n\tTHREE.CatmullRomCurve3.call( this, points );\n\tthis.type = 'catmullrom';\n\tthis.closed = true;\n\n};\n\nTHREE.ClosedSplineCurve3.prototype = Object.create( THREE.CatmullRomCurve3.prototype );\n\n// File:src/extras/geometries/BoxGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as\n */\n\nTHREE.BoxGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'BoxGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\tdepth: depth,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tdepthSegments: depthSegments\n\t};\n\n\tthis.fromBufferGeometry( new THREE.BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n\tthis.mergeVertices();\n\n};\n\nTHREE.BoxGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.BoxGeometry.prototype.constructor = THREE.BoxGeometry;\n\nTHREE.CubeGeometry = THREE.BoxGeometry;\n\n// File:src/extras/geometries/BoxBufferGeometry.js\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nTHREE.BoxBufferGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'BoxBufferGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\tdepth: depth,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tdepthSegments: depthSegments\n\t};\n\n\tvar scope = this;\n\n\t// segments\n\twidthSegments = Math.floor( widthSegments ) || 1;\n\theightSegments = Math.floor( heightSegments ) || 1;\n\tdepthSegments = Math.floor( depthSegments ) || 1;\n\n\t// these are used to calculate buffer length\n\tvar vertexCount = calculateVertexCount( widthSegments, heightSegments, depthSegments );\n\tvar indexCount = calculateIndexCount( widthSegments, heightSegments, depthSegments );\n\n\t// buffers\n\tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n\tvar vertices = new Float32Array( vertexCount * 3 );\n\tvar normals = new Float32Array( vertexCount * 3 );\n\tvar uvs = new Float32Array( vertexCount * 2 );\n\n\t// offset variables\n\tvar vertexBufferOffset = 0;\n\tvar uvBufferOffset = 0;\n\tvar indexBufferOffset = 0;\n\tvar numberOfVertices = 0;\n\n\t// group variables\n\tvar groupStart = 0;\n\n\t// build each side of the box geometry\n\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height,   width,  depthSegments, heightSegments, 0 ); // px\n\tbuildPlane( 'z', 'y', 'x',   1, - 1, depth, height, - width,  depthSegments, heightSegments, 1 ); // nx\n\tbuildPlane( 'x', 'z', 'y',   1,   1, width, depth,    height, widthSegments, depthSegments,  2 ); // py\n\tbuildPlane( 'x', 'z', 'y',   1, - 1, width, depth,  - height, widthSegments, depthSegments,  3 ); // ny\n\tbuildPlane( 'x', 'y', 'z',   1, - 1, width, height,   depth,  widthSegments, heightSegments, 4 ); // pz\n\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth,  widthSegments, heightSegments, 5 ); // nz\n\n\t// build geometry\n\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\n\t// helper functions\n\n\tfunction calculateVertexCount ( w, h, d ) {\n\n\t\tvar vertices = 0;\n\n\t\t// calculate the amount of vertices for each side (plane)\n\t\tvertices += (w + 1) * (h + 1) * 2; // xy\n\t\tvertices += (w + 1) * (d + 1) * 2; // xz\n\t\tvertices += (d + 1) * (h + 1) * 2; // zy\n\n\t\treturn vertices;\n\n\t}\n\n\tfunction calculateIndexCount ( w, h, d ) {\n\n\t\tvar index = 0;\n\n\t\t// calculate the amount of squares for each side\n\t\tindex += w * h * 2; // xy\n\t\tindex += w * d * 2; // xz\n\t\tindex += d * h * 2; // zy\n\n\t\treturn index * 6; // two triangles per square => six vertices per square\n\n\t}\n\n\tfunction buildPlane ( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\tvar segmentWidth\t= width / gridX;\n\t\tvar segmentHeight = height / gridY;\n\n\t\tvar widthHalf = width / 2;\n\t\tvar heightHalf = height / 2;\n\t\tvar depthHalf = depth / 2;\n\n\t\tvar gridX1 = gridX + 1;\n\t\tvar gridY1 = gridY + 1;\n\n\t\tvar vertexCounter = 0;\n\t\tvar groupCount = 0;\n\n\t\tvar vector = new THREE.Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tvar y = iy * segmentHeight - heightHalf;\n\n\t\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t// set values to correct vector component\n\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t// now apply vector to vertex buffer\n\t\t\t\tvertices[ vertexBufferOffset ] = vector.x;\n\t\t\t\tvertices[ vertexBufferOffset + 1 ] = vector.y;\n\t\t\t\tvertices[ vertexBufferOffset + 2 ] = vector.z;\n\n\t\t\t\t// set values to correct vector component\n\t\t\t\tvector[ u ] = 0;\n\t\t\t\tvector[ v ] = 0;\n\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t// now apply vector to normal buffer\n\t\t\t\tnormals[ vertexBufferOffset ] = vector.x;\n\t\t\t\tnormals[ vertexBufferOffset + 1 ] = vector.y;\n\t\t\t\tnormals[ vertexBufferOffset + 2 ] = vector.z;\n\n\t\t\t\t// uvs\n\t\t\t\tuvs[ uvBufferOffset ] = ix / gridX;\n\t\t\t\tuvs[ uvBufferOffset + 1 ] = 1 - ( iy / gridY );\n\n\t\t\t\t// update offsets and counters\n\t\t\t\tvertexBufferOffset += 3;\n\t\t\t\tuvBufferOffset += 2;\n\t\t\t\tvertexCounter += 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// 1. you need three indices to draw a single face\n\t\t// 2. a single segment consists of two faces\n\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\t// indices\n\t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t// face one\n\t\t\t\tindices[ indexBufferOffset ] = a;\n\t\t\t\tindices[ indexBufferOffset + 1 ] = b;\n\t\t\t\tindices[ indexBufferOffset + 2 ] = d;\n\n\t\t\t\t// face two\n\t\t\t\tindices[ indexBufferOffset + 3 ] = b;\n\t\t\t\tindices[ indexBufferOffset + 4 ] = c;\n\t\t\t\tindices[ indexBufferOffset + 5 ] = d;\n\n\t\t\t\t// update offsets and counters\n\t\t\t\tindexBufferOffset += 6;\n\t\t\t\tgroupCount += 6;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// add a group to the geometry. this will ensure multi material support\n\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t// calculate new start value for groups\n\t\tgroupStart += groupCount;\n\n\t\t// update total number of vertices\n\t\tnumberOfVertices += vertexCounter;\n\n\t}\n\n};\n\nTHREE.BoxBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.BoxBufferGeometry.prototype.constructor = THREE.BoxBufferGeometry;\n\n// File:src/extras/geometries/CircleGeometry.js\n\n/**\n * @author hughes\n */\n\nTHREE.CircleGeometry = function ( radius, segments, thetaStart, thetaLength ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'CircleGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tsegments: segments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new THREE.CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\n};\n\nTHREE.CircleGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.CircleGeometry.prototype.constructor = THREE.CircleGeometry;\n\n// File:src/extras/geometries/CircleBufferGeometry.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nTHREE.CircleBufferGeometry = function ( radius, segments, thetaStart, thetaLength ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'CircleBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tsegments: segments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tradius = radius || 50;\n\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\tvar vertices = segments + 2;\n\n\tvar positions = new Float32Array( vertices * 3 );\n\tvar normals = new Float32Array( vertices * 3 );\n\tvar uvs = new Float32Array( vertices * 2 );\n\n\t// center data is already zero, but need to set a few extras\n\tnormals[ 2 ] = 1.0;\n\tuvs[ 0 ] = 0.5;\n\tuvs[ 1 ] = 0.5;\n\n\tfor ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {\n\n\t\tvar segment = thetaStart + s / segments * thetaLength;\n\n\t\tpositions[ i ] = radius * Math.cos( segment );\n\t\tpositions[ i + 1 ] = radius * Math.sin( segment );\n\n\t\tnormals[ i + 2 ] = 1; // normal z\n\n\t\tuvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;\n\t\tuvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;\n\n\t}\n\n\tvar indices = [];\n\n\tfor ( var i = 1; i <= segments; i ++ ) {\n\n\t\tindices.push( i, i + 1, 0 );\n\n\t}\n\n\tthis.setIndex( new THREE.BufferAttribute( new Uint16Array( indices ), 1 ) );\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\n\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\n\n};\n\nTHREE.CircleBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.CircleBufferGeometry.prototype.constructor = THREE.CircleBufferGeometry;\n\n// File:src/extras/geometries/CylinderBufferGeometry.js\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nTHREE.CylinderBufferGeometry = function( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'CylinderBufferGeometry';\n\n\tthis.parameters = {\n\t\tradiusTop: radiusTop,\n\t\tradiusBottom: radiusBottom,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\topenEnded: openEnded,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tvar scope = this;\n\n\tradiusTop = radiusTop !== undefined ? radiusTop : 20;\n\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 20;\n\theight = height !== undefined ? height : 100;\n\n\tradialSegments = Math.floor( radialSegments ) || 8;\n\theightSegments = Math.floor( heightSegments ) || 1;\n\n\topenEnded = openEnded !== undefined ? openEnded : false;\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI;\n\n\t// used to calculate buffer length\n\n\tvar nbCap = 0;\n\n\tif ( openEnded === false ) {\n\n\t\tif ( radiusTop > 0 ) nbCap ++;\n\t\tif ( radiusBottom > 0 ) nbCap ++;\n\n\t}\n\n\tvar vertexCount = calculateVertexCount();\n\tvar indexCount = calculateIndexCount();\n\n\t// buffers\n\n\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ), 1 );\n\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n\t// helper variables\n\n\tvar index = 0,\n\t    indexOffset = 0,\n\t    indexArray = [],\n\t    halfHeight = height / 2;\n\n\t// group variables\n\tvar groupStart = 0;\n\n\t// generate geometry\n\n\tgenerateTorso();\n\n\tif ( openEnded === false ) {\n\n\t\tif ( radiusTop > 0 ) generateCap( true );\n\t\tif ( radiusBottom > 0 ) generateCap( false );\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', vertices );\n\tthis.addAttribute( 'normal', normals );\n\tthis.addAttribute( 'uv', uvs );\n\n\t// helper functions\n\n\tfunction calculateVertexCount() {\n\n\t\tvar count = ( radialSegments + 1 ) * ( heightSegments + 1 );\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tcount += ( ( radialSegments + 1 ) * nbCap ) + ( radialSegments * nbCap );\n\n\t\t}\n\n\t\treturn count;\n\n\t}\n\n\tfunction calculateIndexCount() {\n\n\t\tvar count = radialSegments * heightSegments * 2 * 3;\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tcount += radialSegments * nbCap * 3;\n\n\t\t}\n\n\t\treturn count;\n\n\t}\n\n\tfunction generateTorso() {\n\n\t\tvar x, y;\n\t\tvar normal = new THREE.Vector3();\n\t\tvar vertex = new THREE.Vector3();\n\n\t\tvar groupCount = 0;\n\n\t\t// this will be used to calculate the normal\n\t\tvar tanTheta = ( radiusBottom - radiusTop ) / height;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\tvar indexRow = [];\n\n\t\t\tvar v = y / heightSegments;\n\n\t\t\t// calculate the radius of the current row\n\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\tvar u = x / radialSegments;\n\n\t\t\t\t// vertex\n\t\t\t\tvertex.x = radius * Math.sin( u * thetaLength + thetaStart );\n\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\tvertex.z = radius * Math.cos( u * thetaLength + thetaStart );\n\t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\t\t\t\tnormal.copy( vertex );\n\n\t\t\t\t// handle special case if radiusTop/radiusBottom is zero\n\n\t\t\t\tif ( ( radiusTop === 0 && y === 0 ) || ( radiusBottom === 0 && y === heightSegments ) ) {\n\n\t\t\t\t\tnormal.x = Math.sin( u * thetaLength + thetaStart );\n\t\t\t\t\tnormal.z = Math.cos( u * thetaLength + thetaStart );\n\n\t\t\t\t}\n\n\t\t\t\tnormal.setY( Math.sqrt( normal.x * normal.x + normal.z * normal.z ) * tanTheta ).normalize();\n\t\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\t\t\t\tuvs.setXY( index, u, 1 - v );\n\n\t\t\t\t// save index of vertex in respective row\n\t\t\t\tindexRow.push( index );\n\n\t\t\t\t// increase index\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// now save vertices of the row in our index array\n\t\t\tindexArray.push( indexRow );\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\n\t\t\t\t// we use the index array to access the correct indices\n\t\t\t\tvar i1 = indexArray[ y ][ x ];\n\t\t\t\tvar i2 = indexArray[ y + 1 ][ x ];\n\t\t\t\tvar i3 = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\tvar i4 = indexArray[ y ][ x + 1 ];\n\n\t\t\t\t// face one\n\t\t\t\tindices.setX( indexOffset, i1 ); indexOffset ++;\n\t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n\t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\n\t\t\t\t// face two\n\t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n\t\t\t\tindices.setX( indexOffset, i3 ); indexOffset ++;\n\t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\n\t\t\t\t// update counters\n\t\t\t\tgroupCount += 6;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// add a group to the geometry. this will ensure multi material support\n\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t// calculate new start value for groups\n\t\tgroupStart += groupCount;\n\n\t}\n\n\tfunction generateCap( top ) {\n\n\t\tvar x, centerIndexStart, centerIndexEnd;\n\n\t\tvar uv = new THREE.Vector2();\n\t\tvar vertex = new THREE.Vector3();\n\n\t\tvar groupCount = 0;\n\n\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\tvar sign = ( top === true ) ? 1 : - 1;\n\n\t\t// save the index of the first center vertex\n\t\tcenterIndexStart = index;\n\n\t\t// first we generate the center vertex data of the cap.\n\t\t// because the geometry needs one set of uvs per face,\n\t\t// we must generate a center vertex per face/segment\n\n\t\tfor ( x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t// vertex\n\t\t\tvertices.setXYZ( index, 0, halfHeight * sign, 0 );\n\n\t\t\t// normal\n\t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\n\t\t\t// uv\n\t\t\tuv.x = 0.5;\n\t\t\tuv.y = 0.5;\n\n\t\t\tuvs.setXY( index, uv.x, uv.y );\n\n\t\t\t// increase index\n\t\t\tindex ++;\n\n\t\t}\n\n\t\t// save the index of the last center vertex\n\t\tcenterIndexEnd = index;\n\n\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\tvar u = x / radialSegments;\n\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\tvar cosTheta = Math.cos( theta );\n\t\t\tvar sinTheta = Math.sin( theta );\n\n\t\t\t// vertex\n\t\t\tvertex.x = radius * sinTheta;\n\t\t\tvertex.y = halfHeight * sign;\n\t\t\tvertex.z = radius * cosTheta;\n\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\n\t\t\t// uv\n\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\tuvs.setXY( index, uv.x, uv.y );\n\n\t\t\t// increase index\n\t\t\tindex ++;\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\tvar c = centerIndexStart + x;\n\t\t\tvar i = centerIndexEnd + x;\n\n\t\t\tif ( top === true ) {\n\n\t\t\t\t// face top\n\t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n\t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n\t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\n\t\t\t} else {\n\n\t\t\t\t// face bottom\n\t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n\t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n\t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\n\t\t\t}\n\n\t\t\t// update counters\n\t\t\tgroupCount += 3;\n\n\t\t}\n\n\t\t// add a group to the geometry. this will ensure multi material support\n\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t// calculate new start value for groups\n\t\tgroupStart += groupCount;\n\n\t}\n\n};\n\nTHREE.CylinderBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.CylinderBufferGeometry.prototype.constructor = THREE.CylinderBufferGeometry;\n\n// File:src/extras/geometries/CylinderGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.CylinderGeometry = function ( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'CylinderGeometry';\n\n\tthis.parameters = {\n\t\tradiusTop: radiusTop,\n\t\tradiusBottom: radiusBottom,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\topenEnded: openEnded,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new THREE.CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n\tthis.mergeVertices();\n\n};\n\nTHREE.CylinderGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.CylinderGeometry.prototype.constructor = THREE.CylinderGeometry;\n\n// File:src/extras/geometries/ConeBufferGeometry.js\n\n/*\n * @author: abelnation / http://github.com/abelnation\n */\n\nTHREE.ConeBufferGeometry = function (\n\tradius, height,\n\tradialSegments, heightSegments,\n\topenEnded, thetaStart, thetaLength ) {\n\n\tTHREE.CylinderBufferGeometry.call( this,\n\t\t0, radius, height,\n\t\tradialSegments, heightSegments,\n\t\topenEnded, thetaStart, thetaLength );\n\n\tthis.type = 'ConeBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n};\n\nTHREE.ConeBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.ConeBufferGeometry.prototype.constructor = THREE.ConeBufferGeometry;\n\n// File:src/extras/geometries/ConeGeometry.js\n\n/**\n * @author abelnation / http://github.com/abelnation\n */\n\nTHREE.ConeGeometry = function (\n\tradius, height,\n\tradialSegments, heightSegments,\n\topenEnded, thetaStart, thetaLength ) {\n\n\tTHREE.CylinderGeometry.call( this,\n\t\t0, radius, height,\n\t\tradialSegments, heightSegments,\n\t\topenEnded, thetaStart, thetaLength );\n\n\tthis.type = 'ConeGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\topenEnded: openEnded,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n};\n\nTHREE.ConeGeometry.prototype = Object.create( THREE.CylinderGeometry.prototype );\nTHREE.ConeGeometry.prototype.constructor = THREE.ConeGeometry;\n\n// File:src/extras/geometries/EdgesGeometry.js\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.EdgesGeometry = function ( geometry, thresholdAngle ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\n\tvar thresholdDot = Math.cos( THREE.Math.DEG2RAD * thresholdAngle );\n\n\tvar edge = [ 0, 0 ], hash = {};\n\n\tfunction sortFunction( a, b ) {\n\n\t\treturn a - b;\n\n\t}\n\n\tvar keys = [ 'a', 'b', 'c' ];\n\n\tvar geometry2;\n\n\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\tgeometry2 = new THREE.Geometry();\n\t\tgeometry2.fromBufferGeometry( geometry );\n\n\t} else {\n\n\t\tgeometry2 = geometry.clone();\n\n\t}\n\n\tgeometry2.mergeVertices();\n\tgeometry2.computeFaceNormals();\n\n\tvar vertices = geometry2.vertices;\n\tvar faces = geometry2.faces;\n\n\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\tvar face = faces[ i ];\n\n\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\tedge[ 0 ] = face[ keys[ j ] ];\n\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\tedge.sort( sortFunction );\n\n\t\t\tvar key = edge.toString();\n\n\t\t\tif ( hash[ key ] === undefined ) {\n\n\t\t\t\thash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };\n\n\t\t\t} else {\n\n\t\t\t\thash[ key ].face2 = i;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tvar coords = [];\n\n\tfor ( var key in hash ) {\n\n\t\tvar h = hash[ key ];\n\n\t\tif ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {\n\n\t\t\tvar vertex = vertices[ h.vert1 ];\n\t\t\tcoords.push( vertex.x );\n\t\t\tcoords.push( vertex.y );\n\t\t\tcoords.push( vertex.z );\n\n\t\t\tvertex = vertices[ h.vert2 ];\n\t\t\tcoords.push( vertex.x );\n\t\t\tcoords.push( vertex.y );\n\t\t\tcoords.push( vertex.z );\n\n\t\t}\n\n\t}\n\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( coords ), 3 ) );\n\n};\n\nTHREE.EdgesGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.EdgesGeometry.prototype.constructor = THREE.EdgesGeometry;\n\n// File:src/extras/geometries/ExtrudeGeometry.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n *\n * Creates extruded geometry from a path shape.\n *\n * parameters = {\n *\n *  curveSegments: <int>, // number of points on the curves\n *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n *  amount: <int>, // Depth to extrude the shape\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into the original shape bevel goes\n *  bevelSize: <float>, // how far from shape outline is bevel\n *  bevelSegments: <int>, // number of bevel layers\n *\n *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)\n *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals\n *\n *  uvGenerator: <Object> // object that provides UV generator functions\n *\n * }\n **/\n\nTHREE.ExtrudeGeometry = function ( shapes, options ) {\n\n\tif ( typeof( shapes ) === \"undefined\" ) {\n\n\t\tshapes = [];\n\t\treturn;\n\n\t}\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'ExtrudeGeometry';\n\n\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\tthis.addShapeList( shapes, options );\n\n\tthis.computeFaceNormals();\n\n\t// can't really use automatic vertex normals\n\t// as then front and back sides get smoothed too\n\t// should do separate smoothing just for sides\n\n\t//this.computeVertexNormals();\n\n\t//console.log( \"took\", ( Date.now() - startTime ) );\n\n};\n\nTHREE.ExtrudeGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.ExtrudeGeometry.prototype.constructor = THREE.ExtrudeGeometry;\n\nTHREE.ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\n\tvar sl = shapes.length;\n\n\tfor ( var s = 0; s < sl; s ++ ) {\n\n\t\tvar shape = shapes[ s ];\n\t\tthis.addShape( shape, options );\n\n\t}\n\n};\n\nTHREE.ExtrudeGeometry.prototype.addShape = function ( shape, options ) {\n\n\tvar amount = options.amount !== undefined ? options.amount : 100;\n\n\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\n\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\n\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\n\n\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\n\tvar steps = options.steps !== undefined ? options.steps : 1;\n\n\tvar extrudePath = options.extrudePath;\n\tvar extrudePts, extrudeByPath = false;\n\n\t// Use default WorldUVGenerator if no UV generators are specified.\n\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator;\n\n\tvar splineTube, binormal, normal, position2;\n\tif ( extrudePath ) {\n\n\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\textrudeByPath = true;\n\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t// SETUP TNB variables\n\n\t\t// Reuse TNB from TubeGeomtry for now.\n\t\t// TODO1 - have a .isClosed in spline?\n\n\t\tsplineTube = options.frames !== undefined ? options.frames : new THREE.TubeGeometry.FrenetFrames( extrudePath, steps, false );\n\n\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\tbinormal = new THREE.Vector3();\n\t\tnormal = new THREE.Vector3();\n\t\tposition2 = new THREE.Vector3();\n\n\t}\n\n\t// Safeguards if bevels are not enabled\n\n\tif ( ! bevelEnabled ) {\n\n\t\tbevelSegments = 0;\n\t\tbevelThickness = 0;\n\t\tbevelSize = 0;\n\n\t}\n\n\t// Variables initialization\n\n\tvar ahole, h, hl; // looping of holes\n\tvar scope = this;\n\n\tvar shapesOffset = this.vertices.length;\n\n\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\tvar vertices = shapePoints.shape;\n\tvar holes = shapePoints.holes;\n\n\tvar reverse = ! THREE.ShapeUtils.isClockWise( vertices );\n\n\tif ( reverse ) {\n\n\t\tvertices = vertices.reverse();\n\n\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\n\t\t\tif ( THREE.ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t}\n\n\t\t}\n\n\t\treverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!\n\n\t}\n\n\n\tvar faces = THREE.ShapeUtils.triangulateShape( vertices, holes );\n\n\t/* Vertices */\n\n\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\tahole = holes[ h ];\n\n\t\tvertices = vertices.concat( ahole );\n\n\t}\n\n\n\tfunction scalePt2 ( pt, vec, size ) {\n\n\t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\n\n\t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n\t}\n\n\tvar b, bs, t, z,\n\t\tvert, vlen = vertices.length,\n\t\tface, flen = faces.length;\n\n\n\t// Find directions for point movement\n\n\n\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t//\n\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\tvar v_trans_x, v_trans_y, shrink_by = 1;\t\t// resulting translation vector for inPt\n\n\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\tvar v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;\n\t\tvar v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;\n\n\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t// check for collinear edges\n\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t// not collinear\n\n\t\t\t// length of vectors for normalizing\n\n\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\tvar sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /\n\t\t\t\t\t  ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t// vector from inPt to intersection point\n\n\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t//  but prevent crazy spikes\n\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\treturn\tnew THREE.Vector2( v_trans_x, v_trans_y );\n\n\t\t\t} else {\n\n\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// handle special case of collinear edges\n\n\t\t\tvar direction_eq = false;\t\t// assumes: opposite\n\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( direction_eq ) {\n\n\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\tv_trans_y =  v_prev_x;\n\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t} else {\n\n\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn\tnew THREE.Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t}\n\n\n\tvar contourMovements = [];\n\n\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\tif ( j === il ) j = 0;\n\t\tif ( k === il ) k = 0;\n\n\t\t//  (j)---(i)---(k)\n\t\t// console.log('i,j,k', i, j , k)\n\n\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t}\n\n\tvar holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();\n\n\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\tahole = holes[ h ];\n\n\t\toneHoleMovements = [];\n\n\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\tif ( j === il ) j = 0;\n\t\t\tif ( k === il ) k = 0;\n\n\t\t\t//  (j)---(i)---(k)\n\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t}\n\n\t\tholesMovements.push( oneHoleMovements );\n\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t}\n\n\n\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\tfor ( b = 0; b < bevelSegments; b ++ ) {\n\n\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\tt = b / bevelSegments;\n\t\tz = bevelThickness * ( 1 - t );\n\n\t\t//z = bevelThickness * t;\n\t\tbs = bevelSize * ( Math.sin ( t * Math.PI / 2 ) ); // curved\n\t\t//bs = bevelSize * t; // linear\n\n\t\t// contract shape\n\n\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\tv( vert.x, vert.y,  - z );\n\n\t\t}\n\n\t\t// expand holes\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\tv( vert.x, vert.y,  - z );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tbs = bevelSize;\n\n\t// Back facing vertices\n\n\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\tif ( ! extrudeByPath ) {\n\n\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t} else {\n\n\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t}\n\n\t}\n\n\t// Add stepped vertices...\n\t// Including front facing vertices\n\n\tvar s;\n\n\tfor ( s = 1; s <= steps; s ++ ) {\n\n\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\tv( vert.x, vert.y, amount / steps * s );\n\n\t\t\t} else {\n\n\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\t// Add bevel segments planes\n\n\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\tt = b / bevelSegments;\n\t\tz = bevelThickness * ( 1 - t );\n\t\t//bs = bevelSize * ( 1-Math.sin ( ( 1 - t ) * Math.PI/2 ) );\n\t\tbs = bevelSize * Math.sin ( t * Math.PI / 2 );\n\n\t\t// contract shape\n\n\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\tv( vert.x, vert.y,  amount + z );\n\n\t\t}\n\n\t\t// expand holes\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y,  amount + z );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/* Faces */\n\n\t// Top and bottom faces\n\n\tbuildLidFaces();\n\n\t// Sides faces\n\n\tbuildSideFaces();\n\n\n\t/////  Internal functions\n\n\tfunction buildLidFaces() {\n\n\t\tif ( bevelEnabled ) {\n\n\t\t\tvar layer = 0; // steps + 1\n\t\t\tvar offset = vlen * layer;\n\n\t\t\t// Bottom faces\n\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\tface = faces[ i ];\n\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t}\n\n\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\toffset = vlen * layer;\n\n\t\t\t// Top faces\n\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\tface = faces[ i ];\n\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Bottom faces\n\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\tface = faces[ i ];\n\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t}\n\n\t\t\t// Top faces\n\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\tface = faces[ i ];\n\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// Create faces for the z-sides of the shape\n\n\tfunction buildSideFaces() {\n\n\t\tvar layeroffset = 0;\n\t\tsidewalls( contour, layeroffset );\n\t\tlayeroffset += contour.length;\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t//, true\n\t\t\tlayeroffset += ahole.length;\n\n\t\t}\n\n\t}\n\n\tfunction sidewalls( contour, layeroffset ) {\n\n\t\tvar j, k;\n\t\ti = contour.length;\n\n\t\twhile ( -- i >= 0 ) {\n\n\t\t\tj = i;\n\t\t\tk = i - 1;\n\t\t\tif ( k < 0 ) k = contour.length - 1;\n\n\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\tvar s = 0, sl = steps  + bevelSegments * 2;\n\n\t\t\tfor ( s = 0; s < sl; s ++ ) {\n\n\t\t\t\tvar slen1 = vlen * s;\n\t\t\t\tvar slen2 = vlen * ( s + 1 );\n\n\t\t\t\tvar a = layeroffset + j + slen1,\n\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\tf4( a, b, c, d, contour, s, sl, j, k );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\tfunction v( x, y, z ) {\n\n\t\tscope.vertices.push( new THREE.Vector3( x, y, z ) );\n\n\t}\n\n\tfunction f3( a, b, c ) {\n\n\t\ta += shapesOffset;\n\t\tb += shapesOffset;\n\t\tc += shapesOffset;\n\n\t\tscope.faces.push( new THREE.Face3( a, b, c, null, null, 0 ) );\n\n\t\tvar uvs = uvgen.generateTopUV( scope, a, b, c );\n\n\t\tscope.faceVertexUvs[ 0 ].push( uvs );\n\n\t}\n\n\tfunction f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {\n\n\t\ta += shapesOffset;\n\t\tb += shapesOffset;\n\t\tc += shapesOffset;\n\t\td += shapesOffset;\n\n\t\tscope.faces.push( new THREE.Face3( a, b, d, null, null, 1 ) );\n\t\tscope.faces.push( new THREE.Face3( b, c, d, null, null, 1 ) );\n\n\t\tvar uvs = uvgen.generateSideWallUV( scope, a, b, c, d );\n\n\t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );\n\t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );\n\n\t}\n\n};\n\nTHREE.ExtrudeGeometry.WorldUVGenerator = {\n\n\tgenerateTopUV: function ( geometry, indexA, indexB, indexC ) {\n\n\t\tvar vertices = geometry.vertices;\n\n\t\tvar a = vertices[ indexA ];\n\t\tvar b = vertices[ indexB ];\n\t\tvar c = vertices[ indexC ];\n\n\t\treturn [\n\t\t\tnew THREE.Vector2( a.x, a.y ),\n\t\t\tnew THREE.Vector2( b.x, b.y ),\n\t\t\tnew THREE.Vector2( c.x, c.y )\n\t\t];\n\n\t},\n\n\tgenerateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {\n\n\t\tvar vertices = geometry.vertices;\n\n\t\tvar a = vertices[ indexA ];\n\t\tvar b = vertices[ indexB ];\n\t\tvar c = vertices[ indexC ];\n\t\tvar d = vertices[ indexD ];\n\n\t\tif ( Math.abs( a.y - b.y ) < 0.01 ) {\n\n\t\t\treturn [\n\t\t\t\tnew THREE.Vector2( a.x, 1 - a.z ),\n\t\t\t\tnew THREE.Vector2( b.x, 1 - b.z ),\n\t\t\t\tnew THREE.Vector2( c.x, 1 - c.z ),\n\t\t\t\tnew THREE.Vector2( d.x, 1 - d.z )\n\t\t\t];\n\n\t\t} else {\n\n\t\t\treturn [\n\t\t\t\tnew THREE.Vector2( a.y, 1 - a.z ),\n\t\t\t\tnew THREE.Vector2( b.y, 1 - b.z ),\n\t\t\t\tnew THREE.Vector2( c.y, 1 - c.z ),\n\t\t\t\tnew THREE.Vector2( d.y, 1 - d.z )\n\t\t\t];\n\n\t\t}\n\n\t}\n};\n\n// File:src/extras/geometries/ShapeGeometry.js\n\n/**\n * @author jonobr1 / http://jonobr1.com\n *\n * Creates a one-sided polygonal geometry from a path shape. Similar to\n * ExtrudeGeometry.\n *\n * parameters = {\n *\n *\tcurveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.\n *\n *\tmaterial: <int> // material index for front and back faces\n *\tuvGenerator: <Object> // object that provides UV generator functions\n *\n * }\n **/\n\nTHREE.ShapeGeometry = function ( shapes, options ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'ShapeGeometry';\n\n\tif ( Array.isArray( shapes ) === false ) shapes = [ shapes ];\n\n\tthis.addShapeList( shapes, options );\n\n\tthis.computeFaceNormals();\n\n};\n\nTHREE.ShapeGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.ShapeGeometry.prototype.constructor = THREE.ShapeGeometry;\n\n/**\n * Add an array of shapes to THREE.ShapeGeometry.\n */\nTHREE.ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\n\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\tthis.addShape( shapes[ i ], options );\n\n\t}\n\n\treturn this;\n\n};\n\n/**\n * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.\n */\nTHREE.ShapeGeometry.prototype.addShape = function ( shape, options ) {\n\n\tif ( options === undefined ) options = {};\n\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\n\tvar material = options.material;\n\tvar uvgen = options.UVGenerator === undefined ? THREE.ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;\n\n\t//\n\n\tvar i, l, hole;\n\n\tvar shapesOffset = this.vertices.length;\n\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\tvar vertices = shapePoints.shape;\n\tvar holes = shapePoints.holes;\n\n\tvar reverse = ! THREE.ShapeUtils.isClockWise( vertices );\n\n\tif ( reverse ) {\n\n\t\tvertices = vertices.reverse();\n\n\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe...\n\n\t\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\n\t\t\thole = holes[ i ];\n\n\t\t\tif ( THREE.ShapeUtils.isClockWise( hole ) ) {\n\n\t\t\t\tholes[ i ] = hole.reverse();\n\n\t\t\t}\n\n\t\t}\n\n\t\treverse = false;\n\n\t}\n\n\tvar faces = THREE.ShapeUtils.triangulateShape( vertices, holes );\n\n\t// Vertices\n\n\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\n\t\thole = holes[ i ];\n\t\tvertices = vertices.concat( hole );\n\n\t}\n\n\t//\n\n\tvar vert, vlen = vertices.length;\n\tvar face, flen = faces.length;\n\n\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\tvert = vertices[ i ];\n\n\t\tthis.vertices.push( new THREE.Vector3( vert.x, vert.y, 0 ) );\n\n\t}\n\n\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\tface = faces[ i ];\n\n\t\tvar a = face[ 0 ] + shapesOffset;\n\t\tvar b = face[ 1 ] + shapesOffset;\n\t\tvar c = face[ 2 ] + shapesOffset;\n\n\t\tthis.faces.push( new THREE.Face3( a, b, c, null, null, material ) );\n\t\tthis.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );\n\n\t}\n\n};\n\n// File:src/extras/geometries/LatheBufferGeometry.js\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n // points - to create a closed torus, one must use a set of points\n //    like so: [ a, b, c, d, a ], see first is the same as last.\n // segments - the number of circumference segments to create\n // phiStart - the starting radian\n // phiLength - the radian (0 to 2PI) range of the lathed section\n //    2PI is a closed lathe, less than 2PI is a portion.\n\nTHREE.LatheBufferGeometry = function ( points, segments, phiStart, phiLength ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'LatheBufferGeometry';\n\n\tthis.parameters = {\n\t\tpoints: points,\n\t\tsegments: segments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength\n\t};\n\n\tsegments = Math.floor( segments ) || 12;\n\tphiStart = phiStart || 0;\n\tphiLength = phiLength || Math.PI * 2;\n\n\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\tphiLength = THREE.Math.clamp( phiLength, 0, Math.PI * 2 );\n\n\t// these are used to calculate buffer length\n\tvar vertexCount = ( segments + 1 ) * points.length;\n\tvar indexCount = segments * points.length * 2 * 3;\n\n\t// buffers\n\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n\t// helper variables\n\tvar index = 0, indexOffset = 0, base;\n\tvar inversePointLength = 1.0 / ( points.length - 1 );\n\tvar inverseSegments = 1.0 / segments;\n\tvar vertex = new THREE.Vector3();\n\tvar uv = new THREE.Vector2();\n\tvar i, j;\n\n\t// generate vertices and uvs\n\n\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\n\t\tvar sin = Math.sin( phi );\n\t\tvar cos = Math.cos( phi );\n\n\t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t// vertex\n\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\tvertex.y = points[ j ].y;\n\t\t\tvertex.z = points[ j ].x * cos;\n\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n\t\t\t// uv\n\t\t\tuv.x = i / segments;\n\t\t\tuv.y = j / ( points.length - 1 );\n\t\t\tuvs.setXY( index, uv.x, uv.y );\n\n\t\t\t// increase index\n\t\t\tindex ++;\n\n\t\t}\n\n\t}\n\n\t// generate indices\n\n\tfor ( i = 0; i < segments; i ++ ) {\n\n\t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\n\n\t\t\tbase = j + i * points.length;\n\n\t\t\t// indices\n\t\t\tvar a = base;\n\t\t\tvar b = base + points.length;\n\t\t\tvar c = base + points.length + 1;\n\t\t\tvar d = base + 1;\n\n\t\t\t// face one\n\t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n\t\t\t// face two\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', vertices );\n\tthis.addAttribute( 'uv', uvs );\n\n\t// generate normals\n\n\tthis.computeVertexNormals();\n\n\t// if the geometry is closed, we need to average the normals along the seam.\n\t// because the corresponding vertices are identical (but still have different UVs).\n\n\tif( phiLength === Math.PI * 2 ) {\n\n\t\tvar normals = this.attributes.normal.array;\n\t\tvar n1 = new THREE.Vector3();\n\t\tvar n2 = new THREE.Vector3();\n\t\tvar n = new THREE.Vector3();\n\n\t\t// this is the buffer offset for the last line of vertices\n\t\tbase = segments * points.length * 3;\n\n\t\tfor( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\n\t\t\t// select the normal of the vertex in the first line\n\t\t\tn1.x = normals[ j + 0 ];\n\t\t\tn1.y = normals[ j + 1 ];\n\t\t\tn1.z = normals[ j + 2 ];\n\n\t\t\t// select the normal of the vertex in the last line\n\t\t\tn2.x = normals[ base + j + 0 ];\n\t\t\tn2.y = normals[ base + j + 1 ];\n\t\t\tn2.z = normals[ base + j + 2 ];\n\n\t\t\t// average normals\n\t\t\tn.addVectors( n1, n2 ).normalize();\n\n\t\t\t// assign the new values to both normals\n\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\n\t\t} // next row\n\n\t}\n\n};\n\nTHREE.LatheBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.LatheBufferGeometry.prototype.constructor = THREE.LatheBufferGeometry;\n\n// File:src/extras/geometries/LatheGeometry.js\n\n/**\n * @author astrodud / http://astrodud.isgreat.org/\n * @author zz85 / https://github.com/zz85\n * @author bhouston / http://clara.io\n */\n\n// points - to create a closed torus, one must use a set of points\n//    like so: [ a, b, c, d, a ], see first is the same as last.\n// segments - the number of circumference segments to create\n// phiStart - the starting radian\n// phiLength - the radian (0 to 2PI) range of the lathed section\n//    2PI is a closed lathe, less than 2PI is a portion.\n\nTHREE.LatheGeometry = function ( points, segments, phiStart, phiLength ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'LatheGeometry';\n\n\tthis.parameters = {\n\t\tpoints: points,\n\t\tsegments: segments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength\n\t};\n\n\tthis.fromBufferGeometry( new THREE.LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n\tthis.mergeVertices();\n\n};\n\nTHREE.LatheGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.LatheGeometry.prototype.constructor = THREE.LatheGeometry;\n\n// File:src/extras/geometries/PlaneGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n */\n\nTHREE.PlaneGeometry = function ( width, height, widthSegments, heightSegments ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'PlaneGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments\n\t};\n\n\tthis.fromBufferGeometry( new THREE.PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\n};\n\nTHREE.PlaneGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.PlaneGeometry.prototype.constructor = THREE.PlaneGeometry;\n\n// File:src/extras/geometries/PlaneBufferGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n */\n\nTHREE.PlaneBufferGeometry = function ( width, height, widthSegments, heightSegments ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'PlaneBufferGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments\n\t};\n\n\tvar width_half = width / 2;\n\tvar height_half = height / 2;\n\n\tvar gridX = Math.floor( widthSegments ) || 1;\n\tvar gridY = Math.floor( heightSegments ) || 1;\n\n\tvar gridX1 = gridX + 1;\n\tvar gridY1 = gridY + 1;\n\n\tvar segment_width = width / gridX;\n\tvar segment_height = height / gridY;\n\n\tvar vertices = new Float32Array( gridX1 * gridY1 * 3 );\n\tvar normals = new Float32Array( gridX1 * gridY1 * 3 );\n\tvar uvs = new Float32Array( gridX1 * gridY1 * 2 );\n\n\tvar offset = 0;\n\tvar offset2 = 0;\n\n\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\n\t\tvar y = iy * segment_height - height_half;\n\n\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\tvar x = ix * segment_width - width_half;\n\n\t\t\tvertices[ offset ] = x;\n\t\t\tvertices[ offset + 1 ] = - y;\n\n\t\t\tnormals[ offset + 2 ] = 1;\n\n\t\t\tuvs[ offset2 ] = ix / gridX;\n\t\t\tuvs[ offset2 + 1 ] = 1 - ( iy / gridY );\n\n\t\t\toffset += 3;\n\t\t\toffset2 += 2;\n\n\t\t}\n\n\t}\n\n\toffset = 0;\n\n\tvar indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );\n\n\tfor ( var iy = 0; iy < gridY; iy ++ ) {\n\n\t\tfor ( var ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\tvar a = ix + gridX1 * iy;\n\t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\tindices[ offset ] = a;\n\t\t\tindices[ offset + 1 ] = b;\n\t\t\tindices[ offset + 2 ] = d;\n\n\t\t\tindices[ offset + 3 ] = b;\n\t\t\tindices[ offset + 4 ] = c;\n\t\t\tindices[ offset + 5 ] = d;\n\n\t\t\toffset += 6;\n\n\t\t}\n\n\t}\n\n\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\n};\n\nTHREE.PlaneBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.PlaneBufferGeometry.prototype.constructor = THREE.PlaneBufferGeometry;\n\n// File:src/extras/geometries/RingBufferGeometry.js\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nTHREE.RingBufferGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'RingBufferGeometry';\n\n\tthis.parameters = {\n\t\tinnerRadius: innerRadius,\n\t\touterRadius: outerRadius,\n\t\tthetaSegments: thetaSegments,\n\t\tphiSegments: phiSegments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tinnerRadius = innerRadius || 20;\n\touterRadius = outerRadius || 50;\n\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\n\t// these are used to calculate buffer length\n\tvar vertexCount = ( thetaSegments + 1 ) * ( phiSegments + 1 );\n\tvar indexCount = thetaSegments * phiSegments * 2 * 3;\n\n\t// buffers\n\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n\t// some helper variables\n\tvar index = 0, indexOffset = 0, segment;\n\tvar radius = innerRadius;\n\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\tvar vertex = new THREE.Vector3();\n\tvar uv = new THREE.Vector2();\n\tvar j, i;\n\n\t// generate vertices, normals and uvs\n\n\t// values are generate from the inside of the ring to the outside\n\n\tfor ( j = 0; j <= phiSegments; j ++ ) {\n\n\t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t// vertex\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\t\t\tnormals.setXYZ( index, 0, 0, 1 );\n\n\t\t\t// uv\n\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\t\t\tuvs.setXY( index, uv.x, uv.y );\n\n\t\t\t// increase index\n\t\t\tindex++;\n\n\t\t}\n\n\t\t// increase the radius for next row of vertices\n\t\tradius += radiusStep;\n\n\t}\n\n\t// generate indices\n\n\tfor ( j = 0; j < phiSegments; j ++ ) {\n\n\t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\tsegment = i + thetaSegmentLevel;\n\n\t\t\t// indices\n\t\t\tvar a = segment;\n\t\t\tvar b = segment + thetaSegments + 1;\n\t\t\tvar c = segment + thetaSegments + 2;\n\t\t\tvar d = segment + 1;\n\n\t\t\t// face one\n\t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\n\t\t\t// face two\n\t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', vertices );\n\tthis.addAttribute( 'normal', normals );\n\tthis.addAttribute( 'uv', uvs );\n\n};\n\nTHREE.RingBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.RingBufferGeometry.prototype.constructor = THREE.RingBufferGeometry;\n\n// File:src/extras/geometries/RingGeometry.js\n\n/**\n * @author Kaleb Murphy\n */\n\nTHREE.RingGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'RingGeometry';\n\n\tthis.parameters = {\n\t\tinnerRadius: innerRadius,\n\t\touterRadius: outerRadius,\n\t\tthetaSegments: thetaSegments,\n\t\tphiSegments: phiSegments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new THREE.RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\n};\n\nTHREE.RingGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.RingGeometry.prototype.constructor = THREE.RingGeometry;\n\n// File:src/extras/geometries/SphereGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.SphereGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'SphereGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new THREE.SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\n};\n\nTHREE.SphereGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.SphereGeometry.prototype.constructor = THREE.SphereGeometry;\n\n// File:src/extras/geometries/SphereBufferGeometry.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n * based on THREE.SphereGeometry\n */\n\nTHREE.SphereBufferGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'SphereBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tradius = radius || 50;\n\n\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n\tphiStart = phiStart !== undefined ? phiStart : 0;\n\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n\tvar thetaEnd = thetaStart + thetaLength;\n\n\tvar vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );\n\n\tvar positions = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n\tvar index = 0, vertices = [], normal = new THREE.Vector3();\n\n\tfor ( var y = 0; y <= heightSegments; y ++ ) {\n\n\t\tvar verticesRow = [];\n\n\t\tvar v = y / heightSegments;\n\n\t\tfor ( var x = 0; x <= widthSegments; x ++ ) {\n\n\t\t\tvar u = x / widthSegments;\n\n\t\t\tvar px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\tvar py = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\tvar pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\tnormal.set( px, py, pz ).normalize();\n\n\t\t\tpositions.setXYZ( index, px, py, pz );\n\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\t\t\tuvs.setXY( index, u, 1 - v );\n\n\t\t\tverticesRow.push( index );\n\n\t\t\tindex ++;\n\n\t\t}\n\n\t\tvertices.push( verticesRow );\n\n\t}\n\n\tvar indices = [];\n\n\tfor ( var y = 0; y < heightSegments; y ++ ) {\n\n\t\tfor ( var x = 0; x < widthSegments; x ++ ) {\n\n\t\t\tvar v1 = vertices[ y ][ x + 1 ];\n\t\t\tvar v2 = vertices[ y ][ x ];\n\t\t\tvar v3 = vertices[ y + 1 ][ x ];\n\t\t\tvar v4 = vertices[ y + 1 ][ x + 1 ];\n\n\t\t\tif ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );\n\t\t\tif ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );\n\n\t\t}\n\n\t}\n\n\tthis.setIndex( new ( positions.count > 65535 ? THREE.Uint32Attribute : THREE.Uint16Attribute )( indices, 1 ) );\n\tthis.addAttribute( 'position', positions );\n\tthis.addAttribute( 'normal', normals );\n\tthis.addAttribute( 'uv', uvs );\n\n\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\n\n};\n\nTHREE.SphereBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.SphereBufferGeometry.prototype.constructor = THREE.SphereBufferGeometry;\n\n// File:src/extras/geometries/TextGeometry.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author alteredq / http://alteredqualia.com/\n *\n * Text = 3D Text\n *\n * parameters = {\n *  font: <THREE.Font>, // font\n *\n *  size: <float>, // size of the text\n *  height: <float>, // thickness to extrude text\n *  curveSegments: <int>, // number of points on the curves\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into text bevel goes\n *  bevelSize: <float> // how far from text outline is bevel\n * }\n */\n\nTHREE.TextGeometry = function ( text, parameters ) {\n\n\tparameters = parameters || {};\n\n\tvar font = parameters.font;\n\n\tif ( font instanceof THREE.Font === false ) {\n\n\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n\t\treturn new THREE.Geometry();\n\n\t}\n\n\tvar shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );\n\n\t// translate parameters to ExtrudeGeometry API\n\n\tparameters.amount = parameters.height !== undefined ? parameters.height : 50;\n\n\t// defaults\n\n\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n\tTHREE.ExtrudeGeometry.call( this, shapes, parameters );\n\n\tthis.type = 'TextGeometry';\n\n};\n\nTHREE.TextGeometry.prototype = Object.create( THREE.ExtrudeGeometry.prototype );\nTHREE.TextGeometry.prototype.constructor = THREE.TextGeometry;\n\n// File:src/extras/geometries/TorusBufferGeometry.js\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nTHREE.TorusBufferGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'TorusBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\tradialSegments: radialSegments,\n\t\ttubularSegments: tubularSegments,\n\t\tarc: arc\n\t};\n\n\tradius = radius || 100;\n\ttube = tube || 40;\n\tradialSegments = Math.floor( radialSegments ) || 8;\n\ttubularSegments = Math.floor( tubularSegments ) || 6;\n\tarc = arc || Math.PI * 2;\n\n\t// used to calculate buffer length\n\tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n\tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\n\t// buffers\n\tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n\tvar vertices = new Float32Array( vertexCount * 3 );\n\tvar normals = new Float32Array( vertexCount * 3 );\n\tvar uvs = new Float32Array( vertexCount * 2 );\n\n\t// offset variables\n\tvar vertexBufferOffset = 0;\n\tvar uvBufferOffset = 0;\n\tvar indexBufferOffset = 0;\n\n\t// helper variables\n\tvar center = new THREE.Vector3();\n\tvar vertex = new THREE.Vector3();\n\tvar normal = new THREE.Vector3();\n\n\tvar j, i;\n\n\t// generate vertices, normals and uvs\n\n\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\tvar u = i / tubularSegments * arc;\n\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t// vertex\n\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\tvertices[ vertexBufferOffset ] = vertex.x;\n\t\t\tvertices[ vertexBufferOffset + 1 ] = vertex.y;\n\t\t\tvertices[ vertexBufferOffset + 2 ] = vertex.z;\n\n\t\t\t// this vector is used to calculate the normal\n\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\tcenter.y = radius * Math.sin( u );\n\n\t\t\t// normal\n\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\tnormals[ vertexBufferOffset ] = normal.x;\n\t\t\tnormals[ vertexBufferOffset + 1 ] = normal.y;\n\t\t\tnormals[ vertexBufferOffset + 2 ] = normal.z;\n\n\t\t\t// uv\n\t\t\tuvs[ uvBufferOffset ] = i / tubularSegments;\n\t\t\tuvs[ uvBufferOffset + 1 ] = j / radialSegments;\n\n\t\t\t// update offsets\n\t\t\tvertexBufferOffset += 3;\n\t\t\tuvBufferOffset += 2;\n\n\t\t}\n\n\t}\n\n\t// generate indices\n\n\tfor ( j = 1; j <= radialSegments; j ++ ) {\n\n\t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t// indices\n\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t// face one\n\t\t\tindices[ indexBufferOffset ] = a;\n\t\t\tindices[ indexBufferOffset + 1 ] = b;\n\t\t\tindices[ indexBufferOffset + 2 ] = d;\n\n\t\t\t// face two\n\t\t\tindices[ indexBufferOffset + 3 ] = b;\n\t\t\tindices[ indexBufferOffset + 4 ] = c;\n\t\t\tindices[ indexBufferOffset + 5 ] = d;\n\n\t\t\t// update offset\n\t\t\tindexBufferOffset += 6;\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\n};\n\nTHREE.TorusBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.TorusBufferGeometry.prototype.constructor = THREE.TorusBufferGeometry;\n\n// File:src/extras/geometries/TorusGeometry.js\n\n/**\n * @author oosmoxiecode\n * @author mrdoob / http://mrdoob.com/\n * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888\n */\n\nTHREE.TorusGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'TorusGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\tradialSegments: radialSegments,\n\t\ttubularSegments: tubularSegments,\n\t\tarc: arc\n\t};\n\n\tthis.fromBufferGeometry( new THREE.TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\n};\n\nTHREE.TorusGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.TorusGeometry.prototype.constructor = THREE.TorusGeometry;\n\n// File:src/extras/geometries/TorusKnotBufferGeometry.js\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n *\n * see: http://www.blackpawn.com/texts/pqtorus/\n */\nTHREE.TorusKnotBufferGeometry = function ( radius, tube, tubularSegments, radialSegments, p, q ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'TorusKnotBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\ttubularSegments: tubularSegments,\n\t\tradialSegments: radialSegments,\n\t\tp: p,\n\t\tq: q\n\t};\n\n\tradius = radius || 100;\n\ttube = tube || 40;\n\ttubularSegments = Math.floor( tubularSegments ) || 64;\n\tradialSegments = Math.floor( radialSegments ) || 8;\n\tp = p || 2;\n\tq = q || 3;\n\n\t// used to calculate buffer length\n\tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n\tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\n\t// buffers\n\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n\t// helper variables\n\tvar i, j, index = 0, indexOffset = 0;\n\n\tvar vertex = new THREE.Vector3();\n\tvar normal = new THREE.Vector3();\n\tvar uv = new THREE.Vector2();\n\n\tvar P1 = new THREE.Vector3();\n\tvar P2 = new THREE.Vector3();\n\n\tvar B = new THREE.Vector3();\n\tvar T = new THREE.Vector3();\n\tvar N = new THREE.Vector3();\n\n\t// generate vertices, normals and uvs\n\n\tfor ( i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\n\t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t// calculate orthonormal basis\n\n\t\tT.subVectors( P2, P1 );\n\t\tN.addVectors( P2, P1 );\n\t\tB.crossVectors( T, N );\n\t\tN.crossVectors( B, T );\n\n\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\tB.normalize();\n\t\tN.normalize();\n\n\t\tfor ( j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\tvar cx = - tube * Math.cos( v );\n\t\t\tvar cy = tube * Math.sin( v );\n\n\t\t\t// now calculate the final vertex position.\n\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\t// vertex\n\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\n\t\t\t// uv\n\t\t\tuv.x = i / tubularSegments;\n\t\t\tuv.y = j / radialSegments;\n\t\t\tuvs.setXY( index, uv.x, uv.y );\n\n\t\t\t// increase index\n\t\t\tindex ++;\n\n\t\t}\n\n\t}\n\n\t// generate indices\n\n\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t// indices\n\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t// face one\n\t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n\t\t\t// face two\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', vertices );\n\tthis.addAttribute( 'normal', normals );\n\tthis.addAttribute( 'uv', uvs );\n\n\t// this function calculates the current position on the torus curve\n\n\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\tvar cu = Math.cos( u );\n\t\tvar su = Math.sin( u );\n\t\tvar quOverP = q / p * u;\n\t\tvar cs = Math.cos( quOverP );\n\n\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t}\n\n};\n\nTHREE.TorusKnotBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.TorusKnotBufferGeometry.prototype.constructor = THREE.TorusKnotBufferGeometry;\n\n// File:src/extras/geometries/TorusKnotGeometry.js\n\n/**\n * @author oosmoxiecode\n */\n\nTHREE.TorusKnotGeometry = function ( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'TorusKnotGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\ttubularSegments: tubularSegments,\n\t\tradialSegments: radialSegments,\n\t\tp: p,\n\t\tq: q\n\t};\n\n\tif( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );\n\n\tthis.fromBufferGeometry( new THREE.TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n\tthis.mergeVertices();\n\n};\n\nTHREE.TorusKnotGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.TorusKnotGeometry.prototype.constructor = THREE.TorusKnotGeometry;\n\n// File:src/extras/geometries/TubeGeometry.js\n\n/**\n * @author WestLangley / https://github.com/WestLangley\n * @author zz85 / https://github.com/zz85\n * @author miningold / https://github.com/miningold\n * @author jonobr1 / https://github.com/jonobr1\n *\n * Modified from the TorusKnotGeometry by @oosmoxiecode\n *\n * Creates a tube which extrudes along a 3d spline\n *\n * Uses parallel transport frames as described in\n * http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n */\n\nTHREE.TubeGeometry = function ( path, segments, radius, radialSegments, closed, taper ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'TubeGeometry';\n\n\tthis.parameters = {\n\t\tpath: path,\n\t\tsegments: segments,\n\t\tradius: radius,\n\t\tradialSegments: radialSegments,\n\t\tclosed: closed,\n\t\ttaper: taper\n\t};\n\n\tsegments = segments || 64;\n\tradius = radius || 1;\n\tradialSegments = radialSegments || 8;\n\tclosed = closed || false;\n\ttaper = taper || THREE.TubeGeometry.NoTaper;\n\n\tvar grid = [];\n\n\tvar scope = this,\n\n\t\ttangent,\n\t\tnormal,\n\t\tbinormal,\n\n\t\tnumpoints = segments + 1,\n\n\t\tu, v, r,\n\n\t\tcx, cy,\n\t\tpos, pos2 = new THREE.Vector3(),\n\t\ti, j,\n\t\tip, jp,\n\t\ta, b, c, d,\n\t\tuva, uvb, uvc, uvd;\n\n\tvar frames = new THREE.TubeGeometry.FrenetFrames( path, segments, closed ),\n\t\ttangents = frames.tangents,\n\t\tnormals = frames.normals,\n\t\tbinormals = frames.binormals;\n\n\t// proxy internals\n\tthis.tangents = tangents;\n\tthis.normals = normals;\n\tthis.binormals = binormals;\n\n\tfunction vert( x, y, z ) {\n\n\t\treturn scope.vertices.push( new THREE.Vector3( x, y, z ) ) - 1;\n\n\t}\n\n\t// construct the grid\n\n\tfor ( i = 0; i < numpoints; i ++ ) {\n\n\t\tgrid[ i ] = [];\n\n\t\tu = i / ( numpoints - 1 );\n\n\t\tpos = path.getPointAt( u );\n\n\t\ttangent = tangents[ i ];\n\t\tnormal = normals[ i ];\n\t\tbinormal = binormals[ i ];\n\n\t\tr = radius * taper( u );\n\n\t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\n\t\t\tv = j / radialSegments * 2 * Math.PI;\n\n\t\t\tcx = - r * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\n\t\t\tcy = r * Math.sin( v );\n\n\t\t\tpos2.copy( pos );\n\t\t\tpos2.x += cx * normal.x + cy * binormal.x;\n\t\t\tpos2.y += cx * normal.y + cy * binormal.y;\n\t\t\tpos2.z += cx * normal.z + cy * binormal.z;\n\n\t\t\tgrid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );\n\n\t\t}\n\n\t}\n\n\n\t// construct the mesh\n\n\tfor ( i = 0; i < segments; i ++ ) {\n\n\t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\n\t\t\tip = ( closed ) ? ( i + 1 ) % segments : i + 1;\n\t\t\tjp = ( j + 1 ) % radialSegments;\n\n\t\t\ta = grid[ i ][ j ];\t\t// *** NOT NECESSARILY PLANAR ! ***\n\t\t\tb = grid[ ip ][ j ];\n\t\t\tc = grid[ ip ][ jp ];\n\t\t\td = grid[ i ][ jp ];\n\n\t\t\tuva = new THREE.Vector2( i / segments, j / radialSegments );\n\t\t\tuvb = new THREE.Vector2( ( i + 1 ) / segments, j / radialSegments );\n\t\t\tuvc = new THREE.Vector2( ( i + 1 ) / segments, ( j + 1 ) / radialSegments );\n\t\t\tuvd = new THREE.Vector2( i / segments, ( j + 1 ) / radialSegments );\n\n\t\t\tthis.faces.push( new THREE.Face3( a, b, d ) );\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\n\n\t\t\tthis.faces.push( new THREE.Face3( b, c, d ) );\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\n\n\t\t}\n\n\t}\n\n\tthis.computeFaceNormals();\n\tthis.computeVertexNormals();\n\n};\n\nTHREE.TubeGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.TubeGeometry.prototype.constructor = THREE.TubeGeometry;\n\nTHREE.TubeGeometry.NoTaper = function ( u ) {\n\n\treturn 1;\n\n};\n\nTHREE.TubeGeometry.SinusoidalTaper = function ( u ) {\n\n\treturn Math.sin( Math.PI * u );\n\n};\n\n// For computing of Frenet frames, exposing the tangents, normals and binormals the spline\nTHREE.TubeGeometry.FrenetFrames = function ( path, segments, closed ) {\n\n\tvar\tnormal = new THREE.Vector3(),\n\n\t\ttangents = [],\n\t\tnormals = [],\n\t\tbinormals = [],\n\n\t\tvec = new THREE.Vector3(),\n\t\tmat = new THREE.Matrix4(),\n\n\t\tnumpoints = segments + 1,\n\t\ttheta,\n\t\tsmallest,\n\n\t\ttx, ty, tz,\n\t\ti, u;\n\n\n\t// expose internals\n\tthis.tangents = tangents;\n\tthis.normals = normals;\n\tthis.binormals = binormals;\n\n\t// compute the tangent vectors for each segment on the path\n\n\tfor ( i = 0; i < numpoints; i ++ ) {\n\n\t\tu = i / ( numpoints - 1 );\n\n\t\ttangents[ i ] = path.getTangentAt( u );\n\t\ttangents[ i ].normalize();\n\n\t}\n\n\tinitialNormal3();\n\n\t/*\n\tfunction initialNormal1(lastBinormal) {\n\t\t// fixed start binormal. Has dangers of 0 vectors\n\t\tnormals[ 0 ] = new THREE.Vector3();\n\t\tbinormals[ 0 ] = new THREE.Vector3();\n\t\tif (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );\n\t\tnormals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n\t}\n\n\tfunction initialNormal2() {\n\n\t\t// This uses the Frenet-Serret formula for deriving binormal\n\t\tvar t2 = path.getTangentAt( epsilon );\n\n\t\tnormals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();\n\t\tbinormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\t\tnormals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n\n\t}\n\t*/\n\n\tfunction initialNormal3() {\n\n\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t// and in the direction of the smallest tangent xyz component\n\n\t\tnormals[ 0 ] = new THREE.Vector3();\n\t\tbinormals[ 0 ] = new THREE.Vector3();\n\t\tsmallest = Number.MAX_VALUE;\n\t\ttx = Math.abs( tangents[ 0 ].x );\n\t\tty = Math.abs( tangents[ 0 ].y );\n\t\ttz = Math.abs( tangents[ 0 ].z );\n\n\t\tif ( tx <= smallest ) {\n\n\t\t\tsmallest = tx;\n\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t}\n\n\t\tif ( ty <= smallest ) {\n\n\t\t\tsmallest = ty;\n\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t}\n\n\t\tif ( tz <= smallest ) {\n\n\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t}\n\n\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\t}\n\n\n\t// compute the slowly-varying normal and binormal vectors for each segment on the path\n\n\tfor ( i = 1; i < numpoints; i ++ ) {\n\n\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\tvec.normalize();\n\n\t\t\ttheta = Math.acos( THREE.Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t}\n\n\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t}\n\n\n\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\tif ( closed ) {\n\n\t\ttheta = Math.acos( THREE.Math.clamp( normals[ 0 ].dot( normals[ numpoints - 1 ] ), - 1, 1 ) );\n\t\ttheta /= ( numpoints - 1 );\n\n\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints - 1 ] ) ) > 0 ) {\n\n\t\t\ttheta = - theta;\n\n\t\t}\n\n\t\tfor ( i = 1; i < numpoints; i ++ ) {\n\n\t\t\t// twist a little...\n\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t}\n\n\t}\n\n};\n\n// File:src/extras/geometries/PolyhedronGeometry.js\n\n/**\n * @author clockworkgeek / https://github.com/clockworkgeek\n * @author timothypratley / https://github.com/timothypratley\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nTHREE.PolyhedronGeometry = function ( vertices, indices, radius, detail ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'PolyhedronGeometry';\n\n\tthis.parameters = {\n\t\tvertices: vertices,\n\t\tindices: indices,\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n\tradius = radius || 1;\n\tdetail = detail || 0;\n\n\tvar that = this;\n\n\tfor ( var i = 0, l = vertices.length; i < l; i += 3 ) {\n\n\t\tprepare( new THREE.Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );\n\n\t}\n\n\tvar p = this.vertices;\n\n\tvar faces = [];\n\n\tfor ( var i = 0, j = 0, l = indices.length; i < l; i += 3, j ++ ) {\n\n\t\tvar v1 = p[ indices[ i ] ];\n\t\tvar v2 = p[ indices[ i + 1 ] ];\n\t\tvar v3 = p[ indices[ i + 2 ] ];\n\n\t\tfaces[ j ] = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n\n\t}\n\n\tvar centroid = new THREE.Vector3();\n\n\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\tsubdivide( faces[ i ], detail );\n\n\t}\n\n\n\t// Handle case when face straddles the seam\n\n\tfor ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {\n\n\t\tvar uvs = this.faceVertexUvs[ 0 ][ i ];\n\n\t\tvar x0 = uvs[ 0 ].x;\n\t\tvar x1 = uvs[ 1 ].x;\n\t\tvar x2 = uvs[ 2 ].x;\n\n\t\tvar max = Math.max( x0, x1, x2 );\n\t\tvar min = Math.min( x0, x1, x2 );\n\n\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\tif ( x0 < 0.2 ) uvs[ 0 ].x += 1;\n\t\t\tif ( x1 < 0.2 ) uvs[ 1 ].x += 1;\n\t\t\tif ( x2 < 0.2 ) uvs[ 2 ].x += 1;\n\n\t\t}\n\n\t}\n\n\n\t// Apply radius\n\n\tfor ( var i = 0, l = this.vertices.length; i < l; i ++ ) {\n\n\t\tthis.vertices[ i ].multiplyScalar( radius );\n\n\t}\n\n\n\t// Merge vertices\n\n\tthis.mergeVertices();\n\n\tthis.computeFaceNormals();\n\n\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\n\n\n\t// Project vector onto sphere's surface\n\n\tfunction prepare( vector ) {\n\n\t\tvar vertex = vector.normalize().clone();\n\t\tvertex.index = that.vertices.push( vertex ) - 1;\n\n\t\t// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.\n\n\t\tvar u = azimuth( vector ) / 2 / Math.PI + 0.5;\n\t\tvar v = inclination( vector ) / Math.PI + 0.5;\n\t\tvertex.uv = new THREE.Vector2( u, 1 - v );\n\n\t\treturn vertex;\n\n\t}\n\n\n\t// Approximate a curved face with recursively sub-divided triangles.\n\n\tfunction make( v1, v2, v3 ) {\n\n\t\tvar face = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n\t\tthat.faces.push( face );\n\n\t\tcentroid.copy( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );\n\n\t\tvar azi = azimuth( centroid );\n\n\t\tthat.faceVertexUvs[ 0 ].push( [\n\t\t\tcorrectUV( v1.uv, v1, azi ),\n\t\t\tcorrectUV( v2.uv, v2, azi ),\n\t\t\tcorrectUV( v3.uv, v3, azi )\n\t\t] );\n\n\t}\n\n\n\t// Analytically subdivide a face to the required detail level.\n\n\tfunction subdivide( face, detail ) {\n\n\t\tvar cols = Math.pow( 2, detail );\n\t\tvar a = prepare( that.vertices[ face.a ] );\n\t\tvar b = prepare( that.vertices[ face.b ] );\n\t\tvar c = prepare( that.vertices[ face.c ] );\n\t\tvar v = [];\n\n\t\t// Construct all of the vertices for this subdivision.\n\n\t\tfor ( var i = 0 ; i <= cols; i ++ ) {\n\n\t\t\tv[ i ] = [];\n\n\t\t\tvar aj = prepare( a.clone().lerp( c, i / cols ) );\n\t\t\tvar bj = prepare( b.clone().lerp( c, i / cols ) );\n\t\t\tvar rows = cols - i;\n\n\t\t\tfor ( var j = 0; j <= rows; j ++ ) {\n\n\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Construct all of the faces.\n\n\t\tfor ( var i = 0; i < cols ; i ++ ) {\n\n\t\t\tfor ( var j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n\t\t\t\tvar k = Math.floor( j / 2 );\n\n\t\t\t\tif ( j % 2 === 0 ) {\n\n\t\t\t\t\tmake(\n\t\t\t\t\t\tv[ i ][ k + 1 ],\n\t\t\t\t\t\tv[ i + 1 ][ k ],\n\t\t\t\t\t\tv[ i ][ k ]\n\t\t\t\t\t);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmake(\n\t\t\t\t\t\tv[ i ][ k + 1 ],\n\t\t\t\t\t\tv[ i + 1 ][ k + 1 ],\n\t\t\t\t\t\tv[ i + 1 ][ k ]\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\tfunction azimuth( vector ) {\n\n\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t}\n\n\n\t// Angle above the XZ plane.\n\n\tfunction inclination( vector ) {\n\n\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t}\n\n\n\t// Texture fixing helper. Spheres have some odd behaviours.\n\n\tfunction correctUV( uv, vector, azimuth ) {\n\n\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new THREE.Vector2( uv.x - 1, uv.y );\n\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new THREE.Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );\n\t\treturn uv.clone();\n\n\t}\n\n\n};\n\nTHREE.PolyhedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.PolyhedronGeometry.prototype.constructor = THREE.PolyhedronGeometry;\n\n// File:src/extras/geometries/DodecahedronGeometry.js\n\n/**\n * @author Abe Pazos / https://hamoid.com\n */\n\nTHREE.DodecahedronGeometry = function ( radius, detail ) {\n\n\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\tvar r = 1 / t;\n\n\tvar vertices = [\n\n\t\t// (±1, ±1, ±1)\n\t\t- 1, - 1, - 1,    - 1, - 1,  1,\n\t\t- 1,  1, - 1,    - 1,  1,  1,\n\t\t 1, - 1, - 1,     1, - 1,  1,\n\t\t 1,  1, - 1,     1,  1,  1,\n\n\t\t// (0, ±1/φ, ±φ)\n\t\t 0, - r, - t,     0, - r,  t,\n\t\t 0,  r, - t,     0,  r,  t,\n\n\t\t// (±1/φ, ±φ, 0)\n\t\t- r, - t,  0,    - r,  t,  0,\n\t\t r, - t,  0,     r,  t,  0,\n\n\t\t// (±φ, 0, ±1/φ)\n\t\t- t,  0, - r,     t,  0, - r,\n\t\t- t,  0,  r,     t,  0,  r\n\t];\n\n\tvar indices = [\n\t\t 3, 11,  7,      3,  7, 15,      3, 15, 13,\n\t\t 7, 19, 17,      7, 17,  6,      7,  6, 15,\n\t\t17,  4,  8,     17,  8, 10,     17, 10,  6,\n\t\t 8,  0, 16,      8, 16,  2,      8,  2, 10,\n\t\t 0, 12,  1,      0,  1, 18,      0, 18, 16,\n\t\t 6, 10,  2,      6,  2, 13,      6, 13, 15,\n\t\t 2, 16, 18,      2, 18,  3,      2,  3, 13,\n\t\t18,  1,  9,     18,  9, 11,     18, 11,  3,\n\t\t 4, 14, 12,      4, 12,  0,      4,  0,  8,\n\t\t11,  9,  5,     11,  5, 19,     11, 19,  7,\n\t\t19,  5, 14,     19, 14,  4,     19,  4, 17,\n\t\t 1, 12, 14,      1, 14,  5,      1,  5,  9\n\t];\n\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'DodecahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n};\n\nTHREE.DodecahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\nTHREE.DodecahedronGeometry.prototype.constructor = THREE.DodecahedronGeometry;\n\n// File:src/extras/geometries/IcosahedronGeometry.js\n\n/**\n * @author timothypratley / https://github.com/timothypratley\n */\n\nTHREE.IcosahedronGeometry = function ( radius, detail ) {\n\n\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\tvar vertices = [\n\t\t- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,\n\t\t 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,\n\t\t t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1\n\t];\n\n\tvar indices = [\n\t\t 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,\n\t\t 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,\n\t\t 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,\n\t\t 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1\n\t];\n\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'IcosahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n};\n\nTHREE.IcosahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\nTHREE.IcosahedronGeometry.prototype.constructor = THREE.IcosahedronGeometry;\n\n// File:src/extras/geometries/OctahedronGeometry.js\n\n/**\n * @author timothypratley / https://github.com/timothypratley\n */\n\nTHREE.OctahedronGeometry = function ( radius, detail ) {\n\n\tvar vertices = [\n\t\t1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1\n\t];\n\n\tvar indices = [\n\t\t0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2\n\t];\n\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'OctahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n};\n\nTHREE.OctahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\nTHREE.OctahedronGeometry.prototype.constructor = THREE.OctahedronGeometry;\n\n// File:src/extras/geometries/TetrahedronGeometry.js\n\n/**\n * @author timothypratley / https://github.com/timothypratley\n */\n\nTHREE.TetrahedronGeometry = function ( radius, detail ) {\n\n\tvar vertices = [\n\t\t 1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1\n\t];\n\n\tvar indices = [\n\t\t 2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1\n\t];\n\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'TetrahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n};\n\nTHREE.TetrahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\nTHREE.TetrahedronGeometry.prototype.constructor = THREE.TetrahedronGeometry;\n\n// File:src/extras/geometries/ParametricGeometry.js\n\n/**\n * @author zz85 / https://github.com/zz85\n * Parametric Surfaces Geometry\n * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n *\n * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );\n *\n */\n\nTHREE.ParametricGeometry = function ( func, slices, stacks ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'ParametricGeometry';\n\n\tthis.parameters = {\n\t\tfunc: func,\n\t\tslices: slices,\n\t\tstacks: stacks\n\t};\n\n\tvar verts = this.vertices;\n\tvar faces = this.faces;\n\tvar uvs = this.faceVertexUvs[ 0 ];\n\n\tvar i, j, p;\n\tvar u, v;\n\n\tvar sliceCount = slices + 1;\n\n\tfor ( i = 0; i <= stacks; i ++ ) {\n\n\t\tv = i / stacks;\n\n\t\tfor ( j = 0; j <= slices; j ++ ) {\n\n\t\t\tu = j / slices;\n\n\t\t\tp = func( u, v );\n\t\t\tverts.push( p );\n\n\t\t}\n\n\t}\n\n\tvar a, b, c, d;\n\tvar uva, uvb, uvc, uvd;\n\n\tfor ( i = 0; i < stacks; i ++ ) {\n\n\t\tfor ( j = 0; j < slices; j ++ ) {\n\n\t\t\ta = i * sliceCount + j;\n\t\t\tb = i * sliceCount + j + 1;\n\t\t\tc = ( i + 1 ) * sliceCount + j + 1;\n\t\t\td = ( i + 1 ) * sliceCount + j;\n\n\t\t\tuva = new THREE.Vector2( j / slices, i / stacks );\n\t\t\tuvb = new THREE.Vector2( ( j + 1 ) / slices, i / stacks );\n\t\t\tuvc = new THREE.Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );\n\t\t\tuvd = new THREE.Vector2( j / slices, ( i + 1 ) / stacks );\n\n\t\t\tfaces.push( new THREE.Face3( a, b, d ) );\n\t\t\tuvs.push( [ uva, uvb, uvd ] );\n\n\t\t\tfaces.push( new THREE.Face3( b, c, d ) );\n\t\t\tuvs.push( [ uvb.clone(), uvc, uvd.clone() ] );\n\n\t\t}\n\n\t}\n\n\t// console.log(this);\n\n\t// magic bullet\n\t// var diff = this.mergeVertices();\n\t// console.log('removed ', diff, ' vertices by merging');\n\n\tthis.computeFaceNormals();\n\tthis.computeVertexNormals();\n\n};\n\nTHREE.ParametricGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.ParametricGeometry.prototype.constructor = THREE.ParametricGeometry;\n\n// File:src/extras/geometries/WireframeGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.WireframeGeometry = function ( geometry ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tvar edge = [ 0, 0 ], hash = {};\n\n\tfunction sortFunction( a, b ) {\n\n\t\treturn a - b;\n\n\t}\n\n\tvar keys = [ 'a', 'b', 'c' ];\n\n\tif ( geometry instanceof THREE.Geometry ) {\n\n\t\tvar vertices = geometry.vertices;\n\t\tvar faces = geometry.faces;\n\t\tvar numEdges = 0;\n\n\t\t// allocate maximal size\n\t\tvar edges = new Uint32Array( 6 * faces.length );\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\tedge[ 0 ] = face[ keys[ j ] ];\n\t\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\tedge.sort( sortFunction );\n\n\t\t\t\tvar key = edge.toString();\n\n\t\t\t\tif ( hash[ key ] === undefined ) {\n\n\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n\t\t\t\t\thash[ key ] = true;\n\t\t\t\t\tnumEdges ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\n\t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\n\t\t\t\tvar vertex = vertices[ edges [ 2 * i + j ] ];\n\n\t\t\t\tvar index = 6 * i + 3 * j;\n\t\t\t\tcoords[ index + 0 ] = vertex.x;\n\t\t\t\tcoords[ index + 1 ] = vertex.y;\n\t\t\t\tcoords[ index + 2 ] = vertex.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\n\n\t} else if ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\tif ( geometry.index !== null ) {\n\n\t\t\t// Indexed BufferGeometry\n\n\t\t\tvar indices = geometry.index.array;\n\t\t\tvar vertices = geometry.attributes.position;\n\t\t\tvar groups = geometry.groups;\n\t\t\tvar numEdges = 0;\n\n\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\tgeometry.addGroup( 0, indices.length );\n\n\t\t\t}\n\n\t\t\t// allocate maximal size\n\t\t\tvar edges = new Uint32Array( 2 * indices.length );\n\n\t\t\tfor ( var o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\tvar group = groups[ o ];\n\n\t\t\t\tvar start = group.start;\n\t\t\t\tvar count = group.count;\n\n\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n\t\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\tedge[ 0 ] = indices[ i + j ];\n\t\t\t\t\t\tedge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];\n\t\t\t\t\t\tedge.sort( sortFunction );\n\n\t\t\t\t\t\tvar key = edge.toString();\n\n\t\t\t\t\t\tif ( hash[ key ] === undefined ) {\n\n\t\t\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n\t\t\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n\t\t\t\t\t\t\thash[ key ] = true;\n\t\t\t\t\t\t\tnumEdges ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n\t\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\n\t\t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\n\t\t\t\t\tvar index = 6 * i + 3 * j;\n\t\t\t\t\tvar index2 = edges[ 2 * i + j ];\n\n\t\t\t\t\tcoords[ index + 0 ] = vertices.getX( index2 );\n\t\t\t\t\tcoords[ index + 1 ] = vertices.getY( index2 );\n\t\t\t\t\tcoords[ index + 2 ] = vertices.getZ( index2 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\n\n\t\t} else {\n\n\t\t\t// non-indexed BufferGeometry\n\n\t\t\tvar vertices = geometry.attributes.position.array;\n\t\t\tvar numEdges = vertices.length / 3;\n\t\t\tvar numTris = numEdges / 3;\n\n\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n\t\t\tfor ( var i = 0, l = numTris; i < l; i ++ ) {\n\n\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\tvar index = 18 * i + 6 * j;\n\n\t\t\t\t\tvar index1 = 9 * i + 3 * j;\n\t\t\t\t\tcoords[ index + 0 ] = vertices[ index1 ];\n\t\t\t\t\tcoords[ index + 1 ] = vertices[ index1 + 1 ];\n\t\t\t\t\tcoords[ index + 2 ] = vertices[ index1 + 2 ];\n\n\t\t\t\t\tvar index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );\n\t\t\t\t\tcoords[ index + 3 ] = vertices[ index2 ];\n\t\t\t\t\tcoords[ index + 4 ] = vertices[ index2 + 1 ];\n\t\t\t\t\tcoords[ index + 5 ] = vertices[ index2 + 2 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\n\n\t\t}\n\n\t}\n\n};\n\nTHREE.WireframeGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.WireframeGeometry.prototype.constructor = THREE.WireframeGeometry;\n\n// File:src/extras/helpers/AxisHelper.js\n\n/**\n * @author sroucheray / http://sroucheray.org/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.AxisHelper = function ( size ) {\n\n\tsize = size || 1;\n\n\tvar vertices = new Float32Array( [\n\t\t0, 0, 0,  size, 0, 0,\n\t\t0, 0, 0,  0, size, 0,\n\t\t0, 0, 0,  0, 0, size\n\t] );\n\n\tvar colors = new Float32Array( [\n\t\t1, 0, 0,  1, 0.6, 0,\n\t\t0, 1, 0,  0.6, 1, 0,\n\t\t0, 0, 1,  0, 0.6, 1\n\t] );\n\n\tvar geometry = new THREE.BufferGeometry();\n\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\tgeometry.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ) );\n\n\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\n\n\tTHREE.LineSegments.call( this, geometry, material );\n\n};\n\nTHREE.AxisHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.AxisHelper.prototype.constructor = THREE.AxisHelper;\n\n// File:src/extras/helpers/ArrowHelper.js\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n * @author zz85 / http://github.com/zz85\n * @author bhouston / http://clara.io\n *\n * Creates an arrow for visualizing directions\n *\n * Parameters:\n *  dir - Vector3\n *  origin - Vector3\n *  length - Number\n *  color - color in hex value\n *  headLength - Number\n *  headWidth - Number\n */\n\nTHREE.ArrowHelper = ( function () {\n\n\tvar lineGeometry = new THREE.BufferGeometry();\n\tlineGeometry.addAttribute( 'position', new THREE.Float32Attribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\tvar coneGeometry = new THREE.CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n\tconeGeometry.translate( 0, - 0.5, 0 );\n\n\treturn function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tTHREE.Object3D.call( this );\n\n\t\tif ( color === undefined ) color = 0xffff00;\n\t\tif ( length === undefined ) length = 1;\n\t\tif ( headLength === undefined ) headLength = 0.2 * length;\n\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\t\tthis.position.copy( origin );\n\n\t\tthis.line = new THREE.Line( lineGeometry, new THREE.LineBasicMaterial( { color: color } ) );\n\t\tthis.line.matrixAutoUpdate = false;\n\t\tthis.add( this.line );\n\n\t\tthis.cone = new THREE.Mesh( coneGeometry, new THREE.MeshBasicMaterial( { color: color } ) );\n\t\tthis.cone.matrixAutoUpdate = false;\n\t\tthis.add( this.cone );\n\n\t\tthis.setDirection( dir );\n\t\tthis.setLength( length, headLength, headWidth );\n\n\t};\n\n}() );\n\nTHREE.ArrowHelper.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.ArrowHelper.prototype.constructor = THREE.ArrowHelper;\n\nTHREE.ArrowHelper.prototype.setDirection = ( function () {\n\n\tvar axis = new THREE.Vector3();\n\tvar radians;\n\n\treturn function setDirection( dir ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t} else if ( dir.y < - 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t} else {\n\n\t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\tradians = Math.acos( dir.y );\n\n\t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\n\n\t\t}\n\n\t};\n\n}() );\n\nTHREE.ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\n\tif ( headLength === undefined ) headLength = 0.2 * length;\n\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\tthis.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );\n\tthis.line.updateMatrix();\n\n\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\tthis.cone.position.y = length;\n\tthis.cone.updateMatrix();\n\n};\n\nTHREE.ArrowHelper.prototype.setColor = function ( color ) {\n\n\tthis.line.material.color.copy( color );\n\tthis.cone.material.color.copy( color );\n\n};\n\n// File:src/extras/helpers/BoxHelper.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.BoxHelper = function ( object, color ) {\n\t\n\tif ( color === undefined ) color = 0xffff00;\n\n\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\tvar positions = new Float32Array( 8 * 3 );\n\n\tvar geometry = new THREE.BufferGeometry();\n\tgeometry.setIndex( new THREE.BufferAttribute( indices, 1 ) );\n\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\n\n\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color } ) );\n\n\tif ( object !== undefined ) {\n\n\t\tthis.update( object );\n\n\t}\n\n};\n\nTHREE.BoxHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.BoxHelper.prototype.constructor = THREE.BoxHelper;\n\nTHREE.BoxHelper.prototype.update = ( function () {\n\n\tvar box = new THREE.Box3();\n\n\treturn function update( object ) {\n\n\t\tif ( object instanceof THREE.Box3 ) {\n\n\t\t\tbox.copy( object );\n\n\t\t} else {\n\n\t\t\tbox.setFromObject( object );\n\n\t\t}\n\n\t\tif ( box.isEmpty() ) return;\n\n\t\tvar min = box.min;\n\t\tvar max = box.max;\n\n\t\t/*\n\t\t  5____4\n\t\t1/___0/|\n\t\t| 6__|_7\n\t\t2/___3/\n\n\t\t0: max.x, max.y, max.z\n\t\t1: min.x, max.y, max.z\n\t\t2: min.x, min.y, max.z\n\t\t3: max.x, min.y, max.z\n\t\t4: max.x, max.y, min.z\n\t\t5: min.x, max.y, min.z\n\t\t6: min.x, min.y, min.z\n\t\t7: max.x, min.y, min.z\n\t\t*/\n\n\t\tvar position = this.geometry.attributes.position;\n\t\tvar array = position.array;\n\n\t\tarray[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;\n\t\tarray[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;\n\t\tarray[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;\n\t\tarray[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\tposition.needsUpdate = true;\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t};\n\n} )();\n\n// File:src/extras/helpers/BoundingBoxHelper.js\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n */\n\n// a helper to show the world-axis-aligned bounding box for an object\n\nTHREE.BoundingBoxHelper = function ( object, hex ) {\n\n\tvar color = ( hex !== undefined ) ? hex : 0x888888;\n\n\tthis.object = object;\n\n\tthis.box = new THREE.Box3();\n\n\tTHREE.Mesh.call( this, new THREE.BoxGeometry( 1, 1, 1 ), new THREE.MeshBasicMaterial( { color: color, wireframe: true } ) );\n\n};\n\nTHREE.BoundingBoxHelper.prototype = Object.create( THREE.Mesh.prototype );\nTHREE.BoundingBoxHelper.prototype.constructor = THREE.BoundingBoxHelper;\n\nTHREE.BoundingBoxHelper.prototype.update = function () {\n\n\tthis.box.setFromObject( this.object );\n\n\tthis.box.size( this.scale );\n\n\tthis.box.center( this.position );\n\n};\n\n// File:src/extras/helpers/CameraHelper.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n *\t- shows frustum, line of sight and up of the camera\n *\t- suitable for fast updates\n * \t- based on frustum visualization in lightgl.js shadowmap example\n *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n */\n\nTHREE.CameraHelper = function ( camera ) {\n\n\tvar geometry = new THREE.Geometry();\n\tvar material = new THREE.LineBasicMaterial( { color: 0xffffff, vertexColors: THREE.FaceColors } );\n\n\tvar pointMap = {};\n\n\t// colors\n\n\tvar hexFrustum = 0xffaa00;\n\tvar hexCone = 0xff0000;\n\tvar hexUp = 0x00aaff;\n\tvar hexTarget = 0xffffff;\n\tvar hexCross = 0x333333;\n\n\t// near\n\n\taddLine( \"n1\", \"n2\", hexFrustum );\n\taddLine( \"n2\", \"n4\", hexFrustum );\n\taddLine( \"n4\", \"n3\", hexFrustum );\n\taddLine( \"n3\", \"n1\", hexFrustum );\n\n\t// far\n\n\taddLine( \"f1\", \"f2\", hexFrustum );\n\taddLine( \"f2\", \"f4\", hexFrustum );\n\taddLine( \"f4\", \"f3\", hexFrustum );\n\taddLine( \"f3\", \"f1\", hexFrustum );\n\n\t// sides\n\n\taddLine( \"n1\", \"f1\", hexFrustum );\n\taddLine( \"n2\", \"f2\", hexFrustum );\n\taddLine( \"n3\", \"f3\", hexFrustum );\n\taddLine( \"n4\", \"f4\", hexFrustum );\n\n\t// cone\n\n\taddLine( \"p\", \"n1\", hexCone );\n\taddLine( \"p\", \"n2\", hexCone );\n\taddLine( \"p\", \"n3\", hexCone );\n\taddLine( \"p\", \"n4\", hexCone );\n\n\t// up\n\n\taddLine( \"u1\", \"u2\", hexUp );\n\taddLine( \"u2\", \"u3\", hexUp );\n\taddLine( \"u3\", \"u1\", hexUp );\n\n\t// target\n\n\taddLine( \"c\", \"t\", hexTarget );\n\taddLine( \"p\", \"c\", hexCross );\n\n\t// cross\n\n\taddLine( \"cn1\", \"cn2\", hexCross );\n\taddLine( \"cn3\", \"cn4\", hexCross );\n\n\taddLine( \"cf1\", \"cf2\", hexCross );\n\taddLine( \"cf3\", \"cf4\", hexCross );\n\n\tfunction addLine( a, b, hex ) {\n\n\t\taddPoint( a, hex );\n\t\taddPoint( b, hex );\n\n\t}\n\n\tfunction addPoint( id, hex ) {\n\n\t\tgeometry.vertices.push( new THREE.Vector3() );\n\t\tgeometry.colors.push( new THREE.Color( hex ) );\n\n\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\tpointMap[ id ] = [];\n\n\t\t}\n\n\t\tpointMap[ id ].push( geometry.vertices.length - 1 );\n\n\t}\n\n\tTHREE.LineSegments.call( this, geometry, material );\n\n\tthis.camera = camera;\n\tif( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\n\tthis.matrix = camera.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.pointMap = pointMap;\n\n\tthis.update();\n\n};\n\nTHREE.CameraHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.CameraHelper.prototype.constructor = THREE.CameraHelper;\n\nTHREE.CameraHelper.prototype.update = function () {\n\n\tvar geometry, pointMap;\n\n\tvar vector = new THREE.Vector3();\n\tvar camera = new THREE.Camera();\n\n\tfunction setPoint( point, x, y, z ) {\n\n\t\tvector.set( x, y, z ).unproject( camera );\n\n\t\tvar points = pointMap[ point ];\n\n\t\tif ( points !== undefined ) {\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tgeometry.vertices[ points[ i ] ].copy( vector );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn function update() {\n\n\t\tgeometry = this.geometry;\n\t\tpointMap = this.pointMap;\n\n\t\tvar w = 1, h = 1;\n\n\t\t// we need just camera projection matrix\n\t\t// world matrix must be identity\n\n\t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\n\n\t\t// center / target\n\n\t\tsetPoint( \"c\", 0, 0, - 1 );\n\t\tsetPoint( \"t\", 0, 0,  1 );\n\n\t\t// near\n\n\t\tsetPoint( \"n1\", - w, - h, - 1 );\n\t\tsetPoint( \"n2\",   w, - h, - 1 );\n\t\tsetPoint( \"n3\", - w,   h, - 1 );\n\t\tsetPoint( \"n4\",   w,   h, - 1 );\n\n\t\t// far\n\n\t\tsetPoint( \"f1\", - w, - h, 1 );\n\t\tsetPoint( \"f2\",   w, - h, 1 );\n\t\tsetPoint( \"f3\", - w,   h, 1 );\n\t\tsetPoint( \"f4\",   w,   h, 1 );\n\n\t\t// up\n\n\t\tsetPoint( \"u1\",   w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( \"u2\", - w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( \"u3\",         0, h * 2,   - 1 );\n\n\t\t// cross\n\n\t\tsetPoint( \"cf1\", - w,   0, 1 );\n\t\tsetPoint( \"cf2\",   w,   0, 1 );\n\t\tsetPoint( \"cf3\",   0, - h, 1 );\n\t\tsetPoint( \"cf4\",   0,   h, 1 );\n\n\t\tsetPoint( \"cn1\", - w,   0, - 1 );\n\t\tsetPoint( \"cn2\",   w,   0, - 1 );\n\t\tsetPoint( \"cn3\",   0, - h, - 1 );\n\t\tsetPoint( \"cn4\",   0,   h, - 1 );\n\n\t\tgeometry.verticesNeedUpdate = true;\n\n\t};\n\n}();\n\n// File:src/extras/helpers/DirectionalLightHelper.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.DirectionalLightHelper = function ( light, size ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tif ( size === undefined ) size = 1;\n\n\tvar geometry = new THREE.BufferGeometry();\n\tgeometry.addAttribute( 'position', new THREE.Float32Attribute( [\n\t\t- size,   size, 0,\n\t\t  size,   size, 0,\n\t\t  size, - size, 0,\n\t\t- size, - size, 0,\n\t\t- size,   size, 0\n\t], 3 ) );\n\n\tvar material = new THREE.LineBasicMaterial( { fog: false } );\n\n\tthis.add( new THREE.Line( geometry, material ) );\n\n\tgeometry = new THREE.BufferGeometry();\n\tgeometry.addAttribute( 'position', new THREE.Float32Attribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\tthis.add( new THREE.Line( geometry, material ));\n\n\tthis.update();\n\n};\n\nTHREE.DirectionalLightHelper.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.DirectionalLightHelper.prototype.constructor = THREE.DirectionalLightHelper;\n\nTHREE.DirectionalLightHelper.prototype.dispose = function () {\n\n\tvar lightPlane = this.children[ 0 ];\n\tvar targetLine = this.children[ 1 ];\n\n\tlightPlane.geometry.dispose();\n\tlightPlane.material.dispose();\n\ttargetLine.geometry.dispose();\n\ttargetLine.material.dispose();\n\n};\n\nTHREE.DirectionalLightHelper.prototype.update = function () {\n\n\tvar v1 = new THREE.Vector3();\n\tvar v2 = new THREE.Vector3();\n\tvar v3 = new THREE.Vector3();\n\n\treturn function update() {\n\n\t\tv1.setFromMatrixPosition( this.light.matrixWorld );\n\t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\tv3.subVectors( v2, v1 );\n\n\t\tvar lightPlane = this.children[ 0 ];\n\t\tvar targetLine = this.children[ 1 ];\n\n\t\tlightPlane.lookAt( v3 );\n\t\tlightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\t\ttargetLine.lookAt( v3 );\n\t\ttargetLine.scale.z = v3.length();\n\n\t};\n\n}();\n\n// File:src/extras/helpers/EdgesHelper.js\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n * @param object THREE.Mesh whose geometry will be used\n * @param hex line color\n * @param thresholdAngle the minimum angle (in degrees),\n * between the face normals of adjacent faces,\n * that is required to render an edge. A value of 10 means\n * an edge is only rendered if the angle is at least 10 degrees.\n */\n\nTHREE.EdgesHelper = function ( object, hex, thresholdAngle ) {\n\n\tvar color = ( hex !== undefined ) ? hex : 0xffffff;\n\n\tTHREE.LineSegments.call( this, new THREE.EdgesGeometry( object.geometry, thresholdAngle ), new THREE.LineBasicMaterial( { color: color } ) );\n\n\tthis.matrix = object.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n};\n\nTHREE.EdgesHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.EdgesHelper.prototype.constructor = THREE.EdgesHelper;\n\n// File:src/extras/helpers/FaceNormalsHelper.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nTHREE.FaceNormalsHelper = function ( object, size, hex, linewidth ) {\n\n\t// FaceNormalsHelper only supports THREE.Geometry\n\n\tthis.object = object;\n\n\tthis.size = ( size !== undefined ) ? size : 1;\n\n\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t//\n\n\tvar nNormals = 0;\n\n\tvar objGeometry = this.object.geometry;\n\n\tif ( objGeometry instanceof THREE.Geometry ) {\n\n\t\tnNormals = objGeometry.faces.length;\n\n\t} else {\n\n\t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\n\n\t}\n\n\t//\n\n\tvar geometry = new THREE.BufferGeometry();\n\n\tvar positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );\n\n\tgeometry.addAttribute( 'position', positions );\n\n\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t//\n\n\tthis.matrixAutoUpdate = false;\n\tthis.update();\n\n};\n\nTHREE.FaceNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.FaceNormalsHelper.prototype.constructor = THREE.FaceNormalsHelper;\n\nTHREE.FaceNormalsHelper.prototype.update = ( function () {\n\n\tvar v1 = new THREE.Vector3();\n\tvar v2 = new THREE.Vector3();\n\tvar normalMatrix = new THREE.Matrix3();\n\n\treturn function update() {\n\n\t\tthis.object.updateMatrixWorld( true );\n\n\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\tvar position = this.geometry.attributes.position;\n\n\t\t//\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tvar vertices = objGeometry.vertices;\n\n\t\tvar faces = objGeometry.faces;\n\n\t\tvar idx = 0;\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tvar normal = face.normal;\n\n\t\t\tv1.copy( vertices[ face.a ] )\n\t\t\t\t.add( vertices[ face.b ] )\n\t\t\t\t.add( vertices[ face.c ] )\n\t\t\t\t.divideScalar( 3 )\n\t\t\t\t.applyMatrix4( matrixWorld );\n\n\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\tidx = idx + 1;\n\n\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\tidx = idx + 1;\n\n\t\t}\n\n\t\tposition.needsUpdate = true;\n\n\t\treturn this;\n\n\t};\n\n}() );\n\n// File:src/extras/helpers/GridHelper.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.GridHelper = function ( size, step, color1, color2 ) {\n\n\tcolor1 = new THREE.Color( color1 !== undefined ? color1 : 0x444444 );\n\tcolor2 = new THREE.Color( color2 !== undefined ? color2 : 0x888888 );\n\n\tvar vertices = [];\n\tvar colors = [];\n\n\tfor ( var i = - size, j = 0; i <= size; i += step ) {\n\n\t\tvertices.push( - size, 0, i, size, 0, i );\n\t\tvertices.push( i, 0, - size, i, 0, size );\n\n\t\tvar color = i === 0 ? color1 : color2;\n\n\t\tcolor.toArray( colors, j ); j += 3;\n\t\tcolor.toArray( colors, j ); j += 3;\n\t\tcolor.toArray( colors, j ); j += 3;\n\t\tcolor.toArray( colors, j ); j += 3;\n\n\t}\n\n\tvar geometry = new THREE.BufferGeometry();\n\tgeometry.addAttribute( 'position', new THREE.Float32Attribute( vertices, 3 ) );\n\tgeometry.addAttribute( 'color', new THREE.Float32Attribute( colors, 3 ) );\n\n\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\n\n\tTHREE.LineSegments.call( this, geometry, material );\n\n};\n\nTHREE.GridHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.GridHelper.prototype.constructor = THREE.GridHelper;\n\nTHREE.GridHelper.prototype.setColors = function () {\n\n\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\n};\n\n// File:src/extras/helpers/HemisphereLightHelper.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.HemisphereLightHelper = function ( light, sphereSize ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.colors = [ new THREE.Color(), new THREE.Color() ];\n\n\tvar geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );\n\tgeometry.rotateX( - Math.PI / 2 );\n\n\tfor ( var i = 0, il = 8; i < il; i ++ ) {\n\n\t\tgeometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];\n\n\t}\n\n\tvar material = new THREE.MeshBasicMaterial( { vertexColors: THREE.FaceColors, wireframe: true } );\n\n\tthis.lightSphere = new THREE.Mesh( geometry, material );\n\tthis.add( this.lightSphere );\n\n\tthis.update();\n\n};\n\nTHREE.HemisphereLightHelper.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.HemisphereLightHelper.prototype.constructor = THREE.HemisphereLightHelper;\n\nTHREE.HemisphereLightHelper.prototype.dispose = function () {\n\n\tthis.lightSphere.geometry.dispose();\n\tthis.lightSphere.material.dispose();\n\n};\n\nTHREE.HemisphereLightHelper.prototype.update = function () {\n\n\tvar vector = new THREE.Vector3();\n\n\treturn function update() {\n\n\t\tthis.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\tthis.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );\n\n\t\tthis.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\t\tthis.lightSphere.geometry.colorsNeedUpdate = true;\n\n\t};\n\n}();\n\n// File:src/extras/helpers/PointLightHelper.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.PointLightHelper = function ( light, sphereSize ) {\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tvar geometry = new THREE.SphereBufferGeometry( sphereSize, 4, 2 );\n\tvar material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );\n\tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\tTHREE.Mesh.call( this, geometry, material );\n\n\tthis.matrix = this.light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\t/*\n\tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\tvar d = light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\n\tthis.add( this.lightDistance );\n\t*/\n\n};\n\nTHREE.PointLightHelper.prototype = Object.create( THREE.Mesh.prototype );\nTHREE.PointLightHelper.prototype.constructor = THREE.PointLightHelper;\n\nTHREE.PointLightHelper.prototype.dispose = function () {\n\n\tthis.geometry.dispose();\n\tthis.material.dispose();\n\n};\n\nTHREE.PointLightHelper.prototype.update = function () {\n\n\tthis.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\t/*\n\tvar d = this.light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.visible = true;\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\t*/\n\n};\n\n// File:src/extras/helpers/SkeletonHelper.js\n\n/**\n * @author Sean Griffin / http://twitter.com/sgrif\n * @author Michael Guerrero / http://realitymeltdown.com\n * @author mrdoob / http://mrdoob.com/\n * @author ikerr / http://verold.com\n */\n\nTHREE.SkeletonHelper = function ( object ) {\n\n\tthis.bones = this.getBoneList( object );\n\n\tvar geometry = new THREE.Geometry();\n\n\tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\n\t\tvar bone = this.bones[ i ];\n\n\t\tif ( bone.parent instanceof THREE.Bone ) {\n\n\t\t\tgeometry.vertices.push( new THREE.Vector3() );\n\t\t\tgeometry.vertices.push( new THREE.Vector3() );\n\t\t\tgeometry.colors.push( new THREE.Color( 0, 0, 1 ) );\n\t\t\tgeometry.colors.push( new THREE.Color( 0, 1, 0 ) );\n\n\t\t}\n\n\t}\n\n\tgeometry.dynamic = true;\n\n\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors, depthTest: false, depthWrite: false, transparent: true } );\n\n\tTHREE.LineSegments.call( this, geometry, material );\n\n\tthis.root = object;\n\n\tthis.matrix = object.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.update();\n\n};\n\n\nTHREE.SkeletonHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.SkeletonHelper.prototype.constructor = THREE.SkeletonHelper;\n\nTHREE.SkeletonHelper.prototype.getBoneList = function( object ) {\n\n\tvar boneList = [];\n\n\tif ( object instanceof THREE.Bone ) {\n\n\t\tboneList.push( object );\n\n\t}\n\n\tfor ( var i = 0; i < object.children.length; i ++ ) {\n\n\t\tboneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );\n\n\t}\n\n\treturn boneList;\n\n};\n\nTHREE.SkeletonHelper.prototype.update = function () {\n\n\tvar geometry = this.geometry;\n\n\tvar matrixWorldInv = new THREE.Matrix4().getInverse( this.root.matrixWorld );\n\n\tvar boneMatrix = new THREE.Matrix4();\n\n\tvar j = 0;\n\n\tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\n\t\tvar bone = this.bones[ i ];\n\n\t\tif ( bone.parent instanceof THREE.Bone ) {\n\n\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\n\t\t\tgeometry.vertices[ j ].setFromMatrixPosition( boneMatrix );\n\n\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\n\t\t\tgeometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );\n\n\t\t\tj += 2;\n\n\t\t}\n\n\t}\n\n\tgeometry.verticesNeedUpdate = true;\n\n\tgeometry.computeBoundingSphere();\n\n};\n\n// File:src/extras/helpers/SpotLightHelper.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nTHREE.SpotLightHelper = function ( light ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tvar geometry = new THREE.BufferGeometry();\n\n\tvar positions = [\n\t\t0, 0, 0,   0,   0,   1,\n\t\t0, 0, 0,   1,   0,   1,\n\t\t0, 0, 0, - 1,   0,   1,\n\t\t0, 0, 0,   0,   1,   1,\n\t\t0, 0, 0,   0, - 1,   1\n\t];\n\n\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\tvar p1 = ( i / l ) * Math.PI * 2;\n\t\tvar p2 = ( j / l ) * Math.PI * 2;\n\n\t\tpositions.push(\n\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t);\n\n\t}\n\n\tgeometry.addAttribute( 'position', new THREE.Float32Attribute( positions, 3 ) );\n\n\tvar material = new THREE.LineBasicMaterial( { fog: false } );\n\n\tthis.cone = new THREE.LineSegments( geometry, material );\n\tthis.add( this.cone );\n\n\tthis.update();\n\n};\n\nTHREE.SpotLightHelper.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.SpotLightHelper.prototype.constructor = THREE.SpotLightHelper;\n\nTHREE.SpotLightHelper.prototype.dispose = function () {\n\n\tthis.cone.geometry.dispose();\n\tthis.cone.material.dispose();\n\n};\n\nTHREE.SpotLightHelper.prototype.update = function () {\n\n\tvar vector = new THREE.Vector3();\n\tvar vector2 = new THREE.Vector3();\n\n\treturn function update() {\n\n\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\tvector.setFromMatrixPosition( this.light.matrixWorld );\n\t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\tthis.cone.lookAt( vector2.sub( vector ) );\n\n\t\tthis.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\t};\n\n}();\n\n// File:src/extras/helpers/VertexNormalsHelper.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nTHREE.VertexNormalsHelper = function ( object, size, hex, linewidth ) {\n\n\tthis.object = object;\n\n\tthis.size = ( size !== undefined ) ? size : 1;\n\n\tvar color = ( hex !== undefined ) ? hex : 0xff0000;\n\n\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t//\n\n\tvar nNormals = 0;\n\n\tvar objGeometry = this.object.geometry;\n\n\tif ( objGeometry instanceof THREE.Geometry ) {\n\n\t\tnNormals = objGeometry.faces.length * 3;\n\n\t} else if ( objGeometry instanceof THREE.BufferGeometry ) {\n\n\t\tnNormals = objGeometry.attributes.normal.count;\n\n\t}\n\n\t//\n\n\tvar geometry = new THREE.BufferGeometry();\n\n\tvar positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );\n\n\tgeometry.addAttribute( 'position', positions );\n\n\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t//\n\n\tthis.matrixAutoUpdate = false;\n\n\tthis.update();\n\n};\n\nTHREE.VertexNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.VertexNormalsHelper.prototype.constructor = THREE.VertexNormalsHelper;\n\nTHREE.VertexNormalsHelper.prototype.update = ( function () {\n\n\tvar v1 = new THREE.Vector3();\n\tvar v2 = new THREE.Vector3();\n\tvar normalMatrix = new THREE.Matrix3();\n\n\treturn function update() {\n\n\t\tvar keys = [ 'a', 'b', 'c' ];\n\n\t\tthis.object.updateMatrixWorld( true );\n\n\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\tvar position = this.geometry.attributes.position;\n\n\t\t//\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tif ( objGeometry instanceof THREE.Geometry ) {\n\n\t\t\tvar vertices = objGeometry.vertices;\n\n\t\t\tvar faces = objGeometry.faces;\n\n\t\t\tvar idx = 0;\n\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar vertex = vertices[ face[ keys[ j ] ] ];\n\n\t\t\t\t\tvar normal = face.vertexNormals[ j ];\n\n\t\t\t\t\tv1.copy( vertex ).applyMatrix4( matrixWorld );\n\n\t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( objGeometry instanceof THREE.BufferGeometry ) {\n\n\t\t\tvar objPos = objGeometry.attributes.position;\n\n\t\t\tvar objNorm = objGeometry.attributes.normal;\n\n\t\t\tvar idx = 0;\n\n\t\t\t// for simplicity, ignore index and drawcalls, and render every normal\n\n\t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\n\n\t\t\t\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\n\n\t\t\t\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\n\n\t\t\t\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tposition.needsUpdate = true;\n\n\t\treturn this;\n\n\t};\n\n}() );\n\n// File:src/extras/helpers/WireframeHelper.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.WireframeHelper = function ( object, hex ) {\n\n\tvar color = ( hex !== undefined ) ? hex : 0xffffff;\n\n\tTHREE.LineSegments.call( this, new THREE.WireframeGeometry( object.geometry ), new THREE.LineBasicMaterial( { color: color } ) );\n\n\tthis.matrix = object.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n};\n\nTHREE.WireframeHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.WireframeHelper.prototype.constructor = THREE.WireframeHelper;\n\n// File:src/extras/objects/ImmediateRenderObject.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.ImmediateRenderObject = function ( material ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.material = material;\n\tthis.render = function ( renderCallback ) {};\n\n};\n\nTHREE.ImmediateRenderObject.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.ImmediateRenderObject.prototype.constructor = THREE.ImmediateRenderObject;\n\n// File:src/extras/objects/MorphBlendMesh.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.MorphBlendMesh = function( geometry, material ) {\n\n\tTHREE.Mesh.call( this, geometry, material );\n\n\tthis.animationsMap = {};\n\tthis.animationsList = [];\n\n\t// prepare default animation\n\t// (all frames played together in 1 second)\n\n\tvar numFrames = this.geometry.morphTargets.length;\n\n\tvar name = \"__default\";\n\n\tvar startFrame = 0;\n\tvar endFrame = numFrames - 1;\n\n\tvar fps = numFrames / 1;\n\n\tthis.createAnimation( name, startFrame, endFrame, fps );\n\tthis.setAnimationWeight( name, 1 );\n\n};\n\nTHREE.MorphBlendMesh.prototype = Object.create( THREE.Mesh.prototype );\nTHREE.MorphBlendMesh.prototype.constructor = THREE.MorphBlendMesh;\n\nTHREE.MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {\n\n\tvar animation = {\n\n\t\tstart: start,\n\t\tend: end,\n\n\t\tlength: end - start + 1,\n\n\t\tfps: fps,\n\t\tduration: ( end - start ) / fps,\n\n\t\tlastFrame: 0,\n\t\tcurrentFrame: 0,\n\n\t\tactive: false,\n\n\t\ttime: 0,\n\t\tdirection: 1,\n\t\tweight: 1,\n\n\t\tdirectionBackwards: false,\n\t\tmirroredLoop: false\n\n\t};\n\n\tthis.animationsMap[ name ] = animation;\n\tthis.animationsList.push( animation );\n\n};\n\nTHREE.MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {\n\n\tvar pattern = /([a-z]+)_?(\\d+)/i;\n\n\tvar firstAnimation, frameRanges = {};\n\n\tvar geometry = this.geometry;\n\n\tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\n\n\t\tvar morph = geometry.morphTargets[ i ];\n\t\tvar chunks = morph.name.match( pattern );\n\n\t\tif ( chunks && chunks.length > 1 ) {\n\n\t\t\tvar name = chunks[ 1 ];\n\n\t\t\tif ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };\n\n\t\t\tvar range = frameRanges[ name ];\n\n\t\t\tif ( i < range.start ) range.start = i;\n\t\t\tif ( i > range.end ) range.end = i;\n\n\t\t\tif ( ! firstAnimation ) firstAnimation = name;\n\n\t\t}\n\n\t}\n\n\tfor ( var name in frameRanges ) {\n\n\t\tvar range = frameRanges[ name ];\n\t\tthis.createAnimation( name, range.start, range.end, fps );\n\n\t}\n\n\tthis.firstAnimation = firstAnimation;\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.direction = 1;\n\t\tanimation.directionBackwards = false;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.direction = - 1;\n\t\tanimation.directionBackwards = true;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.fps = fps;\n\t\tanimation.duration = ( animation.end - animation.start ) / animation.fps;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.duration = duration;\n\t\tanimation.fps = ( animation.end - animation.start ) / animation.duration;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.weight = weight;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.time = time;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.getAnimationTime = function ( name ) {\n\n\tvar time = 0;\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\ttime = animation.time;\n\n\t}\n\n\treturn time;\n\n};\n\nTHREE.MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {\n\n\tvar duration = - 1;\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tduration = animation.duration;\n\n\t}\n\n\treturn duration;\n\n};\n\nTHREE.MorphBlendMesh.prototype.playAnimation = function ( name ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.time = 0;\n\t\tanimation.active = true;\n\n\t} else {\n\n\t\tconsole.warn( \"THREE.MorphBlendMesh: animation[\" + name + \"] undefined in .playAnimation()\" );\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.stopAnimation = function ( name ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.active = false;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.update = function ( delta ) {\n\n\tfor ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {\n\n\t\tvar animation = this.animationsList[ i ];\n\n\t\tif ( ! animation.active ) continue;\n\n\t\tvar frameTime = animation.duration / animation.length;\n\n\t\tanimation.time += animation.direction * delta;\n\n\t\tif ( animation.mirroredLoop ) {\n\n\t\t\tif ( animation.time > animation.duration || animation.time < 0 ) {\n\n\t\t\t\tanimation.direction *= - 1;\n\n\t\t\t\tif ( animation.time > animation.duration ) {\n\n\t\t\t\t\tanimation.time = animation.duration;\n\t\t\t\t\tanimation.directionBackwards = true;\n\n\t\t\t\t}\n\n\t\t\t\tif ( animation.time < 0 ) {\n\n\t\t\t\t\tanimation.time = 0;\n\t\t\t\t\tanimation.directionBackwards = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tanimation.time = animation.time % animation.duration;\n\n\t\t\tif ( animation.time < 0 ) animation.time += animation.duration;\n\n\t\t}\n\n\t\tvar keyframe = animation.start + THREE.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );\n\t\tvar weight = animation.weight;\n\n\t\tif ( keyframe !== animation.currentFrame ) {\n\n\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = 0;\n\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;\n\n\t\t\tthis.morphTargetInfluences[ keyframe ] = 0;\n\n\t\t\tanimation.lastFrame = animation.currentFrame;\n\t\t\tanimation.currentFrame = keyframe;\n\n\t\t}\n\n\t\tvar mix = ( animation.time % frameTime ) / frameTime;\n\n\t\tif ( animation.directionBackwards ) mix = 1 - mix;\n\n\t\tif ( animation.currentFrame !== animation.lastFrame ) {\n\n\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = mix * weight;\n\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;\n\n\t\t} else {\n\n\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = weight;\n\n\t\t}\n\n\t}\n\n};\n\n\n},{}]},{},[1])\n\n","'use strict';\r\n\r\nvar config = {};\r\n\r\nmodule.exports = config;\r\n","'use strict';\r\n\r\nvar THREE = require('three');\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.EffectComposer = function ( renderer, renderTarget ) {\r\n\r\n\tthis.renderer = renderer;\r\n\r\n\tif ( renderTarget === undefined ) {\r\n\r\n\t\tvar parameters = {\r\n\t\t\tminFilter: THREE.LinearFilter,\r\n\t\t\tmagFilter: THREE.LinearFilter,\r\n\t\t\tformat: THREE.RGBAFormat,\r\n\t\t\tstencilBuffer: false\r\n\t\t};\r\n\t\tvar size = renderer.getSize();\r\n\t\trenderTarget = new THREE.WebGLRenderTarget( size.width, size.height, parameters );\r\n\r\n\t}\r\n\r\n\tthis.renderTarget1 = renderTarget;\r\n\tthis.renderTarget2 = renderTarget.clone();\r\n\r\n\tthis.writeBuffer = this.renderTarget1;\r\n\tthis.readBuffer = this.renderTarget2;\r\n\r\n\tthis.passes = [];\r\n\r\n\tif ( THREE.CopyShader === undefined )\r\n\t\tconsole.error( \"THREE.EffectComposer relies on THREE.CopyShader\" );\r\n\r\n\tthis.copyPass = new THREE.ShaderPass( THREE.CopyShader );\r\n\r\n};\r\n\r\nObject.assign( THREE.EffectComposer.prototype, {\r\n\r\n\tswapBuffers: function() {\r\n\r\n\t\tvar tmp = this.readBuffer;\r\n\t\tthis.readBuffer = this.writeBuffer;\r\n\t\tthis.writeBuffer = tmp;\r\n\r\n\t},\r\n\r\n\taddPass: function ( pass ) {\r\n\r\n\t\tthis.passes.push( pass );\r\n\r\n\t\tvar size = this.renderer.getSize();\r\n\t\tpass.setSize( size.width, size.height );\r\n\r\n\t},\r\n\r\n\tinsertPass: function ( pass, index ) {\r\n\r\n\t\tthis.passes.splice( index, 0, pass );\r\n\r\n\t},\r\n\r\n\trender: function ( delta ) {\r\n\r\n\t\tvar maskActive = false;\r\n\r\n\t\tvar pass, i, il = this.passes.length;\r\n\r\n\t\tfor ( i = 0; i < il; i ++ ) {\r\n\r\n\t\t\tpass = this.passes[ i ];\r\n\r\n\t\t\tif ( pass.enabled === false ) continue;\r\n\r\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, delta, maskActive );\r\n\r\n\t\t\tif ( pass.needsSwap ) {\r\n\r\n\t\t\t\tif ( maskActive ) {\r\n\r\n\t\t\t\t\tvar context = this.renderer.context;\r\n\r\n\t\t\t\t\tcontext.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\r\n\r\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, delta );\r\n\r\n\t\t\t\t\tcontext.stencilFunc( context.EQUAL, 1, 0xffffffff );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.swapBuffers();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( THREE.MaskPass !== undefined ) {\r\n\r\n\t\t\t\tif ( pass instanceof THREE.MaskPass ) {\r\n\r\n\t\t\t\t\tmaskActive = true;\r\n\r\n\t\t\t\t} else if ( pass instanceof THREE.ClearMaskPass ) {\r\n\r\n\t\t\t\t\tmaskActive = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\treset: function ( renderTarget ) {\r\n\r\n\t\tif ( renderTarget === undefined ) {\r\n\r\n\t\t\tvar size = this.renderer.getSize();\r\n\r\n\t\t\trenderTarget = this.renderTarget1.clone();\r\n\t\t\trenderTarget.setSize( size.width, size.height );\r\n\r\n\t\t}\r\n\r\n\t\tthis.renderTarget1.dispose();\r\n\t\tthis.renderTarget2.dispose();\r\n\t\tthis.renderTarget1 = renderTarget;\r\n\t\tthis.renderTarget2 = renderTarget.clone();\r\n\r\n\t\tthis.writeBuffer = this.renderTarget1;\r\n\t\tthis.readBuffer = this.renderTarget2;\r\n\r\n\t},\r\n\r\n\tsetSize: function ( width, height ) {\r\n\r\n\t\tthis.renderTarget1.setSize( width, height );\r\n\t\tthis.renderTarget2.setSize( width, height );\r\n\r\n\t\tfor ( var i = 0; i < this.passes.length; i ++ ) {\r\n\r\n\t\t\tthis.passes[i].setSize( width, height );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\nTHREE.Pass = function () {\r\n\r\n\t// if set to true, the pass is processed by the composer\r\n\tthis.enabled = true;\r\n\r\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\r\n\tthis.needsSwap = true;\r\n\r\n\t// if set to true, the pass clears its buffer before rendering\r\n\tthis.clear = false;\r\n\r\n\t// if set to true, the result of the pass is rendered to screen\r\n\tthis.renderToScreen = false;\r\n\r\n};\r\n\r\nObject.assign( THREE.Pass.prototype, {\r\n\r\n\tsetSize: function( width, height ) {},\r\n\r\n\trender: function ( renderer, writeBuffer, readBuffer, delta, maskActive ) {\r\n\r\n\t\tconsole.error( \"THREE.Pass: .render() must be implemented in derived pass.\" );\r\n\r\n\t}\r\n\r\n} );","'use strict';\r\n\r\nvar THREE = require('three');\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.MaskPass = function ( scene, camera ) {\r\n\r\n\tTHREE.Pass.call( this );\r\n\r\n\tthis.scene = scene;\r\n\tthis.camera = camera;\r\n\r\n\tthis.clear = true;\r\n\tthis.needsSwap = false;\r\n\r\n\tthis.inverse = false;\r\n\r\n};\r\n\r\nTHREE.MaskPass.prototype = Object.assign( Object.create( THREE.Pass.prototype ), {\r\n\r\n\tconstructor: THREE.MaskPass,\r\n\r\n\trender: function ( renderer, writeBuffer, readBuffer, delta, maskActive ) {\r\n\r\n\t\tvar context = renderer.context;\r\n\t\tvar state = renderer.state;\r\n\r\n\t\t// don't update color or depth\r\n\r\n\t\tstate.buffers.color.setMask( false );\r\n\t\tstate.buffers.depth.setMask( false );\r\n\r\n\t\t// lock buffers\r\n\r\n\t\tstate.buffers.color.setLocked( true );\r\n\t\tstate.buffers.depth.setLocked( true );\r\n\r\n\t\t// set up stencil\r\n\r\n\t\tvar writeValue, clearValue;\r\n\r\n\t\tif ( this.inverse ) {\r\n\r\n\t\t\twriteValue = 0;\r\n\t\t\tclearValue = 1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\twriteValue = 1;\r\n\t\t\tclearValue = 0;\r\n\r\n\t\t}\r\n\r\n\t\tstate.buffers.stencil.setTest( true );\r\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\r\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\r\n\t\tstate.buffers.stencil.setClear( clearValue );\r\n\r\n\t\t// draw into the stencil buffer\r\n\r\n\t\trenderer.render( this.scene, this.camera, readBuffer, this.clear );\r\n\t\trenderer.render( this.scene, this.camera, writeBuffer, this.clear );\r\n\r\n\t\t// unlock color and depth buffer for subsequent rendering\r\n\r\n\t\tstate.buffers.color.setLocked( false );\r\n\t\tstate.buffers.depth.setLocked( false );\r\n\r\n\t\t// only render where stencil is set to 1\r\n\r\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff );  // draw if == 1\r\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\nTHREE.ClearMaskPass = function () {\r\n\r\n\tTHREE.Pass.call( this );\r\n\r\n\tthis.needsSwap = false;\r\n\r\n};\r\n\r\nTHREE.ClearMaskPass.prototype = Object.create( THREE.Pass.prototype );\r\n\r\nObject.assign( THREE.ClearMaskPass.prototype, {\r\n\r\n\trender: function ( renderer, writeBuffer, readBuffer, delta, maskActive ) {\r\n\r\n\t\trenderer.state.buffers.stencil.setTest( false );\r\n\r\n\t}\r\n\r\n} );","'use strict';\r\n\r\nvar THREE = require('three');\r\n\r\n/**\r\n * @author qiao / https://github.com/qiao\r\n * @author mrdoob / http://mrdoob.com\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author erich666 / http://erichaines.com\r\n */\r\n/*global THREE, console */\r\n\r\n// This set of controls performs orbiting, dollying (zooming), and panning. It maintains\r\n// the \"up\" direction as +Y, unlike the TrackballControls. Touch on tablet and phones is\r\n// supported.\r\n//\r\n//    Orbit - left mouse / touch: one finger move\r\n//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\r\n//    Pan - right mouse, or arrow keys / touch: three finter swipe\r\n//\r\n// This is a drop-in replacement for (most) TrackballControls used in examples.\r\n// That is, include this js file and wherever you see:\r\n//    \tcontrols = new THREE.TrackballControls( camera );\r\n//      controls.target.z = 150;\r\n// Simple substitute \"OrbitControls\" and the control should work as-is.\r\n\r\nTHREE.OrbitControls = function ( object, domElement ) {\r\n\r\n    this.object = object;\r\n    this.domElement = ( domElement !== undefined ) ? domElement : document;\r\n\r\n    // API\r\n\r\n    // Set to false to disable this control\r\n    this.enabled = true;\r\n\r\n    // \"target\" sets the location of focus, where the control orbits around\r\n    // and where it pans with respect to.\r\n    this.target = new THREE.Vector3();\r\n    // center is old, deprecated; use \"target\" instead\r\n    this.center = this.target;\r\n\r\n    // This option actually enables dollying in and out; left as \"zoom\" for\r\n    // backwards compatibility\r\n    this.noZoom = false;\r\n    this.zoomSpeed = 1.0;\r\n    // Limits to how far you can dolly in and out\r\n    this.minDistance = 0;\r\n    this.maxDistance = Infinity;\r\n\r\n    // Set to true to disable this control\r\n    this.noRotate = false;\r\n    this.rotateSpeed = 1.0;\r\n\r\n    // Set to true to disable this control\r\n    this.noPan = false;\r\n    this.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\r\n\r\n    // Set to true to automatically rotate around the target\r\n    this.autoRotate = false;\r\n    this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\r\n\r\n    // How far you can orbit vertically, upper and lower limits.\r\n    // Range is 0 to Math.PI radians.\r\n    this.minPolarAngle = 0; // radians\r\n    this.maxPolarAngle = Math.PI; // radians\r\n\r\n    // Set to true to disable use of the keys\r\n    this.noKeys = false;\r\n    // The four arrow keys\r\n    this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\r\n\r\n    ////////////\r\n    // internals\r\n\r\n    var scope = this;\r\n\r\n    var EPS = 0.000001;\r\n\r\n    var rotateStart = new THREE.Vector2();\r\n    var rotateEnd = new THREE.Vector2();\r\n    var rotateDelta = new THREE.Vector2();\r\n\r\n    var panStart = new THREE.Vector2();\r\n    var panEnd = new THREE.Vector2();\r\n    var panDelta = new THREE.Vector2();\r\n\r\n    var dollyStart = new THREE.Vector2();\r\n    var dollyEnd = new THREE.Vector2();\r\n    var dollyDelta = new THREE.Vector2();\r\n\r\n    var phiDelta = 0;\r\n    var thetaDelta = 0;\r\n    var scale = 1;\r\n    var pan = new THREE.Vector3();\r\n\r\n    var lastPosition = new THREE.Vector3();\r\n\r\n    var STATE = { NONE : -1, ROTATE : 0, DOLLY : 1, PAN : 2, TOUCH_ROTATE : 3, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };\r\n    var state = STATE.NONE;\r\n\r\n    // events\r\n\r\n    var changeEvent = { type: 'change' };\r\n\r\n\r\n    this.rotateLeft = function ( angle ) {\r\n\r\n        if ( angle === undefined ) {\r\n\r\n            angle = getAutoRotationAngle();\r\n\r\n        }\r\n\r\n        thetaDelta -= angle;\r\n\r\n    };\r\n\r\n    this.rotateUp = function ( angle ) {\r\n\r\n        if ( angle === undefined ) {\r\n\r\n            angle = getAutoRotationAngle();\r\n\r\n        }\r\n\r\n        phiDelta -= angle;\r\n\r\n    };\r\n\r\n    // pass in distance in world space to move left\r\n    this.panLeft = function ( distance ) {\r\n\r\n        var panOffset = new THREE.Vector3();\r\n        var te = this.object.matrix.elements;\r\n        // get X column of matrix\r\n        panOffset.set( te[0], te[1], te[2] );\r\n        panOffset.multiplyScalar(-distance);\r\n\r\n        pan.add( panOffset );\r\n\r\n    };\r\n\r\n    // pass in distance in world space to move up\r\n    this.panUp = function ( distance ) {\r\n\r\n        var panOffset = new THREE.Vector3();\r\n        var te = this.object.matrix.elements;\r\n        // get Y column of matrix\r\n        panOffset.set( te[4], te[5], te[6] );\r\n        panOffset.multiplyScalar(distance);\r\n\r\n        pan.add( panOffset );\r\n    };\r\n\r\n    // main entry point; pass in Vector2 of change desired in pixel space,\r\n    // right and down are positive\r\n    this.pan = function ( delta ) {\r\n\r\n        var element = scope.domElement === document ? scope.domElement.body : scope.domElement;\r\n\r\n        if ( scope.object.fov !== undefined ) {\r\n\r\n            // perspective\r\n            var position = scope.object.position;\r\n            var offset = position.clone().sub( scope.target );\r\n            var targetDistance = offset.length();\r\n\r\n            // half of the fov is center to top of screen\r\n            targetDistance *= Math.tan( (scope.object.fov/2) * Math.PI / 180.0 );\r\n            // we actually don't use screenWidth, since perspective camera is fixed to screen height\r\n            scope.panLeft( 2 * delta.x * targetDistance / element.clientHeight );\r\n            scope.panUp( 2 * delta.y * targetDistance / element.clientHeight );\r\n\r\n        } else if ( scope.object.top !== undefined ) {\r\n\r\n            // orthographic\r\n            scope.panLeft( delta.x * (scope.object.right - scope.object.left) / element.clientWidth );\r\n            scope.panUp( delta.y * (scope.object.top - scope.object.bottom) / element.clientHeight );\r\n\r\n        } else {\r\n\r\n            // camera neither orthographic or perspective - warn user\r\n            console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\r\n\r\n        }\r\n\r\n    };\r\n\r\n    this.dollyIn = function ( dollyScale ) {\r\n\r\n        if ( dollyScale === undefined ) {\r\n\r\n            dollyScale = getZoomScale();\r\n\r\n        }\r\n\r\n        scale /= dollyScale;\r\n\r\n    };\r\n\r\n    this.dollyOut = function ( dollyScale ) {\r\n\r\n        if ( dollyScale === undefined ) {\r\n\r\n            dollyScale = getZoomScale();\r\n\r\n        }\r\n\r\n        scale *= dollyScale;\r\n\r\n    };\r\n\r\n    this.update = function () {\r\n\r\n        var position = this.object.position;\r\n        var offset = position.clone().sub( this.target );\r\n\r\n        // angle from z-axis around y-axis\r\n\r\n        var theta = Math.atan2( offset.x, offset.z );\r\n\r\n        // angle from y-axis\r\n\r\n        var phi = Math.atan2( Math.sqrt( offset.x * offset.x + offset.z * offset.z ), offset.y );\r\n\r\n        if ( this.autoRotate ) {\r\n\r\n            this.rotateLeft( getAutoRotationAngle() );\r\n\r\n        }\r\n\r\n        theta += thetaDelta;\r\n        phi += phiDelta;\r\n\r\n        // restrict phi to be between desired limits\r\n        phi = Math.max( this.minPolarAngle, Math.min( this.maxPolarAngle, phi ) );\r\n\r\n        // restrict phi to be betwee EPS and PI-EPS\r\n        phi = Math.max( EPS, Math.min( Math.PI - EPS, phi ) );\r\n\r\n        var radius = offset.length() * scale;\r\n\r\n        // restrict radius to be between desired limits\r\n        radius = Math.max( this.minDistance, Math.min( this.maxDistance, radius ) );\r\n\r\n        // move target to panned location\r\n        this.target.add( pan );\r\n\r\n        offset.x = radius * Math.sin( phi ) * Math.sin( theta );\r\n        offset.y = radius * Math.cos( phi );\r\n        offset.z = radius * Math.sin( phi ) * Math.cos( theta );\r\n\r\n        position.copy( this.target ).add( offset );\r\n\r\n        this.object.lookAt( this.target );\r\n\r\n        thetaDelta = 0;\r\n        phiDelta = 0;\r\n        scale = 1;\r\n        pan.set(0,0,0);\r\n\r\n        if ( lastPosition.distanceTo( this.object.position ) > 0 ) {\r\n\r\n            this.dispatchEvent( changeEvent );\r\n\r\n            lastPosition.copy( this.object.position );\r\n\r\n        }\r\n\r\n    };\r\n\r\n\r\n    function getAutoRotationAngle() {\r\n\r\n        return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\r\n\r\n    }\r\n\r\n    function getZoomScale() {\r\n\r\n        return Math.pow( 0.95, scope.zoomSpeed );\r\n\r\n    }\r\n\r\n    function onMouseDown( event ) {\r\n\r\n        if ( scope.enabled === false ) { return; }\r\n        event.preventDefault();\r\n\r\n        if ( event.button === 0 ) {\r\n            if ( scope.noRotate === true ) { return; }\r\n\r\n            state = STATE.ROTATE;\r\n\r\n            rotateStart.set( event.clientX, event.clientY );\r\n\r\n        } else if ( event.button === 1 ) {\r\n            if ( scope.noZoom === true ) { return; }\r\n\r\n            state = STATE.DOLLY;\r\n\r\n            dollyStart.set( event.clientX, event.clientY );\r\n\r\n        } else if ( event.button === 2 ) {\r\n            if ( scope.noPan === true ) { return; }\r\n\r\n            state = STATE.PAN;\r\n\r\n            panStart.set( event.clientX, event.clientY );\r\n\r\n        }\r\n\r\n        // Greggman fix: https://github.com/greggman/three.js/commit/fde9f9917d6d8381f06bf22cdff766029d1761be\r\n        scope.domElement.addEventListener( 'mousemove', onMouseMove, false );\r\n        scope.domElement.addEventListener( 'mouseup', onMouseUp, false );\r\n\r\n    }\r\n\r\n    function onMouseMove( event ) {\r\n\r\n        if ( scope.enabled === false ) return;\r\n\r\n        event.preventDefault();\r\n\r\n        var element = scope.domElement === document ? scope.domElement.body : scope.domElement;\r\n\r\n        if ( state === STATE.ROTATE ) {\r\n\r\n            if ( scope.noRotate === true ) return;\r\n\r\n            rotateEnd.set( event.clientX, event.clientY );\r\n            rotateDelta.subVectors( rotateEnd, rotateStart );\r\n\r\n            // rotating across whole screen goes 360 degrees around\r\n            scope.rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\r\n            // rotating up and down along whole screen attempts to go 360, but limited to 180\r\n            scope.rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\r\n\r\n            rotateStart.copy( rotateEnd );\r\n\r\n        } else if ( state === STATE.DOLLY ) {\r\n\r\n            if ( scope.noZoom === true ) return;\r\n\r\n            dollyEnd.set( event.clientX, event.clientY );\r\n            dollyDelta.subVectors( dollyEnd, dollyStart );\r\n\r\n            if ( dollyDelta.y > 0 ) {\r\n\r\n                scope.dollyIn();\r\n\r\n            } else {\r\n\r\n                scope.dollyOut();\r\n\r\n            }\r\n\r\n            dollyStart.copy( dollyEnd );\r\n\r\n        } else if ( state === STATE.PAN ) {\r\n\r\n            if ( scope.noPan === true ) return;\r\n\r\n            panEnd.set( event.clientX, event.clientY );\r\n            panDelta.subVectors( panEnd, panStart );\r\n\r\n            scope.pan( panDelta );\r\n\r\n            panStart.copy( panEnd );\r\n\r\n        }\r\n\r\n        // Greggman fix: https://github.com/greggman/three.js/commit/fde9f9917d6d8381f06bf22cdff766029d1761be\r\n        scope.update();\r\n\r\n    }\r\n\r\n    function onMouseUp( /* event */ ) {\r\n\r\n        if ( scope.enabled === false ) return;\r\n\r\n        // Greggman fix: https://github.com/greggman/three.js/commit/fde9f9917d6d8381f06bf22cdff766029d1761be\r\n        scope.domElement.removeEventListener( 'mousemove', onMouseMove, false );\r\n        scope.domElement.removeEventListener( 'mouseup', onMouseUp, false );\r\n\r\n        state = STATE.NONE;\r\n\r\n    }\r\n\r\n    function onMouseWheel( event ) {\r\n\r\n        if ( scope.enabled === false || scope.noZoom === true ) return;\r\n\r\n        var delta = 0;\r\n\r\n        if ( event.wheelDelta ) { // WebKit / Opera / Explorer 9\r\n\r\n            delta = event.wheelDelta;\r\n\r\n        } else if ( event.detail ) { // Firefox\r\n\r\n            delta = - event.detail;\r\n\r\n        }\r\n\r\n        if ( delta > 0 ) {\r\n\r\n            scope.dollyOut();\r\n\r\n        } else {\r\n\r\n            scope.dollyIn();\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function onKeyDown( event ) {\r\n\r\n        if ( scope.enabled === false ) { return; }\r\n        if ( scope.noKeys === true ) { return; }\r\n        if ( scope.noPan === true ) { return; }\r\n\r\n        // pan a pixel - I guess for precise positioning?\r\n        // Greggman fix: https://github.com/greggman/three.js/commit/fde9f9917d6d8381f06bf22cdff766029d1761be\r\n        var needUpdate = false;\r\n\r\n        switch ( event.keyCode ) {\r\n\r\n            case scope.keys.UP:\r\n                scope.pan( new THREE.Vector2( 0, scope.keyPanSpeed ) );\r\n                needUpdate = true;\r\n                break;\r\n            case scope.keys.BOTTOM:\r\n                scope.pan( new THREE.Vector2( 0, -scope.keyPanSpeed ) );\r\n                needUpdate = true;\r\n                break;\r\n            case scope.keys.LEFT:\r\n                scope.pan( new THREE.Vector2( scope.keyPanSpeed, 0 ) );\r\n                needUpdate = true;\r\n                break;\r\n            case scope.keys.RIGHT:\r\n                scope.pan( new THREE.Vector2( -scope.keyPanSpeed, 0 ) );\r\n                needUpdate = true;\r\n                break;\r\n        }\r\n\r\n        // Greggman fix: https://github.com/greggman/three.js/commit/fde9f9917d6d8381f06bf22cdff766029d1761be\r\n        if ( needUpdate ) {\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function touchstart( event ) {\r\n\r\n        if ( scope.enabled === false ) { return; }\r\n\r\n        switch ( event.touches.length ) {\r\n\r\n            case 1:\t// one-fingered touch: rotate\r\n                if ( scope.noRotate === true ) { return; }\r\n\r\n                state = STATE.TOUCH_ROTATE;\r\n\r\n                rotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\r\n                break;\r\n\r\n            case 2:\t// two-fingered touch: dolly\r\n                if ( scope.noZoom === true ) { return; }\r\n\r\n                state = STATE.TOUCH_DOLLY;\r\n\r\n                var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\r\n                var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\r\n                var distance = Math.sqrt( dx * dx + dy * dy );\r\n                dollyStart.set( 0, distance );\r\n                break;\r\n\r\n            case 3: // three-fingered touch: pan\r\n                if ( scope.noPan === true ) { return; }\r\n\r\n                state = STATE.TOUCH_PAN;\r\n\r\n                panStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\r\n                break;\r\n\r\n            default:\r\n                state = STATE.NONE;\r\n\r\n        }\r\n    }\r\n\r\n    function touchmove( event ) {\r\n\r\n        if ( scope.enabled === false ) { return; }\r\n\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        var element = scope.domElement === document ? scope.domElement.body : scope.domElement;\r\n\r\n        switch ( event.touches.length ) {\r\n\r\n            case 1: // one-fingered touch: rotate\r\n                if ( scope.noRotate === true ) { return; }\r\n                if ( state !== STATE.TOUCH_ROTATE ) { return; }\r\n\r\n                rotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\r\n                rotateDelta.subVectors( rotateEnd, rotateStart );\r\n\r\n                // rotating across whole screen goes 360 degrees around\r\n                scope.rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\r\n                // rotating up and down along whole screen attempts to go 360, but limited to 180\r\n                scope.rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\r\n\r\n                rotateStart.copy( rotateEnd );\r\n                break;\r\n\r\n            case 2: // two-fingered touch: dolly\r\n                if ( scope.noZoom === true ) { return; }\r\n                if ( state !== STATE.TOUCH_DOLLY ) { return; }\r\n\r\n                var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\r\n                var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\r\n                var distance = Math.sqrt( dx * dx + dy * dy );\r\n\r\n                dollyEnd.set( 0, distance );\r\n                dollyDelta.subVectors( dollyEnd, dollyStart );\r\n\r\n                if ( dollyDelta.y > 0 ) {\r\n\r\n                    scope.dollyOut();\r\n\r\n                } else {\r\n\r\n                    scope.dollyIn();\r\n\r\n                }\r\n\r\n                dollyStart.copy( dollyEnd );\r\n                break;\r\n\r\n            case 3: // three-fingered touch: pan\r\n                if ( scope.noPan === true ) { return; }\r\n                if ( state !== STATE.TOUCH_PAN ) { return; }\r\n\r\n                panEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\r\n                panDelta.subVectors( panEnd, panStart );\r\n\r\n                scope.pan( panDelta );\r\n\r\n                panStart.copy( panEnd );\r\n                break;\r\n\r\n            default:\r\n                state = STATE.NONE;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function touchend( /* event */ ) {\r\n\r\n        if ( scope.enabled === false ) { return; }\r\n\r\n        state = STATE.NONE;\r\n    }\r\n\r\n    this.domElement.addEventListener( 'contextmenu', function ( event ) { event.preventDefault(); }, false );\r\n    this.domElement.addEventListener( 'mousedown', onMouseDown, false );\r\n    this.domElement.addEventListener( 'mousewheel', onMouseWheel, false );\r\n    this.domElement.addEventListener( 'DOMMouseScroll', onMouseWheel, false ); // firefox\r\n\r\n    this.domElement.addEventListener( 'keydown', onKeyDown, false );\r\n\r\n    this.domElement.addEventListener( 'touchstart', touchstart, false );\r\n    this.domElement.addEventListener( 'touchend', touchend, false );\r\n    this.domElement.addEventListener( 'touchmove', touchmove, false );\r\n\r\n};\r\n\r\nTHREE.OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );","'use strict';\r\n\r\nvar THREE = require('three');\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.RenderPass = function ( scene, camera, overrideMaterial, clearColor, clearAlpha ) {\r\n\r\n\tTHREE.Pass.call( this );\r\n\r\n\tthis.scene = scene;\r\n\tthis.camera = camera;\r\n\r\n\tthis.overrideMaterial = overrideMaterial;\r\n\r\n\tthis.clearColor = clearColor;\r\n\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;\r\n\r\n\tthis.clear = true;\r\n\tthis.needsSwap = false;\r\n\r\n};\r\n\r\nTHREE.RenderPass.prototype = Object.assign( Object.create( THREE.Pass.prototype ), {\r\n\r\n\tconstructor: THREE.RenderPass,\r\n\r\n\trender: function ( renderer, writeBuffer, readBuffer, delta, maskActive ) {\r\n\r\n\t\tthis.scene.overrideMaterial = this.overrideMaterial;\r\n\r\n\t\tvar oldClearColor, oldClearAlpha;\r\n\r\n\t\tif ( this.clearColor ) {\r\n\r\n\t\t\toldClearColor = renderer.getClearColor().getHex();\r\n\t\t\toldClearAlpha = renderer.getClearAlpha();\r\n\r\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\r\n\r\n\t\t}\r\n\r\n\t\trenderer.render( this.scene, this.camera, this.renderToScreen ? null : readBuffer, this.clear );\r\n\r\n\t\tif ( this.clearColor ) {\r\n\r\n\t\t\trenderer.setClearColor( oldClearColor, oldClearAlpha );\r\n\r\n\t\t}\r\n\r\n\t\tthis.scene.overrideMaterial = null;\r\n\r\n\t}\r\n\r\n} );","'use strict';\r\n\r\nvar THREE = require('three');\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.ShaderPass = function ( shader, textureID ) {\r\n\r\n\tTHREE.Pass.call( this );\r\n\r\n\tthis.textureID = ( textureID !== undefined ) ? textureID : \"tDiffuse\";\r\n\r\n\tif ( shader instanceof THREE.ShaderMaterial ) {\r\n\r\n\t\tthis.uniforms = shader.uniforms;\r\n\r\n\t\tthis.material = shader;\r\n\r\n\t} else if ( shader ) {\r\n\r\n\t\tthis.uniforms = THREE.UniformsUtils.clone( shader.uniforms );\r\n\r\n\t\tthis.material = new THREE.ShaderMaterial( {\r\n\r\n\t\t\tdefines: shader.defines || {},\r\n\t\t\tuniforms: this.uniforms,\r\n\t\t\tvertexShader: shader.vertexShader,\r\n\t\t\tfragmentShader: shader.fragmentShader\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tthis.camera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\r\n\tthis.scene = new THREE.Scene();\r\n\r\n\tthis.quad = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), null );\r\n\tthis.scene.add( this.quad );\r\n\r\n};\r\n\r\nTHREE.ShaderPass.prototype = Object.assign( Object.create( THREE.Pass.prototype ), {\r\n\r\n\tconstructor: THREE.ShaderPass,\r\n\r\n\trender: function( renderer, writeBuffer, readBuffer, delta, maskActive ) {\r\n\r\n\t\tif ( this.uniforms[ this.textureID ] ) {\r\n\r\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\r\n\r\n\t\t}\r\n\r\n\t\tthis.quad.material = this.material;\r\n\r\n\t\tif ( this.renderToScreen ) {\r\n\r\n\t\t\trenderer.render( this.scene, this.camera );\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderer.render( this.scene, this.camera, writeBuffer, this.clear );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n} );","'use strict';\r\n\r\nvar THREE = require('three');\r\nvar TweemMax = require('../vendor/TweenMax.min.js');\r\n\r\nvar OrbitControls = require('../libs/OrbitControls.js');\r\n\r\nvar CopyShader = require('../shaders/CopyShader.js');\r\nvar DotScreenShader = require('../shaders/DotScreenShader.js');\r\nvar RGBShiftShader = require('../shaders/RGBShiftShader.js');\r\nvar DigitalGlitch = require('../shaders/DigitalGlitch.js');\r\nvar FilmShader = require('../shaders/FilmShader.js');\r\nvar BadTv = require('../shaders/BadTv.js');\r\nvar FilmShader = require('../shaders/FilmShader.js');\r\n\r\nvar EffectComposer = require('../libs/EffectComposer.js');\r\nvar RenderPass = require('../libs/RenderPass.js');\r\nvar MaskPass = require('../libs/MaskPass.js');\r\nvar ShaderPass = require('../libs/ShaderPass.js');\r\n\r\nvar Scene = function() {\r\n  \r\n  this.renderer = new THREE.WebGLRenderer({alpha: true});\r\n  this.renderer.setPixelRatio(window.devicePixelRatio);\r\n  this.renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n  document.body.appendChild(this.renderer.domElement);\r\n\r\n  this.camera = new THREE.PerspectiveCamera(70, (window.innerWidth / window.innerHeight), 1, 1000);\r\n  //this.camera.position.z = 50;\r\n  this.camera.position.z = 400;\r\n\r\n  this.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);\r\n  this.controls.autoRotate = true;\r\n\r\n  this.getLights();\r\n  this.getObjects();\r\n  \r\n  this.tempTimer = 0;\r\n\r\n};\r\n\r\nScene.prototype.init = function() {\r\n  //this.createBg();\r\n  this.sphereElement();\r\n  this.getShaders();\r\n  this.getAudio();\r\n\r\n  requestAnimationFrame(this.animate.bind(this));\r\n\r\n  // on resize\r\n  window.addEventListener('resize', this._onResize.bind(this));\r\n\r\n  TweenMax.to(document.querySelector('.bg'), 2000, {\r\n    rotation: 1080,\r\n    yoyo: true,\r\n    repeat: -1,\r\n    ease: Power1.easeOut\r\n  });\r\n};\r\n\r\nScene.prototype.animate = function() {\r\n  requestAnimationFrame(this.animate.bind(this));\r\n  var time = Date.now();\r\n\r\n  this.update(time);\r\n\r\n  this.renderer.render(this.scene, this.camera);\r\n};\r\n\r\nScene.prototype.update = function(time) {\r\n  var diff = time - this.lastTime;\r\n  this.lastTime = time;\r\n\r\n  if (!this.lastTime) {\r\n    this.lastTime = time;\r\n    \r\n    return;\r\n  }  \r\n\r\n  this.object.rotation.x += 0.0025;\r\n  this.object.rotation.y += 0.001;\r\n  this.partSystem.rotation.y = time * 0.0005;\r\n\r\n  this.controls.update()\r\n  this.composer.render();\r\n  this.updateVisual();\r\n\r\n};\r\n\r\nScene.prototype.updateVisual = function() {\r\n  var array = new Uint8Array(this.analyser.frequencyBinCount);\r\n  var visualElement = this.scene.getObjectByName('particlez');\r\n  var visualElement2 = this.scene.getObjectByName('myScene');\r\n  this.analyser.getByteFrequencyData(array);\r\n  var average = this._getAverageVolume(array);\r\n\r\n  if (visualElement || visualElement2) {\r\n    visualElement.scale.y = average / 70;\r\n    visualElement.scale.x = average / 70;\r\n    visualElement.scale.z = average / 60;\r\n\r\n    this.rgbEffect.uniforms['amount'].value = average / 300;\r\n    this.rgbEffect.uniforms['angle'].value = average / 100;\r\n    this.dotEffect.uniforms['scale'].value = average / 20;\r\n    this.glitchEffect.uniforms['nIntensity'].value = average / 2000;\r\n    \r\n    this.bgMesh.rotation.z = average / 2000;\r\n    this.object.rotation.x = average / 2000;\r\n    this.object.rotation.y = average / 2000;\r\n  }\r\n\r\n};\r\n\r\nScene.prototype.getAudio = function() {\r\n  var context = new AudioContext();\r\n  this.analyser = context.createAnalyser();\r\n  this.analyser.smoothingTimeConstant = 0.4;\r\n  this.analyser.fftSize = 1024;\r\n\r\n  this.analyser2 = context.createAnalyser();\r\n  this.analyser2.smoothingTimeConstant = 0.4;\r\n  this.analyser2.fftSize = 1024;\r\n\r\n  var sourceNode = context.createBufferSource();\r\n  var splitter = context.createChannelSplitter();\r\n\r\n  sourceNode.connect(splitter);\r\n\r\n  splitter.connect(this.analyser, 0);\r\n  splitter.connect(this.analyser2, 1);\r\n\r\n  sourceNode.connect(context.destination);\r\n\r\n  var request = new XMLHttpRequest();\r\n  request.open('GET', 'audio/wham.mp3', true);\r\n  request.crossOrigin = 'anonymous';\r\n  request.responseType = 'arraybuffer';\r\n\r\n  var songBuffer;\r\n  \r\n  request.onload = function() {\r\n    context.decodeAudioData(request.response, function(buffer) {\r\n      songBuffer = buffer;\r\n\r\n      var dur = buffer.duration;\r\n\r\n      sourceNode.buffer = buffer;\r\n      sourceNode.start(0);\r\n      sourceNode.loop = true;\r\n      sourceNode.muted = true;\r\n\r\n    }, this._onError);\r\n  }.bind(this);\r\n\r\n  request.send();\r\n};\r\n\r\nScene.prototype.getObjects = function() {\r\n  this.object = new THREE.Object3D();\r\n  this.scene.add(this.object);\r\n\r\n  this.object.name = 'myScene';\r\n\r\n  var geometry = new THREE.SphereGeometry( 1, 32, 32 );\r\n  var material = new THREE.MeshPhongMaterial( { color: 0xffffff, shading: THREE.FlatShading } );\r\n\r\n  for ( var i = 0; i < 100; i ++ ) {\r\n\r\n    var mesh = new THREE.Mesh( geometry, material );\r\n    mesh.position.set( Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5 ).normalize();\r\n    mesh.position.multiplyScalar( Math.random() * 400 );\r\n    mesh.rotation.set( Math.random() * 2, Math.random() * 2, Math.random() * 2 );\r\n    mesh.scale.x = mesh.scale.y = mesh.scale.z = Math.random() * 50;\r\n    this.object.add( mesh );\r\n\r\n  }\r\n\r\n};\r\n\r\nScene.prototype.sphereElement = function() {\r\n  var sphereGeometry = new THREE.SphereGeometry(4, 12, 12);\r\n\r\n  var particleBlock = new THREE.PointsMaterial({\r\n    color: 0x665fc6,\r\n    size: 1.0,\r\n    transparent: true\r\n  });\r\n\r\n  particleBlock.blending = THREE.AdditiveBlending;\r\n  \r\n  this.partSystem = new THREE.Points(sphereGeometry, particleBlock);\r\n  this.partSystem.softParticles = true;\r\n  this.partSystem.name = 'particlez';\r\n  // this.partSystem.position.x = -2;\r\n  // this.partSystem.position.y = 2;\r\n  this.partSystem.position.set(0, 0, 100);\r\n  this.scene.add(this.partSystem);\r\n  document.body.appendChild(this.renderer.domElement);\r\n};\r\n\r\nScene.prototype.getLights = function() {\r\n  this.scene = new THREE.Scene();\r\n  this.scene.fog = new THREE.Fog(0x000000, 1, 1000);\r\n\r\n  this.scene.add(new THREE.AmbientLight(0x222222 ));\r\n\r\n  var light = new THREE.DirectionalLight(0xffffff);\r\n  light.position.set(1, 1, 1);\r\n  this.scene.add(light);\r\n};\r\n\r\nScene.prototype.createBg = function() {\r\n  var geometry = new THREE.SphereGeometry(150, 32, 32);\r\n  var texture = new THREE.TextureLoader().load('images/bg.jpg');\r\n  var material = new THREE.MeshBasicMaterial({\r\n    map: texture,\r\n    side: THREE.BackSide\r\n  });\r\n\r\n  this.bgMesh = new THREE.Mesh(geometry, material);\r\n\r\n  this.scene.add(this.bgMesh);\r\n};\r\n\r\n// postprocessing\r\nScene.prototype.getShaders = function() {\r\n  \r\n  this.composer = new THREE.EffectComposer(this.renderer);\r\n  this.composer.addPass( new THREE.RenderPass(this.scene, this.camera));\r\n\r\n  this.dotEffect = new THREE.ShaderPass(THREE.DotScreenShader);\r\n  this.dotEffect.uniforms['scale'].value = 4;\r\n  //this.dotEffect.uniforms['scale'].value = 200;\r\n  //this.dotEffect.renderToScreen = true;\r\n  this.composer.addPass(this.dotEffect);\r\n\r\n  this.glitchEffect = new THREE.ShaderPass(THREE.FilmShader);\r\n  this.glitchEffect.uniforms['nIntensity'].value = 0.5;\r\n  this.glitchEffect.uniforms['sIntensity'].value = 0.05;\r\n  //this.glitchEffect.renderToScreen = true;\r\n  this.composer.addPass(this.glitchEffect);\r\n\r\n  this.badTVEffect = new THREE.ShaderPass(THREE.BadTVShader);\r\n  this.badTVEffect.uniforms['speed'].value = 10;\r\n  this.badTVEffect.uniforms['rollSpeed'].value = 20;\r\n  //this.badTVEffect.renderToScreen = true;\r\n  this.composer.addPass(this.badTVEffect);\r\n\r\n  this.rgbEffect = new THREE.ShaderPass(THREE.RGBShiftShader);\r\n  this.rgbEffect.uniforms['amount'].value = 20;\r\n  this.rgbEffect.renderToScreen = true;\r\n  this.composer.addPass(this.rgbEffect);\r\n\r\n};\r\n\r\nScene.prototype._getAverageVolume = function(array) {\r\n  var values = 0;\r\n  var average;\r\n  var length = array.length;\r\n\r\n  for (var i = 0; i < length; i++) {\r\n    values += array[i];\r\n  }\r\n\r\n  average = values / length;\r\n\r\n  return average;\r\n};\r\n\r\nScene.prototype._onResize = function() {\r\n  this.camera.aspect = window.innerWidth / window.innerHeight;\r\n  this.camera.updateProjectionMatrix();\r\n  this.renderer.setSize( window.innerWidth, window.innerHeight );\r\n  this.composer.setSize( window.innerWidth, window.innerHeight );\r\n};\r\n\r\nScene.prototype._onError = function(e) {\r\n  console.log(e);\r\n};\r\n\r\nmodule.exports = Scene;","'use strict';\r\n\r\nvar THREE = require('three');\r\n\r\n/**\r\n * @author Felix Turner / www.airtight.cc / @felixturner\r\n *\r\n * Bad TV Shader\r\n * Simulates a bad TV via horizontal distortion and vertical roll\r\n * Uses Ashima WebGl Noise: https://github.com/ashima/webgl-noise\r\n *\r\n * time: steadily increasing float passed in\r\n * distortion: amount of thick distortion\r\n * distortion2: amount of fine grain distortion\r\n * speed: distortion vertical travel speed\r\n * rollSpeed: vertical roll speed\r\n *\r\n * The MIT License\r\n *\r\n * Copyright (c) 2014 Felix Turner\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n\r\nTHREE.BadTVShader = {\r\n  uniforms: {\r\n    \"tDiffuse\":    { type: \"t\", value: null },\r\n    \"time\":        { type: \"f\", value: 0.0 },\r\n    \"distortion\":  { type: \"f\", value: 0.5 },\r\n    \"distortion2\": { type: \"f\", value: 1.5 },\r\n    \"speed\":       { type: \"f\", value: 0.5 },\r\n    \"rollSpeed\":   { type: \"f\", value: 0.0 },\r\n  },\r\n\r\n  vertexShader: [\r\n    \"varying vec2 vUv;\",\r\n    \"void main() {\",\r\n    \"vUv = uv;\",\r\n    \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n    \"}\"\r\n\r\n  ].join(\"\\n\"),\r\n\r\n  fragmentShader: [\r\n\r\n    \"uniform sampler2D tDiffuse;\",\r\n    \"uniform float time;\",\r\n    \"uniform float distortion;\",\r\n    \"uniform float distortion2;\",\r\n    \"uniform float speed;\",\r\n    \"uniform float rollSpeed;\",\r\n    \"varying vec2 vUv;\",\r\n\r\n    // Start Ashima 2D Simplex Noise\r\n\r\n    \"vec3 mod289(vec3 x) {\",\r\n    \"  return x - floor(x * (1.0 / 289.0)) * 289.0;\",\r\n    \"}\",\r\n\r\n    \"vec2 mod289(vec2 x) {\",\r\n    \"  return x - floor(x * (1.0 / 289.0)) * 289.0;\",\r\n    \"}\",\r\n\r\n    \"vec3 permute(vec3 x) {\",\r\n    \"  return mod289(((x*34.0)+1.0)*x);\",\r\n    \"}\",\r\n\r\n    \"float snoise(vec2 v)\",\r\n    \"  {\",\r\n    \"  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\",\r\n    \"                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\",\r\n    \"                     -0.577350269189626,  // -1.0 + 2.0 * C.x\",\r\n    \"                      0.024390243902439); // 1.0 / 41.0\",\r\n    \"  vec2 i  = floor(v + dot(v, C.yy) );\",\r\n    \"  vec2 x0 = v -   i + dot(i, C.xx);\",\r\n\r\n    \"  vec2 i1;\",\r\n    \"  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\",\r\n    \"  vec4 x12 = x0.xyxy + C.xxzz;\",\r\n    \" x12.xy -= i1;\",\r\n\r\n    \"  i = mod289(i); // Avoid truncation effects in permutation\",\r\n    \"  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\",\r\n    \"   + i.x + vec3(0.0, i1.x, 1.0 ));\",\r\n\r\n    \"  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\",\r\n    \"  m = m*m ;\",\r\n    \"  m = m*m ;\",\r\n\r\n    \"  vec3 x = 2.0 * fract(p * C.www) - 1.0;\",\r\n    \"  vec3 h = abs(x) - 0.5;\",\r\n    \"  vec3 ox = floor(x + 0.5);\",\r\n    \"  vec3 a0 = x - ox;\",\r\n\r\n    \"  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\",\r\n\r\n    \"  vec3 g;\",\r\n    \"  g.x  = a0.x  * x0.x  + h.x  * x0.y;\",\r\n    \"  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\",\r\n    \"  return 130.0 * dot(m, g);\",\r\n    \"}\",\r\n\r\n    // End Ashima 2D Simplex Noise\r\n\r\n    \"void main() {\",\r\n\r\n      \"vec2 p = vUv;\",\r\n      \"float ty = time*speed;\",\r\n      \"float yt = p.y - ty;\",\r\n\r\n      //smooth distortion\r\n      \"float offset = snoise(vec2(yt*3.0,0.0))*0.2;\",\r\n      // boost distortion\r\n      \"offset = pow( offset*distortion,3.0)/distortion;\",\r\n      //add fine grain distortion\r\n      \"offset += snoise(vec2(yt*50.0,0.0))*distortion2*0.001;\",\r\n      //combine distortion on X with roll on Y\r\n      \"gl_FragColor = texture2D(tDiffuse,  vec2(fract(p.x + offset),fract(p.y-time*rollSpeed) ));\",\r\n\r\n    \"}\"\r\n\r\n  ].join(\"\\n\")\r\n\r\n};","'use strict';\r\n\r\nvar THREE = require('three');\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * Full-screen textured quad shader\r\n */\r\n\r\nTHREE.CopyShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t\"tDiffuse\": { value: null },\r\n\t\t\"opacity\":  { value: 1.0 }\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\t\"vUv = uv;\",\r\n\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" ),\r\n\r\n\tfragmentShader: [\r\n\r\n\t\t\"uniform float opacity;\",\r\n\r\n\t\t\"uniform sampler2D tDiffuse;\",\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\t\"vec4 texel = texture2D( tDiffuse, vUv );\",\r\n\t\t\t\"gl_FragColor = opacity * texel;\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" )\r\n\r\n};","'use strict';\n\nvar THREE = require('three');\n\n/**\n * @author felixturner / http://airtight.cc/\n *\n * RGB Shift Shader\n * Shifts red and blue channels from center in opposite directions\n * Ported from http://kriss.cx/tom/2009/05/rgb-shift/\n * by Tom Butterworth / http://kriss.cx/tom/\n *\n * amount: shift distance (1 is width of input)\n * angle: shift angle in radians\n */\n\nTHREE.DigitalGlitch = {\n\n\tuniforms: {\n\n\t\t\"tDiffuse\":\t\t{ value: null },//diffuse texture\n\t\t\"tDisp\":\t\t{ value: null },//displacement texture for digital glitch squares\n\t\t\"byp\":\t\t\t{ value: 0 },//apply the glitch ?\n\t\t\"amount\":\t\t{ value: 0.08 },\n\t\t\"angle\":\t\t{ value: 0.02 },\n\t\t\"seed\":\t\t\t{ value: 0.02 },\n\t\t\"seed_x\":\t\t{ value: 0.02 },//-1,1\n\t\t\"seed_y\":\t\t{ value: 0.02 },//-1,1\n\t\t\"distortion_x\":\t{ value: 0.5 },\n\t\t\"distortion_y\":\t{ value: 0.6 },\n\t\t\"col_s\":\t\t{ value: 0.05 }\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\t\t\"void main() {\",\n\t\t\t\"vUv = uv;\",\n\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\t\t\"}\"\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\t\t\"uniform int byp;\",//should we apply the glitch ?\n\t\t\n\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\"uniform sampler2D tDisp;\",\n\t\t\n\t\t\"uniform float amount;\",\n\t\t\"uniform float angle;\",\n\t\t\"uniform float seed;\",\n\t\t\"uniform float seed_x;\",\n\t\t\"uniform float seed_y;\",\n\t\t\"uniform float distortion_x;\",\n\t\t\"uniform float distortion_y;\",\n\t\t\"uniform float col_s;\",\n\t\t\t\n\t\t\"varying vec2 vUv;\",\n\t\t\n\t\t\n\t\t\"float rand(vec2 co){\",\n\t\t\t\"return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\",\n\t\t\"}\",\n\t\t\t\t\n\t\t\"void main() {\",\n\t\t\t\"if(byp<1) {\",\n\t\t\t\t\"vec2 p = vUv;\",\n\t\t\t\t\"float xs = floor(gl_FragCoord.x / 0.5);\",\n\t\t\t\t\"float ys = floor(gl_FragCoord.y / 0.5);\",\n\t\t\t\t//based on staffantans glitch shader for unity https://github.com/staffantan/unityglitch\n\t\t\t\t\"vec4 normal = texture2D (tDisp, p*seed*seed);\",\n\t\t\t\t\"if(p.y<distortion_x+col_s && p.y>distortion_x-col_s*seed) {\",\n\t\t\t\t\t\"if(seed_x>0.){\",\n\t\t\t\t\t\t\"p.y = 1. - (p.y + distortion_y);\",\n\t\t\t\t\t\"}\",\n\t\t\t\t\t\"else {\",\n\t\t\t\t\t\t\"p.y = distortion_y;\",\n\t\t\t\t\t\"}\",\n\t\t\t\t\"}\",\n\t\t\t\t\"if(p.x<distortion_y+col_s && p.x>distortion_y-col_s*seed) {\",\n\t\t\t\t\t\"if(seed_y>0.){\",\n\t\t\t\t\t\t\"p.x=distortion_x;\",\n\t\t\t\t\t\"}\",\n\t\t\t\t\t\"else {\",\n\t\t\t\t\t\t\"p.x = 1. - (p.x + distortion_x);\",\n\t\t\t\t\t\"}\",\n\t\t\t\t\"}\",\n\t\t\t\t\"p.x+=normal.x*seed_x*(seed/5.);\",\n\t\t\t\t\"p.y+=normal.y*seed_y*(seed/5.);\",\n\t\t\t\t//base from RGB shift shader\n\t\t\t\t\"vec2 offset = amount * vec2( cos(angle), sin(angle));\",\n\t\t\t\t\"vec4 cr = texture2D(tDiffuse, p + offset);\",\n\t\t\t\t\"vec4 cga = texture2D(tDiffuse, p);\",\n\t\t\t\t\"vec4 cb = texture2D(tDiffuse, p - offset);\",\n\t\t\t\t\"gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\",\n\t\t\t\t//add noise\n\t\t\t\t\"vec4 snow = 200.*amount*vec4(rand(vec2(xs * seed,ys * seed*50.))*0.2);\",\n\t\t\t\t\"gl_FragColor = gl_FragColor+ snow;\",\n\t\t\t\"}\",\n\t\t\t\"else {\",\n\t\t\t\t\"gl_FragColor=texture2D (tDiffuse, vUv);\",\n\t\t\t\"}\",\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n","'use strict';\r\n\r\nvar THREE = require('three');\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * Dot screen shader\r\n * based on glfx.js sepia shader\r\n * https://github.com/evanw/glfx.js\r\n */\r\n\r\nTHREE.DotScreenShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t\"tDiffuse\": { value: null },\r\n\t\t\"tSize\":    { value: new THREE.Vector2( 256, 256 ) },\r\n\t\t\"center\":   { value: new THREE.Vector2( 0.5, 0.5 ) },\r\n\t\t\"angle\":    { value: 1.57 },\r\n\t\t\"scale\":    { value: 1.0 }\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\t\"vUv = uv;\",\r\n\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" ),\r\n\r\n\tfragmentShader: [\r\n\r\n\t\t\"uniform vec2 center;\",\r\n\t\t\"uniform float angle;\",\r\n\t\t\"uniform float scale;\",\r\n\t\t\"uniform vec2 tSize;\",\r\n\r\n\t\t\"uniform sampler2D tDiffuse;\",\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"float pattern() {\",\r\n\r\n\t\t\t\"float s = sin( angle ), c = cos( angle );\",\r\n\r\n\t\t\t\"vec2 tex = vUv * tSize - center;\",\r\n\t\t\t\"vec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;\",\r\n\r\n\t\t\t\"return ( sin( point.x ) * sin( point.y ) ) * 4.0;\",\r\n\r\n\t\t\"}\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\t\"vec4 color = texture2D( tDiffuse, vUv );\",\r\n\r\n\t\t\t\"float average = ( color.r + color.g + color.b ) / 3.0;\",\r\n\r\n\t\t\t\"gl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" )\r\n\r\n};","'use strict';\n\nvar THREE = require('three');\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * Film grain & scanlines shader\n *\n * - ported from HLSL to WebGL / GLSL\n * http://www.truevision3d.com/forums/showcase/staticnoise_colorblackwhite_scanline_shaders-t18698.0.html\n *\n * Screen Space Static Postprocessor\n *\n * Produces an analogue noise overlay similar to a film grain / TV static\n *\n * Original implementation and noise algorithm\n * Pat 'Hawthorne' Shearon\n *\n * Optimized scanlines + noise version with intensity scaling\n * Georg 'Leviathan' Steinrohder\n *\n * This version is provided under a Creative Commons Attribution 3.0 License\n * http://creativecommons.org/licenses/by/3.0/\n */\n\nTHREE.FilmShader = {\n\n\tuniforms: {\n\n\t\t\"tDiffuse\":   { value: null },\n\t\t\"time\":       { value: 0.0 },\n\t\t\"nIntensity\": { value: 0.5 },\n\t\t\"sIntensity\": { value: 0.05 },\n\t\t\"sCount\":     { value: 4096 },\n\t\t\"grayscale\":  { value: 1 }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\t\"vUv = uv;\",\n\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"#include <common>\",\n\t\t\n\t\t// control parameter\n\t\t\"uniform float time;\",\n\n\t\t\"uniform bool grayscale;\",\n\n\t\t// noise effect intensity value (0 = no effect, 1 = full effect)\n\t\t\"uniform float nIntensity;\",\n\n\t\t// scanlines effect intensity value (0 = no effect, 1 = full effect)\n\t\t\"uniform float sIntensity;\",\n\n\t\t// scanlines effect count value (0 = no effect, 4096 = full effect)\n\t\t\"uniform float sCount;\",\n\n\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\t// sample the source\n\t\t\t\"vec4 cTextureScreen = texture2D( tDiffuse, vUv );\",\n\n\t\t\t// make some noise\n\t\t\t\"float dx = rand( vUv + time );\",\n\n\t\t\t// add noise\n\t\t\t\"vec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx, 0.0, 1.0 );\",\n\n\t\t\t// get us a sine and cosine\n\t\t\t\"vec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );\",\n\n\t\t\t// add scanlines\n\t\t\t\"cResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;\",\n\n\t\t\t// interpolate between source and result by intensity\n\t\t\t\"cResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );\",\n\n\t\t\t// convert to grayscale if desired\n\t\t\t\"if( grayscale ) {\",\n\n\t\t\t\t\"cResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );\",\n\n\t\t\t\"}\",\n\n\t\t\t\"gl_FragColor =  vec4( cResult, cTextureScreen.a );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n","'use strict';\r\n\r\nvar THREE = require('three');\r\n\r\n/**\r\n * @author felixturner / http://airtight.cc/\r\n *\r\n * RGB Shift Shader\r\n * Shifts red and blue channels from center in opposite directions\r\n * Ported from http://kriss.cx/tom/2009/05/rgb-shift/\r\n * by Tom Butterworth / http://kriss.cx/tom/\r\n *\r\n * amount: shift distance (1 is width of input)\r\n * angle: shift angle in radians\r\n */\r\n\r\nTHREE.RGBShiftShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t\"tDiffuse\": { value: null },\r\n\t\t\"amount\":   { value: 0.005 },\r\n\t\t\"angle\":    { value: 0.0 }\r\n\r\n\t},\r\n\r\n\tvertexShader: [\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\t\"vUv = uv;\",\r\n\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" ),\r\n\r\n\tfragmentShader: [\r\n\r\n\t\t\"uniform sampler2D tDiffuse;\",\r\n\t\t\"uniform float amount;\",\r\n\t\t\"uniform float angle;\",\r\n\r\n\t\t\"varying vec2 vUv;\",\r\n\r\n\t\t\"void main() {\",\r\n\r\n\t\t\t\"vec2 offset = amount * vec2( cos(angle), sin(angle));\",\r\n\t\t\t\"vec4 cr = texture2D(tDiffuse, vUv + offset);\",\r\n\t\t\t\"vec4 cga = texture2D(tDiffuse, vUv);\",\r\n\t\t\t\"vec4 cb = texture2D(tDiffuse, vUv - offset);\",\r\n\t\t\t\"gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\",\r\n\r\n\t\t\"}\"\r\n\r\n\t].join( \"\\n\" )\r\n\r\n};","(function (global){\n/*!\n * VERSION: 1.18.2\n * DATE: 2015-12-22\n * UPDATES AND DOCS AT: http://greensock.com\n * \n * Includes all of the following: TweenLite, TweenMax, TimelineLite, TimelineMax, EasePack, CSSPlugin, RoundPropsPlugin, BezierPlugin, AttrPlugin, DirectionalRotationPlugin\n *\n * @license Copyright (c) 2008-2016, GreenSock. All rights reserved.\n * This work is subject to the terms at http://greensock.com/standard-license or for\n * Club GreenSock members, the software agreement that was issued with your membership.\n * \n * @author: Jack Doyle, jack@greensock.com\n **/\nvar _gsScope=\"undefined\"!=typeof module&&module.exports&&\"undefined\"!=typeof global?global:this||window;(_gsScope._gsQueue||(_gsScope._gsQueue=[])).push(function(){\"use strict\";_gsScope._gsDefine(\"TweenMax\",[\"core.Animation\",\"core.SimpleTimeline\",\"TweenLite\"],function(a,b,c){var d=function(a){var b,c=[],d=a.length;for(b=0;b!==d;c.push(a[b++]));return c},e=function(a,b,c){var d,e,f=a.cycle;for(d in f)e=f[d],a[d]=\"function\"==typeof e?e.call(b[c],c):e[c%e.length];delete a.cycle},f=function(a,b,d){c.call(this,a,b,d),this._cycle=0,this._yoyo=this.vars.yoyo===!0,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._dirty=!0,this.render=f.prototype.render},g=1e-10,h=c._internals,i=h.isSelector,j=h.isArray,k=f.prototype=c.to({},.1,{}),l=[];f.version=\"1.18.2\",k.constructor=f,k.kill()._gc=!1,f.killTweensOf=f.killDelayedCallsTo=c.killTweensOf,f.getTweensOf=c.getTweensOf,f.lagSmoothing=c.lagSmoothing,f.ticker=c.ticker,f.render=c.render,k.invalidate=function(){return this._yoyo=this.vars.yoyo===!0,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),c.prototype.invalidate.call(this)},k.updateTo=function(a,b){var d,e=this.ratio,f=this.vars.immediateRender||a.immediateRender;b&&this._startTime<this._timeline._time&&(this._startTime=this._timeline._time,this._uncache(!1),this._gc?this._enabled(!0,!1):this._timeline.insert(this,this._startTime-this._delay));for(d in a)this.vars[d]=a[d];if(this._initted||f)if(b)this._initted=!1,f&&this.render(0,!0,!0);else if(this._gc&&this._enabled(!0,!1),this._notifyPluginsOfEnabled&&this._firstPT&&c._onPluginEvent(\"_onDisable\",this),this._time/this._duration>.998){var g=this._totalTime;this.render(0,!0,!1),this._initted=!1,this.render(g,!0,!1)}else if(this._initted=!1,this._init(),this._time>0||f)for(var h,i=1/(1-e),j=this._firstPT;j;)h=j.s+j.c,j.c*=i,j.s=h-j.c,j=j._next;return this},k.render=function(a,b,c){this._initted||0===this._duration&&this.vars.repeat&&this.invalidate();var d,e,f,i,j,k,l,m,n=this._dirty?this.totalDuration():this._totalDuration,o=this._time,p=this._totalTime,q=this._cycle,r=this._duration,s=this._rawPrevTime;if(a>=n-1e-7?(this._totalTime=n,this._cycle=this._repeat,this._yoyo&&0!==(1&this._cycle)?(this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0):(this._time=r,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1),this._reversed||(d=!0,e=\"onComplete\",c=c||this._timeline.autoRemoveChildren),0===r&&(this._initted||!this.vars.lazy||c)&&(this._startTime===this._timeline._duration&&(a=0),(0>s||0>=a&&a>=-1e-7||s===g&&\"isPause\"!==this.data)&&s!==a&&(c=!0,s>g&&(e=\"onReverseComplete\")),this._rawPrevTime=m=!b||a||s===a?a:g)):1e-7>a?(this._totalTime=this._time=this._cycle=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==p||0===r&&s>0)&&(e=\"onReverseComplete\",d=this._reversed),0>a&&(this._active=!1,0===r&&(this._initted||!this.vars.lazy||c)&&(s>=0&&(c=!0),this._rawPrevTime=m=!b||a||s===a?a:g)),this._initted||(c=!0)):(this._totalTime=this._time=a,0!==this._repeat&&(i=r+this._repeatDelay,this._cycle=this._totalTime/i>>0,0!==this._cycle&&this._cycle===this._totalTime/i&&this._cycle--,this._time=this._totalTime-this._cycle*i,this._yoyo&&0!==(1&this._cycle)&&(this._time=r-this._time),this._time>r?this._time=r:this._time<0&&(this._time=0)),this._easeType?(j=this._time/r,k=this._easeType,l=this._easePower,(1===k||3===k&&j>=.5)&&(j=1-j),3===k&&(j*=2),1===l?j*=j:2===l?j*=j*j:3===l?j*=j*j*j:4===l&&(j*=j*j*j*j),1===k?this.ratio=1-j:2===k?this.ratio=j:this._time/r<.5?this.ratio=j/2:this.ratio=1-j/2):this.ratio=this._ease.getRatio(this._time/r)),o===this._time&&!c&&q===this._cycle)return void(p!==this._totalTime&&this._onUpdate&&(b||this._callback(\"onUpdate\")));if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!c&&this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration))return this._time=o,this._totalTime=p,this._rawPrevTime=s,this._cycle=q,h.lazyTweens.push(this),void(this._lazy=[a,b]);this._time&&!d?this.ratio=this._ease.getRatio(this._time/r):d&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(this._lazy!==!1&&(this._lazy=!1),this._active||!this._paused&&this._time!==o&&a>=0&&(this._active=!0),0===p&&(2===this._initted&&a>0&&this._init(),this._startAt&&(a>=0?this._startAt.render(a,b,c):e||(e=\"_dummyGS\")),this.vars.onStart&&(0!==this._totalTime||0===r)&&(b||this._callback(\"onStart\"))),f=this._firstPT;f;)f.f?f.t[f.p](f.c*this.ratio+f.s):f.t[f.p]=f.c*this.ratio+f.s,f=f._next;this._onUpdate&&(0>a&&this._startAt&&this._startTime&&this._startAt.render(a,b,c),b||(this._totalTime!==p||d)&&this._callback(\"onUpdate\")),this._cycle!==q&&(b||this._gc||this.vars.onRepeat&&this._callback(\"onRepeat\")),e&&(!this._gc||c)&&(0>a&&this._startAt&&!this._onUpdate&&this._startTime&&this._startAt.render(a,b,c),d&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!b&&this.vars[e]&&this._callback(e),0===r&&this._rawPrevTime===g&&m!==g&&(this._rawPrevTime=0))},f.to=function(a,b,c){return new f(a,b,c)},f.from=function(a,b,c){return c.runBackwards=!0,c.immediateRender=0!=c.immediateRender,new f(a,b,c)},f.fromTo=function(a,b,c,d){return d.startAt=c,d.immediateRender=0!=d.immediateRender&&0!=c.immediateRender,new f(a,b,d)},f.staggerTo=f.allTo=function(a,b,g,h,k,m,n){h=h||0;var o,p,q,r,s=0,t=[],u=function(){g.onComplete&&g.onComplete.apply(g.onCompleteScope||this,arguments),k.apply(n||g.callbackScope||this,m||l)},v=g.cycle,w=g.startAt&&g.startAt.cycle;for(j(a)||(\"string\"==typeof a&&(a=c.selector(a)||a),i(a)&&(a=d(a))),a=a||[],0>h&&(a=d(a),a.reverse(),h*=-1),o=a.length-1,q=0;o>=q;q++){p={};for(r in g)p[r]=g[r];if(v&&e(p,a,q),w){w=p.startAt={};for(r in g.startAt)w[r]=g.startAt[r];e(p.startAt,a,q)}p.delay=s+(p.delay||0),q===o&&k&&(p.onComplete=u),t[q]=new f(a[q],b,p),s+=h}return t},f.staggerFrom=f.allFrom=function(a,b,c,d,e,g,h){return c.runBackwards=!0,c.immediateRender=0!=c.immediateRender,f.staggerTo(a,b,c,d,e,g,h)},f.staggerFromTo=f.allFromTo=function(a,b,c,d,e,g,h,i){return d.startAt=c,d.immediateRender=0!=d.immediateRender&&0!=c.immediateRender,f.staggerTo(a,b,d,e,g,h,i)},f.delayedCall=function(a,b,c,d,e){return new f(b,0,{delay:a,onComplete:b,onCompleteParams:c,callbackScope:d,onReverseComplete:b,onReverseCompleteParams:c,immediateRender:!1,useFrames:e,overwrite:0})},f.set=function(a,b){return new f(a,0,b)},f.isTweening=function(a){return c.getTweensOf(a,!0).length>0};var m=function(a,b){for(var d=[],e=0,f=a._first;f;)f instanceof c?d[e++]=f:(b&&(d[e++]=f),d=d.concat(m(f,b)),e=d.length),f=f._next;return d},n=f.getAllTweens=function(b){return m(a._rootTimeline,b).concat(m(a._rootFramesTimeline,b))};f.killAll=function(a,c,d,e){null==c&&(c=!0),null==d&&(d=!0);var f,g,h,i=n(0!=e),j=i.length,k=c&&d&&e;for(h=0;j>h;h++)g=i[h],(k||g instanceof b||(f=g.target===g.vars.onComplete)&&d||c&&!f)&&(a?g.totalTime(g._reversed?0:g.totalDuration()):g._enabled(!1,!1))},f.killChildTweensOf=function(a,b){if(null!=a){var e,g,k,l,m,n=h.tweenLookup;if(\"string\"==typeof a&&(a=c.selector(a)||a),i(a)&&(a=d(a)),j(a))for(l=a.length;--l>-1;)f.killChildTweensOf(a[l],b);else{e=[];for(k in n)for(g=n[k].target.parentNode;g;)g===a&&(e=e.concat(n[k].tweens)),g=g.parentNode;for(m=e.length,l=0;m>l;l++)b&&e[l].totalTime(e[l].totalDuration()),e[l]._enabled(!1,!1)}}};var o=function(a,c,d,e){c=c!==!1,d=d!==!1,e=e!==!1;for(var f,g,h=n(e),i=c&&d&&e,j=h.length;--j>-1;)g=h[j],(i||g instanceof b||(f=g.target===g.vars.onComplete)&&d||c&&!f)&&g.paused(a)};return f.pauseAll=function(a,b,c){o(!0,a,b,c)},f.resumeAll=function(a,b,c){o(!1,a,b,c)},f.globalTimeScale=function(b){var d=a._rootTimeline,e=c.ticker.time;return arguments.length?(b=b||g,d._startTime=e-(e-d._startTime)*d._timeScale/b,d=a._rootFramesTimeline,e=c.ticker.frame,d._startTime=e-(e-d._startTime)*d._timeScale/b,d._timeScale=a._rootTimeline._timeScale=b,b):d._timeScale},k.progress=function(a){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!==(1&this._cycle)?1-a:a)+this._cycle*(this._duration+this._repeatDelay),!1):this._time/this.duration()},k.totalProgress=function(a){return arguments.length?this.totalTime(this.totalDuration()*a,!1):this._totalTime/this.totalDuration()},k.time=function(a,b){return arguments.length?(this._dirty&&this.totalDuration(),a>this._duration&&(a=this._duration),this._yoyo&&0!==(1&this._cycle)?a=this._duration-a+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(a+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(a,b)):this._time},k.duration=function(b){return arguments.length?a.prototype.duration.call(this,b):this._duration},k.totalDuration=function(a){return arguments.length?-1===this._repeat?this:this.duration((a-this._repeat*this._repeatDelay)/(this._repeat+1)):(this._dirty&&(this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat,this._dirty=!1),this._totalDuration)},k.repeat=function(a){return arguments.length?(this._repeat=a,this._uncache(!0)):this._repeat},k.repeatDelay=function(a){return arguments.length?(this._repeatDelay=a,this._uncache(!0)):this._repeatDelay},k.yoyo=function(a){return arguments.length?(this._yoyo=a,this):this._yoyo},f},!0),_gsScope._gsDefine(\"TimelineLite\",[\"core.Animation\",\"core.SimpleTimeline\",\"TweenLite\"],function(a,b,c){var d=function(a){b.call(this,a),this._labels={},this.autoRemoveChildren=this.vars.autoRemoveChildren===!0,this.smoothChildTiming=this.vars.smoothChildTiming===!0,this._sortChildren=!0,this._onUpdate=this.vars.onUpdate;var c,d,e=this.vars;for(d in e)c=e[d],i(c)&&-1!==c.join(\"\").indexOf(\"{self}\")&&(e[d]=this._swapSelfInParams(c));i(e.tweens)&&this.add(e.tweens,0,e.align,e.stagger)},e=1e-10,f=c._internals,g=d._internals={},h=f.isSelector,i=f.isArray,j=f.lazyTweens,k=f.lazyRender,l=_gsScope._gsDefine.globals,m=function(a){var b,c={};for(b in a)c[b]=a[b];return c},n=function(a,b,c){var d,e,f=a.cycle;for(d in f)e=f[d],a[d]=\"function\"==typeof e?e.call(b[c],c):e[c%e.length];delete a.cycle},o=g.pauseCallback=function(){},p=function(a){var b,c=[],d=a.length;for(b=0;b!==d;c.push(a[b++]));return c},q=d.prototype=new b;return d.version=\"1.18.2\",q.constructor=d,q.kill()._gc=q._forcingPlayhead=q._hasPause=!1,q.to=function(a,b,d,e){var f=d.repeat&&l.TweenMax||c;return b?this.add(new f(a,b,d),e):this.set(a,d,e)},q.from=function(a,b,d,e){return this.add((d.repeat&&l.TweenMax||c).from(a,b,d),e)},q.fromTo=function(a,b,d,e,f){var g=e.repeat&&l.TweenMax||c;return b?this.add(g.fromTo(a,b,d,e),f):this.set(a,e,f)},q.staggerTo=function(a,b,e,f,g,i,j,k){var l,o,q=new d({onComplete:i,onCompleteParams:j,callbackScope:k,smoothChildTiming:this.smoothChildTiming}),r=e.cycle;for(\"string\"==typeof a&&(a=c.selector(a)||a),a=a||[],h(a)&&(a=p(a)),f=f||0,0>f&&(a=p(a),a.reverse(),f*=-1),o=0;o<a.length;o++)l=m(e),l.startAt&&(l.startAt=m(l.startAt),l.startAt.cycle&&n(l.startAt,a,o)),r&&n(l,a,o),q.to(a[o],b,l,o*f);return this.add(q,g)},q.staggerFrom=function(a,b,c,d,e,f,g,h){return c.immediateRender=0!=c.immediateRender,c.runBackwards=!0,this.staggerTo(a,b,c,d,e,f,g,h)},q.staggerFromTo=function(a,b,c,d,e,f,g,h,i){return d.startAt=c,d.immediateRender=0!=d.immediateRender&&0!=c.immediateRender,this.staggerTo(a,b,d,e,f,g,h,i)},q.call=function(a,b,d,e){return this.add(c.delayedCall(0,a,b,d),e)},q.set=function(a,b,d){return d=this._parseTimeOrLabel(d,0,!0),null==b.immediateRender&&(b.immediateRender=d===this._time&&!this._paused),this.add(new c(a,0,b),d)},d.exportRoot=function(a,b){a=a||{},null==a.smoothChildTiming&&(a.smoothChildTiming=!0);var e,f,g=new d(a),h=g._timeline;for(null==b&&(b=!0),h._remove(g,!0),g._startTime=0,g._rawPrevTime=g._time=g._totalTime=h._time,e=h._first;e;)f=e._next,b&&e instanceof c&&e.target===e.vars.onComplete||g.add(e,e._startTime-e._delay),e=f;return h.add(g,0),g},q.add=function(e,f,g,h){var j,k,l,m,n,o;if(\"number\"!=typeof f&&(f=this._parseTimeOrLabel(f,0,!0,e)),!(e instanceof a)){if(e instanceof Array||e&&e.push&&i(e)){for(g=g||\"normal\",h=h||0,j=f,k=e.length,l=0;k>l;l++)i(m=e[l])&&(m=new d({tweens:m})),this.add(m,j),\"string\"!=typeof m&&\"function\"!=typeof m&&(\"sequence\"===g?j=m._startTime+m.totalDuration()/m._timeScale:\"start\"===g&&(m._startTime-=m.delay())),j+=h;return this._uncache(!0)}if(\"string\"==typeof e)return this.addLabel(e,f);if(\"function\"!=typeof e)throw\"Cannot add \"+e+\" into the timeline; it is not a tween, timeline, function, or string.\";e=c.delayedCall(0,e)}if(b.prototype.add.call(this,e,f),(this._gc||this._time===this._duration)&&!this._paused&&this._duration<this.duration())for(n=this,o=n.rawTime()>e._startTime;n._timeline;)o&&n._timeline.smoothChildTiming?n.totalTime(n._totalTime,!0):n._gc&&n._enabled(!0,!1),n=n._timeline;return this},q.remove=function(b){if(b instanceof a){this._remove(b,!1);var c=b._timeline=b.vars.useFrames?a._rootFramesTimeline:a._rootTimeline;return b._startTime=(b._paused?b._pauseTime:c._time)-(b._reversed?b.totalDuration()-b._totalTime:b._totalTime)/b._timeScale,this}if(b instanceof Array||b&&b.push&&i(b)){for(var d=b.length;--d>-1;)this.remove(b[d]);return this}return\"string\"==typeof b?this.removeLabel(b):this.kill(null,b)},q._remove=function(a,c){b.prototype._remove.call(this,a,c);var d=this._last;return d?this._time>d._startTime+d._totalDuration/d._timeScale&&(this._time=this.duration(),this._totalTime=this._totalDuration):this._time=this._totalTime=this._duration=this._totalDuration=0,this},q.append=function(a,b){return this.add(a,this._parseTimeOrLabel(null,b,!0,a))},q.insert=q.insertMultiple=function(a,b,c,d){return this.add(a,b||0,c,d)},q.appendMultiple=function(a,b,c,d){return this.add(a,this._parseTimeOrLabel(null,b,!0,a),c,d)},q.addLabel=function(a,b){return this._labels[a]=this._parseTimeOrLabel(b),this},q.addPause=function(a,b,d,e){var f=c.delayedCall(0,o,d,e||this);return f.vars.onComplete=f.vars.onReverseComplete=b,f.data=\"isPause\",this._hasPause=!0,this.add(f,a)},q.removeLabel=function(a){return delete this._labels[a],this},q.getLabelTime=function(a){return null!=this._labels[a]?this._labels[a]:-1},q._parseTimeOrLabel=function(b,c,d,e){var f;if(e instanceof a&&e.timeline===this)this.remove(e);else if(e&&(e instanceof Array||e.push&&i(e)))for(f=e.length;--f>-1;)e[f]instanceof a&&e[f].timeline===this&&this.remove(e[f]);if(\"string\"==typeof c)return this._parseTimeOrLabel(c,d&&\"number\"==typeof b&&null==this._labels[c]?b-this.duration():0,d);if(c=c||0,\"string\"!=typeof b||!isNaN(b)&&null==this._labels[b])null==b&&(b=this.duration());else{if(f=b.indexOf(\"=\"),-1===f)return null==this._labels[b]?d?this._labels[b]=this.duration()+c:c:this._labels[b]+c;c=parseInt(b.charAt(f-1)+\"1\",10)*Number(b.substr(f+1)),b=f>1?this._parseTimeOrLabel(b.substr(0,f-1),0,d):this.duration()}return Number(b)+c},q.seek=function(a,b){return this.totalTime(\"number\"==typeof a?a:this._parseTimeOrLabel(a),b!==!1)},q.stop=function(){return this.paused(!0)},q.gotoAndPlay=function(a,b){return this.play(a,b)},q.gotoAndStop=function(a,b){return this.pause(a,b)},q.render=function(a,b,c){this._gc&&this._enabled(!0,!1);var d,f,g,h,i,l,m,n=this._dirty?this.totalDuration():this._totalDuration,o=this._time,p=this._startTime,q=this._timeScale,r=this._paused;if(a>=n-1e-7)this._totalTime=this._time=n,this._reversed||this._hasPausedChild()||(f=!0,h=\"onComplete\",i=!!this._timeline.autoRemoveChildren,0===this._duration&&(0>=a&&a>=-1e-7||this._rawPrevTime<0||this._rawPrevTime===e)&&this._rawPrevTime!==a&&this._first&&(i=!0,this._rawPrevTime>e&&(h=\"onReverseComplete\"))),this._rawPrevTime=this._duration||!b||a||this._rawPrevTime===a?a:e,a=n+1e-4;else if(1e-7>a)if(this._totalTime=this._time=0,(0!==o||0===this._duration&&this._rawPrevTime!==e&&(this._rawPrevTime>0||0>a&&this._rawPrevTime>=0))&&(h=\"onReverseComplete\",f=this._reversed),0>a)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(i=f=!0,h=\"onReverseComplete\"):this._rawPrevTime>=0&&this._first&&(i=!0),this._rawPrevTime=a;else{if(this._rawPrevTime=this._duration||!b||a||this._rawPrevTime===a?a:e,0===a&&f)for(d=this._first;d&&0===d._startTime;)d._duration||(f=!1),d=d._next;a=0,this._initted||(i=!0)}else{if(this._hasPause&&!this._forcingPlayhead&&!b){if(a>=o)for(d=this._first;d&&d._startTime<=a&&!l;)d._duration||\"isPause\"!==d.data||d.ratio||0===d._startTime&&0===this._rawPrevTime||(l=d),d=d._next;else for(d=this._last;d&&d._startTime>=a&&!l;)d._duration||\"isPause\"===d.data&&d._rawPrevTime>0&&(l=d),d=d._prev;l&&(this._time=a=l._startTime,this._totalTime=a+this._cycle*(this._totalDuration+this._repeatDelay))}this._totalTime=this._time=this._rawPrevTime=a}if(this._time!==o&&this._first||c||i||l){if(this._initted||(this._initted=!0),this._active||!this._paused&&this._time!==o&&a>0&&(this._active=!0),0===o&&this.vars.onStart&&0!==this._time&&(b||this._callback(\"onStart\")),m=this._time,m>=o)for(d=this._first;d&&(g=d._next,m===this._time&&(!this._paused||r));)(d._active||d._startTime<=m&&!d._paused&&!d._gc)&&(l===d&&this.pause(),d._reversed?d.render((d._dirty?d.totalDuration():d._totalDuration)-(a-d._startTime)*d._timeScale,b,c):d.render((a-d._startTime)*d._timeScale,b,c)),d=g;else for(d=this._last;d&&(g=d._prev,m===this._time&&(!this._paused||r));){if(d._active||d._startTime<=o&&!d._paused&&!d._gc){if(l===d){for(l=d._prev;l&&l.endTime()>this._time;)l.render(l._reversed?l.totalDuration()-(a-l._startTime)*l._timeScale:(a-l._startTime)*l._timeScale,b,c),l=l._prev;l=null,this.pause()}d._reversed?d.render((d._dirty?d.totalDuration():d._totalDuration)-(a-d._startTime)*d._timeScale,b,c):d.render((a-d._startTime)*d._timeScale,b,c)}d=g}this._onUpdate&&(b||(j.length&&k(),this._callback(\"onUpdate\"))),h&&(this._gc||(p===this._startTime||q!==this._timeScale)&&(0===this._time||n>=this.totalDuration())&&(f&&(j.length&&k(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!b&&this.vars[h]&&this._callback(h)))}},q._hasPausedChild=function(){for(var a=this._first;a;){if(a._paused||a instanceof d&&a._hasPausedChild())return!0;a=a._next}return!1},q.getChildren=function(a,b,d,e){e=e||-9999999999;for(var f=[],g=this._first,h=0;g;)g._startTime<e||(g instanceof c?b!==!1&&(f[h++]=g):(d!==!1&&(f[h++]=g),a!==!1&&(f=f.concat(g.getChildren(!0,b,d)),h=f.length))),g=g._next;return f},q.getTweensOf=function(a,b){var d,e,f=this._gc,g=[],h=0;for(f&&this._enabled(!0,!0),d=c.getTweensOf(a),e=d.length;--e>-1;)(d[e].timeline===this||b&&this._contains(d[e]))&&(g[h++]=d[e]);return f&&this._enabled(!1,!0),g},q.recent=function(){return this._recent},q._contains=function(a){for(var b=a.timeline;b;){if(b===this)return!0;b=b.timeline}return!1},q.shiftChildren=function(a,b,c){c=c||0;for(var d,e=this._first,f=this._labels;e;)e._startTime>=c&&(e._startTime+=a),e=e._next;if(b)for(d in f)f[d]>=c&&(f[d]+=a);return this._uncache(!0)},q._kill=function(a,b){if(!a&&!b)return this._enabled(!1,!1);for(var c=b?this.getTweensOf(b):this.getChildren(!0,!0,!1),d=c.length,e=!1;--d>-1;)c[d]._kill(a,b)&&(e=!0);return e},q.clear=function(a){var b=this.getChildren(!1,!0,!0),c=b.length;for(this._time=this._totalTime=0;--c>-1;)b[c]._enabled(!1,!1);return a!==!1&&(this._labels={}),this._uncache(!0)},q.invalidate=function(){for(var b=this._first;b;)b.invalidate(),b=b._next;return a.prototype.invalidate.call(this)},q._enabled=function(a,c){if(a===this._gc)for(var d=this._first;d;)d._enabled(a,!0),d=d._next;return b.prototype._enabled.call(this,a,c)},q.totalTime=function(b,c,d){this._forcingPlayhead=!0;var e=a.prototype.totalTime.apply(this,arguments);return this._forcingPlayhead=!1,e},q.duration=function(a){return arguments.length?(0!==this.duration()&&0!==a&&this.timeScale(this._duration/a),this):(this._dirty&&this.totalDuration(),this._duration)},q.totalDuration=function(a){if(!arguments.length){if(this._dirty){for(var b,c,d=0,e=this._last,f=999999999999;e;)b=e._prev,e._dirty&&e.totalDuration(),e._startTime>f&&this._sortChildren&&!e._paused?this.add(e,e._startTime-e._delay):f=e._startTime,e._startTime<0&&!e._paused&&(d-=e._startTime,this._timeline.smoothChildTiming&&(this._startTime+=e._startTime/this._timeScale),this.shiftChildren(-e._startTime,!1,-9999999999),f=0),c=e._startTime+e._totalDuration/e._timeScale,c>d&&(d=c),e=b;this._duration=this._totalDuration=d,this._dirty=!1}return this._totalDuration}return a&&this.totalDuration()?this.timeScale(this._totalDuration/a):this},q.paused=function(b){if(!b)for(var c=this._first,d=this._time;c;)c._startTime===d&&\"isPause\"===c.data&&(c._rawPrevTime=0),c=c._next;return a.prototype.paused.apply(this,arguments)},q.usesFrames=function(){for(var b=this._timeline;b._timeline;)b=b._timeline;return b===a._rootFramesTimeline},q.rawTime=function(){return this._paused?this._totalTime:(this._timeline.rawTime()-this._startTime)*this._timeScale},d},!0),_gsScope._gsDefine(\"TimelineMax\",[\"TimelineLite\",\"TweenLite\",\"easing.Ease\"],function(a,b,c){var d=function(b){a.call(this,b),this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._cycle=0,this._yoyo=this.vars.yoyo===!0,this._dirty=!0},e=1e-10,f=b._internals,g=f.lazyTweens,h=f.lazyRender,i=new c(null,null,1,0),j=d.prototype=new a;return j.constructor=d,j.kill()._gc=!1,d.version=\"1.18.2\",j.invalidate=function(){return this._yoyo=this.vars.yoyo===!0,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),a.prototype.invalidate.call(this)},j.addCallback=function(a,c,d,e){return this.add(b.delayedCall(0,a,d,e),c)},j.removeCallback=function(a,b){if(a)if(null==b)this._kill(null,a);else for(var c=this.getTweensOf(a,!1),d=c.length,e=this._parseTimeOrLabel(b);--d>-1;)c[d]._startTime===e&&c[d]._enabled(!1,!1);return this},j.removePause=function(b){return this.removeCallback(a._internals.pauseCallback,b)},j.tweenTo=function(a,c){c=c||{};var d,e,f,g={ease:i,useFrames:this.usesFrames(),immediateRender:!1};for(e in c)g[e]=c[e];return g.time=this._parseTimeOrLabel(a),d=Math.abs(Number(g.time)-this._time)/this._timeScale||.001,f=new b(this,d,g),g.onStart=function(){f.target.paused(!0),f.vars.time!==f.target.time()&&d===f.duration()&&f.duration(Math.abs(f.vars.time-f.target.time())/f.target._timeScale),c.onStart&&f._callback(\"onStart\")},f},j.tweenFromTo=function(a,b,c){c=c||{},a=this._parseTimeOrLabel(a),c.startAt={onComplete:this.seek,onCompleteParams:[a],callbackScope:this},c.immediateRender=c.immediateRender!==!1;var d=this.tweenTo(b,c);return d.duration(Math.abs(d.vars.time-a)/this._timeScale||.001)},j.render=function(a,b,c){this._gc&&this._enabled(!0,!1);var d,f,i,j,k,l,m,n,o=this._dirty?this.totalDuration():this._totalDuration,p=this._duration,q=this._time,r=this._totalTime,s=this._startTime,t=this._timeScale,u=this._rawPrevTime,v=this._paused,w=this._cycle;if(a>=o-1e-7)this._locked||(this._totalTime=o,this._cycle=this._repeat),this._reversed||this._hasPausedChild()||(f=!0,j=\"onComplete\",k=!!this._timeline.autoRemoveChildren,0===this._duration&&(0>=a&&a>=-1e-7||0>u||u===e)&&u!==a&&this._first&&(k=!0,u>e&&(j=\"onReverseComplete\"))),this._rawPrevTime=this._duration||!b||a||this._rawPrevTime===a?a:e,this._yoyo&&0!==(1&this._cycle)?this._time=a=0:(this._time=p,a=p+1e-4);else if(1e-7>a)if(this._locked||(this._totalTime=this._cycle=0),this._time=0,(0!==q||0===p&&u!==e&&(u>0||0>a&&u>=0)&&!this._locked)&&(j=\"onReverseComplete\",f=this._reversed),0>a)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(k=f=!0,j=\"onReverseComplete\"):u>=0&&this._first&&(k=!0),this._rawPrevTime=a;else{if(this._rawPrevTime=p||!b||a||this._rawPrevTime===a?a:e,0===a&&f)for(d=this._first;d&&0===d._startTime;)d._duration||(f=!1),d=d._next;a=0,this._initted||(k=!0)}else if(0===p&&0>u&&(k=!0),this._time=this._rawPrevTime=a,this._locked||(this._totalTime=a,0!==this._repeat&&(l=p+this._repeatDelay,this._cycle=this._totalTime/l>>0,0!==this._cycle&&this._cycle===this._totalTime/l&&this._cycle--,this._time=this._totalTime-this._cycle*l,this._yoyo&&0!==(1&this._cycle)&&(this._time=p-this._time),this._time>p?(this._time=p,a=p+1e-4):this._time<0?this._time=a=0:a=this._time)),this._hasPause&&!this._forcingPlayhead&&!b){if(a=this._time,a>=q)for(d=this._first;d&&d._startTime<=a&&!m;)d._duration||\"isPause\"!==d.data||d.ratio||0===d._startTime&&0===this._rawPrevTime||(m=d),d=d._next;else for(d=this._last;d&&d._startTime>=a&&!m;)d._duration||\"isPause\"===d.data&&d._rawPrevTime>0&&(m=d),d=d._prev;m&&(this._time=a=m._startTime,this._totalTime=a+this._cycle*(this._totalDuration+this._repeatDelay))}if(this._cycle!==w&&!this._locked){var x=this._yoyo&&0!==(1&w),y=x===(this._yoyo&&0!==(1&this._cycle)),z=this._totalTime,A=this._cycle,B=this._rawPrevTime,C=this._time;if(this._totalTime=w*p,this._cycle<w?x=!x:this._totalTime+=p,this._time=q,this._rawPrevTime=0===p?u-1e-4:u,this._cycle=w,this._locked=!0,q=x?0:p,this.render(q,b,0===p),b||this._gc||this.vars.onRepeat&&this._callback(\"onRepeat\"),q!==this._time)return;if(y&&(q=x?p+1e-4:-1e-4,this.render(q,!0,!1)),this._locked=!1,this._paused&&!v)return;this._time=C,this._totalTime=z,this._cycle=A,this._rawPrevTime=B}if(!(this._time!==q&&this._first||c||k||m))return void(r!==this._totalTime&&this._onUpdate&&(b||this._callback(\"onUpdate\")));if(this._initted||(this._initted=!0),this._active||!this._paused&&this._totalTime!==r&&a>0&&(this._active=!0),0===r&&this.vars.onStart&&0!==this._totalTime&&(b||this._callback(\"onStart\")),n=this._time,n>=q)for(d=this._first;d&&(i=d._next,n===this._time&&(!this._paused||v));)(d._active||d._startTime<=this._time&&!d._paused&&!d._gc)&&(m===d&&this.pause(),d._reversed?d.render((d._dirty?d.totalDuration():d._totalDuration)-(a-d._startTime)*d._timeScale,b,c):d.render((a-d._startTime)*d._timeScale,b,c)),d=i;else for(d=this._last;d&&(i=d._prev,n===this._time&&(!this._paused||v));){if(d._active||d._startTime<=q&&!d._paused&&!d._gc){if(m===d){for(m=d._prev;m&&m.endTime()>this._time;)m.render(m._reversed?m.totalDuration()-(a-m._startTime)*m._timeScale:(a-m._startTime)*m._timeScale,b,c),m=m._prev;m=null,this.pause()}d._reversed?d.render((d._dirty?d.totalDuration():d._totalDuration)-(a-d._startTime)*d._timeScale,b,c):d.render((a-d._startTime)*d._timeScale,b,c)}d=i}this._onUpdate&&(b||(g.length&&h(),this._callback(\"onUpdate\"))),j&&(this._locked||this._gc||(s===this._startTime||t!==this._timeScale)&&(0===this._time||o>=this.totalDuration())&&(f&&(g.length&&h(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!b&&this.vars[j]&&this._callback(j)))},j.getActive=function(a,b,c){null==a&&(a=!0),null==b&&(b=!0),null==c&&(c=!1);var d,e,f=[],g=this.getChildren(a,b,c),h=0,i=g.length;for(d=0;i>d;d++)e=g[d],e.isActive()&&(f[h++]=e);return f},j.getLabelAfter=function(a){a||0!==a&&(a=this._time);var b,c=this.getLabelsArray(),d=c.length;for(b=0;d>b;b++)if(c[b].time>a)return c[b].name;return null},j.getLabelBefore=function(a){null==a&&(a=this._time);for(var b=this.getLabelsArray(),c=b.length;--c>-1;)if(b[c].time<a)return b[c].name;return null},j.getLabelsArray=function(){var a,b=[],c=0;for(a in this._labels)b[c++]={time:this._labels[a],name:a};return b.sort(function(a,b){return a.time-b.time}),b},j.progress=function(a,b){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!==(1&this._cycle)?1-a:a)+this._cycle*(this._duration+this._repeatDelay),b):this._time/this.duration()},j.totalProgress=function(a,b){return arguments.length?this.totalTime(this.totalDuration()*a,b):this._totalTime/this.totalDuration()},j.totalDuration=function(b){return arguments.length?-1!==this._repeat&&b?this.timeScale(this.totalDuration()/b):this:(this._dirty&&(a.prototype.totalDuration.call(this),this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat),this._totalDuration)},j.time=function(a,b){return arguments.length?(this._dirty&&this.totalDuration(),a>this._duration&&(a=this._duration),this._yoyo&&0!==(1&this._cycle)?a=this._duration-a+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(a+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(a,b)):this._time},j.repeat=function(a){return arguments.length?(this._repeat=a,this._uncache(!0)):this._repeat},j.repeatDelay=function(a){return arguments.length?(this._repeatDelay=a,this._uncache(!0)):this._repeatDelay},j.yoyo=function(a){return arguments.length?(this._yoyo=a,this):this._yoyo},j.currentLabel=function(a){return arguments.length?this.seek(a,!0):this.getLabelBefore(this._time+1e-8)},d},!0),function(){var a=180/Math.PI,b=[],c=[],d=[],e={},f=_gsScope._gsDefine.globals,g=function(a,b,c,d){this.a=a,this.b=b,this.c=c,this.d=d,this.da=d-a,this.ca=c-a,this.ba=b-a},h=\",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,\",i=function(a,b,c,d){var e={a:a},f={},g={},h={c:d},i=(a+b)/2,j=(b+c)/2,k=(c+d)/2,l=(i+j)/2,m=(j+k)/2,n=(m-l)/8;return e.b=i+(a-i)/4,f.b=l+n,e.c=f.a=(e.b+f.b)/2,f.c=g.a=(l+m)/2,g.b=m-n,h.b=k+(d-k)/4,g.c=h.a=(g.b+h.b)/2,[e,f,g,h]},j=function(a,e,f,g,h){var j,k,l,m,n,o,p,q,r,s,t,u,v,w=a.length-1,x=0,y=a[0].a;for(j=0;w>j;j++)n=a[x],k=n.a,l=n.d,m=a[x+1].d,h?(t=b[j],u=c[j],v=(u+t)*e*.25/(g?.5:d[j]||.5),o=l-(l-k)*(g?.5*e:0!==t?v/t:0),p=l+(m-l)*(g?.5*e:0!==u?v/u:0),q=l-(o+((p-o)*(3*t/(t+u)+.5)/4||0))):(o=l-(l-k)*e*.5,p=l+(m-l)*e*.5,q=l-(o+p)/2),o+=q,p+=q,n.c=r=o,0!==j?n.b=y:n.b=y=n.a+.6*(n.c-n.a),n.da=l-k,n.ca=r-k,n.ba=y-k,f?(s=i(k,y,r,l),a.splice(x,1,s[0],s[1],s[2],s[3]),x+=4):x++,y=p;n=a[x],n.b=y,n.c=y+.4*(n.d-y),n.da=n.d-n.a,n.ca=n.c-n.a,n.ba=y-n.a,f&&(s=i(n.a,y,n.c,n.d),a.splice(x,1,s[0],s[1],s[2],s[3]))},k=function(a,d,e,f){var h,i,j,k,l,m,n=[];if(f)for(a=[f].concat(a),i=a.length;--i>-1;)\"string\"==typeof(m=a[i][d])&&\"=\"===m.charAt(1)&&(a[i][d]=f[d]+Number(m.charAt(0)+m.substr(2)));if(h=a.length-2,0>h)return n[0]=new g(a[0][d],0,0,a[-1>h?0:1][d]),n;for(i=0;h>i;i++)j=a[i][d],k=a[i+1][d],n[i]=new g(j,0,0,k),e&&(l=a[i+2][d],b[i]=(b[i]||0)+(k-j)*(k-j),c[i]=(c[i]||0)+(l-k)*(l-k));return n[i]=new g(a[i][d],0,0,a[i+1][d]),n},l=function(a,f,g,i,l,m){var n,o,p,q,r,s,t,u,v={},w=[],x=m||a[0];l=\"string\"==typeof l?\",\"+l+\",\":h,null==f&&(f=1);for(o in a[0])w.push(o);if(a.length>1){for(u=a[a.length-1],t=!0,n=w.length;--n>-1;)if(o=w[n],Math.abs(x[o]-u[o])>.05){t=!1;break}t&&(a=a.concat(),m&&a.unshift(m),a.push(a[1]),m=a[a.length-3])}for(b.length=c.length=d.length=0,n=w.length;--n>-1;)o=w[n],e[o]=-1!==l.indexOf(\",\"+o+\",\"),v[o]=k(a,o,e[o],m);for(n=b.length;--n>-1;)b[n]=Math.sqrt(b[n]),c[n]=Math.sqrt(c[n]);if(!i){for(n=w.length;--n>-1;)if(e[o])for(p=v[w[n]],s=p.length-1,q=0;s>q;q++)r=p[q+1].da/c[q]+p[q].da/b[q],d[q]=(d[q]||0)+r*r;for(n=d.length;--n>-1;)d[n]=Math.sqrt(d[n])}for(n=w.length,q=g?4:1;--n>-1;)o=w[n],p=v[o],j(p,f,g,i,e[o]),t&&(p.splice(0,q),p.splice(p.length-q,q));return v},m=function(a,b,c){b=b||\"soft\";var d,e,f,h,i,j,k,l,m,n,o,p={},q=\"cubic\"===b?3:2,r=\"soft\"===b,s=[];if(r&&c&&(a=[c].concat(a)),null==a||a.length<q+1)throw\"invalid Bezier data\";for(m in a[0])s.push(m);for(j=s.length;--j>-1;){for(m=s[j],p[m]=i=[],n=0,l=a.length,k=0;l>k;k++)d=null==c?a[k][m]:\"string\"==typeof(o=a[k][m])&&\"=\"===o.charAt(1)?c[m]+Number(o.charAt(0)+o.substr(2)):Number(o),r&&k>1&&l-1>k&&(i[n++]=(d+i[n-2])/2),i[n++]=d;for(l=n-q+1,n=0,k=0;l>k;k+=q)d=i[k],e=i[k+1],f=i[k+2],h=2===q?0:i[k+3],i[n++]=o=3===q?new g(d,e,f,h):new g(d,(2*e+d)/3,(2*e+f)/3,f);i.length=n}return p},n=function(a,b,c){for(var d,e,f,g,h,i,j,k,l,m,n,o=1/c,p=a.length;--p>-1;)for(m=a[p],f=m.a,g=m.d-f,h=m.c-f,i=m.b-f,d=e=0,k=1;c>=k;k++)j=o*k,l=1-j,d=e-(e=(j*j*g+3*l*(j*h+l*i))*j),n=p*c+k-1,b[n]=(b[n]||0)+d*d},o=function(a,b){b=b>>0||6;var c,d,e,f,g=[],h=[],i=0,j=0,k=b-1,l=[],m=[];for(c in a)n(a[c],g,b);for(e=g.length,d=0;e>d;d++)i+=Math.sqrt(g[d]),f=d%b,m[f]=i,f===k&&(j+=i,f=d/b>>0,l[f]=m,h[f]=j,i=0,m=[]);return{length:j,lengths:h,segments:l}},p=_gsScope._gsDefine.plugin({propName:\"bezier\",priority:-1,version:\"1.3.4\",API:2,global:!0,init:function(a,b,c){this._target=a,b instanceof Array&&(b={values:b}),this._func={},this._round={},this._props=[],this._timeRes=null==b.timeResolution?6:parseInt(b.timeResolution,10);\nvar d,e,f,g,h,i=b.values||[],j={},k=i[0],n=b.autoRotate||c.vars.orientToBezier;this._autoRotate=n?n instanceof Array?n:[[\"x\",\"y\",\"rotation\",n===!0?0:Number(n)||0]]:null;for(d in k)this._props.push(d);for(f=this._props.length;--f>-1;)d=this._props[f],this._overwriteProps.push(d),e=this._func[d]=\"function\"==typeof a[d],j[d]=e?a[d.indexOf(\"set\")||\"function\"!=typeof a[\"get\"+d.substr(3)]?d:\"get\"+d.substr(3)]():parseFloat(a[d]),h||j[d]!==i[0][d]&&(h=j);if(this._beziers=\"cubic\"!==b.type&&\"quadratic\"!==b.type&&\"soft\"!==b.type?l(i,isNaN(b.curviness)?1:b.curviness,!1,\"thruBasic\"===b.type,b.correlate,h):m(i,b.type,j),this._segCount=this._beziers[d].length,this._timeRes){var p=o(this._beziers,this._timeRes);this._length=p.length,this._lengths=p.lengths,this._segments=p.segments,this._l1=this._li=this._s1=this._si=0,this._l2=this._lengths[0],this._curSeg=this._segments[0],this._s2=this._curSeg[0],this._prec=1/this._curSeg.length}if(n=this._autoRotate)for(this._initialRotations=[],n[0]instanceof Array||(this._autoRotate=n=[n]),f=n.length;--f>-1;){for(g=0;3>g;g++)d=n[f][g],this._func[d]=\"function\"==typeof a[d]?a[d.indexOf(\"set\")||\"function\"!=typeof a[\"get\"+d.substr(3)]?d:\"get\"+d.substr(3)]:!1;d=n[f][2],this._initialRotations[f]=this._func[d]?this._func[d].call(this._target):this._target[d]}return this._startRatio=c.vars.runBackwards?1:0,!0},set:function(b){var c,d,e,f,g,h,i,j,k,l,m=this._segCount,n=this._func,o=this._target,p=b!==this._startRatio;if(this._timeRes){if(k=this._lengths,l=this._curSeg,b*=this._length,e=this._li,b>this._l2&&m-1>e){for(j=m-1;j>e&&(this._l2=k[++e])<=b;);this._l1=k[e-1],this._li=e,this._curSeg=l=this._segments[e],this._s2=l[this._s1=this._si=0]}else if(b<this._l1&&e>0){for(;e>0&&(this._l1=k[--e])>=b;);0===e&&b<this._l1?this._l1=0:e++,this._l2=k[e],this._li=e,this._curSeg=l=this._segments[e],this._s1=l[(this._si=l.length-1)-1]||0,this._s2=l[this._si]}if(c=e,b-=this._l1,e=this._si,b>this._s2&&e<l.length-1){for(j=l.length-1;j>e&&(this._s2=l[++e])<=b;);this._s1=l[e-1],this._si=e}else if(b<this._s1&&e>0){for(;e>0&&(this._s1=l[--e])>=b;);0===e&&b<this._s1?this._s1=0:e++,this._s2=l[e],this._si=e}h=(e+(b-this._s1)/(this._s2-this._s1))*this._prec}else c=0>b?0:b>=1?m-1:m*b>>0,h=(b-c*(1/m))*m;for(d=1-h,e=this._props.length;--e>-1;)f=this._props[e],g=this._beziers[f][c],i=(h*h*g.da+3*d*(h*g.ca+d*g.ba))*h+g.a,this._round[f]&&(i=Math.round(i)),n[f]?o[f](i):o[f]=i;if(this._autoRotate){var q,r,s,t,u,v,w,x=this._autoRotate;for(e=x.length;--e>-1;)f=x[e][2],v=x[e][3]||0,w=x[e][4]===!0?1:a,g=this._beziers[x[e][0]],q=this._beziers[x[e][1]],g&&q&&(g=g[c],q=q[c],r=g.a+(g.b-g.a)*h,t=g.b+(g.c-g.b)*h,r+=(t-r)*h,t+=(g.c+(g.d-g.c)*h-t)*h,s=q.a+(q.b-q.a)*h,u=q.b+(q.c-q.b)*h,s+=(u-s)*h,u+=(q.c+(q.d-q.c)*h-u)*h,i=p?Math.atan2(u-s,t-r)*w+v:this._initialRotations[e],n[f]?o[f](i):o[f]=i)}}}),q=p.prototype;p.bezierThrough=l,p.cubicToQuadratic=i,p._autoCSS=!0,p.quadraticToCubic=function(a,b,c){return new g(a,(2*b+a)/3,(2*b+c)/3,c)},p._cssRegister=function(){var a=f.CSSPlugin;if(a){var b=a._internals,c=b._parseToProxy,d=b._setPluginRatio,e=b.CSSPropTween;b._registerComplexSpecialProp(\"bezier\",{parser:function(a,b,f,g,h,i){b instanceof Array&&(b={values:b}),i=new p;var j,k,l,m=b.values,n=m.length-1,o=[],q={};if(0>n)return h;for(j=0;n>=j;j++)l=c(a,m[j],g,h,i,n!==j),o[j]=l.end;for(k in b)q[k]=b[k];return q.values=o,h=new e(a,\"bezier\",0,0,l.pt,2),h.data=l,h.plugin=i,h.setRatio=d,0===q.autoRotate&&(q.autoRotate=!0),!q.autoRotate||q.autoRotate instanceof Array||(j=q.autoRotate===!0?0:Number(q.autoRotate),q.autoRotate=null!=l.end.left?[[\"left\",\"top\",\"rotation\",j,!1]]:null!=l.end.x?[[\"x\",\"y\",\"rotation\",j,!1]]:!1),q.autoRotate&&(g._transform||g._enableTransforms(!1),l.autoRotate=g._target._gsTransform),i._onInitTween(l.proxy,q,g._tween),h}})}},q._roundProps=function(a,b){for(var c=this._overwriteProps,d=c.length;--d>-1;)(a[c[d]]||a.bezier||a.bezierThrough)&&(this._round[c[d]]=b)},q._kill=function(a){var b,c,d=this._props;for(b in this._beziers)if(b in a)for(delete this._beziers[b],delete this._func[b],c=d.length;--c>-1;)d[c]===b&&d.splice(c,1);return this._super._kill.call(this,a)}}(),_gsScope._gsDefine(\"plugins.CSSPlugin\",[\"plugins.TweenPlugin\",\"TweenLite\"],function(a,b){var c,d,e,f,g=function(){a.call(this,\"css\"),this._overwriteProps.length=0,this.setRatio=g.prototype.setRatio},h=_gsScope._gsDefine.globals,i={},j=g.prototype=new a(\"css\");j.constructor=g,g.version=\"1.18.2\",g.API=2,g.defaultTransformPerspective=0,g.defaultSkewType=\"compensated\",g.defaultSmoothOrigin=!0,j=\"px\",g.suffixMap={top:j,right:j,bottom:j,left:j,width:j,height:j,fontSize:j,padding:j,margin:j,perspective:j,lineHeight:\"\"};var k,l,m,n,o,p,q=/(?:\\d|\\-\\d|\\.\\d|\\-\\.\\d)+/g,r=/(?:\\d|\\-\\d|\\.\\d|\\-\\.\\d|\\+=\\d|\\-=\\d|\\+=.\\d|\\-=\\.\\d)+/g,s=/(?:\\+=|\\-=|\\-|\\b)[\\d\\-\\.]+[a-zA-Z0-9]*(?:%|\\b)/gi,t=/(?![+-]?\\d*\\.?\\d+|[+-]|e[+-]\\d+)[^0-9]/g,u=/(?:\\d|\\-|\\+|=|#|\\.)*/g,v=/opacity *= *([^)]*)/i,w=/opacity:([^;]*)/i,x=/alpha\\(opacity *=.+?\\)/i,y=/^(rgb|hsl)/,z=/([A-Z])/g,A=/-([a-z])/gi,B=/(^(?:url\\(\\\"|url\\())|(?:(\\\"\\))$|\\)$)/gi,C=function(a,b){return b.toUpperCase()},D=/(?:Left|Right|Width)/i,E=/(M11|M12|M21|M22)=[\\d\\-\\.e]+/gi,F=/progid\\:DXImageTransform\\.Microsoft\\.Matrix\\(.+?\\)/i,G=/,(?=[^\\)]*(?:\\(|$))/gi,H=Math.PI/180,I=180/Math.PI,J={},K=document,L=function(a){return K.createElementNS?K.createElementNS(\"http://www.w3.org/1999/xhtml\",a):K.createElement(a)},M=L(\"div\"),N=L(\"img\"),O=g._internals={_specialProps:i},P=navigator.userAgent,Q=function(){var a=P.indexOf(\"Android\"),b=L(\"a\");return m=-1!==P.indexOf(\"Safari\")&&-1===P.indexOf(\"Chrome\")&&(-1===a||Number(P.substr(a+8,1))>3),o=m&&Number(P.substr(P.indexOf(\"Version/\")+8,1))<6,n=-1!==P.indexOf(\"Firefox\"),(/MSIE ([0-9]{1,}[\\.0-9]{0,})/.exec(P)||/Trident\\/.*rv:([0-9]{1,}[\\.0-9]{0,})/.exec(P))&&(p=parseFloat(RegExp.$1)),b?(b.style.cssText=\"top:1px;opacity:.55;\",/^0.55/.test(b.style.opacity)):!1}(),R=function(a){return v.test(\"string\"==typeof a?a:(a.currentStyle?a.currentStyle.filter:a.style.filter)||\"\")?parseFloat(RegExp.$1)/100:1},S=function(a){window.console&&console.log(a)},T=\"\",U=\"\",V=function(a,b){b=b||M;var c,d,e=b.style;if(void 0!==e[a])return a;for(a=a.charAt(0).toUpperCase()+a.substr(1),c=[\"O\",\"Moz\",\"ms\",\"Ms\",\"Webkit\"],d=5;--d>-1&&void 0===e[c[d]+a];);return d>=0?(U=3===d?\"ms\":c[d],T=\"-\"+U.toLowerCase()+\"-\",U+a):null},W=K.defaultView?K.defaultView.getComputedStyle:function(){},X=g.getStyle=function(a,b,c,d,e){var f;return Q||\"opacity\"!==b?(!d&&a.style[b]?f=a.style[b]:(c=c||W(a))?f=c[b]||c.getPropertyValue(b)||c.getPropertyValue(b.replace(z,\"-$1\").toLowerCase()):a.currentStyle&&(f=a.currentStyle[b]),null==e||f&&\"none\"!==f&&\"auto\"!==f&&\"auto auto\"!==f?f:e):R(a)},Y=O.convertToPixels=function(a,c,d,e,f){if(\"px\"===e||!e)return d;if(\"auto\"===e||!d)return 0;var h,i,j,k=D.test(c),l=a,m=M.style,n=0>d;if(n&&(d=-d),\"%\"===e&&-1!==c.indexOf(\"border\"))h=d/100*(k?a.clientWidth:a.clientHeight);else{if(m.cssText=\"border:0 solid red;position:\"+X(a,\"position\")+\";line-height:0;\",\"%\"!==e&&l.appendChild&&\"v\"!==e.charAt(0)&&\"rem\"!==e)m[k?\"borderLeftWidth\":\"borderTopWidth\"]=d+e;else{if(l=a.parentNode||K.body,i=l._gsCache,j=b.ticker.frame,i&&k&&i.time===j)return i.width*d/100;m[k?\"width\":\"height\"]=d+e}l.appendChild(M),h=parseFloat(M[k?\"offsetWidth\":\"offsetHeight\"]),l.removeChild(M),k&&\"%\"===e&&g.cacheWidths!==!1&&(i=l._gsCache=l._gsCache||{},i.time=j,i.width=h/d*100),0!==h||f||(h=Y(a,c,d,e,!0))}return n?-h:h},Z=O.calculateOffset=function(a,b,c){if(\"absolute\"!==X(a,\"position\",c))return 0;var d=\"left\"===b?\"Left\":\"Top\",e=X(a,\"margin\"+d,c);return a[\"offset\"+d]-(Y(a,b,parseFloat(e),e.replace(u,\"\"))||0)},$=function(a,b){var c,d,e,f={};if(b=b||W(a,null))if(c=b.length)for(;--c>-1;)e=b[c],(-1===e.indexOf(\"-transform\")||za===e)&&(f[e.replace(A,C)]=b.getPropertyValue(e));else for(c in b)(-1===c.indexOf(\"Transform\")||ya===c)&&(f[c]=b[c]);else if(b=a.currentStyle||a.style)for(c in b)\"string\"==typeof c&&void 0===f[c]&&(f[c.replace(A,C)]=b[c]);return Q||(f.opacity=R(a)),d=La(a,b,!1),f.rotation=d.rotation,f.skewX=d.skewX,f.scaleX=d.scaleX,f.scaleY=d.scaleY,f.x=d.x,f.y=d.y,Ba&&(f.z=d.z,f.rotationX=d.rotationX,f.rotationY=d.rotationY,f.scaleZ=d.scaleZ),f.filters&&delete f.filters,f},_=function(a,b,c,d,e){var f,g,h,i={},j=a.style;for(g in c)\"cssText\"!==g&&\"length\"!==g&&isNaN(g)&&(b[g]!==(f=c[g])||e&&e[g])&&-1===g.indexOf(\"Origin\")&&(\"number\"==typeof f||\"string\"==typeof f)&&(i[g]=\"auto\"!==f||\"left\"!==g&&\"top\"!==g?\"\"!==f&&\"auto\"!==f&&\"none\"!==f||\"string\"!=typeof b[g]||\"\"===b[g].replace(t,\"\")?f:0:Z(a,g),void 0!==j[g]&&(h=new oa(j,g,j[g],h)));if(d)for(g in d)\"className\"!==g&&(i[g]=d[g]);return{difs:i,firstMPT:h}},aa={width:[\"Left\",\"Right\"],height:[\"Top\",\"Bottom\"]},ba=[\"marginLeft\",\"marginRight\",\"marginTop\",\"marginBottom\"],ca=function(a,b,c){var d=parseFloat(\"width\"===b?a.offsetWidth:a.offsetHeight),e=aa[b],f=e.length;for(c=c||W(a,null);--f>-1;)d-=parseFloat(X(a,\"padding\"+e[f],c,!0))||0,d-=parseFloat(X(a,\"border\"+e[f]+\"Width\",c,!0))||0;return d},da=function(a,b){if(\"contain\"===a||\"auto\"===a||\"auto auto\"===a)return a+\" \";(null==a||\"\"===a)&&(a=\"0 0\");var c=a.split(\" \"),d=-1!==a.indexOf(\"left\")?\"0%\":-1!==a.indexOf(\"right\")?\"100%\":c[0],e=-1!==a.indexOf(\"top\")?\"0%\":-1!==a.indexOf(\"bottom\")?\"100%\":c[1];return null==e?e=\"center\"===d?\"50%\":\"0\":\"center\"===e&&(e=\"50%\"),(\"center\"===d||isNaN(parseFloat(d))&&-1===(d+\"\").indexOf(\"=\"))&&(d=\"50%\"),a=d+\" \"+e+(c.length>2?\" \"+c[2]:\"\"),b&&(b.oxp=-1!==d.indexOf(\"%\"),b.oyp=-1!==e.indexOf(\"%\"),b.oxr=\"=\"===d.charAt(1),b.oyr=\"=\"===e.charAt(1),b.ox=parseFloat(d.replace(t,\"\")),b.oy=parseFloat(e.replace(t,\"\")),b.v=a),b||a},ea=function(a,b){return\"string\"==typeof a&&\"=\"===a.charAt(1)?parseInt(a.charAt(0)+\"1\",10)*parseFloat(a.substr(2)):parseFloat(a)-parseFloat(b)},fa=function(a,b){return null==a?b:\"string\"==typeof a&&\"=\"===a.charAt(1)?parseInt(a.charAt(0)+\"1\",10)*parseFloat(a.substr(2))+b:parseFloat(a)},ga=function(a,b,c,d){var e,f,g,h,i,j=1e-6;return null==a?h=b:\"number\"==typeof a?h=a:(e=360,f=a.split(\"_\"),i=\"=\"===a.charAt(1),g=(i?parseInt(a.charAt(0)+\"1\",10)*parseFloat(f[0].substr(2)):parseFloat(f[0]))*(-1===a.indexOf(\"rad\")?1:I)-(i?0:b),f.length&&(d&&(d[c]=b+g),-1!==a.indexOf(\"short\")&&(g%=e,g!==g%(e/2)&&(g=0>g?g+e:g-e)),-1!==a.indexOf(\"_cw\")&&0>g?g=(g+9999999999*e)%e-(g/e|0)*e:-1!==a.indexOf(\"ccw\")&&g>0&&(g=(g-9999999999*e)%e-(g/e|0)*e)),h=b+g),j>h&&h>-j&&(h=0),h},ha={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],fuchsia:[255,0,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},ia=function(a,b,c){return a=0>a?a+1:a>1?a-1:a,255*(1>6*a?b+(c-b)*a*6:.5>a?c:2>3*a?b+(c-b)*(2/3-a)*6:b)+.5|0},ja=g.parseColor=function(a,b){var c,d,e,f,g,h,i,j,k,l,m;if(a)if(\"number\"==typeof a)c=[a>>16,a>>8&255,255&a];else{if(\",\"===a.charAt(a.length-1)&&(a=a.substr(0,a.length-1)),ha[a])c=ha[a];else if(\"#\"===a.charAt(0))4===a.length&&(d=a.charAt(1),e=a.charAt(2),f=a.charAt(3),a=\"#\"+d+d+e+e+f+f),a=parseInt(a.substr(1),16),c=[a>>16,a>>8&255,255&a];else if(\"hsl\"===a.substr(0,3))if(c=m=a.match(q),b){if(-1!==a.indexOf(\"=\"))return a.match(r)}else g=Number(c[0])%360/360,h=Number(c[1])/100,i=Number(c[2])/100,e=.5>=i?i*(h+1):i+h-i*h,d=2*i-e,c.length>3&&(c[3]=Number(a[3])),c[0]=ia(g+1/3,d,e),c[1]=ia(g,d,e),c[2]=ia(g-1/3,d,e);else c=a.match(q)||ha.transparent;c[0]=Number(c[0]),c[1]=Number(c[1]),c[2]=Number(c[2]),c.length>3&&(c[3]=Number(c[3]))}else c=ha.black;return b&&!m&&(d=c[0]/255,e=c[1]/255,f=c[2]/255,j=Math.max(d,e,f),k=Math.min(d,e,f),i=(j+k)/2,j===k?g=h=0:(l=j-k,h=i>.5?l/(2-j-k):l/(j+k),g=j===d?(e-f)/l+(f>e?6:0):j===e?(f-d)/l+2:(d-e)/l+4,g*=60),c[0]=g+.5|0,c[1]=100*h+.5|0,c[2]=100*i+.5|0),c},ka=function(a,b){var c,d,e,f=a.match(la)||[],g=0,h=f.length?\"\":a;for(c=0;c<f.length;c++)d=f[c],e=a.substr(g,a.indexOf(d,g)-g),g+=e.length+d.length,d=ja(d,b),3===d.length&&d.push(1),h+=e+(b?\"hsla(\"+d[0]+\",\"+d[1]+\"%,\"+d[2]+\"%,\"+d[3]:\"rgba(\"+d.join(\",\"))+\")\";return h},la=\"(?:\\\\b(?:(?:rgb|rgba|hsl|hsla)\\\\(.+?\\\\))|\\\\B#(?:[0-9a-f]{3}){1,2}\\\\b\";for(j in ha)la+=\"|\"+j+\"\\\\b\";la=new RegExp(la+\")\",\"gi\"),g.colorStringFilter=function(a){var b,c=a[0]+a[1];la.lastIndex=0,la.test(c)&&(b=-1!==c.indexOf(\"hsl(\")||-1!==c.indexOf(\"hsla(\"),a[0]=ka(a[0],b),a[1]=ka(a[1],b))},b.defaultStringFilter||(b.defaultStringFilter=g.colorStringFilter);var ma=function(a,b,c,d){if(null==a)return function(a){return a};var e,f=b?(a.match(la)||[\"\"])[0]:\"\",g=a.split(f).join(\"\").match(s)||[],h=a.substr(0,a.indexOf(g[0])),i=\")\"===a.charAt(a.length-1)?\")\":\"\",j=-1!==a.indexOf(\" \")?\" \":\",\",k=g.length,l=k>0?g[0].replace(q,\"\"):\"\";return k?e=b?function(a){var b,m,n,o;if(\"number\"==typeof a)a+=l;else if(d&&G.test(a)){for(o=a.replace(G,\"|\").split(\"|\"),n=0;n<o.length;n++)o[n]=e(o[n]);return o.join(\",\")}if(b=(a.match(la)||[f])[0],m=a.split(b).join(\"\").match(s)||[],n=m.length,k>n--)for(;++n<k;)m[n]=c?m[(n-1)/2|0]:g[n];return h+m.join(j)+j+b+i+(-1!==a.indexOf(\"inset\")?\" inset\":\"\")}:function(a){var b,f,m;if(\"number\"==typeof a)a+=l;else if(d&&G.test(a)){for(f=a.replace(G,\"|\").split(\"|\"),m=0;m<f.length;m++)f[m]=e(f[m]);return f.join(\",\")}if(b=a.match(s)||[],m=b.length,k>m--)for(;++m<k;)b[m]=c?b[(m-1)/2|0]:g[m];return h+b.join(j)+i}:function(a){return a}},na=function(a){return a=a.split(\",\"),function(b,c,d,e,f,g,h){var i,j=(c+\"\").split(\" \");for(h={},i=0;4>i;i++)h[a[i]]=j[i]=j[i]||j[(i-1)/2>>0];return e.parse(b,h,f,g)}},oa=(O._setPluginRatio=function(a){this.plugin.setRatio(a);for(var b,c,d,e,f,g=this.data,h=g.proxy,i=g.firstMPT,j=1e-6;i;)b=h[i.v],i.r?b=Math.round(b):j>b&&b>-j&&(b=0),i.t[i.p]=b,i=i._next;if(g.autoRotate&&(g.autoRotate.rotation=h.rotation),1===a||0===a)for(i=g.firstMPT,f=1===a?\"e\":\"b\";i;){if(c=i.t,c.type){if(1===c.type){for(e=c.xs0+c.s+c.xs1,d=1;d<c.l;d++)e+=c[\"xn\"+d]+c[\"xs\"+(d+1)];c[f]=e}}else c[f]=c.s+c.xs0;i=i._next}},function(a,b,c,d,e){this.t=a,this.p=b,this.v=c,this.r=e,d&&(d._prev=this,this._next=d)}),pa=(O._parseToProxy=function(a,b,c,d,e,f){var g,h,i,j,k,l=d,m={},n={},o=c._transform,p=J;for(c._transform=null,J=b,d=k=c.parse(a,b,d,e),J=p,f&&(c._transform=o,l&&(l._prev=null,l._prev&&(l._prev._next=null)));d&&d!==l;){if(d.type<=1&&(h=d.p,n[h]=d.s+d.c,m[h]=d.s,f||(j=new oa(d,\"s\",h,j,d.r),d.c=0),1===d.type))for(g=d.l;--g>0;)i=\"xn\"+g,h=d.p+\"_\"+i,n[h]=d.data[i],m[h]=d[i],f||(j=new oa(d,i,h,j,d.rxp[i]));d=d._next}return{proxy:m,end:n,firstMPT:j,pt:k}},O.CSSPropTween=function(a,b,d,e,g,h,i,j,k,l,m){this.t=a,this.p=b,this.s=d,this.c=e,this.n=i||b,a instanceof pa||f.push(this.n),this.r=j,this.type=h||0,k&&(this.pr=k,c=!0),this.b=void 0===l?d:l,this.e=void 0===m?d+e:m,g&&(this._next=g,g._prev=this)}),qa=function(a,b,c,d,e,f){var g=new pa(a,b,c,d-c,e,-1,f);return g.b=c,g.e=g.xs0=d,g},ra=g.parseComplex=function(a,b,c,d,e,f,g,h,i,j){c=c||f||\"\",g=new pa(a,b,0,0,g,j?2:1,null,!1,h,c,d),d+=\"\";var l,m,n,o,p,s,t,u,v,w,x,y,z,A=c.split(\", \").join(\",\").split(\" \"),B=d.split(\", \").join(\",\").split(\" \"),C=A.length,D=k!==!1;for((-1!==d.indexOf(\",\")||-1!==c.indexOf(\",\"))&&(A=A.join(\" \").replace(G,\", \").split(\" \"),B=B.join(\" \").replace(G,\", \").split(\" \"),C=A.length),C!==B.length&&(A=(f||\"\").split(\" \"),C=A.length),g.plugin=i,g.setRatio=j,la.lastIndex=0,l=0;C>l;l++)if(o=A[l],p=B[l],u=parseFloat(o),u||0===u)g.appendXtra(\"\",u,ea(p,u),p.replace(r,\"\"),D&&-1!==p.indexOf(\"px\"),!0);else if(e&&la.test(o))y=\",\"===p.charAt(p.length-1)?\"),\":\")\",z=-1!==p.indexOf(\"hsl\")&&Q,o=ja(o,z),p=ja(p,z),v=o.length+p.length>6,v&&!Q&&0===p[3]?(g[\"xs\"+g.l]+=g.l?\" transparent\":\"transparent\",g.e=g.e.split(B[l]).join(\"transparent\")):(Q||(v=!1),z?g.appendXtra(v?\"hsla(\":\"hsl(\",o[0],ea(p[0],o[0]),\",\",!1,!0).appendXtra(\"\",o[1],ea(p[1],o[1]),\"%,\",!1).appendXtra(\"\",o[2],ea(p[2],o[2]),v?\"%,\":\"%\"+y,!1):g.appendXtra(v?\"rgba(\":\"rgb(\",o[0],p[0]-o[0],\",\",!0,!0).appendXtra(\"\",o[1],p[1]-o[1],\",\",!0).appendXtra(\"\",o[2],p[2]-o[2],v?\",\":y,!0),v&&(o=o.length<4?1:o[3],g.appendXtra(\"\",o,(p.length<4?1:p[3])-o,y,!1))),la.lastIndex=0;else if(s=o.match(q)){if(t=p.match(r),!t||t.length!==s.length)return g;for(n=0,m=0;m<s.length;m++)x=s[m],w=o.indexOf(x,n),g.appendXtra(o.substr(n,w-n),Number(x),ea(t[m],x),\"\",D&&\"px\"===o.substr(w+x.length,2),0===m),n=w+x.length;g[\"xs\"+g.l]+=o.substr(n)}else g[\"xs\"+g.l]+=g.l?\" \"+p:p;if(-1!==d.indexOf(\"=\")&&g.data){for(y=g.xs0+g.data.s,l=1;l<g.l;l++)y+=g[\"xs\"+l]+g.data[\"xn\"+l];g.e=y+g[\"xs\"+l]}return g.l||(g.type=-1,g.xs0=g.e),g.xfirst||g},sa=9;for(j=pa.prototype,j.l=j.pr=0;--sa>0;)j[\"xn\"+sa]=0,j[\"xs\"+sa]=\"\";j.xs0=\"\",j._next=j._prev=j.xfirst=j.data=j.plugin=j.setRatio=j.rxp=null,j.appendXtra=function(a,b,c,d,e,f){var g=this,h=g.l;return g[\"xs\"+h]+=f&&h?\" \"+a:a||\"\",c||0===h||g.plugin?(g.l++,g.type=g.setRatio?2:1,g[\"xs\"+g.l]=d||\"\",h>0?(g.data[\"xn\"+h]=b+c,g.rxp[\"xn\"+h]=e,g[\"xn\"+h]=b,g.plugin||(g.xfirst=new pa(g,\"xn\"+h,b,c,g.xfirst||g,0,g.n,e,g.pr),g.xfirst.xs0=0),g):(g.data={s:b+c},g.rxp={},g.s=b,g.c=c,g.r=e,g)):(g[\"xs\"+h]+=b+(d||\"\"),g)};var ta=function(a,b){b=b||{},this.p=b.prefix?V(a)||a:a,i[a]=i[this.p]=this,this.format=b.formatter||ma(b.defaultValue,b.color,b.collapsible,b.multi),b.parser&&(this.parse=b.parser),this.clrs=b.color,this.multi=b.multi,this.keyword=b.keyword,this.dflt=b.defaultValue,this.pr=b.priority||0},ua=O._registerComplexSpecialProp=function(a,b,c){\"object\"!=typeof b&&(b={parser:c});var d,e,f=a.split(\",\"),g=b.defaultValue;for(c=c||[g],d=0;d<f.length;d++)b.prefix=0===d&&b.prefix,b.defaultValue=c[d]||g,e=new ta(f[d],b)},va=function(a){if(!i[a]){var b=a.charAt(0).toUpperCase()+a.substr(1)+\"Plugin\";ua(a,{parser:function(a,c,d,e,f,g,j){var k=h.com.greensock.plugins[b];return k?(k._cssRegister(),i[d].parse(a,c,d,e,f,g,j)):(S(\"Error: \"+b+\" js file not loaded.\"),f)}})}};j=ta.prototype,j.parseComplex=function(a,b,c,d,e,f){var g,h,i,j,k,l,m=this.keyword;if(this.multi&&(G.test(c)||G.test(b)?(h=b.replace(G,\"|\").split(\"|\"),i=c.replace(G,\"|\").split(\"|\")):m&&(h=[b],i=[c])),i){for(j=i.length>h.length?i.length:h.length,g=0;j>g;g++)b=h[g]=h[g]||this.dflt,c=i[g]=i[g]||this.dflt,m&&(k=b.indexOf(m),l=c.indexOf(m),k!==l&&(-1===l?h[g]=h[g].split(m).join(\"\"):-1===k&&(h[g]+=\" \"+m)));b=h.join(\", \"),c=i.join(\", \")}return ra(a,this.p,b,c,this.clrs,this.dflt,d,this.pr,e,f)},j.parse=function(a,b,c,d,f,g,h){return this.parseComplex(a.style,this.format(X(a,this.p,e,!1,this.dflt)),this.format(b),f,g)},g.registerSpecialProp=function(a,b,c){ua(a,{parser:function(a,d,e,f,g,h,i){var j=new pa(a,e,0,0,g,2,e,!1,c);return j.plugin=h,j.setRatio=b(a,d,f._tween,e),j},priority:c})},g.useSVGTransformAttr=m||n;var wa,xa=\"scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent\".split(\",\"),ya=V(\"transform\"),za=T+\"transform\",Aa=V(\"transformOrigin\"),Ba=null!==V(\"perspective\"),Ca=O.Transform=function(){this.perspective=parseFloat(g.defaultTransformPerspective)||0,this.force3D=g.defaultForce3D!==!1&&Ba?g.defaultForce3D||\"auto\":!1},Da=window.SVGElement,Ea=function(a,b,c){var d,e=K.createElementNS(\"http://www.w3.org/2000/svg\",a),f=/([a-z])([A-Z])/g;for(d in c)e.setAttributeNS(null,d.replace(f,\"$1-$2\").toLowerCase(),c[d]);return b.appendChild(e),e},Fa=K.documentElement,Ga=function(){var a,b,c,d=p||/Android/i.test(P)&&!window.chrome;return K.createElementNS&&!d&&(a=Ea(\"svg\",Fa),b=Ea(\"rect\",a,{width:100,height:50,x:100}),c=b.getBoundingClientRect().width,b.style[Aa]=\"50% 50%\",b.style[ya]=\"scaleX(0.5)\",d=c===b.getBoundingClientRect().width&&!(n&&Ba),Fa.removeChild(a)),d}(),Ha=function(a,b,c,d,e){var f,h,i,j,k,l,m,n,o,p,q,r,s,t,u=a._gsTransform,v=Ka(a,!0);u&&(s=u.xOrigin,t=u.yOrigin),(!d||(f=d.split(\" \")).length<2)&&(m=a.getBBox(),b=da(b).split(\" \"),f=[(-1!==b[0].indexOf(\"%\")?parseFloat(b[0])/100*m.width:parseFloat(b[0]))+m.x,(-1!==b[1].indexOf(\"%\")?parseFloat(b[1])/100*m.height:parseFloat(b[1]))+m.y]),c.xOrigin=j=parseFloat(f[0]),c.yOrigin=k=parseFloat(f[1]),d&&v!==Ja&&(l=v[0],m=v[1],n=v[2],o=v[3],p=v[4],q=v[5],r=l*o-m*n,h=j*(o/r)+k*(-n/r)+(n*q-o*p)/r,i=j*(-m/r)+k*(l/r)-(l*q-m*p)/r,j=c.xOrigin=f[0]=h,k=c.yOrigin=f[1]=i),u&&(e||e!==!1&&g.defaultSmoothOrigin!==!1?(h=j-s,i=k-t,u.xOffset+=h*v[0]+i*v[2]-h,u.yOffset+=h*v[1]+i*v[3]-i):u.xOffset=u.yOffset=0),a.setAttribute(\"data-svg-origin\",f.join(\" \"))},Ia=function(a){return!!(Da&&\"function\"==typeof a.getBBox&&a.getCTM&&(!a.parentNode||a.parentNode.getBBox&&a.parentNode.getCTM))},Ja=[1,0,0,1,0,0],Ka=function(a,b){var c,d,e,f,g,h=a._gsTransform||new Ca,i=1e5;if(ya?d=X(a,za,null,!0):a.currentStyle&&(d=a.currentStyle.filter.match(E),d=d&&4===d.length?[d[0].substr(4),Number(d[2].substr(4)),Number(d[1].substr(4)),d[3].substr(4),h.x||0,h.y||0].join(\",\"):\"\"),c=!d||\"none\"===d||\"matrix(1, 0, 0, 1, 0, 0)\"===d,(h.svg||a.getBBox&&Ia(a))&&(c&&-1!==(a.style[ya]+\"\").indexOf(\"matrix\")&&(d=a.style[ya],c=0),e=a.getAttribute(\"transform\"),c&&e&&(-1!==e.indexOf(\"matrix\")?(d=e,c=0):-1!==e.indexOf(\"translate\")&&(d=\"matrix(1,0,0,1,\"+e.match(/(?:\\-|\\b)[\\d\\-\\.e]+\\b/gi).join(\",\")+\")\",c=0))),c)return Ja;for(e=(d||\"\").match(/(?:\\-|\\b)[\\d\\-\\.e]+\\b/gi)||[],sa=e.length;--sa>-1;)f=Number(e[sa]),e[sa]=(g=f-(f|=0))?(g*i+(0>g?-.5:.5)|0)/i+f:f;return b&&e.length>6?[e[0],e[1],e[4],e[5],e[12],e[13]]:e},La=O.getTransform=function(a,c,d,f){if(a._gsTransform&&d&&!f)return a._gsTransform;var h,i,j,k,l,m,n=d?a._gsTransform||new Ca:new Ca,o=n.scaleX<0,p=2e-5,q=1e5,r=Ba?parseFloat(X(a,Aa,c,!1,\"0 0 0\").split(\" \")[2])||n.zOrigin||0:0,s=parseFloat(g.defaultTransformPerspective)||0;if(n.svg=!(!a.getBBox||!Ia(a)),n.svg&&(Ha(a,X(a,Aa,e,!1,\"50% 50%\")+\"\",n,a.getAttribute(\"data-svg-origin\")),wa=g.useSVGTransformAttr||Ga),h=Ka(a),h!==Ja){if(16===h.length){var t,u,v,w,x,y=h[0],z=h[1],A=h[2],B=h[3],C=h[4],D=h[5],E=h[6],F=h[7],G=h[8],H=h[9],J=h[10],K=h[12],L=h[13],M=h[14],N=h[11],O=Math.atan2(E,J);n.zOrigin&&(M=-n.zOrigin,K=G*M-h[12],L=H*M-h[13],M=J*M+n.zOrigin-h[14]),n.rotationX=O*I,O&&(w=Math.cos(-O),x=Math.sin(-O),t=C*w+G*x,u=D*w+H*x,v=E*w+J*x,G=C*-x+G*w,H=D*-x+H*w,J=E*-x+J*w,N=F*-x+N*w,C=t,D=u,E=v),O=Math.atan2(-A,J),n.rotationY=O*I,O&&(w=Math.cos(-O),x=Math.sin(-O),t=y*w-G*x,u=z*w-H*x,v=A*w-J*x,H=z*x+H*w,J=A*x+J*w,N=B*x+N*w,y=t,z=u,A=v),O=Math.atan2(z,y),n.rotation=O*I,O&&(w=Math.cos(-O),x=Math.sin(-O),y=y*w+C*x,u=z*w+D*x,D=z*-x+D*w,E=A*-x+E*w,z=u),n.rotationX&&Math.abs(n.rotationX)+Math.abs(n.rotation)>359.9&&(n.rotationX=n.rotation=0,n.rotationY=180-n.rotationY),n.scaleX=(Math.sqrt(y*y+z*z)*q+.5|0)/q,n.scaleY=(Math.sqrt(D*D+H*H)*q+.5|0)/q,n.scaleZ=(Math.sqrt(E*E+J*J)*q+.5|0)/q,n.skewX=0,n.perspective=N?1/(0>N?-N:N):0,n.x=K,n.y=L,n.z=M,n.svg&&(n.x-=n.xOrigin-(n.xOrigin*y-n.yOrigin*C),n.y-=n.yOrigin-(n.yOrigin*z-n.xOrigin*D))}else if((!Ba||f||!h.length||n.x!==h[4]||n.y!==h[5]||!n.rotationX&&!n.rotationY)&&(void 0===n.x||\"none\"!==X(a,\"display\",c))){var P=h.length>=6,Q=P?h[0]:1,R=h[1]||0,S=h[2]||0,T=P?h[3]:1;n.x=h[4]||0,n.y=h[5]||0,j=Math.sqrt(Q*Q+R*R),k=Math.sqrt(T*T+S*S),l=Q||R?Math.atan2(R,Q)*I:n.rotation||0,m=S||T?Math.atan2(S,T)*I+l:n.skewX||0,Math.abs(m)>90&&Math.abs(m)<270&&(o?(j*=-1,m+=0>=l?180:-180,l+=0>=l?180:-180):(k*=-1,m+=0>=m?180:-180)),n.scaleX=j,n.scaleY=k,n.rotation=l,n.skewX=m,Ba&&(n.rotationX=n.rotationY=n.z=0,n.perspective=s,n.scaleZ=1),n.svg&&(n.x-=n.xOrigin-(n.xOrigin*Q+n.yOrigin*S),n.y-=n.yOrigin-(n.xOrigin*R+n.yOrigin*T))}n.zOrigin=r;for(i in n)n[i]<p&&n[i]>-p&&(n[i]=0)}return d&&(a._gsTransform=n,n.svg&&(wa&&a.style[ya]?b.delayedCall(.001,function(){Pa(a.style,ya)}):!wa&&a.getAttribute(\"transform\")&&b.delayedCall(.001,function(){a.removeAttribute(\"transform\")}))),n},Ma=function(a){var b,c,d=this.data,e=-d.rotation*H,f=e+d.skewX*H,g=1e5,h=(Math.cos(e)*d.scaleX*g|0)/g,i=(Math.sin(e)*d.scaleX*g|0)/g,j=(Math.sin(f)*-d.scaleY*g|0)/g,k=(Math.cos(f)*d.scaleY*g|0)/g,l=this.t.style,m=this.t.currentStyle;if(m){c=i,i=-j,j=-c,b=m.filter,l.filter=\"\";var n,o,q=this.t.offsetWidth,r=this.t.offsetHeight,s=\"absolute\"!==m.position,t=\"progid:DXImageTransform.Microsoft.Matrix(M11=\"+h+\", M12=\"+i+\", M21=\"+j+\", M22=\"+k,w=d.x+q*d.xPercent/100,x=d.y+r*d.yPercent/100;if(null!=d.ox&&(n=(d.oxp?q*d.ox*.01:d.ox)-q/2,o=(d.oyp?r*d.oy*.01:d.oy)-r/2,w+=n-(n*h+o*i),x+=o-(n*j+o*k)),s?(n=q/2,o=r/2,t+=\", Dx=\"+(n-(n*h+o*i)+w)+\", Dy=\"+(o-(n*j+o*k)+x)+\")\"):t+=\", sizingMethod='auto expand')\",-1!==b.indexOf(\"DXImageTransform.Microsoft.Matrix(\")?l.filter=b.replace(F,t):l.filter=t+\" \"+b,(0===a||1===a)&&1===h&&0===i&&0===j&&1===k&&(s&&-1===t.indexOf(\"Dx=0, Dy=0\")||v.test(b)&&100!==parseFloat(RegExp.$1)||-1===b.indexOf(b.indexOf(\"Alpha\"))&&l.removeAttribute(\"filter\")),!s){var y,z,A,B=8>p?1:-1;for(n=d.ieOffsetX||0,o=d.ieOffsetY||0,d.ieOffsetX=Math.round((q-((0>h?-h:h)*q+(0>i?-i:i)*r))/2+w),d.ieOffsetY=Math.round((r-((0>k?-k:k)*r+(0>j?-j:j)*q))/2+x),sa=0;4>sa;sa++)z=ba[sa],y=m[z],c=-1!==y.indexOf(\"px\")?parseFloat(y):Y(this.t,z,parseFloat(y),y.replace(u,\"\"))||0,A=c!==d[z]?2>sa?-d.ieOffsetX:-d.ieOffsetY:2>sa?n-d.ieOffsetX:o-d.ieOffsetY,l[z]=(d[z]=Math.round(c-A*(0===sa||2===sa?1:B)))+\"px\"}}},Na=O.set3DTransformRatio=O.setTransformRatio=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,o,p,q,r,s,t,u,v,w,x,y,z=this.data,A=this.t.style,B=z.rotation,C=z.rotationX,D=z.rotationY,E=z.scaleX,F=z.scaleY,G=z.scaleZ,I=z.x,J=z.y,K=z.z,L=z.svg,M=z.perspective,N=z.force3D;if(((1===a||0===a)&&\"auto\"===N&&(this.tween._totalTime===this.tween._totalDuration||!this.tween._totalTime)||!N)&&!K&&!M&&!D&&!C&&1===G||wa&&L||!Ba)return void(B||z.skewX||L?(B*=H,x=z.skewX*H,y=1e5,b=Math.cos(B)*E,e=Math.sin(B)*E,c=Math.sin(B-x)*-F,f=Math.cos(B-x)*F,x&&\"simple\"===z.skewType&&(s=Math.tan(x),s=Math.sqrt(1+s*s),c*=s,f*=s,z.skewY&&(b*=s,e*=s)),L&&(I+=z.xOrigin-(z.xOrigin*b+z.yOrigin*c)+z.xOffset,J+=z.yOrigin-(z.xOrigin*e+z.yOrigin*f)+z.yOffset,wa&&(z.xPercent||z.yPercent)&&(p=this.t.getBBox(),I+=.01*z.xPercent*p.width,J+=.01*z.yPercent*p.height),p=1e-6,p>I&&I>-p&&(I=0),p>J&&J>-p&&(J=0)),u=(b*y|0)/y+\",\"+(e*y|0)/y+\",\"+(c*y|0)/y+\",\"+(f*y|0)/y+\",\"+I+\",\"+J+\")\",L&&wa?this.t.setAttribute(\"transform\",\"matrix(\"+u):A[ya]=(z.xPercent||z.yPercent?\"translate(\"+z.xPercent+\"%,\"+z.yPercent+\"%) matrix(\":\"matrix(\")+u):A[ya]=(z.xPercent||z.yPercent?\"translate(\"+z.xPercent+\"%,\"+z.yPercent+\"%) matrix(\":\"matrix(\")+E+\",0,0,\"+F+\",\"+I+\",\"+J+\")\");if(n&&(p=1e-4,p>E&&E>-p&&(E=G=2e-5),p>F&&F>-p&&(F=G=2e-5),!M||z.z||z.rotationX||z.rotationY||(M=0)),B||z.skewX)B*=H,q=b=Math.cos(B),r=e=Math.sin(B),z.skewX&&(B-=z.skewX*H,q=Math.cos(B),r=Math.sin(B),\"simple\"===z.skewType&&(s=Math.tan(z.skewX*H),s=Math.sqrt(1+s*s),q*=s,r*=s,z.skewY&&(b*=s,e*=s))),c=-r,f=q;else{if(!(D||C||1!==G||M||L))return void(A[ya]=(z.xPercent||z.yPercent?\"translate(\"+z.xPercent+\"%,\"+z.yPercent+\"%) translate3d(\":\"translate3d(\")+I+\"px,\"+J+\"px,\"+K+\"px)\"+(1!==E||1!==F?\" scale(\"+E+\",\"+F+\")\":\"\"));b=f=1,c=e=0}j=1,d=g=h=i=k=l=0,m=M?-1/M:0,o=z.zOrigin,p=1e-6,v=\",\",w=\"0\",B=D*H,B&&(q=Math.cos(B),r=Math.sin(B),h=-r,k=m*-r,d=b*r,g=e*r,j=q,m*=q,b*=q,e*=q),B=C*H,B&&(q=Math.cos(B),r=Math.sin(B),s=c*q+d*r,t=f*q+g*r,i=j*r,l=m*r,d=c*-r+d*q,g=f*-r+g*q,j*=q,m*=q,c=s,f=t),1!==G&&(d*=G,g*=G,j*=G,m*=G),1!==F&&(c*=F,f*=F,i*=F,l*=F),1!==E&&(b*=E,e*=E,h*=E,k*=E),(o||L)&&(o&&(I+=d*-o,J+=g*-o,K+=j*-o+o),L&&(I+=z.xOrigin-(z.xOrigin*b+z.yOrigin*c)+z.xOffset,J+=z.yOrigin-(z.xOrigin*e+z.yOrigin*f)+z.yOffset),p>I&&I>-p&&(I=w),p>J&&J>-p&&(J=w),p>K&&K>-p&&(K=0)),u=z.xPercent||z.yPercent?\"translate(\"+z.xPercent+\"%,\"+z.yPercent+\"%) matrix3d(\":\"matrix3d(\",u+=(p>b&&b>-p?w:b)+v+(p>e&&e>-p?w:e)+v+(p>h&&h>-p?w:h),u+=v+(p>k&&k>-p?w:k)+v+(p>c&&c>-p?w:c)+v+(p>f&&f>-p?w:f),C||D||1!==G?(u+=v+(p>i&&i>-p?w:i)+v+(p>l&&l>-p?w:l)+v+(p>d&&d>-p?w:d),u+=v+(p>g&&g>-p?w:g)+v+(p>j&&j>-p?w:j)+v+(p>m&&m>-p?w:m)+v):u+=\",0,0,0,0,1,0,\",u+=I+v+J+v+K+v+(M?1+-K/M:1)+\")\",A[ya]=u};j=Ca.prototype,j.x=j.y=j.z=j.skewX=j.skewY=j.rotation=j.rotationX=j.rotationY=j.zOrigin=j.xPercent=j.yPercent=j.xOffset=j.yOffset=0,j.scaleX=j.scaleY=j.scaleZ=1,ua(\"transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin\",{parser:function(a,b,c,d,f,h,i){if(d._lastParsedTransform===i)return f;d._lastParsedTransform=i;var j,k,l,m,n,o,p,q,r,s,t=a._gsTransform,u=a.style,v=1e-6,w=xa.length,x=i,y={},z=\"transformOrigin\";if(i.display?(m=X(a,\"display\"),u.display=\"block\",j=La(a,e,!0,i.parseTransform),u.display=m):j=La(a,e,!0,i.parseTransform),d._transform=j,\"string\"==typeof x.transform&&ya)m=M.style,m[ya]=x.transform,m.display=\"block\",m.position=\"absolute\",K.body.appendChild(M),k=La(M,null,!1),K.body.removeChild(M),k.perspective||(k.perspective=j.perspective),null!=x.xPercent&&(k.xPercent=fa(x.xPercent,j.xPercent)),null!=x.yPercent&&(k.yPercent=fa(x.yPercent,j.yPercent));else if(\"object\"==typeof x){if(k={scaleX:fa(null!=x.scaleX?x.scaleX:x.scale,j.scaleX),scaleY:fa(null!=x.scaleY?x.scaleY:x.scale,j.scaleY),scaleZ:fa(x.scaleZ,j.scaleZ),x:fa(x.x,j.x),y:fa(x.y,j.y),z:fa(x.z,j.z),xPercent:fa(x.xPercent,j.xPercent),yPercent:fa(x.yPercent,j.yPercent),perspective:fa(x.transformPerspective,j.perspective)},q=x.directionalRotation,null!=q)if(\"object\"==typeof q)for(m in q)x[m]=q[m];else x.rotation=q;\"string\"==typeof x.x&&-1!==x.x.indexOf(\"%\")&&(k.x=0,k.xPercent=fa(x.x,j.xPercent)),\"string\"==typeof x.y&&-1!==x.y.indexOf(\"%\")&&(k.y=0,k.yPercent=fa(x.y,j.yPercent)),k.rotation=ga(\"rotation\"in x?x.rotation:\"shortRotation\"in x?x.shortRotation+\"_short\":\"rotationZ\"in x?x.rotationZ:j.rotation,j.rotation,\"rotation\",y),Ba&&(k.rotationX=ga(\"rotationX\"in x?x.rotationX:\"shortRotationX\"in x?x.shortRotationX+\"_short\":j.rotationX||0,j.rotationX,\"rotationX\",y),k.rotationY=ga(\"rotationY\"in x?x.rotationY:\"shortRotationY\"in x?x.shortRotationY+\"_short\":j.rotationY||0,j.rotationY,\"rotationY\",y)),k.skewX=null==x.skewX?j.skewX:ga(x.skewX,j.skewX),k.skewY=null==x.skewY?j.skewY:ga(x.skewY,j.skewY),(l=k.skewY-j.skewY)&&(k.skewX+=l,k.rotation+=l)}for(Ba&&null!=x.force3D&&(j.force3D=x.force3D,p=!0),j.skewType=x.skewType||j.skewType||g.defaultSkewType,o=j.force3D||j.z||j.rotationX||j.rotationY||k.z||k.rotationX||k.rotationY||k.perspective,o||null==x.scale||(k.scaleZ=1);--w>-1;)c=xa[w],n=k[c]-j[c],(n>v||-v>n||null!=x[c]||null!=J[c])&&(p=!0,f=new pa(j,c,j[c],n,f),c in y&&(f.e=y[c]),f.xs0=0,f.plugin=h,d._overwriteProps.push(f.n));return n=x.transformOrigin,j.svg&&(n||x.svgOrigin)&&(r=j.xOffset,s=j.yOffset,Ha(a,da(n),k,x.svgOrigin,x.smoothOrigin),f=qa(j,\"xOrigin\",(t?j:k).xOrigin,k.xOrigin,f,z),f=qa(j,\"yOrigin\",(t?j:k).yOrigin,k.yOrigin,f,z),(r!==j.xOffset||s!==j.yOffset)&&(f=qa(j,\"xOffset\",t?r:j.xOffset,j.xOffset,f,z),f=qa(j,\"yOffset\",t?s:j.yOffset,j.yOffset,f,z)),n=wa?null:\"0px 0px\"),(n||Ba&&o&&j.zOrigin)&&(ya?(p=!0,c=Aa,n=(n||X(a,c,e,!1,\"50% 50%\"))+\"\",f=new pa(u,c,0,0,f,-1,z),f.b=u[c],f.plugin=h,Ba?(m=j.zOrigin,n=n.split(\" \"),j.zOrigin=(n.length>2&&(0===m||\"0px\"!==n[2])?parseFloat(n[2]):m)||0,f.xs0=f.e=n[0]+\" \"+(n[1]||\"50%\")+\" 0px\",f=new pa(j,\"zOrigin\",0,0,f,-1,f.n),f.b=m,f.xs0=f.e=j.zOrigin):f.xs0=f.e=n):da(n+\"\",j)),p&&(d._transformType=j.svg&&wa||!o&&3!==this._transformType?2:3),f},prefix:!0}),ua(\"boxShadow\",{defaultValue:\"0px 0px 0px 0px #999\",prefix:!0,color:!0,multi:!0,keyword:\"inset\"}),ua(\"borderRadius\",{defaultValue:\"0px\",parser:function(a,b,c,f,g,h){b=this.format(b);var i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y=[\"borderTopLeftRadius\",\"borderTopRightRadius\",\"borderBottomRightRadius\",\"borderBottomLeftRadius\"],z=a.style;for(q=parseFloat(a.offsetWidth),r=parseFloat(a.offsetHeight),i=b.split(\" \"),j=0;j<y.length;j++)this.p.indexOf(\"border\")&&(y[j]=V(y[j])),m=l=X(a,y[j],e,!1,\"0px\"),-1!==m.indexOf(\" \")&&(l=m.split(\" \"),m=l[0],l=l[1]),n=k=i[j],o=parseFloat(m),t=m.substr((o+\"\").length),u=\"=\"===n.charAt(1),u?(p=parseInt(n.charAt(0)+\"1\",10),n=n.substr(2),p*=parseFloat(n),s=n.substr((p+\"\").length-(0>p?1:0))||\"\"):(p=parseFloat(n),s=n.substr((p+\"\").length)),\"\"===s&&(s=d[c]||t),s!==t&&(v=Y(a,\"borderLeft\",o,t),w=Y(a,\"borderTop\",o,t),\"%\"===s?(m=v/q*100+\"%\",l=w/r*100+\"%\"):\"em\"===s?(x=Y(a,\"borderLeft\",1,\"em\"),m=v/x+\"em\",l=w/x+\"em\"):(m=v+\"px\",l=w+\"px\"),u&&(n=parseFloat(m)+p+s,k=parseFloat(l)+p+s)),g=ra(z,y[j],m+\" \"+l,n+\" \"+k,!1,\"0px\",g);return g},prefix:!0,formatter:ma(\"0px 0px 0px 0px\",!1,!0)}),ua(\"backgroundPosition\",{\ndefaultValue:\"0 0\",parser:function(a,b,c,d,f,g){var h,i,j,k,l,m,n=\"background-position\",o=e||W(a,null),q=this.format((o?p?o.getPropertyValue(n+\"-x\")+\" \"+o.getPropertyValue(n+\"-y\"):o.getPropertyValue(n):a.currentStyle.backgroundPositionX+\" \"+a.currentStyle.backgroundPositionY)||\"0 0\"),r=this.format(b);if(-1!==q.indexOf(\"%\")!=(-1!==r.indexOf(\"%\"))&&(m=X(a,\"backgroundImage\").replace(B,\"\"),m&&\"none\"!==m)){for(h=q.split(\" \"),i=r.split(\" \"),N.setAttribute(\"src\",m),j=2;--j>-1;)q=h[j],k=-1!==q.indexOf(\"%\"),k!==(-1!==i[j].indexOf(\"%\"))&&(l=0===j?a.offsetWidth-N.width:a.offsetHeight-N.height,h[j]=k?parseFloat(q)/100*l+\"px\":parseFloat(q)/l*100+\"%\");q=h.join(\" \")}return this.parseComplex(a.style,q,r,f,g)},formatter:da}),ua(\"backgroundSize\",{defaultValue:\"0 0\",formatter:da}),ua(\"perspective\",{defaultValue:\"0px\",prefix:!0}),ua(\"perspectiveOrigin\",{defaultValue:\"50% 50%\",prefix:!0}),ua(\"transformStyle\",{prefix:!0}),ua(\"backfaceVisibility\",{prefix:!0}),ua(\"userSelect\",{prefix:!0}),ua(\"margin\",{parser:na(\"marginTop,marginRight,marginBottom,marginLeft\")}),ua(\"padding\",{parser:na(\"paddingTop,paddingRight,paddingBottom,paddingLeft\")}),ua(\"clip\",{defaultValue:\"rect(0px,0px,0px,0px)\",parser:function(a,b,c,d,f,g){var h,i,j;return 9>p?(i=a.currentStyle,j=8>p?\" \":\",\",h=\"rect(\"+i.clipTop+j+i.clipRight+j+i.clipBottom+j+i.clipLeft+\")\",b=this.format(b).split(\",\").join(j)):(h=this.format(X(a,this.p,e,!1,this.dflt)),b=this.format(b)),this.parseComplex(a.style,h,b,f,g)}}),ua(\"textShadow\",{defaultValue:\"0px 0px 0px #999\",color:!0,multi:!0}),ua(\"autoRound,strictUnits\",{parser:function(a,b,c,d,e){return e}}),ua(\"border\",{defaultValue:\"0px solid #000\",parser:function(a,b,c,d,f,g){return this.parseComplex(a.style,this.format(X(a,\"borderTopWidth\",e,!1,\"0px\")+\" \"+X(a,\"borderTopStyle\",e,!1,\"solid\")+\" \"+X(a,\"borderTopColor\",e,!1,\"#000\")),this.format(b),f,g)},color:!0,formatter:function(a){var b=a.split(\" \");return b[0]+\" \"+(b[1]||\"solid\")+\" \"+(a.match(la)||[\"#000\"])[0]}}),ua(\"borderWidth\",{parser:na(\"borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth\")}),ua(\"float,cssFloat,styleFloat\",{parser:function(a,b,c,d,e,f){var g=a.style,h=\"cssFloat\"in g?\"cssFloat\":\"styleFloat\";return new pa(g,h,0,0,e,-1,c,!1,0,g[h],b)}});var Oa=function(a){var b,c=this.t,d=c.filter||X(this.data,\"filter\")||\"\",e=this.s+this.c*a|0;100===e&&(-1===d.indexOf(\"atrix(\")&&-1===d.indexOf(\"radient(\")&&-1===d.indexOf(\"oader(\")?(c.removeAttribute(\"filter\"),b=!X(this.data,\"filter\")):(c.filter=d.replace(x,\"\"),b=!0)),b||(this.xn1&&(c.filter=d=d||\"alpha(opacity=\"+e+\")\"),-1===d.indexOf(\"pacity\")?0===e&&this.xn1||(c.filter=d+\" alpha(opacity=\"+e+\")\"):c.filter=d.replace(v,\"opacity=\"+e))};ua(\"opacity,alpha,autoAlpha\",{defaultValue:\"1\",parser:function(a,b,c,d,f,g){var h=parseFloat(X(a,\"opacity\",e,!1,\"1\")),i=a.style,j=\"autoAlpha\"===c;return\"string\"==typeof b&&\"=\"===b.charAt(1)&&(b=(\"-\"===b.charAt(0)?-1:1)*parseFloat(b.substr(2))+h),j&&1===h&&\"hidden\"===X(a,\"visibility\",e)&&0!==b&&(h=0),Q?f=new pa(i,\"opacity\",h,b-h,f):(f=new pa(i,\"opacity\",100*h,100*(b-h),f),f.xn1=j?1:0,i.zoom=1,f.type=2,f.b=\"alpha(opacity=\"+f.s+\")\",f.e=\"alpha(opacity=\"+(f.s+f.c)+\")\",f.data=a,f.plugin=g,f.setRatio=Oa),j&&(f=new pa(i,\"visibility\",0,0,f,-1,null,!1,0,0!==h?\"inherit\":\"hidden\",0===b?\"hidden\":\"inherit\"),f.xs0=\"inherit\",d._overwriteProps.push(f.n),d._overwriteProps.push(c)),f}});var Pa=function(a,b){b&&(a.removeProperty?((\"ms\"===b.substr(0,2)||\"webkit\"===b.substr(0,6))&&(b=\"-\"+b),a.removeProperty(b.replace(z,\"-$1\").toLowerCase())):a.removeAttribute(b))},Qa=function(a){if(this.t._gsClassPT=this,1===a||0===a){this.t.setAttribute(\"class\",0===a?this.b:this.e);for(var b=this.data,c=this.t.style;b;)b.v?c[b.p]=b.v:Pa(c,b.p),b=b._next;1===a&&this.t._gsClassPT===this&&(this.t._gsClassPT=null)}else this.t.getAttribute(\"class\")!==this.e&&this.t.setAttribute(\"class\",this.e)};ua(\"className\",{parser:function(a,b,d,f,g,h,i){var j,k,l,m,n,o=a.getAttribute(\"class\")||\"\",p=a.style.cssText;if(g=f._classNamePT=new pa(a,d,0,0,g,2),g.setRatio=Qa,g.pr=-11,c=!0,g.b=o,k=$(a,e),l=a._gsClassPT){for(m={},n=l.data;n;)m[n.p]=1,n=n._next;l.setRatio(1)}return a._gsClassPT=g,g.e=\"=\"!==b.charAt(1)?b:o.replace(new RegExp(\"\\\\s*\\\\b\"+b.substr(2)+\"\\\\b\"),\"\")+(\"+\"===b.charAt(0)?\" \"+b.substr(2):\"\"),a.setAttribute(\"class\",g.e),j=_(a,k,$(a),i,m),a.setAttribute(\"class\",o),g.data=j.firstMPT,a.style.cssText=p,g=g.xfirst=f.parse(a,j.difs,g,h)}});var Ra=function(a){if((1===a||0===a)&&this.data._totalTime===this.data._totalDuration&&\"isFromStart\"!==this.data.data){var b,c,d,e,f,g=this.t.style,h=i.transform.parse;if(\"all\"===this.e)g.cssText=\"\",e=!0;else for(b=this.e.split(\" \").join(\"\").split(\",\"),d=b.length;--d>-1;)c=b[d],i[c]&&(i[c].parse===h?e=!0:c=\"transformOrigin\"===c?Aa:i[c].p),Pa(g,c);e&&(Pa(g,ya),f=this.t._gsTransform,f&&(f.svg&&(this.t.removeAttribute(\"data-svg-origin\"),this.t.removeAttribute(\"transform\")),delete this.t._gsTransform))}};for(ua(\"clearProps\",{parser:function(a,b,d,e,f){return f=new pa(a,d,0,0,f,2),f.setRatio=Ra,f.e=b,f.pr=-10,f.data=e._tween,c=!0,f}}),j=\"bezier,throwProps,physicsProps,physics2D\".split(\",\"),sa=j.length;sa--;)va(j[sa]);j=g.prototype,j._firstPT=j._lastParsedTransform=j._transform=null,j._onInitTween=function(a,b,h){if(!a.nodeType)return!1;this._target=a,this._tween=h,this._vars=b,k=b.autoRound,c=!1,d=b.suffixMap||g.suffixMap,e=W(a,\"\"),f=this._overwriteProps;var j,n,p,q,r,s,t,u,v,x=a.style;if(l&&\"\"===x.zIndex&&(j=X(a,\"zIndex\",e),(\"auto\"===j||\"\"===j)&&this._addLazySet(x,\"zIndex\",0)),\"string\"==typeof b&&(q=x.cssText,j=$(a,e),x.cssText=q+\";\"+b,j=_(a,j,$(a)).difs,!Q&&w.test(b)&&(j.opacity=parseFloat(RegExp.$1)),b=j,x.cssText=q),b.className?this._firstPT=n=i.className.parse(a,b.className,\"className\",this,null,null,b):this._firstPT=n=this.parse(a,b,null),this._transformType){for(v=3===this._transformType,ya?m&&(l=!0,\"\"===x.zIndex&&(t=X(a,\"zIndex\",e),(\"auto\"===t||\"\"===t)&&this._addLazySet(x,\"zIndex\",0)),o&&this._addLazySet(x,\"WebkitBackfaceVisibility\",this._vars.WebkitBackfaceVisibility||(v?\"visible\":\"hidden\"))):x.zoom=1,p=n;p&&p._next;)p=p._next;u=new pa(a,\"transform\",0,0,null,2),this._linkCSSP(u,null,p),u.setRatio=ya?Na:Ma,u.data=this._transform||La(a,e,!0),u.tween=h,u.pr=-1,f.pop()}if(c){for(;n;){for(s=n._next,p=q;p&&p.pr>n.pr;)p=p._next;(n._prev=p?p._prev:r)?n._prev._next=n:q=n,(n._next=p)?p._prev=n:r=n,n=s}this._firstPT=q}return!0},j.parse=function(a,b,c,f){var g,h,j,l,m,n,o,p,q,r,s=a.style;for(g in b)n=b[g],h=i[g],h?c=h.parse(a,n,g,this,c,f,b):(m=X(a,g,e)+\"\",q=\"string\"==typeof n,\"color\"===g||\"fill\"===g||\"stroke\"===g||-1!==g.indexOf(\"Color\")||q&&y.test(n)?(q||(n=ja(n),n=(n.length>3?\"rgba(\":\"rgb(\")+n.join(\",\")+\")\"),c=ra(s,g,m,n,!0,\"transparent\",c,0,f)):!q||-1===n.indexOf(\" \")&&-1===n.indexOf(\",\")?(j=parseFloat(m),o=j||0===j?m.substr((j+\"\").length):\"\",(\"\"===m||\"auto\"===m)&&(\"width\"===g||\"height\"===g?(j=ca(a,g,e),o=\"px\"):\"left\"===g||\"top\"===g?(j=Z(a,g,e),o=\"px\"):(j=\"opacity\"!==g?0:1,o=\"\")),r=q&&\"=\"===n.charAt(1),r?(l=parseInt(n.charAt(0)+\"1\",10),n=n.substr(2),l*=parseFloat(n),p=n.replace(u,\"\")):(l=parseFloat(n),p=q?n.replace(u,\"\"):\"\"),\"\"===p&&(p=g in d?d[g]:o),n=l||0===l?(r?l+j:l)+p:b[g],o!==p&&\"\"!==p&&(l||0===l)&&j&&(j=Y(a,g,j,o),\"%\"===p?(j/=Y(a,g,100,\"%\")/100,b.strictUnits!==!0&&(m=j+\"%\")):\"em\"===p||\"rem\"===p||\"vw\"===p||\"vh\"===p?j/=Y(a,g,1,p):\"px\"!==p&&(l=Y(a,g,l,p),p=\"px\"),r&&(l||0===l)&&(n=l+j+p)),r&&(l+=j),!j&&0!==j||!l&&0!==l?void 0!==s[g]&&(n||n+\"\"!=\"NaN\"&&null!=n)?(c=new pa(s,g,l||j||0,0,c,-1,g,!1,0,m,n),c.xs0=\"none\"!==n||\"display\"!==g&&-1===g.indexOf(\"Style\")?n:m):S(\"invalid \"+g+\" tween value: \"+b[g]):(c=new pa(s,g,j,l-j,c,0,g,k!==!1&&(\"px\"===p||\"zIndex\"===g),0,m,n),c.xs0=p)):c=ra(s,g,m,n,!0,null,c,0,f)),f&&c&&!c.plugin&&(c.plugin=f);return c},j.setRatio=function(a){var b,c,d,e=this._firstPT,f=1e-6;if(1!==a||this._tween._time!==this._tween._duration&&0!==this._tween._time)if(a||this._tween._time!==this._tween._duration&&0!==this._tween._time||this._tween._rawPrevTime===-1e-6)for(;e;){if(b=e.c*a+e.s,e.r?b=Math.round(b):f>b&&b>-f&&(b=0),e.type)if(1===e.type)if(d=e.l,2===d)e.t[e.p]=e.xs0+b+e.xs1+e.xn1+e.xs2;else if(3===d)e.t[e.p]=e.xs0+b+e.xs1+e.xn1+e.xs2+e.xn2+e.xs3;else if(4===d)e.t[e.p]=e.xs0+b+e.xs1+e.xn1+e.xs2+e.xn2+e.xs3+e.xn3+e.xs4;else if(5===d)e.t[e.p]=e.xs0+b+e.xs1+e.xn1+e.xs2+e.xn2+e.xs3+e.xn3+e.xs4+e.xn4+e.xs5;else{for(c=e.xs0+b+e.xs1,d=1;d<e.l;d++)c+=e[\"xn\"+d]+e[\"xs\"+(d+1)];e.t[e.p]=c}else-1===e.type?e.t[e.p]=e.xs0:e.setRatio&&e.setRatio(a);else e.t[e.p]=b+e.xs0;e=e._next}else for(;e;)2!==e.type?e.t[e.p]=e.b:e.setRatio(a),e=e._next;else for(;e;){if(2!==e.type)if(e.r&&-1!==e.type)if(b=Math.round(e.s+e.c),e.type){if(1===e.type){for(d=e.l,c=e.xs0+b+e.xs1,d=1;d<e.l;d++)c+=e[\"xn\"+d]+e[\"xs\"+(d+1)];e.t[e.p]=c}}else e.t[e.p]=b+e.xs0;else e.t[e.p]=e.e;else e.setRatio(a);e=e._next}},j._enableTransforms=function(a){this._transform=this._transform||La(this._target,e,!0),this._transformType=this._transform.svg&&wa||!a&&3!==this._transformType?2:3};var Sa=function(a){this.t[this.p]=this.e,this.data._linkCSSP(this,this._next,null,!0)};j._addLazySet=function(a,b,c){var d=this._firstPT=new pa(a,b,0,0,this._firstPT,2);d.e=c,d.setRatio=Sa,d.data=this},j._linkCSSP=function(a,b,c,d){return a&&(b&&(b._prev=a),a._next&&(a._next._prev=a._prev),a._prev?a._prev._next=a._next:this._firstPT===a&&(this._firstPT=a._next,d=!0),c?c._next=a:d||null!==this._firstPT||(this._firstPT=a),a._next=b,a._prev=c),a},j._kill=function(b){var c,d,e,f=b;if(b.autoAlpha||b.alpha){f={};for(d in b)f[d]=b[d];f.opacity=1,f.autoAlpha&&(f.visibility=1)}return b.className&&(c=this._classNamePT)&&(e=c.xfirst,e&&e._prev?this._linkCSSP(e._prev,c._next,e._prev._prev):e===this._firstPT&&(this._firstPT=c._next),c._next&&this._linkCSSP(c._next,c._next._next,e._prev),this._classNamePT=null),a.prototype._kill.call(this,f)};var Ta=function(a,b,c){var d,e,f,g;if(a.slice)for(e=a.length;--e>-1;)Ta(a[e],b,c);else for(d=a.childNodes,e=d.length;--e>-1;)f=d[e],g=f.type,f.style&&(b.push($(f)),c&&c.push(f)),1!==g&&9!==g&&11!==g||!f.childNodes.length||Ta(f,b,c)};return g.cascadeTo=function(a,c,d){var e,f,g,h,i=b.to(a,c,d),j=[i],k=[],l=[],m=[],n=b._internals.reservedProps;for(a=i._targets||i.target,Ta(a,k,m),i.render(c,!0,!0),Ta(a,l),i.render(0,!0,!0),i._enabled(!0),e=m.length;--e>-1;)if(f=_(m[e],k[e],l[e]),f.firstMPT){f=f.difs;for(g in d)n[g]&&(f[g]=d[g]);h={};for(g in f)h[g]=k[e][g];j.push(b.fromTo(m[e],c,h,f))}return j},a.activate([g]),g},!0),function(){var a=_gsScope._gsDefine.plugin({propName:\"roundProps\",version:\"1.5\",priority:-1,API:2,init:function(a,b,c){return this._tween=c,!0}}),b=function(a){for(;a;)a.f||a.blob||(a.r=1),a=a._next},c=a.prototype;c._onInitAllProps=function(){for(var a,c,d,e=this._tween,f=e.vars.roundProps.join?e.vars.roundProps:e.vars.roundProps.split(\",\"),g=f.length,h={},i=e._propLookup.roundProps;--g>-1;)h[f[g]]=1;for(g=f.length;--g>-1;)for(a=f[g],c=e._firstPT;c;)d=c._next,c.pg?c.t._roundProps(h,!0):c.n===a&&(2===c.f&&c.t?b(c.t._firstPT):(this._add(c.t,a,c.s,c.c),d&&(d._prev=c._prev),c._prev?c._prev._next=d:e._firstPT===c&&(e._firstPT=d),c._next=c._prev=null,e._propLookup[a]=i)),c=d;return!1},c._add=function(a,b,c,d){this._addTween(a,b,c,c+d,b,!0),this._overwriteProps.push(b)}}(),function(){_gsScope._gsDefine.plugin({propName:\"attr\",API:2,version:\"0.5.0\",init:function(a,b,c){var d;if(\"function\"!=typeof a.setAttribute)return!1;for(d in b)this._addTween(a,\"setAttribute\",a.getAttribute(d)+\"\",b[d]+\"\",d,!1,d),this._overwriteProps.push(d);return!0}})}(),_gsScope._gsDefine.plugin({propName:\"directionalRotation\",version:\"0.2.1\",API:2,init:function(a,b,c){\"object\"!=typeof b&&(b={rotation:b}),this.finals={};var d,e,f,g,h,i,j=b.useRadians===!0?2*Math.PI:360,k=1e-6;for(d in b)\"useRadians\"!==d&&(i=(b[d]+\"\").split(\"_\"),e=i[0],f=parseFloat(\"function\"!=typeof a[d]?a[d]:a[d.indexOf(\"set\")||\"function\"!=typeof a[\"get\"+d.substr(3)]?d:\"get\"+d.substr(3)]()),g=this.finals[d]=\"string\"==typeof e&&\"=\"===e.charAt(1)?f+parseInt(e.charAt(0)+\"1\",10)*Number(e.substr(2)):Number(e)||0,h=g-f,i.length&&(e=i.join(\"_\"),-1!==e.indexOf(\"short\")&&(h%=j,h!==h%(j/2)&&(h=0>h?h+j:h-j)),-1!==e.indexOf(\"_cw\")&&0>h?h=(h+9999999999*j)%j-(h/j|0)*j:-1!==e.indexOf(\"ccw\")&&h>0&&(h=(h-9999999999*j)%j-(h/j|0)*j)),(h>k||-k>h)&&(this._addTween(a,d,f,f+h,d),this._overwriteProps.push(d)));return!0},set:function(a){var b;if(1!==a)this._super.setRatio.call(this,a);else for(b=this._firstPT;b;)b.f?b.t[b.p](this.finals[b.p]):b.t[b.p]=this.finals[b.p],b=b._next}})._autoCSS=!0,_gsScope._gsDefine(\"easing.Back\",[\"easing.Ease\"],function(a){var b,c,d,e=_gsScope.GreenSockGlobals||_gsScope,f=e.com.greensock,g=2*Math.PI,h=Math.PI/2,i=f._class,j=function(b,c){var d=i(\"easing.\"+b,function(){},!0),e=d.prototype=new a;return e.constructor=d,e.getRatio=c,d},k=a.register||function(){},l=function(a,b,c,d,e){var f=i(\"easing.\"+a,{easeOut:new b,easeIn:new c,easeInOut:new d},!0);return k(f,a),f},m=function(a,b,c){this.t=a,this.v=b,c&&(this.next=c,c.prev=this,this.c=c.v-b,this.gap=c.t-a)},n=function(b,c){var d=i(\"easing.\"+b,function(a){this._p1=a||0===a?a:1.70158,this._p2=1.525*this._p1},!0),e=d.prototype=new a;return e.constructor=d,e.getRatio=c,e.config=function(a){return new d(a)},d},o=l(\"Back\",n(\"BackOut\",function(a){return(a-=1)*a*((this._p1+1)*a+this._p1)+1}),n(\"BackIn\",function(a){return a*a*((this._p1+1)*a-this._p1)}),n(\"BackInOut\",function(a){return(a*=2)<1?.5*a*a*((this._p2+1)*a-this._p2):.5*((a-=2)*a*((this._p2+1)*a+this._p2)+2)})),p=i(\"easing.SlowMo\",function(a,b,c){b=b||0===b?b:.7,null==a?a=.7:a>1&&(a=1),this._p=1!==a?b:0,this._p1=(1-a)/2,this._p2=a,this._p3=this._p1+this._p2,this._calcEnd=c===!0},!0),q=p.prototype=new a;return q.constructor=p,q.getRatio=function(a){var b=a+(.5-a)*this._p;return a<this._p1?this._calcEnd?1-(a=1-a/this._p1)*a:b-(a=1-a/this._p1)*a*a*a*b:a>this._p3?this._calcEnd?1-(a=(a-this._p3)/this._p1)*a:b+(a-b)*(a=(a-this._p3)/this._p1)*a*a*a:this._calcEnd?1:b},p.ease=new p(.7,.7),q.config=p.config=function(a,b,c){return new p(a,b,c)},b=i(\"easing.SteppedEase\",function(a){a=a||1,this._p1=1/a,this._p2=a+1},!0),q=b.prototype=new a,q.constructor=b,q.getRatio=function(a){return 0>a?a=0:a>=1&&(a=.999999999),(this._p2*a>>0)*this._p1},q.config=b.config=function(a){return new b(a)},c=i(\"easing.RoughEase\",function(b){b=b||{};for(var c,d,e,f,g,h,i=b.taper||\"none\",j=[],k=0,l=0|(b.points||20),n=l,o=b.randomize!==!1,p=b.clamp===!0,q=b.template instanceof a?b.template:null,r=\"number\"==typeof b.strength?.4*b.strength:.4;--n>-1;)c=o?Math.random():1/l*n,d=q?q.getRatio(c):c,\"none\"===i?e=r:\"out\"===i?(f=1-c,e=f*f*r):\"in\"===i?e=c*c*r:.5>c?(f=2*c,e=f*f*.5*r):(f=2*(1-c),e=f*f*.5*r),o?d+=Math.random()*e-.5*e:n%2?d+=.5*e:d-=.5*e,p&&(d>1?d=1:0>d&&(d=0)),j[k++]={x:c,y:d};for(j.sort(function(a,b){return a.x-b.x}),h=new m(1,1,null),n=l;--n>-1;)g=j[n],h=new m(g.x,g.y,h);this._prev=new m(0,0,0!==h.t?h:h.next)},!0),q=c.prototype=new a,q.constructor=c,q.getRatio=function(a){var b=this._prev;if(a>b.t){for(;b.next&&a>=b.t;)b=b.next;b=b.prev}else for(;b.prev&&a<=b.t;)b=b.prev;return this._prev=b,b.v+(a-b.t)/b.gap*b.c},q.config=function(a){return new c(a)},c.ease=new c,l(\"Bounce\",j(\"BounceOut\",function(a){return 1/2.75>a?7.5625*a*a:2/2.75>a?7.5625*(a-=1.5/2.75)*a+.75:2.5/2.75>a?7.5625*(a-=2.25/2.75)*a+.9375:7.5625*(a-=2.625/2.75)*a+.984375}),j(\"BounceIn\",function(a){return(a=1-a)<1/2.75?1-7.5625*a*a:2/2.75>a?1-(7.5625*(a-=1.5/2.75)*a+.75):2.5/2.75>a?1-(7.5625*(a-=2.25/2.75)*a+.9375):1-(7.5625*(a-=2.625/2.75)*a+.984375)}),j(\"BounceInOut\",function(a){var b=.5>a;return a=b?1-2*a:2*a-1,a=1/2.75>a?7.5625*a*a:2/2.75>a?7.5625*(a-=1.5/2.75)*a+.75:2.5/2.75>a?7.5625*(a-=2.25/2.75)*a+.9375:7.5625*(a-=2.625/2.75)*a+.984375,b?.5*(1-a):.5*a+.5})),l(\"Circ\",j(\"CircOut\",function(a){return Math.sqrt(1-(a-=1)*a)}),j(\"CircIn\",function(a){return-(Math.sqrt(1-a*a)-1)}),j(\"CircInOut\",function(a){return(a*=2)<1?-.5*(Math.sqrt(1-a*a)-1):.5*(Math.sqrt(1-(a-=2)*a)+1)})),d=function(b,c,d){var e=i(\"easing.\"+b,function(a,b){this._p1=a>=1?a:1,this._p2=(b||d)/(1>a?a:1),this._p3=this._p2/g*(Math.asin(1/this._p1)||0),this._p2=g/this._p2},!0),f=e.prototype=new a;return f.constructor=e,f.getRatio=c,f.config=function(a,b){return new e(a,b)},e},l(\"Elastic\",d(\"ElasticOut\",function(a){return this._p1*Math.pow(2,-10*a)*Math.sin((a-this._p3)*this._p2)+1},.3),d(\"ElasticIn\",function(a){return-(this._p1*Math.pow(2,10*(a-=1))*Math.sin((a-this._p3)*this._p2))},.3),d(\"ElasticInOut\",function(a){return(a*=2)<1?-.5*(this._p1*Math.pow(2,10*(a-=1))*Math.sin((a-this._p3)*this._p2)):this._p1*Math.pow(2,-10*(a-=1))*Math.sin((a-this._p3)*this._p2)*.5+1},.45)),l(\"Expo\",j(\"ExpoOut\",function(a){return 1-Math.pow(2,-10*a)}),j(\"ExpoIn\",function(a){return Math.pow(2,10*(a-1))-.001}),j(\"ExpoInOut\",function(a){return(a*=2)<1?.5*Math.pow(2,10*(a-1)):.5*(2-Math.pow(2,-10*(a-1)))})),l(\"Sine\",j(\"SineOut\",function(a){return Math.sin(a*h)}),j(\"SineIn\",function(a){return-Math.cos(a*h)+1}),j(\"SineInOut\",function(a){return-.5*(Math.cos(Math.PI*a)-1)})),i(\"easing.EaseLookup\",{find:function(b){return a.map[b]}},!0),k(e.SlowMo,\"SlowMo\",\"ease,\"),k(c,\"RoughEase\",\"ease,\"),k(b,\"SteppedEase\",\"ease,\"),o},!0)}),_gsScope._gsDefine&&_gsScope._gsQueue.pop()(),function(a,b){\"use strict\";var c=a.GreenSockGlobals=a.GreenSockGlobals||a;if(!c.TweenLite){var d,e,f,g,h,i=function(a){var b,d=a.split(\".\"),e=c;for(b=0;b<d.length;b++)e[d[b]]=e=e[d[b]]||{};return e},j=i(\"com.greensock\"),k=1e-10,l=function(a){var b,c=[],d=a.length;for(b=0;b!==d;c.push(a[b++]));return c},m=function(){},n=function(){var a=Object.prototype.toString,b=a.call([]);return function(c){return null!=c&&(c instanceof Array||\"object\"==typeof c&&!!c.push&&a.call(c)===b)}}(),o={},p=function(d,e,f,g){this.sc=o[d]?o[d].sc:[],o[d]=this,this.gsClass=null,this.func=f;var h=[];this.check=function(j){for(var k,l,m,n,q,r=e.length,s=r;--r>-1;)(k=o[e[r]]||new p(e[r],[])).gsClass?(h[r]=k.gsClass,s--):j&&k.sc.push(this);if(0===s&&f)for(l=(\"com.greensock.\"+d).split(\".\"),m=l.pop(),n=i(l.join(\".\"))[m]=this.gsClass=f.apply(f,h),g&&(c[m]=n,q=\"undefined\"!=typeof module&&module.exports,!q&&\"function\"==typeof define&&define.amd?define((a.GreenSockAMDPath?a.GreenSockAMDPath+\"/\":\"\")+d.split(\".\").pop(),[],function(){return n}):d===b&&q&&(module.exports=n)),r=0;r<this.sc.length;r++)this.sc[r].check()},this.check(!0)},q=a._gsDefine=function(a,b,c,d){return new p(a,b,c,d)},r=j._class=function(a,b,c){return b=b||function(){},q(a,[],function(){return b},c),b};q.globals=c;var s=[0,0,1,1],t=[],u=r(\"easing.Ease\",function(a,b,c,d){this._func=a,this._type=c||0,this._power=d||0,this._params=b?s.concat(b):s},!0),v=u.map={},w=u.register=function(a,b,c,d){for(var e,f,g,h,i=b.split(\",\"),k=i.length,l=(c||\"easeIn,easeOut,easeInOut\").split(\",\");--k>-1;)for(f=i[k],e=d?r(\"easing.\"+f,null,!0):j.easing[f]||{},g=l.length;--g>-1;)h=l[g],v[f+\".\"+h]=v[h+f]=e[h]=a.getRatio?a:a[h]||new a};for(f=u.prototype,f._calcEnd=!1,f.getRatio=function(a){if(this._func)return this._params[0]=a,this._func.apply(null,this._params);var b=this._type,c=this._power,d=1===b?1-a:2===b?a:.5>a?2*a:2*(1-a);return 1===c?d*=d:2===c?d*=d*d:3===c?d*=d*d*d:4===c&&(d*=d*d*d*d),1===b?1-d:2===b?d:.5>a?d/2:1-d/2},d=[\"Linear\",\"Quad\",\"Cubic\",\"Quart\",\"Quint,Strong\"],e=d.length;--e>-1;)f=d[e]+\",Power\"+e,w(new u(null,null,1,e),f,\"easeOut\",!0),w(new u(null,null,2,e),f,\"easeIn\"+(0===e?\",easeNone\":\"\")),w(new u(null,null,3,e),f,\"easeInOut\");v.linear=j.easing.Linear.easeIn,v.swing=j.easing.Quad.easeInOut;var x=r(\"events.EventDispatcher\",function(a){this._listeners={},this._eventTarget=a||this});f=x.prototype,f.addEventListener=function(a,b,c,d,e){e=e||0;var f,i,j=this._listeners[a],k=0;for(null==j&&(this._listeners[a]=j=[]),i=j.length;--i>-1;)f=j[i],f.c===b&&f.s===c?j.splice(i,1):0===k&&f.pr<e&&(k=i+1);j.splice(k,0,{c:b,s:c,up:d,pr:e}),this!==g||h||g.wake()},f.removeEventListener=function(a,b){var c,d=this._listeners[a];if(d)for(c=d.length;--c>-1;)if(d[c].c===b)return void d.splice(c,1)},f.dispatchEvent=function(a){var b,c,d,e=this._listeners[a];if(e)for(b=e.length,c=this._eventTarget;--b>-1;)d=e[b],d&&(d.up?d.c.call(d.s||c,{type:a,target:c}):d.c.call(d.s||c))};var y=a.requestAnimationFrame,z=a.cancelAnimationFrame,A=Date.now||function(){return(new Date).getTime()},B=A();for(d=[\"ms\",\"moz\",\"webkit\",\"o\"],e=d.length;--e>-1&&!y;)y=a[d[e]+\"RequestAnimationFrame\"],z=a[d[e]+\"CancelAnimationFrame\"]||a[d[e]+\"CancelRequestAnimationFrame\"];r(\"Ticker\",function(a,b){var c,d,e,f,i,j=this,l=A(),n=b!==!1&&y?\"auto\":!1,o=500,p=33,q=\"tick\",r=function(a){var b,g,h=A()-B;h>o&&(l+=h-p),B+=h,j.time=(B-l)/1e3,b=j.time-i,(!c||b>0||a===!0)&&(j.frame++,i+=b+(b>=f?.004:f-b),g=!0),a!==!0&&(e=d(r)),g&&j.dispatchEvent(q)};x.call(j),j.time=j.frame=0,j.tick=function(){r(!0)},j.lagSmoothing=function(a,b){o=a||1/k,p=Math.min(b,o,0)},j.sleep=function(){null!=e&&(n&&z?z(e):clearTimeout(e),d=m,e=null,j===g&&(h=!1))},j.wake=function(a){null!==e?j.sleep():a?l+=-B+(B=A()):j.frame>10&&(B=A()-o+5),d=0===c?m:n&&y?y:function(a){return setTimeout(a,1e3*(i-j.time)+1|0)},j===g&&(h=!0),r(2)},j.fps=function(a){return arguments.length?(c=a,f=1/(c||60),i=this.time+f,void j.wake()):c},j.useRAF=function(a){return arguments.length?(j.sleep(),n=a,void j.fps(c)):n},j.fps(a),setTimeout(function(){\"auto\"===n&&j.frame<5&&\"hidden\"!==document.visibilityState&&j.useRAF(!1)},1500)}),f=j.Ticker.prototype=new j.events.EventDispatcher,f.constructor=j.Ticker;var C=r(\"core.Animation\",function(a,b){if(this.vars=b=b||{},this._duration=this._totalDuration=a||0,this._delay=Number(b.delay)||0,this._timeScale=1,this._active=b.immediateRender===!0,this.data=b.data,this._reversed=b.reversed===!0,V){h||g.wake();var c=this.vars.useFrames?U:V;c.add(this,c._time),this.vars.paused&&this.paused(!0)}});g=C.ticker=new j.Ticker,f=C.prototype,f._dirty=f._gc=f._initted=f._paused=!1,f._totalTime=f._time=0,f._rawPrevTime=-1,f._next=f._last=f._onUpdate=f._timeline=f.timeline=null,f._paused=!1;var D=function(){h&&A()-B>2e3&&g.wake(),setTimeout(D,2e3)};D(),f.play=function(a,b){return null!=a&&this.seek(a,b),this.reversed(!1).paused(!1)},f.pause=function(a,b){return null!=a&&this.seek(a,b),this.paused(!0)},f.resume=function(a,b){return null!=a&&this.seek(a,b),this.paused(!1)},f.seek=function(a,b){return this.totalTime(Number(a),b!==!1)},f.restart=function(a,b){return this.reversed(!1).paused(!1).totalTime(a?-this._delay:0,b!==!1,!0)},f.reverse=function(a,b){return null!=a&&this.seek(a||this.totalDuration(),b),this.reversed(!0).paused(!1)},f.render=function(a,b,c){},f.invalidate=function(){return this._time=this._totalTime=0,this._initted=this._gc=!1,this._rawPrevTime=-1,(this._gc||!this.timeline)&&this._enabled(!0),this},f.isActive=function(){var a,b=this._timeline,c=this._startTime;return!b||!this._gc&&!this._paused&&b.isActive()&&(a=b.rawTime())>=c&&a<c+this.totalDuration()/this._timeScale},f._enabled=function(a,b){return h||g.wake(),this._gc=!a,this._active=this.isActive(),b!==!0&&(a&&!this.timeline?this._timeline.add(this,this._startTime-this._delay):!a&&this.timeline&&this._timeline._remove(this,!0)),!1},f._kill=function(a,b){return this._enabled(!1,!1)},f.kill=function(a,b){return this._kill(a,b),this},f._uncache=function(a){for(var b=a?this:this.timeline;b;)b._dirty=!0,b=b.timeline;return this},f._swapSelfInParams=function(a){for(var b=a.length,c=a.concat();--b>-1;)\"{self}\"===a[b]&&(c[b]=this);return c},f._callback=function(a){var b=this.vars;b[a].apply(b[a+\"Scope\"]||b.callbackScope||this,b[a+\"Params\"]||t)},f.eventCallback=function(a,b,c,d){if(\"on\"===(a||\"\").substr(0,2)){var e=this.vars;if(1===arguments.length)return e[a];null==b?delete e[a]:(e[a]=b,e[a+\"Params\"]=n(c)&&-1!==c.join(\"\").indexOf(\"{self}\")?this._swapSelfInParams(c):c,e[a+\"Scope\"]=d),\"onUpdate\"===a&&(this._onUpdate=b)}return this},f.delay=function(a){return arguments.length?(this._timeline.smoothChildTiming&&this.startTime(this._startTime+a-this._delay),this._delay=a,this):this._delay},f.duration=function(a){return arguments.length?(this._duration=this._totalDuration=a,this._uncache(!0),this._timeline.smoothChildTiming&&this._time>0&&this._time<this._duration&&0!==a&&this.totalTime(this._totalTime*(a/this._duration),!0),this):(this._dirty=!1,this._duration)},f.totalDuration=function(a){return this._dirty=!1,arguments.length?this.duration(a):this._totalDuration},f.time=function(a,b){return arguments.length?(this._dirty&&this.totalDuration(),this.totalTime(a>this._duration?this._duration:a,b)):this._time},f.totalTime=function(a,b,c){if(h||g.wake(),!arguments.length)return this._totalTime;if(this._timeline){if(0>a&&!c&&(a+=this.totalDuration()),this._timeline.smoothChildTiming){this._dirty&&this.totalDuration();var d=this._totalDuration,e=this._timeline;if(a>d&&!c&&(a=d),this._startTime=(this._paused?this._pauseTime:e._time)-(this._reversed?d-a:a)/this._timeScale,e._dirty||this._uncache(!1),e._timeline)for(;e._timeline;)e._timeline._time!==(e._startTime+e._totalTime)/e._timeScale&&e.totalTime(e._totalTime,!0),e=e._timeline}this._gc&&this._enabled(!0,!1),(this._totalTime!==a||0===this._duration)&&(I.length&&X(),this.render(a,b,!1),I.length&&X())}return this},f.progress=f.totalProgress=function(a,b){var c=this.duration();return arguments.length?this.totalTime(c*a,b):c?this._time/c:this.ratio},f.startTime=function(a){return arguments.length?(a!==this._startTime&&(this._startTime=a,this.timeline&&this.timeline._sortChildren&&this.timeline.add(this,a-this._delay)),this):this._startTime},f.endTime=function(a){return this._startTime+(0!=a?this.totalDuration():this.duration())/this._timeScale},f.timeScale=function(a){if(!arguments.length)return this._timeScale;if(a=a||k,this._timeline&&this._timeline.smoothChildTiming){var b=this._pauseTime,c=b||0===b?b:this._timeline.totalTime();this._startTime=c-(c-this._startTime)*this._timeScale/a}return this._timeScale=a,this._uncache(!1)},f.reversed=function(a){return arguments.length?(a!=this._reversed&&(this._reversed=a,this.totalTime(this._timeline&&!this._timeline.smoothChildTiming?this.totalDuration()-this._totalTime:this._totalTime,!0)),this):this._reversed},f.paused=function(a){if(!arguments.length)return this._paused;var b,c,d=this._timeline;return a!=this._paused&&d&&(h||a||g.wake(),b=d.rawTime(),c=b-this._pauseTime,!a&&d.smoothChildTiming&&(this._startTime+=c,this._uncache(!1)),this._pauseTime=a?b:null,this._paused=a,this._active=this.isActive(),!a&&0!==c&&this._initted&&this.duration()&&(b=d.smoothChildTiming?this._totalTime:(b-this._startTime)/this._timeScale,this.render(b,b===this._totalTime,!0))),this._gc&&!a&&this._enabled(!0,!1),this};var E=r(\"core.SimpleTimeline\",function(a){C.call(this,0,a),this.autoRemoveChildren=this.smoothChildTiming=!0});f=E.prototype=new C,f.constructor=E,f.kill()._gc=!1,f._first=f._last=f._recent=null,f._sortChildren=!1,f.add=f.insert=function(a,b,c,d){var e,f;if(a._startTime=Number(b||0)+a._delay,a._paused&&this!==a._timeline&&(a._pauseTime=a._startTime+(this.rawTime()-a._startTime)/a._timeScale),a.timeline&&a.timeline._remove(a,!0),a.timeline=a._timeline=this,a._gc&&a._enabled(!0,!0),e=this._last,this._sortChildren)for(f=a._startTime;e&&e._startTime>f;)e=e._prev;return e?(a._next=e._next,e._next=a):(a._next=this._first,this._first=a),a._next?a._next._prev=a:this._last=a,a._prev=e,this._recent=a,this._timeline&&this._uncache(!0),this},f._remove=function(a,b){return a.timeline===this&&(b||a._enabled(!1,!0),a._prev?a._prev._next=a._next:this._first===a&&(this._first=a._next),a._next?a._next._prev=a._prev:this._last===a&&(this._last=a._prev),a._next=a._prev=a.timeline=null,a===this._recent&&(this._recent=this._last),this._timeline&&this._uncache(!0)),this},f.render=function(a,b,c){var d,e=this._first;for(this._totalTime=this._time=this._rawPrevTime=a;e;)d=e._next,(e._active||a>=e._startTime&&!e._paused)&&(e._reversed?e.render((e._dirty?e.totalDuration():e._totalDuration)-(a-e._startTime)*e._timeScale,b,c):e.render((a-e._startTime)*e._timeScale,b,c)),e=d},f.rawTime=function(){return h||g.wake(),this._totalTime};var F=r(\"TweenLite\",function(b,c,d){if(C.call(this,c,d),this.render=F.prototype.render,null==b)throw\"Cannot tween a null target.\";this.target=b=\"string\"!=typeof b?b:F.selector(b)||b;var e,f,g,h=b.jquery||b.length&&b!==a&&b[0]&&(b[0]===a||b[0].nodeType&&b[0].style&&!b.nodeType),i=this.vars.overwrite;if(this._overwrite=i=null==i?T[F.defaultOverwrite]:\"number\"==typeof i?i>>0:T[i],(h||b instanceof Array||b.push&&n(b))&&\"number\"!=typeof b[0])for(this._targets=g=l(b),this._propLookup=[],this._siblings=[],e=0;e<g.length;e++)f=g[e],f?\"string\"!=typeof f?f.length&&f!==a&&f[0]&&(f[0]===a||f[0].nodeType&&f[0].style&&!f.nodeType)?(g.splice(e--,1),this._targets=g=g.concat(l(f))):(this._siblings[e]=Y(f,this,!1),1===i&&this._siblings[e].length>1&&$(f,this,null,1,this._siblings[e])):(f=g[e--]=F.selector(f),\"string\"==typeof f&&g.splice(e+1,1)):g.splice(e--,1);else this._propLookup={},this._siblings=Y(b,this,!1),1===i&&this._siblings.length>1&&$(b,this,null,1,this._siblings);(this.vars.immediateRender||0===c&&0===this._delay&&this.vars.immediateRender!==!1)&&(this._time=-k,this.render(-this._delay))},!0),G=function(b){return b&&b.length&&b!==a&&b[0]&&(b[0]===a||b[0].nodeType&&b[0].style&&!b.nodeType)},H=function(a,b){var c,d={};for(c in a)S[c]||c in b&&\"transform\"!==c&&\"x\"!==c&&\"y\"!==c&&\"width\"!==c&&\"height\"!==c&&\"className\"!==c&&\"border\"!==c||!(!P[c]||P[c]&&P[c]._autoCSS)||(d[c]=a[c],delete a[c]);a.css=d};f=F.prototype=new C,f.constructor=F,f.kill()._gc=!1,f.ratio=0,f._firstPT=f._targets=f._overwrittenProps=f._startAt=null,f._notifyPluginsOfEnabled=f._lazy=!1,F.version=\"1.18.2\",F.defaultEase=f._ease=new u(null,null,1,1),F.defaultOverwrite=\"auto\",F.ticker=g,F.autoSleep=120,F.lagSmoothing=function(a,b){g.lagSmoothing(a,b)},F.selector=a.$||a.jQuery||function(b){var c=a.$||a.jQuery;return c?(F.selector=c,c(b)):\"undefined\"==typeof document?b:document.querySelectorAll?document.querySelectorAll(b):document.getElementById(\"#\"===b.charAt(0)?b.substr(1):b)};var I=[],J={},K=/(?:(-|-=|\\+=)?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/gi,L=function(a){for(var b,c=this._firstPT,d=1e-6;c;)b=c.blob?a?this.join(\"\"):this.start:c.c*a+c.s,c.r?b=Math.round(b):d>b&&b>-d&&(b=0),c.f?c.fp?c.t[c.p](c.fp,b):c.t[c.p](b):c.t[c.p]=b,c=c._next},M=function(a,b,c,d){var e,f,g,h,i,j,k,l=[a,b],m=0,n=\"\",o=0;for(l.start=a,c&&(c(l),a=l[0],b=l[1]),l.length=0,e=a.match(K)||[],f=b.match(K)||[],d&&(d._next=null,d.blob=1,l._firstPT=d),i=f.length,h=0;i>h;h++)k=f[h],j=b.substr(m,b.indexOf(k,m)-m),n+=j||!h?j:\",\",m+=j.length,o?o=(o+1)%5:\"rgba(\"===j.substr(-5)&&(o=1),k===e[h]||e.length<=h?n+=k:(n&&(l.push(n),n=\"\"),g=parseFloat(e[h]),l.push(g),l._firstPT={_next:l._firstPT,t:l,p:l.length-1,s:g,c:(\"=\"===k.charAt(1)?parseInt(k.charAt(0)+\"1\",10)*parseFloat(k.substr(2)):parseFloat(k)-g)||0,f:0,r:o&&4>o}),m+=k.length;return n+=b.substr(m),n&&l.push(n),l.setRatio=L,l},N=function(a,b,c,d,e,f,g,h){var i,j,k=\"get\"===c?a[b]:c,l=typeof a[b],m=\"string\"==typeof d&&\"=\"===d.charAt(1),n={t:a,p:b,s:k,f:\"function\"===l,pg:0,n:e||b,r:f,pr:0,c:m?parseInt(d.charAt(0)+\"1\",10)*parseFloat(d.substr(2)):parseFloat(d)-k||0};return\"number\"!==l&&(\"function\"===l&&\"get\"===c&&(j=b.indexOf(\"set\")||\"function\"!=typeof a[\"get\"+b.substr(3)]?b:\"get\"+b.substr(3),n.s=k=g?a[j](g):a[j]()),\"string\"==typeof k&&(g||isNaN(k))?(n.fp=g,i=M(k,d,h||F.defaultStringFilter,n),n={t:i,p:\"setRatio\",s:0,c:1,f:2,pg:0,n:e||b,pr:0}):m||(n.s=parseFloat(k),n.c=parseFloat(d)-n.s||0)),n.c?((n._next=this._firstPT)&&(n._next._prev=n),this._firstPT=n,n):void 0},O=F._internals={isArray:n,isSelector:G,lazyTweens:I,blobDif:M},P=F._plugins={},Q=O.tweenLookup={},R=0,S=O.reservedProps={ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1,lazy:1,onOverwrite:1,callbackScope:1,stringFilter:1},T={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,\"true\":1,\"false\":0},U=C._rootFramesTimeline=new E,V=C._rootTimeline=new E,W=30,X=O.lazyRender=function(){\nvar a,b=I.length;for(J={};--b>-1;)a=I[b],a&&a._lazy!==!1&&(a.render(a._lazy[0],a._lazy[1],!0),a._lazy=!1);I.length=0};V._startTime=g.time,U._startTime=g.frame,V._active=U._active=!0,setTimeout(X,1),C._updateRoot=F.render=function(){var a,b,c;if(I.length&&X(),V.render((g.time-V._startTime)*V._timeScale,!1,!1),U.render((g.frame-U._startTime)*U._timeScale,!1,!1),I.length&&X(),g.frame>=W){W=g.frame+(parseInt(F.autoSleep,10)||120);for(c in Q){for(b=Q[c].tweens,a=b.length;--a>-1;)b[a]._gc&&b.splice(a,1);0===b.length&&delete Q[c]}if(c=V._first,(!c||c._paused)&&F.autoSleep&&!U._first&&1===g._listeners.tick.length){for(;c&&c._paused;)c=c._next;c||g.sleep()}}},g.addEventListener(\"tick\",C._updateRoot);var Y=function(a,b,c){var d,e,f=a._gsTweenID;if(Q[f||(a._gsTweenID=f=\"t\"+R++)]||(Q[f]={target:a,tweens:[]}),b&&(d=Q[f].tweens,d[e=d.length]=b,c))for(;--e>-1;)d[e]===b&&d.splice(e,1);return Q[f].tweens},Z=function(a,b,c,d){var e,f,g=a.vars.onOverwrite;return g&&(e=g(a,b,c,d)),g=F.onOverwrite,g&&(f=g(a,b,c,d)),e!==!1&&f!==!1},$=function(a,b,c,d,e){var f,g,h,i;if(1===d||d>=4){for(i=e.length,f=0;i>f;f++)if((h=e[f])!==b)h._gc||h._kill(null,a,b)&&(g=!0);else if(5===d)break;return g}var j,l=b._startTime+k,m=[],n=0,o=0===b._duration;for(f=e.length;--f>-1;)(h=e[f])===b||h._gc||h._paused||(h._timeline!==b._timeline?(j=j||_(b,0,o),0===_(h,j,o)&&(m[n++]=h)):h._startTime<=l&&h._startTime+h.totalDuration()/h._timeScale>l&&((o||!h._initted)&&l-h._startTime<=2e-10||(m[n++]=h)));for(f=n;--f>-1;)if(h=m[f],2===d&&h._kill(c,a,b)&&(g=!0),2!==d||!h._firstPT&&h._initted){if(2!==d&&!Z(h,b))continue;h._enabled(!1,!1)&&(g=!0)}return g},_=function(a,b,c){for(var d=a._timeline,e=d._timeScale,f=a._startTime;d._timeline;){if(f+=d._startTime,e*=d._timeScale,d._paused)return-100;d=d._timeline}return f/=e,f>b?f-b:c&&f===b||!a._initted&&2*k>f-b?k:(f+=a.totalDuration()/a._timeScale/e)>b+k?0:f-b-k};f._init=function(){var a,b,c,d,e,f=this.vars,g=this._overwrittenProps,h=this._duration,i=!!f.immediateRender,j=f.ease;if(f.startAt){this._startAt&&(this._startAt.render(-1,!0),this._startAt.kill()),e={};for(d in f.startAt)e[d]=f.startAt[d];if(e.overwrite=!1,e.immediateRender=!0,e.lazy=i&&f.lazy!==!1,e.startAt=e.delay=null,this._startAt=F.to(this.target,0,e),i)if(this._time>0)this._startAt=null;else if(0!==h)return}else if(f.runBackwards&&0!==h)if(this._startAt)this._startAt.render(-1,!0),this._startAt.kill(),this._startAt=null;else{0!==this._time&&(i=!1),c={};for(d in f)S[d]&&\"autoCSS\"!==d||(c[d]=f[d]);if(c.overwrite=0,c.data=\"isFromStart\",c.lazy=i&&f.lazy!==!1,c.immediateRender=i,this._startAt=F.to(this.target,0,c),i){if(0===this._time)return}else this._startAt._init(),this._startAt._enabled(!1),this.vars.immediateRender&&(this._startAt=null)}if(this._ease=j=j?j instanceof u?j:\"function\"==typeof j?new u(j,f.easeParams):v[j]||F.defaultEase:F.defaultEase,f.easeParams instanceof Array&&j.config&&(this._ease=j.config.apply(j,f.easeParams)),this._easeType=this._ease._type,this._easePower=this._ease._power,this._firstPT=null,this._targets)for(a=this._targets.length;--a>-1;)this._initProps(this._targets[a],this._propLookup[a]={},this._siblings[a],g?g[a]:null)&&(b=!0);else b=this._initProps(this.target,this._propLookup,this._siblings,g);if(b&&F._onPluginEvent(\"_onInitAllProps\",this),g&&(this._firstPT||\"function\"!=typeof this.target&&this._enabled(!1,!1)),f.runBackwards)for(c=this._firstPT;c;)c.s+=c.c,c.c=-c.c,c=c._next;this._onUpdate=f.onUpdate,this._initted=!0},f._initProps=function(b,c,d,e){var f,g,h,i,j,k;if(null==b)return!1;J[b._gsTweenID]&&X(),this.vars.css||b.style&&b!==a&&b.nodeType&&P.css&&this.vars.autoCSS!==!1&&H(this.vars,b);for(f in this.vars)if(k=this.vars[f],S[f])k&&(k instanceof Array||k.push&&n(k))&&-1!==k.join(\"\").indexOf(\"{self}\")&&(this.vars[f]=k=this._swapSelfInParams(k,this));else if(P[f]&&(i=new P[f])._onInitTween(b,this.vars[f],this)){for(this._firstPT=j={_next:this._firstPT,t:i,p:\"setRatio\",s:0,c:1,f:1,n:f,pg:1,pr:i._priority},g=i._overwriteProps.length;--g>-1;)c[i._overwriteProps[g]]=this._firstPT;(i._priority||i._onInitAllProps)&&(h=!0),(i._onDisable||i._onEnable)&&(this._notifyPluginsOfEnabled=!0),j._next&&(j._next._prev=j)}else c[f]=N.call(this,b,f,\"get\",k,f,0,null,this.vars.stringFilter);return e&&this._kill(e,b)?this._initProps(b,c,d,e):this._overwrite>1&&this._firstPT&&d.length>1&&$(b,this,c,this._overwrite,d)?(this._kill(c,b),this._initProps(b,c,d,e)):(this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration)&&(J[b._gsTweenID]=!0),h)},f.render=function(a,b,c){var d,e,f,g,h=this._time,i=this._duration,j=this._rawPrevTime;if(a>=i-1e-7)this._totalTime=this._time=i,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1,this._reversed||(d=!0,e=\"onComplete\",c=c||this._timeline.autoRemoveChildren),0===i&&(this._initted||!this.vars.lazy||c)&&(this._startTime===this._timeline._duration&&(a=0),(0>j||0>=a&&a>=-1e-7||j===k&&\"isPause\"!==this.data)&&j!==a&&(c=!0,j>k&&(e=\"onReverseComplete\")),this._rawPrevTime=g=!b||a||j===a?a:k);else if(1e-7>a)this._totalTime=this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==h||0===i&&j>0)&&(e=\"onReverseComplete\",d=this._reversed),0>a&&(this._active=!1,0===i&&(this._initted||!this.vars.lazy||c)&&(j>=0&&(j!==k||\"isPause\"!==this.data)&&(c=!0),this._rawPrevTime=g=!b||a||j===a?a:k)),this._initted||(c=!0);else if(this._totalTime=this._time=a,this._easeType){var l=a/i,m=this._easeType,n=this._easePower;(1===m||3===m&&l>=.5)&&(l=1-l),3===m&&(l*=2),1===n?l*=l:2===n?l*=l*l:3===n?l*=l*l*l:4===n&&(l*=l*l*l*l),1===m?this.ratio=1-l:2===m?this.ratio=l:.5>a/i?this.ratio=l/2:this.ratio=1-l/2}else this.ratio=this._ease.getRatio(a/i);if(this._time!==h||c){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!c&&this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration))return this._time=this._totalTime=h,this._rawPrevTime=j,I.push(this),void(this._lazy=[a,b]);this._time&&!d?this.ratio=this._ease.getRatio(this._time/i):d&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(this._lazy!==!1&&(this._lazy=!1),this._active||!this._paused&&this._time!==h&&a>=0&&(this._active=!0),0===h&&(this._startAt&&(a>=0?this._startAt.render(a,b,c):e||(e=\"_dummyGS\")),this.vars.onStart&&(0!==this._time||0===i)&&(b||this._callback(\"onStart\"))),f=this._firstPT;f;)f.f?f.t[f.p](f.c*this.ratio+f.s):f.t[f.p]=f.c*this.ratio+f.s,f=f._next;this._onUpdate&&(0>a&&this._startAt&&a!==-1e-4&&this._startAt.render(a,b,c),b||(this._time!==h||d)&&this._callback(\"onUpdate\")),e&&(!this._gc||c)&&(0>a&&this._startAt&&!this._onUpdate&&a!==-1e-4&&this._startAt.render(a,b,c),d&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!b&&this.vars[e]&&this._callback(e),0===i&&this._rawPrevTime===k&&g!==k&&(this._rawPrevTime=0))}},f._kill=function(a,b,c){if(\"all\"===a&&(a=null),null==a&&(null==b||b===this.target))return this._lazy=!1,this._enabled(!1,!1);b=\"string\"!=typeof b?b||this._targets||this.target:F.selector(b)||b;var d,e,f,g,h,i,j,k,l,m=c&&this._time&&c._startTime===this._startTime&&this._timeline===c._timeline;if((n(b)||G(b))&&\"number\"!=typeof b[0])for(d=b.length;--d>-1;)this._kill(a,b[d],c)&&(i=!0);else{if(this._targets){for(d=this._targets.length;--d>-1;)if(b===this._targets[d]){h=this._propLookup[d]||{},this._overwrittenProps=this._overwrittenProps||[],e=this._overwrittenProps[d]=a?this._overwrittenProps[d]||{}:\"all\";break}}else{if(b!==this.target)return!1;h=this._propLookup,e=this._overwrittenProps=a?this._overwrittenProps||{}:\"all\"}if(h){if(j=a||h,k=a!==e&&\"all\"!==e&&a!==h&&(\"object\"!=typeof a||!a._tempKill),c&&(F.onOverwrite||this.vars.onOverwrite)){for(f in j)h[f]&&(l||(l=[]),l.push(f));if((l||!a)&&!Z(this,c,b,l))return!1}for(f in j)(g=h[f])&&(m&&(g.f?g.t[g.p](g.s):g.t[g.p]=g.s,i=!0),g.pg&&g.t._kill(j)&&(i=!0),g.pg&&0!==g.t._overwriteProps.length||(g._prev?g._prev._next=g._next:g===this._firstPT&&(this._firstPT=g._next),g._next&&(g._next._prev=g._prev),g._next=g._prev=null),delete h[f]),k&&(e[f]=1);!this._firstPT&&this._initted&&this._enabled(!1,!1)}}return i},f.invalidate=function(){return this._notifyPluginsOfEnabled&&F._onPluginEvent(\"_onDisable\",this),this._firstPT=this._overwrittenProps=this._startAt=this._onUpdate=null,this._notifyPluginsOfEnabled=this._active=this._lazy=!1,this._propLookup=this._targets?{}:[],C.prototype.invalidate.call(this),this.vars.immediateRender&&(this._time=-k,this.render(-this._delay)),this},f._enabled=function(a,b){if(h||g.wake(),a&&this._gc){var c,d=this._targets;if(d)for(c=d.length;--c>-1;)this._siblings[c]=Y(d[c],this,!0);else this._siblings=Y(this.target,this,!0)}return C.prototype._enabled.call(this,a,b),this._notifyPluginsOfEnabled&&this._firstPT?F._onPluginEvent(a?\"_onEnable\":\"_onDisable\",this):!1},F.to=function(a,b,c){return new F(a,b,c)},F.from=function(a,b,c){return c.runBackwards=!0,c.immediateRender=0!=c.immediateRender,new F(a,b,c)},F.fromTo=function(a,b,c,d){return d.startAt=c,d.immediateRender=0!=d.immediateRender&&0!=c.immediateRender,new F(a,b,d)},F.delayedCall=function(a,b,c,d,e){return new F(b,0,{delay:a,onComplete:b,onCompleteParams:c,callbackScope:d,onReverseComplete:b,onReverseCompleteParams:c,immediateRender:!1,lazy:!1,useFrames:e,overwrite:0})},F.set=function(a,b){return new F(a,0,b)},F.getTweensOf=function(a,b){if(null==a)return[];a=\"string\"!=typeof a?a:F.selector(a)||a;var c,d,e,f;if((n(a)||G(a))&&\"number\"!=typeof a[0]){for(c=a.length,d=[];--c>-1;)d=d.concat(F.getTweensOf(a[c],b));for(c=d.length;--c>-1;)for(f=d[c],e=c;--e>-1;)f===d[e]&&d.splice(c,1)}else for(d=Y(a).concat(),c=d.length;--c>-1;)(d[c]._gc||b&&!d[c].isActive())&&d.splice(c,1);return d},F.killTweensOf=F.killDelayedCallsTo=function(a,b,c){\"object\"==typeof b&&(c=b,b=!1);for(var d=F.getTweensOf(a,b),e=d.length;--e>-1;)d[e]._kill(c,a)};var aa=r(\"plugins.TweenPlugin\",function(a,b){this._overwriteProps=(a||\"\").split(\",\"),this._propName=this._overwriteProps[0],this._priority=b||0,this._super=aa.prototype},!0);if(f=aa.prototype,aa.version=\"1.18.0\",aa.API=2,f._firstPT=null,f._addTween=N,f.setRatio=L,f._kill=function(a){var b,c=this._overwriteProps,d=this._firstPT;if(null!=a[this._propName])this._overwriteProps=[];else for(b=c.length;--b>-1;)null!=a[c[b]]&&c.splice(b,1);for(;d;)null!=a[d.n]&&(d._next&&(d._next._prev=d._prev),d._prev?(d._prev._next=d._next,d._prev=null):this._firstPT===d&&(this._firstPT=d._next)),d=d._next;return!1},f._roundProps=function(a,b){for(var c=this._firstPT;c;)(a[this._propName]||null!=c.n&&a[c.n.split(this._propName+\"_\").join(\"\")])&&(c.r=b),c=c._next},F._onPluginEvent=function(a,b){var c,d,e,f,g,h=b._firstPT;if(\"_onInitAllProps\"===a){for(;h;){for(g=h._next,d=e;d&&d.pr>h.pr;)d=d._next;(h._prev=d?d._prev:f)?h._prev._next=h:e=h,(h._next=d)?d._prev=h:f=h,h=g}h=b._firstPT=e}for(;h;)h.pg&&\"function\"==typeof h.t[a]&&h.t[a]()&&(c=!0),h=h._next;return c},aa.activate=function(a){for(var b=a.length;--b>-1;)a[b].API===aa.API&&(P[(new a[b])._propName]=a[b]);return!0},q.plugin=function(a){if(!(a&&a.propName&&a.init&&a.API))throw\"illegal plugin definition.\";var b,c=a.propName,d=a.priority||0,e=a.overwriteProps,f={init:\"_onInitTween\",set:\"setRatio\",kill:\"_kill\",round:\"_roundProps\",initAll:\"_onInitAllProps\"},g=r(\"plugins.\"+c.charAt(0).toUpperCase()+c.substr(1)+\"Plugin\",function(){aa.call(this,c,d),this._overwriteProps=e||[]},a.global===!0),h=g.prototype=new aa(c);h.constructor=g,g.API=a.API;for(b in f)\"function\"==typeof a[b]&&(h[f[b]]=a[b]);return g.version=a.version,aa.activate([g]),g},d=a._gsQueue){for(e=0;e<d.length;e++)d[e]();for(f in o)o[f].func||a.console.log(\"GSAP encountered missing dependency: com.greensock.\"+f)}h=!1}}(\"undefined\"!=typeof module&&module.exports&&\"undefined\"!=typeof global?global:this||window,\"TweenMax\");\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,","// File:src/Three.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar THREE = { REVISION: '78' };\n\n//\n\nif ( typeof define === 'function' && define.amd ) {\n\n\tdefine( 'three', THREE );\n\n} else if ( 'undefined' !== typeof exports && 'undefined' !== typeof module ) {\n\n\tmodule.exports = THREE;\n\n}\n\n// Polyfills\n\nif ( Number.EPSILON === undefined ) {\n\n\tNumber.EPSILON = Math.pow( 2, - 52 );\n\n}\n\n//\n\nif ( Math.sign === undefined ) {\n\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\n\tMath.sign = function ( x ) {\n\n\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\n\t};\n\n}\n\nif ( Function.prototype.name === undefined ) {\n\n\t// Missing in IE9-11.\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n\tObject.defineProperty( Function.prototype, 'name', {\n\n\t\tget: function () {\n\n\t\t\treturn this.toString().match( /^\\s*function\\s*(\\S*)\\s*\\(/ )[ 1 ];\n\n\t\t}\n\n\t} );\n\n}\n\nif ( Object.assign === undefined ) {\n\n\t// Missing in IE.\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n\t( function () {\n\n\t\tObject.assign = function ( target ) {\n\n\t\t\t'use strict';\n\n\t\t\tif ( target === undefined || target === null ) {\n\n\t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\n\t\t\t}\n\n\t\t\tvar output = Object( target );\n\n\t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\n\t\t\t\tvar source = arguments[ index ];\n\n\t\t\t\tif ( source !== undefined && source !== null ) {\n\n\t\t\t\t\tfor ( var nextKey in source ) {\n\n\t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\n\t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn output;\n\n\t\t};\n\n\t} )();\n\n}\n\n//\n\nObject.assign( THREE, {\n\n\t// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent.button\n\n\tMOUSE: { LEFT: 0, MIDDLE: 1, RIGHT: 2 },\n\n\t// GL STATE CONSTANTS\n\n\tCullFaceNone: 0,\n\tCullFaceBack: 1,\n\tCullFaceFront: 2,\n\tCullFaceFrontBack: 3,\n\n\tFrontFaceDirectionCW: 0,\n\tFrontFaceDirectionCCW: 1,\n\n\t// SHADOWING TYPES\n\n\tBasicShadowMap: 0,\n\tPCFShadowMap: 1,\n\tPCFSoftShadowMap: 2,\n\n\t// MATERIAL CONSTANTS\n\n\t// side\n\n\tFrontSide: 0,\n\tBackSide: 1,\n\tDoubleSide: 2,\n\n\t// shading\n\n\tFlatShading: 1,\n\tSmoothShading: 2,\n\n\t// colors\n\n\tNoColors: 0,\n\tFaceColors: 1,\n\tVertexColors: 2,\n\n\t// blending modes\n\n\tNoBlending: 0,\n\tNormalBlending: 1,\n\tAdditiveBlending: 2,\n\tSubtractiveBlending: 3,\n\tMultiplyBlending: 4,\n\tCustomBlending: 5,\n\n\t// custom blending equations\n\t// (numbers start from 100 not to clash with other\n\t// mappings to OpenGL constants defined in Texture.js)\n\n\tAddEquation: 100,\n\tSubtractEquation: 101,\n\tReverseSubtractEquation: 102,\n\tMinEquation: 103,\n\tMaxEquation: 104,\n\n\t// custom blending destination factors\n\n\tZeroFactor: 200,\n\tOneFactor: 201,\n\tSrcColorFactor: 202,\n\tOneMinusSrcColorFactor: 203,\n\tSrcAlphaFactor: 204,\n\tOneMinusSrcAlphaFactor: 205,\n\tDstAlphaFactor: 206,\n\tOneMinusDstAlphaFactor: 207,\n\n\t// custom blending source factors\n\n\t//ZeroFactor: 200,\n\t//OneFactor: 201,\n\t//SrcAlphaFactor: 204,\n\t//OneMinusSrcAlphaFactor: 205,\n\t//DstAlphaFactor: 206,\n\t//OneMinusDstAlphaFactor: 207,\n\tDstColorFactor: 208,\n\tOneMinusDstColorFactor: 209,\n\tSrcAlphaSaturateFactor: 210,\n\n\t// depth modes\n\n\tNeverDepth: 0,\n\tAlwaysDepth: 1,\n\tLessDepth: 2,\n\tLessEqualDepth: 3,\n\tEqualDepth: 4,\n\tGreaterEqualDepth: 5,\n\tGreaterDepth: 6,\n\tNotEqualDepth: 7,\n\n\n\t// TEXTURE CONSTANTS\n\n\tMultiplyOperation: 0,\n\tMixOperation: 1,\n\tAddOperation: 2,\n\n\t// Tone Mapping modes\n\n\tNoToneMapping: 0, // do not do any tone mapping, not even exposure (required for special purpose passes.)\n\tLinearToneMapping: 1, // only apply exposure.\n\tReinhardToneMapping: 2,\n\tUncharted2ToneMapping: 3, // John Hable\n\tCineonToneMapping: 4, // optimized filmic operator by Jim Hejl and Richard Burgess-Dawson\n\n\t// Mapping modes\n\n\tUVMapping: 300,\n\n\tCubeReflectionMapping: 301,\n\tCubeRefractionMapping: 302,\n\n\tEquirectangularReflectionMapping: 303,\n\tEquirectangularRefractionMapping: 304,\n\n\tSphericalReflectionMapping: 305,\n\tCubeUVReflectionMapping: 306,\n\tCubeUVRefractionMapping: 307,\n\n\t// Wrapping modes\n\n\tRepeatWrapping: 1000,\n\tClampToEdgeWrapping: 1001,\n\tMirroredRepeatWrapping: 1002,\n\n\t// Filters\n\n\tNearestFilter: 1003,\n\tNearestMipMapNearestFilter: 1004,\n\tNearestMipMapLinearFilter: 1005,\n\tLinearFilter: 1006,\n\tLinearMipMapNearestFilter: 1007,\n\tLinearMipMapLinearFilter: 1008,\n\n\t// Data types\n\n\tUnsignedByteType: 1009,\n\tByteType: 1010,\n\tShortType: 1011,\n\tUnsignedShortType: 1012,\n\tIntType: 1013,\n\tUnsignedIntType: 1014,\n\tFloatType: 1015,\n\tHalfFloatType: 1025,\n\n\t// Pixel types\n\n\t//UnsignedByteType: 1009,\n\tUnsignedShort4444Type: 1016,\n\tUnsignedShort5551Type: 1017,\n\tUnsignedShort565Type: 1018,\n\n\t// Pixel formats\n\n\tAlphaFormat: 1019,\n\tRGBFormat: 1020,\n\tRGBAFormat: 1021,\n\tLuminanceFormat: 1022,\n\tLuminanceAlphaFormat: 1023,\n\t// THREE.RGBEFormat handled as THREE.RGBAFormat in shaders\n\tRGBEFormat: THREE.RGBAFormat, //1024;\n\tDepthFormat: 1026,\n\n\t// DDS / ST3C Compressed texture formats\n\n\tRGB_S3TC_DXT1_Format: 2001,\n\tRGBA_S3TC_DXT1_Format: 2002,\n\tRGBA_S3TC_DXT3_Format: 2003,\n\tRGBA_S3TC_DXT5_Format: 2004,\n\n\t// PVRTC compressed texture formats\n\n\tRGB_PVRTC_4BPPV1_Format: 2100,\n\tRGB_PVRTC_2BPPV1_Format: 2101,\n\tRGBA_PVRTC_4BPPV1_Format: 2102,\n\tRGBA_PVRTC_2BPPV1_Format: 2103,\n\n\t// ETC compressed texture formats\n\n\tRGB_ETC1_Format: 2151,\n\n\t// Loop styles for AnimationAction\n\n\tLoopOnce: 2200,\n\tLoopRepeat: 2201,\n\tLoopPingPong: 2202,\n\n\t// Interpolation\n\n\tInterpolateDiscrete: 2300,\n\tInterpolateLinear: 2301,\n\tInterpolateSmooth: 2302,\n\n\t// Interpolant ending modes\n\n\tZeroCurvatureEnding: 2400,\n\tZeroSlopeEnding: 2401,\n\tWrapAroundEnding: 2402,\n\n\t// Triangle Draw modes\n\n\tTrianglesDrawMode: 0,\n\tTriangleStripDrawMode: 1,\n\tTriangleFanDrawMode: 2,\n\n\t// Texture Encodings\n\n\tLinearEncoding: 3000, // No encoding at all.\n\tsRGBEncoding: 3001,\n\tGammaEncoding: 3007, // uses GAMMA_FACTOR, for backwards compatibility with WebGLRenderer.gammaInput/gammaOutput\n\n\t// The following Texture Encodings are for RGB-only (no alpha) HDR light emission sources.\n\t// These encodings should not specified as output encodings except in rare situations.\n\tRGBEEncoding: 3002, // AKA Radiance.\n\tLogLuvEncoding: 3003,\n\tRGBM7Encoding: 3004,\n\tRGBM16Encoding: 3005,\n\tRGBDEncoding: 3006, // MaxRange is 256.\n\n\t// Depth packing strategies\n\n\tBasicDepthPacking: 3200, // for writing to float textures for high precision or for visualizing results in RGB buffers\n\tRGBADepthPacking: 3201 // for packing into RGBA buffers.\n\n} );\n\n// File:src/math/Color.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Color = function ( r, g, b ) {\n\n\tif ( g === undefined && b === undefined ) {\n\n\t\t// r is THREE.Color, hex or string\n\t\treturn this.set( r );\n\n\t}\n\n\treturn this.setRGB( r, g, b );\n\n};\n\nTHREE.Color.prototype = {\n\n\tconstructor: THREE.Color,\n\n\tr: 1, g: 1, b: 1,\n\n\tset: function ( value ) {\n\n\t\tif ( value instanceof THREE.Color ) {\n\n\t\t\tthis.copy( value );\n\n\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\tthis.setHex( value );\n\n\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\tthis.setStyle( value );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetScalar: function ( scalar ) {\n\n\t\tthis.r = scalar;\n\t\tthis.g = scalar;\n\t\tthis.b = scalar;\n\n\t},\n\n\tsetHex: function ( hex ) {\n\n\t\thex = Math.floor( hex );\n\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\treturn this;\n\n\t},\n\n\tsetRGB: function ( r, g, b ) {\n\n\t\tthis.r = r;\n\t\tthis.g = g;\n\t\tthis.b = b;\n\n\t\treturn this;\n\n\t},\n\n\tsetHSL: function () {\n\n\t\tfunction hue2rgb( p, q, t ) {\n\n\t\t\tif ( t < 0 ) t += 1;\n\t\t\tif ( t > 1 ) t -= 1;\n\t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\t\t\tif ( t < 1 / 2 ) return q;\n\t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\t\t\treturn p;\n\n\t\t}\n\n\t\treturn function setHSL( h, s, l ) {\n\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\th = THREE.Math.euclideanModulo( h, 1 );\n\t\t\ts = THREE.Math.clamp( s, 0, 1 );\n\t\t\tl = THREE.Math.clamp( l, 0, 1 );\n\n\t\t\tif ( s === 0 ) {\n\n\t\t\t\tthis.r = this.g = this.b = l;\n\n\t\t\t} else {\n\n\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\t\tvar q = ( 2 * l ) - p;\n\n\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tsetStyle: function ( style ) {\n\n\t\tfunction handleAlpha( string ) {\n\n\t\t\tif ( string === undefined ) return;\n\n\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tvar m;\n\n\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t// rgb / hsl\n\n\t\t\tvar color;\n\t\t\tvar name = m[ 1 ];\n\t\t\tvar components = m[ 2 ];\n\n\t\t\tswitch ( name ) {\n\n\t\t\t\tcase 'rgb':\n\t\t\t\tcase 'rgba':\n\n\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'hsl':\n\t\t\t\tcase 'hsla':\n\n\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\n\t\t\t// hex color\n\n\t\t\tvar hex = m[ 1 ];\n\t\t\tvar size = hex.length;\n\n\t\t\tif ( size === 3 ) {\n\n\t\t\t\t// #ff0\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n\t\t\t\treturn this;\n\n\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t// #ff0000\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( style && style.length > 0 ) {\n\n\t\t\t// color keywords\n\t\t\tvar hex = THREE.ColorKeywords[ style ];\n\n\t\t\tif ( hex !== undefined ) {\n\n\t\t\t\t// red\n\t\t\t\tthis.setHex( hex );\n\n\t\t\t} else {\n\n\t\t\t\t// unknown color\n\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t},\n\n\tcopy: function ( color ) {\n\n\t\tthis.r = color.r;\n\t\tthis.g = color.g;\n\t\tthis.b = color.b;\n\n\t\treturn this;\n\n\t},\n\n\tcopyGammaToLinear: function ( color, gammaFactor ) {\n\n\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n\t\tthis.r = Math.pow( color.r, gammaFactor );\n\t\tthis.g = Math.pow( color.g, gammaFactor );\n\t\tthis.b = Math.pow( color.b, gammaFactor );\n\n\t\treturn this;\n\n\t},\n\n\tcopyLinearToGamma: function ( color, gammaFactor ) {\n\n\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n\t\tthis.r = Math.pow( color.r, safeInverse );\n\t\tthis.g = Math.pow( color.g, safeInverse );\n\t\tthis.b = Math.pow( color.b, safeInverse );\n\n\t\treturn this;\n\n\t},\n\n\tconvertGammaToLinear: function () {\n\n\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\tthis.r = r * r;\n\t\tthis.g = g * g;\n\t\tthis.b = b * b;\n\n\t\treturn this;\n\n\t},\n\n\tconvertLinearToGamma: function () {\n\n\t\tthis.r = Math.sqrt( this.r );\n\t\tthis.g = Math.sqrt( this.g );\n\t\tthis.b = Math.sqrt( this.b );\n\n\t\treturn this;\n\n\t},\n\n\tgetHex: function () {\n\n\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n\t},\n\n\tgetHexString: function () {\n\n\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n\t},\n\n\tgetHSL: function ( optionalTarget ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\tvar hsl = optionalTarget || { h: 0, s: 0, l: 0 };\n\n\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\tvar max = Math.max( r, g, b );\n\t\tvar min = Math.min( r, g, b );\n\n\t\tvar hue, saturation;\n\t\tvar lightness = ( min + max ) / 2.0;\n\n\t\tif ( min === max ) {\n\n\t\t\thue = 0;\n\t\t\tsaturation = 0;\n\n\t\t} else {\n\n\t\t\tvar delta = max - min;\n\n\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\tswitch ( max ) {\n\n\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t}\n\n\t\t\thue /= 6;\n\n\t\t}\n\n\t\thsl.h = hue;\n\t\thsl.s = saturation;\n\t\thsl.l = lightness;\n\n\t\treturn hsl;\n\n\t},\n\n\tgetStyle: function () {\n\n\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n\t},\n\n\toffsetHSL: function ( h, s, l ) {\n\n\t\tvar hsl = this.getHSL();\n\n\t\thsl.h += h; hsl.s += s; hsl.l += l;\n\n\t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( color ) {\n\n\t\tthis.r += color.r;\n\t\tthis.g += color.g;\n\t\tthis.b += color.b;\n\n\t\treturn this;\n\n\t},\n\n\taddColors: function ( color1, color2 ) {\n\n\t\tthis.r = color1.r + color2.r;\n\t\tthis.g = color1.g + color2.g;\n\t\tthis.b = color1.b + color2.b;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.r += s;\n\t\tthis.g += s;\n\t\tthis.b += s;\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( color ) {\n\n\t\tthis.r *= color.r;\n\t\tthis.g *= color.g;\n\t\tthis.b *= color.b;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( s ) {\n\n\t\tthis.r *= s;\n\t\tthis.g *= s;\n\t\tthis.b *= s;\n\n\t\treturn this;\n\n\t},\n\n\tlerp: function ( color, alpha ) {\n\n\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( c ) {\n\n\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.r = array[ offset ];\n\t\tthis.g = array[ offset + 1 ];\n\t\tthis.b = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.r;\n\t\tarray[ offset + 1 ] = this.g;\n\t\tarray[ offset + 2 ] = this.b;\n\n\t\treturn array;\n\n\t}\n\n};\n\nTHREE.ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\n// File:src/math/Quaternion.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n */\n\nTHREE.Quaternion = function ( x, y, z, w ) {\n\n\tthis._x = x || 0;\n\tthis._y = y || 0;\n\tthis._z = z || 0;\n\tthis._w = ( w !== undefined ) ? w : 1;\n\n};\n\nTHREE.Quaternion.prototype = {\n\n\tconstructor: THREE.Quaternion,\n\n\tget x () {\n\n\t\treturn this._x;\n\n\t},\n\n\tset x ( value ) {\n\n\t\tthis._x = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget y () {\n\n\t\treturn this._y;\n\n\t},\n\n\tset y ( value ) {\n\n\t\tthis._y = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget z () {\n\n\t\treturn this._z;\n\n\t},\n\n\tset z ( value ) {\n\n\t\tthis._z = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget w () {\n\n\t\treturn this._w;\n\n\t},\n\n\tset w ( value ) {\n\n\t\tthis._w = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tset: function ( x, y, z, w ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t},\n\n\tcopy: function ( quaternion ) {\n\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromEuler: function ( euler, update ) {\n\n\t\tif ( euler instanceof THREE.Euler === false ) {\n\n\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t//\tcontent/SpinCalc.m\n\n\t\tvar c1 = Math.cos( euler._x / 2 );\n\t\tvar c2 = Math.cos( euler._y / 2 );\n\t\tvar c3 = Math.cos( euler._z / 2 );\n\t\tvar s1 = Math.sin( euler._x / 2 );\n\t\tvar s2 = Math.sin( euler._y / 2 );\n\t\tvar s3 = Math.sin( euler._z / 2 );\n\n\t\tvar order = euler.order;\n\n\t\tif ( order === 'XYZ' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t} else if ( order === 'YZX' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'XZY' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t}\n\n\t\tif ( update !== false ) this.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromAxisAngle: function ( axis, angle ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t// assumes axis is normalized\n\n\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\tthis._x = axis.x * s;\n\t\tthis._y = axis.y * s;\n\t\tthis._z = axis.z * s;\n\t\tthis._w = Math.cos( halfAngle );\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromRotationMatrix: function ( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar te = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\ttrace = m11 + m22 + m33,\n\t\t\ts;\n\n\t\tif ( trace > 0 ) {\n\n\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\tthis._w = 0.25 / s;\n\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\tthis._x = 0.25 * s;\n\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t} else if ( m22 > m33 ) {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\tthis._y = 0.25 * s;\n\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t} else {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\tthis._z = 0.25 * s;\n\n\t\t}\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromUnitVectors: function () {\n\n\t\t// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final\n\n\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\tvar v1, r;\n\n\t\tvar EPS = 0.000001;\n\n\t\treturn function setFromUnitVectors( vFrom, vTo ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\n\t\t\tr = vFrom.dot( vTo ) + 1;\n\n\t\t\tif ( r < EPS ) {\n\n\t\t\t\tr = 0;\n\n\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tv1.crossVectors( vFrom, vTo );\n\n\t\t\t}\n\n\t\t\tthis._x = v1.x;\n\t\t\tthis._y = v1.y;\n\t\t\tthis._z = v1.z;\n\t\t\tthis._w = r;\n\n\t\t\treturn this.normalize();\n\n\t\t};\n\n\t}(),\n\n\tinverse: function () {\n\n\t\treturn this.conjugate().normalize();\n\n\t},\n\n\tconjugate: function () {\n\n\t\tthis._x *= - 1;\n\t\tthis._y *= - 1;\n\t\tthis._z *= - 1;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t},\n\n\tnormalize: function () {\n\n\t\tvar l = this.length();\n\n\t\tif ( l === 0 ) {\n\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\n\t\t} else {\n\n\t\t\tl = 1 / l;\n\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\n\t\t}\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( q, p ) {\n\n\t\tif ( p !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t}\n\n\t\treturn this.multiplyQuaternions( this, q );\n\n\t},\n\n\tpremultiply: function ( q ) {\n\n\t\treturn this.multiplyQuaternions( q, this );\n\n\t},\n\n\tmultiplyQuaternions: function ( a, b ) {\n\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tslerp: function ( qb, t ) {\n\n\t\tif ( t === 0 ) return this;\n\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\tthis._w = - qb._w;\n\t\t\tthis._x = - qb._x;\n\t\t\tthis._y = - qb._y;\n\t\t\tthis._z = - qb._z;\n\n\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t} else {\n\n\t\t\tthis.copy( qb );\n\n\t\t}\n\n\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\tthis._w = w;\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\n\n\t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\n\n\t\t\tthis._w = 0.5 * ( w + this._w );\n\t\t\tthis._x = 0.5 * ( x + this._x );\n\t\t\tthis._y = 0.5 * ( y + this._y );\n\t\t\tthis._z = 0.5 * ( z + this._z );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( quaternion ) {\n\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis._x = array[ offset ];\n\t\tthis._y = array[ offset + 1 ];\n\t\tthis._z = array[ offset + 2 ];\n\t\tthis._w = array[ offset + 3 ];\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._w;\n\n\t\treturn array;\n\n\t},\n\n\tonChange: function ( callback ) {\n\n\t\tthis.onChangeCallback = callback;\n\n\t\treturn this;\n\n\t},\n\n\tonChangeCallback: function () {}\n\n};\n\nObject.assign( THREE.Quaternion, {\n\n\tslerp: function( qa, qb, qm, t ) {\n\n\t\treturn qm.copy( qa ).slerp( qb, t );\n\n\t},\n\n\tslerpFlat: function(\n\t\t\tdst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\tw0 = src0[ srcOffset0 + 3 ],\n\n\t\t\tx1 = src1[ srcOffset1 + 0 ],\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\tvar s = 1 - t,\n\n\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t}\n\n\t\t\tvar tDir = t * dir;\n\n\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t// Normalize in case we just did a lerp:\n\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\tx0 *= f;\n\t\t\t\ty0 *= f;\n\t\t\t\tz0 *= f;\n\t\t\t\tw0 *= f;\n\n\t\t\t}\n\n\t\t}\n\n\t\tdst[ dstOffset ] = x0;\n\t\tdst[ dstOffset + 1 ] = y0;\n\t\tdst[ dstOffset + 2 ] = z0;\n\t\tdst[ dstOffset + 3 ] = w0;\n\n\t}\n\n} );\n\n// File:src/math/Vector2.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author philogb / http://blog.thejit.org/\n * @author egraether / http://egraether.com/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n */\n\nTHREE.Vector2 = function ( x, y ) {\n\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n\n};\n\nTHREE.Vector2.prototype = {\n\n\tconstructor: THREE.Vector2,\n\n\tget width() {\n\n\t\treturn this.x;\n\n\t},\n\n\tset width( value ) {\n\n\t\tthis.x = value;\n\n\t},\n\n\tget height() {\n\n\t\treturn this.y;\n\n\t},\n\n\tset height( value ) {\n\n\t\tthis.y = value;\n\n\t},\n\n\t//\n\n\tset: function ( x, y ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetScalar: function ( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\n\t\treturn this;\n\n\t},\n\n\tsetX: function ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponent: function ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tgetComponent: function ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.x, this.y );\n\n\t},\n\n\tcopy: function ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\n\t\treturn this;\n\n\t},\n\n\taddVectors: function ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\n\t\treturn this;\n\n\t},\n\n\taddScaledVector: function ( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\n\t\treturn this;\n\n\t},\n\n\tsubScalar: function ( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\n\t\treturn this;\n\n\t},\n\n\tsubVectors: function ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( scalar ) {\n\n\t\tif ( isFinite( scalar ) ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\n\t\t} else {\n\n\t\t\tthis.x = 0;\n\t\t\tthis.y = 0;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tdivide: function ( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\n\t\treturn this;\n\n\t},\n\n\tdivideScalar: function ( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t},\n\n\tmin: function ( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\n\t\treturn this;\n\n\t},\n\n\tmax: function ( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\n\t\treturn this;\n\n\t},\n\n\tclamp: function ( min, max ) {\n\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\treturn this;\n\n\t},\n\n\tclampScalar: function () {\n\n\t\tvar min, max;\n\n\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\tif ( min === undefined ) {\n\n\t\t\t\tmin = new THREE.Vector2();\n\t\t\t\tmax = new THREE.Vector2();\n\n\t\t\t}\n\n\t\t\tmin.set( minVal, minVal );\n\t\t\tmax.set( maxVal, maxVal );\n\n\t\t\treturn this.clamp( min, max );\n\n\t\t};\n\n\t}(),\n\n\tclampLength: function ( min, max ) {\n\n\t\tvar length = this.length();\n\n\t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\n\t},\n\n\tfloor: function () {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\n\t\treturn this;\n\n\t},\n\n\tceil: function () {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\n\t\treturn this;\n\n\t},\n\n\tround: function () {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\n\t\treturn this;\n\n\t},\n\n\troundToZero: function () {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this.x * this.x + this.y * this.y;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t},\n\n\tlengthManhattan: function() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t},\n\n\tnormalize: function () {\n\n\t\treturn this.divideScalar( this.length() );\n\n\t},\n\n\tangle: function () {\n\n\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\tvar angle = Math.atan2( this.y, this.x );\n\n\t\tif ( angle < 0 ) angle += 2 * Math.PI;\n\n\t\treturn angle;\n\n\t},\n\n\tdistanceTo: function ( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t},\n\n\tdistanceToSquared: function ( v ) {\n\n\t\tvar dx = this.x - v.x, dy = this.y - v.y;\n\t\treturn dx * dx + dy * dy;\n\n\t},\n\n\tsetLength: function ( length ) {\n\n\t\treturn this.multiplyScalar( length / this.length() );\n\n\t},\n\n\tlerp: function ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t},\n\n\tequals: function ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\n\t\treturn array;\n\n\t},\n\n\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tindex = index * attribute.itemSize + offset;\n\n\t\tthis.x = attribute.array[ index ];\n\t\tthis.y = attribute.array[ index + 1 ];\n\n\t\treturn this;\n\n\t},\n\n\trotateAround: function ( center, angle ) {\n\n\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\tvar x = this.x - center.x;\n\t\tvar y = this.y - center.y;\n\n\t\tthis.x = x * c - y * s + center.x;\n\t\tthis.y = x * s + y * c + center.y;\n\n\t\treturn this;\n\n\t}\n\n};\n\n// File:src/math/Vector3.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author *kile / http://kile.stravaganza.org/\n * @author philogb / http://blog.thejit.org/\n * @author mikael emtinger / http://gomo.se/\n * @author egraether / http://egraether.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.Vector3 = function ( x, y, z ) {\n\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n\tthis.z = z || 0;\n\n};\n\nTHREE.Vector3.prototype = {\n\n\tconstructor: THREE.Vector3,\n\n\tset: function ( x, y, z ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetScalar: function ( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\n\t\treturn this;\n\n\t},\n\n\tsetX: function ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetZ: function ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponent: function ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tgetComponent: function ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t},\n\n\tcopy: function ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\n\t\treturn this;\n\n\t},\n\n\taddVectors: function ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\n\t\treturn this;\n\n\t},\n\n\taddScaledVector: function ( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\n\t\treturn this;\n\n\t},\n\n\tsubScalar: function ( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\n\t\treturn this;\n\n\t},\n\n\tsubVectors: function ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\treturn this.multiplyVectors( v, w );\n\n\t\t}\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( scalar ) {\n\n\t\tif ( isFinite( scalar ) ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\n\t\t} else {\n\n\t\t\tthis.x = 0;\n\t\t\tthis.y = 0;\n\t\t\tthis.z = 0;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyVectors: function ( a, b ) {\n\n\t\tthis.x = a.x * b.x;\n\t\tthis.y = a.y * b.y;\n\t\tthis.z = a.z * b.z;\n\n\t\treturn this;\n\n\t},\n\n\tapplyEuler: function () {\n\n\t\tvar quaternion;\n\n\t\treturn function applyEuler( euler ) {\n\n\t\t\tif ( euler instanceof THREE.Euler === false ) {\n\n\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tif ( quaternion === undefined ) quaternion = new THREE.Quaternion();\n\n\t\t\treturn this.applyQuaternion( quaternion.setFromEuler( euler ) );\n\n\t\t};\n\n\t}(),\n\n\tapplyAxisAngle: function () {\n\n\t\tvar quaternion;\n\n\t\treturn function applyAxisAngle( axis, angle ) {\n\n\t\t\tif ( quaternion === undefined ) quaternion = new THREE.Quaternion();\n\n\t\t\treturn this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\n\n\t\t};\n\n\t}(),\n\n\tapplyMatrix3: function ( m ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\treturn this;\n\n\t},\n\n\tapplyMatrix4: function ( m ) {\n\n\t\t// input: THREE.Matrix4 affine matrix\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];\n\n\t\treturn this;\n\n\t},\n\n\tapplyProjection: function ( m ) {\n\n\t\t// input: THREE.Matrix4 projection matrix\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\t\tvar d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide\n\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;\n\n\t\treturn this;\n\n\t},\n\n\tapplyQuaternion: function ( q ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t// calculate quat * vector\n\n\t\tvar ix =  qw * x + qy * z - qz * y;\n\t\tvar iy =  qw * y + qz * x - qx * z;\n\t\tvar iz =  qw * z + qx * y - qy * x;\n\t\tvar iw = - qx * x - qy * y - qz * z;\n\n\t\t// calculate result * inverse quat\n\n\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\treturn this;\n\n\t},\n\n\tproject: function () {\n\n\t\tvar matrix;\n\n\t\treturn function project( camera ) {\n\n\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\n\n\t\t\tmatrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );\n\t\t\treturn this.applyProjection( matrix );\n\n\t\t};\n\n\t}(),\n\n\tunproject: function () {\n\n\t\tvar matrix;\n\n\t\treturn function unproject( camera ) {\n\n\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\n\n\t\t\tmatrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );\n\t\t\treturn this.applyProjection( matrix );\n\n\t\t};\n\n\t}(),\n\n\ttransformDirection: function ( m ) {\n\n\t\t// input: THREE.Matrix4 affine matrix\n\t\t// vector interpreted as a direction\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\treturn this.normalize();\n\n\t},\n\n\tdivide: function ( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\t\tthis.z /= v.z;\n\n\t\treturn this;\n\n\t},\n\n\tdivideScalar: function ( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t},\n\n\tmin: function ( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\n\t\treturn this;\n\n\t},\n\n\tmax: function ( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\n\t\treturn this;\n\n\t},\n\n\tclamp: function ( min, max ) {\n\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\treturn this;\n\n\t},\n\n\tclampScalar: function () {\n\n\t\tvar min, max;\n\n\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\tif ( min === undefined ) {\n\n\t\t\t\tmin = new THREE.Vector3();\n\t\t\t\tmax = new THREE.Vector3();\n\n\t\t\t}\n\n\t\t\tmin.set( minVal, minVal, minVal );\n\t\t\tmax.set( maxVal, maxVal, maxVal );\n\n\t\t\treturn this.clamp( min, max );\n\n\t\t};\n\n\t}(),\n\n\tclampLength: function ( min, max ) {\n\n\t\tvar length = this.length();\n\n\t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\n\n\t},\n\n\tfloor: function () {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\n\t\treturn this;\n\n\t},\n\n\tceil: function () {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\n\t\treturn this;\n\n\t},\n\n\tround: function () {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\n\t\treturn this;\n\n\t},\n\n\troundToZero: function () {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t},\n\n\tlengthManhattan: function () {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t},\n\n\tnormalize: function () {\n\n\t\treturn this.divideScalar( this.length() );\n\n\t},\n\n\tsetLength: function ( length ) {\n\n\t\treturn this.multiplyScalar( length / this.length() );\n\n\t},\n\n\tlerp: function ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t},\n\n\tcross: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\treturn this.crossVectors( v, w );\n\n\t\t}\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\n\t\tthis.x = y * v.z - z * v.y;\n\t\tthis.y = z * v.x - x * v.z;\n\t\tthis.z = x * v.y - y * v.x;\n\n\t\treturn this;\n\n\t},\n\n\tcrossVectors: function ( a, b ) {\n\n\t\tvar ax = a.x, ay = a.y, az = a.z;\n\t\tvar bx = b.x, by = b.y, bz = b.z;\n\n\t\tthis.x = ay * bz - az * by;\n\t\tthis.y = az * bx - ax * bz;\n\t\tthis.z = ax * by - ay * bx;\n\n\t\treturn this;\n\n\t},\n\n\tprojectOnVector: function ( vector ) {\n\n\t\tvar scalar = vector.dot( this ) / vector.lengthSq();\n\t\n\t\treturn this.copy( vector ).multiplyScalar( scalar );\n\t\n\t},\n\n\tprojectOnPlane: function () {\n\n\t\tvar v1;\n\n\t\treturn function projectOnPlane( planeNormal ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\n\t\t\tv1.copy( this ).projectOnVector( planeNormal );\n\n\t\t\treturn this.sub( v1 );\n\n\t\t};\n\n\t}(),\n\n\treflect: function () {\n\n\t\t// reflect incident vector off plane orthogonal to normal\n\t\t// normal is assumed to have unit length\n\n\t\tvar v1;\n\n\t\treturn function reflect( normal ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\n\t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t\t};\n\n\t}(),\n\n\tangleTo: function ( v ) {\n\n\t\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\n\n\t\t// clamp, to handle numerical problems\n\n\t\treturn Math.acos( THREE.Math.clamp( theta, - 1, 1 ) );\n\n\t},\n\n\tdistanceTo: function ( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t},\n\n\tdistanceToSquared: function ( v ) {\n\n\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t},\n\n\tsetFromSpherical: function( s ) {\n\n\t\tvar sinPhiRadius = Math.sin( s.phi ) * s.radius;\n\n\t\tthis.x = sinPhiRadius * Math.sin( s.theta );\n\t\tthis.y = Math.cos( s.phi ) * s.radius;\n\t\tthis.z = sinPhiRadius * Math.cos( s.theta );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrixPosition: function ( m ) {\n\n\t\treturn this.setFromMatrixColumn( m, 3 );\n\n\t},\n\n\tsetFromMatrixScale: function ( m ) {\n\n\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\tthis.x = sx;\n\t\tthis.y = sy;\n\t\tthis.z = sz;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrixColumn: function ( m, index ) {\n\n\t\tif ( typeof m === 'number' ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).' );\n\t\t\tvar temp = m\n\t\t\tm = index;\n\t\t\tindex = temp;\n\n\t\t}\n\n\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t},\n\n\tequals: function ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\n\t\treturn array;\n\n\t},\n\n\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tindex = index * attribute.itemSize + offset;\n\n\t\tthis.x = attribute.array[ index ];\n\t\tthis.y = attribute.array[ index + 1 ];\n\t\tthis.z = attribute.array[ index + 2 ];\n\n\t\treturn this;\n\n\t}\n\n};\n\n// File:src/math/Vector4.js\n\n/**\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author philogb / http://blog.thejit.org/\n * @author mikael emtinger / http://gomo.se/\n * @author egraether / http://egraether.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.Vector4 = function ( x, y, z, w ) {\n\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n\tthis.z = z || 0;\n\tthis.w = ( w !== undefined ) ? w : 1;\n\n};\n\nTHREE.Vector4.prototype = {\n\n\tconstructor: THREE.Vector4,\n\n\tset: function ( x, y, z, w ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetScalar: function ( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\t\tthis.w = scalar;\n\n\t\treturn this;\n\n\t},\n\n\tsetX: function ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetZ: function ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetW: function ( w ) {\n\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponent: function ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tcase 3: this.w = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tgetComponent: function ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tcase 3: return this.w;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t},\n\n\tcopy: function ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\t\tthis.w += v.w;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\t\tthis.w += s;\n\n\t\treturn this;\n\n\t},\n\n\taddVectors: function ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\t\tthis.w = a.w + b.w;\n\n\t\treturn this;\n\n\t},\n\n\taddScaledVector: function ( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\t\tthis.w += v.w * s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\t\tthis.w -= v.w;\n\n\t\treturn this;\n\n\t},\n\n\tsubScalar: function ( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\t\tthis.w -= s;\n\n\t\treturn this;\n\n\t},\n\n\tsubVectors: function ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\t\tthis.w = a.w - b.w;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( scalar ) {\n\n\t\tif ( isFinite( scalar ) ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\tthis.w *= scalar;\n\n\t\t} else {\n\n\t\t\tthis.x = 0;\n\t\t\tthis.y = 0;\n\t\t\tthis.z = 0;\n\t\t\tthis.w = 0;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tapplyMatrix4: function ( m ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\treturn this;\n\n\t},\n\n\tdivideScalar: function ( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t},\n\n\tsetAxisAngleFromQuaternion: function ( q ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t// q is assumed to be normalized\n\n\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\n\t\tif ( s < 0.0001 ) {\n\n\t\t\t this.x = 1;\n\t\t\t this.y = 0;\n\t\t\t this.z = 0;\n\n\t\t} else {\n\n\t\t\t this.x = q.x / s;\n\t\t\t this.y = q.y / s;\n\t\t\t this.z = q.z / s;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetAxisAngleFromRotationMatrix: function ( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar angle, x, y, z,\t\t// variables for result\n\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\tte = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t// singularity found\n\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t}\n\n\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\tangle = Math.PI;\n\n\t\t\tvar xx = ( m11 + 1 ) / 2;\n\t\t\tvar yy = ( m22 + 1 ) / 2;\n\t\t\tvar zz = ( m33 + 1 ) / 2;\n\t\t\tvar xy = ( m12 + m21 ) / 4;\n\t\t\tvar xz = ( m13 + m31 ) / 4;\n\t\t\tvar yz = ( m23 + m32 ) / 4;\n\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\tx = 0;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\ty = xy / x;\n\t\t\t\t\tz = xz / x;\n\n\t\t\t\t}\n\n\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\tx = xy / y;\n\t\t\t\t\tz = yz / y;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\tx = xz / z;\n\t\t\t\t\ty = yz / z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.set( x, y, z, angle );\n\n\t\t\treturn this; // return 180 deg rotation\n\n\t\t}\n\n\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\n\t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\tthis.x = ( m32 - m23 ) / s;\n\t\tthis.y = ( m13 - m31 ) / s;\n\t\tthis.z = ( m21 - m12 ) / s;\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\treturn this;\n\n\t},\n\n\tmin: function ( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\t\tthis.w = Math.min( this.w, v.w );\n\n\t\treturn this;\n\n\t},\n\n\tmax: function ( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\t\tthis.w = Math.max( this.w, v.w );\n\n\t\treturn this;\n\n\t},\n\n\tclamp: function ( min, max ) {\n\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\treturn this;\n\n\t},\n\n\tclampScalar: function () {\n\n\t\tvar min, max;\n\n\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\tif ( min === undefined ) {\n\n\t\t\t\tmin = new THREE.Vector4();\n\t\t\t\tmax = new THREE.Vector4();\n\n\t\t\t}\n\n\t\t\tmin.set( minVal, minVal, minVal, minVal );\n\t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\n\n\t\t\treturn this.clamp( min, max );\n\n\t\t};\n\n\t}(),\n\n\tfloor: function () {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\t\tthis.w = Math.floor( this.w );\n\n\t\treturn this;\n\n\t},\n\n\tceil: function () {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\t\tthis.w = Math.ceil( this.w );\n\n\t\treturn this;\n\n\t},\n\n\tround: function () {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\t\tthis.w = Math.round( this.w );\n\n\t\treturn this;\n\n\t},\n\n\troundToZero: function () {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\t\tthis.w = - this.w;\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t},\n\n\tlengthManhattan: function () {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t},\n\n\tnormalize: function () {\n\n\t\treturn this.divideScalar( this.length() );\n\n\t},\n\n\tsetLength: function ( length ) {\n\n\t\treturn this.multiplyScalar( length / this.length() );\n\n\t},\n\n\tlerp: function ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t},\n\n\tequals: function ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\t\tthis.w = array[ offset + 3 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\t\tarray[ offset + 3 ] = this.w;\n\n\t\treturn array;\n\n\t},\n\n\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tindex = index * attribute.itemSize + offset;\n\n\t\tthis.x = attribute.array[ index ];\n\t\tthis.y = attribute.array[ index + 1 ];\n\t\tthis.z = attribute.array[ index + 2 ];\n\t\tthis.w = attribute.array[ index + 3 ];\n\n\t\treturn this;\n\n\t}\n\n};\n\n// File:src/math/Euler.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n */\n\nTHREE.Euler = function ( x, y, z, order ) {\n\n\tthis._x = x || 0;\n\tthis._y = y || 0;\n\tthis._z = z || 0;\n\tthis._order = order || THREE.Euler.DefaultOrder;\n\n};\n\nTHREE.Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\nTHREE.Euler.DefaultOrder = 'XYZ';\n\nTHREE.Euler.prototype = {\n\n\tconstructor: THREE.Euler,\n\n\tget x () {\n\n\t\treturn this._x;\n\n\t},\n\n\tset x ( value ) {\n\n\t\tthis._x = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget y () {\n\n\t\treturn this._y;\n\n\t},\n\n\tset y ( value ) {\n\n\t\tthis._y = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget z () {\n\n\t\treturn this._z;\n\n\t},\n\n\tset z ( value ) {\n\n\t\tthis._z = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget order () {\n\n\t\treturn this._order;\n\n\t},\n\n\tset order ( value ) {\n\n\t\tthis._order = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tset: function ( x, y, z, order ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order || this._order;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t},\n\n\tcopy: function ( euler ) {\n\n\t\tthis._x = euler._x;\n\t\tthis._y = euler._y;\n\t\tthis._z = euler._z;\n\t\tthis._order = euler._order;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromRotationMatrix: function ( m, order, update ) {\n\n\t\tvar clamp = THREE.Math.clamp;\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar te = m.elements;\n\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\torder = order || this._order;\n\n\t\tif ( order === 'XYZ' ) {\n\n\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\tthis._z = 0;\n\n\t\t\t}\n\n\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\n\n\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\tthis._z = 0;\n\n\t\t\t}\n\n\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\n\n\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t}\n\n\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t}\n\n\t\t} else if ( order === 'YZX' ) {\n\n\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t}\n\n\t\t} else if ( order === 'XZY' ) {\n\n\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\tthis._y = 0;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\n\n\t\t}\n\n\t\tthis._order = order;\n\n\t\tif ( update !== false ) this.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromQuaternion: function () {\n\n\t\tvar matrix;\n\n\t\treturn function setFromQuaternion( q, order, update ) {\n\n\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\n\n\t\t\tmatrix.makeRotationFromQuaternion( q );\n\n\t\t\treturn this.setFromRotationMatrix( matrix, order, update );\n\n\t\t};\n\n\t}(),\n\n\tsetFromVector3: function ( v, order ) {\n\n\t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\n\t},\n\n\treorder: function () {\n\n\t\t// WARNING: this discards revolution information -bhouston\n\n\t\tvar q = new THREE.Quaternion();\n\n\t\treturn function reorder( newOrder ) {\n\n\t\t\tq.setFromEuler( this );\n\t\t\t\n\t\t\treturn this.setFromQuaternion( q, newOrder );\n\n\t\t};\n\n\t}(),\n\n\tequals: function ( euler ) {\n\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t},\n\n\tfromArray: function ( array ) {\n\n\t\tthis._x = array[ 0 ];\n\t\tthis._y = array[ 1 ];\n\t\tthis._z = array[ 2 ];\n\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._order;\n\n\t\treturn array;\n\n\t},\n\n\ttoVector3: function ( optionalResult ) {\n\n\t\tif ( optionalResult ) {\n\n\t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n\t\t} else {\n\n\t\t\treturn new THREE.Vector3( this._x, this._y, this._z );\n\n\t\t}\n\n\t},\n\n\tonChange: function ( callback ) {\n\n\t\tthis.onChangeCallback = callback;\n\n\t\treturn this;\n\n\t},\n\n\tonChangeCallback: function () {}\n\n};\n\n// File:src/math/Line3.js\n\n/**\n * @author bhouston / http://clara.io\n */\n\nTHREE.Line3 = function ( start, end ) {\n\n\tthis.start = ( start !== undefined ) ? start : new THREE.Vector3();\n\tthis.end = ( end !== undefined ) ? end : new THREE.Vector3();\n\n};\n\nTHREE.Line3.prototype = {\n\n\tconstructor: THREE.Line3,\n\n\tset: function ( start, end ) {\n\n\t\tthis.start.copy( start );\n\t\tthis.end.copy( end );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( line ) {\n\n\t\tthis.start.copy( line.start );\n\t\tthis.end.copy( line.end );\n\n\t\treturn this;\n\n\t},\n\n\tcenter: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t},\n\n\tdelta: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.subVectors( this.end, this.start );\n\n\t},\n\n\tdistanceSq: function () {\n\n\t\treturn this.start.distanceToSquared( this.end );\n\n\t},\n\n\tdistance: function () {\n\n\t\treturn this.start.distanceTo( this.end );\n\n\t},\n\n\tat: function ( t, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n\t},\n\n\tclosestPointToPointParameter: function () {\n\n\t\tvar startP = new THREE.Vector3();\n\t\tvar startEnd = new THREE.Vector3();\n\n\t\treturn function closestPointToPointParameter( point, clampToLine ) {\n\n\t\t\tstartP.subVectors( point, this.start );\n\t\t\tstartEnd.subVectors( this.end, this.start );\n\n\t\t\tvar startEnd2 = startEnd.dot( startEnd );\n\t\t\tvar startEnd_startP = startEnd.dot( startP );\n\n\t\t\tvar t = startEnd_startP / startEnd2;\n\n\t\t\tif ( clampToLine ) {\n\n\t\t\t\tt = THREE.Math.clamp( t, 0, 1 );\n\n\t\t\t}\n\n\t\t\treturn t;\n\n\t\t};\n\n\t}(),\n\n\tclosestPointToPoint: function ( point, clampToLine, optionalTarget ) {\n\n\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n\t},\n\n\tapplyMatrix4: function ( matrix ) {\n\n\t\tthis.start.applyMatrix4( matrix );\n\t\tthis.end.applyMatrix4( matrix );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( line ) {\n\n\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t}\n\n};\n\n// File:src/math/Box2.js\n\n/**\n * @author bhouston / http://clara.io\n */\n\nTHREE.Box2 = function ( min, max ) {\n\n\tthis.min = ( min !== undefined ) ? min : new THREE.Vector2( + Infinity, + Infinity );\n\tthis.max = ( max !== undefined ) ? max : new THREE.Vector2( - Infinity, - Infinity );\n\n};\n\nTHREE.Box2.prototype = {\n\n\tconstructor: THREE.Box2,\n\n\tset: function ( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPoints: function ( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCenterAndSize: function () {\n\n\t\tvar v1 = new THREE.Vector2();\n\n\t\treturn function setFromCenterAndSize( center, size ) {\n\n\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tmakeEmpty: function () {\n\n\t\tthis.min.x = this.min.y = + Infinity;\n\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\treturn this;\n\n\t},\n\n\tisEmpty: function () {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t},\n\n\tcenter: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector2();\n\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t},\n\n\tsize: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector2();\n\t\treturn result.subVectors( this.max, this.min );\n\n\t},\n\n\texpandByPoint: function ( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t},\n\n\texpandByVector: function ( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t},\n\n\texpandByScalar: function ( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\tif ( point.x < this.min.x || point.x > this.max.x ||\n\t\t     point.y < this.min.y || point.y > this.max.y ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tcontainsBox: function ( box ) {\n\n\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n\t\t     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t},\n\n\tgetParameter: function ( point, optionalTarget ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\tvar result = optionalTarget || new THREE.Vector2();\n\n\t\treturn result.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t);\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\n\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t     box.max.y < this.min.y || box.min.y > this.max.y ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tclampPoint: function ( point, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector2();\n\t\treturn result.copy( point ).clamp( this.min, this.max );\n\n\t},\n\n\tdistanceToPoint: function () {\n\n\t\tvar v1 = new THREE.Vector2();\n\n\t\treturn function distanceToPoint( point ) {\n\n\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t};\n\n\t}(),\n\n\tintersect: function ( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tunion: function ( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t},\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n};\n\n// File:src/math/Box3.js\n\n/**\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.Box3 = function ( min, max ) {\n\n\tthis.min = ( min !== undefined ) ? min : new THREE.Vector3( + Infinity, + Infinity, + Infinity );\n\tthis.max = ( max !== undefined ) ? max : new THREE.Vector3( - Infinity, - Infinity, - Infinity );\n\n};\n\nTHREE.Box3.prototype = {\n\n\tconstructor: THREE.Box3,\n\n\tset: function ( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromArray: function ( array ) {\n\n\t\tvar minX = + Infinity;\n\t\tvar minY = + Infinity;\n\t\tvar minZ = + Infinity;\n\n\t\tvar maxX = - Infinity;\n\t\tvar maxY = - Infinity;\n\t\tvar maxZ = - Infinity;\n\n\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\tvar x = array[ i ];\n\t\t\tvar y = array[ i + 1 ];\n\t\t\tvar z = array[ i + 2 ];\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t},\n\n\tsetFromPoints: function ( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCenterAndSize: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function setFromCenterAndSize( center, size ) {\n\n\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tsetFromObject: function () {\n\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t// accounting for both the object's, and children's, world transforms\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function setFromObject( object ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tobject.updateMatrixWorld( true );\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tobject.traverse( function ( node ) {\n\n\t\t\t\tvar geometry = node.geometry;\n\n\t\t\t\tif ( geometry !== undefined ) {\n\n\t\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tv1.copy( vertices[ i ] );\n\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( geometry instanceof THREE.BufferGeometry && geometry.attributes[ 'position' ] !== undefined ) {\n\n\t\t\t\t\t\tvar positions = geometry.attributes[ 'position' ].array;\n\n\t\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 3 ) {\n\n\t\t\t\t\t\t\tv1.fromArray( positions, i );\n\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tmakeEmpty: function () {\n\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\treturn this;\n\n\t},\n\n\tisEmpty: function () {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t},\n\n\tcenter: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t},\n\n\tsize: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.subVectors( this.max, this.min );\n\n\t},\n\n\texpandByPoint: function ( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t},\n\n\texpandByVector: function ( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t},\n\n\texpandByScalar: function ( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\tif ( point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\t point.y < this.min.y || point.y > this.max.y ||\n\t\t\t\t point.z < this.min.z || point.z > this.max.z ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tcontainsBox: function ( box ) {\n\n\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n\t\t\t ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&\n\t\t\t ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t},\n\n\tgetParameter: function ( point, optionalTarget ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\treturn result.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t);\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\n\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\t box.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\t\t box.max.z < this.min.z || box.min.z > this.max.z ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tintersectsSphere: ( function () {\n\n\t\tvar closestPoint;\n\n\t\treturn function intersectsSphere( sphere ) {\n\n\t\t\tif ( closestPoint === undefined ) closestPoint = new THREE.Vector3();\n\n\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\tthis.clampPoint( sphere.center, closestPoint );\n\n\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\t\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t\t};\n\n\t} )(),\n\n\tintersectsPlane: function ( plane ) {\n\n\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\tvar min, max;\n\n\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t} else {\n\n\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t}\n\n\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t}\n\n\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t}\n\n\t\treturn ( min <= plane.constant && max >= plane.constant );\n\n\t},\n\n\tclampPoint: function ( point, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.copy( point ).clamp( this.min, this.max );\n\n\t},\n\n\tdistanceToPoint: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function distanceToPoint( point ) {\n\n\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t};\n\n\t}(),\n\n\tgetBoundingSphere: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function getBoundingSphere( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Sphere();\n\n\t\t\tresult.center = this.center();\n\t\t\tresult.radius = this.size( v1 ).length() * 0.5;\n\n\t\t\treturn result;\n\n\t\t};\n\n\t}(),\n\n\tintersect: function ( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\tif( this.isEmpty() ) this.makeEmpty();\n\n\t\treturn this;\n\n\t},\n\n\tunion: function ( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tapplyMatrix4: function () {\n\n\t\tvar points = [\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3()\n\t\t];\n\n\t\treturn function applyMatrix4( matrix ) {\n\n\t\t\t// transform of empty box is an empty box.\n\t\t\tif( this.isEmpty() ) return this;\n\n\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );\t// 111\n\n\t\t\tthis.setFromPoints( points );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n};\n\n// File:src/math/Matrix3.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n * @author tschw\n */\n\nTHREE.Matrix3 = function () {\n\n\tthis.elements = new Float32Array( [\n\n\t\t1, 0, 0,\n\t\t0, 1, 0,\n\t\t0, 0, 1\n\n\t] );\n\n\tif ( arguments.length > 0 ) {\n\n\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n\t}\n\n};\n\nTHREE.Matrix3.prototype = {\n\n\tconstructor: THREE.Matrix3,\n\n\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\treturn this;\n\n\t},\n\n\tidentity: function () {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().fromArray( this.elements );\n\n\t},\n\n\tcopy: function ( m ) {\n\n\t\tvar me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 3 ], me[ 6 ],\n\t\t\tme[ 1 ], me[ 4 ], me[ 7 ],\n\t\t\tme[ 2 ], me[ 5 ], me[ 8 ]\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrix4: function( m ) {\n\n\t\tvar me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 4 ], me[  8 ],\n\t\t\tme[ 1 ], me[ 5 ], me[  9 ],\n\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tapplyToVector3Array: function () {\n\n\t\tvar v1;\n\n\t\treturn function applyToVector3Array( array, offset, length ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\tif ( length === undefined ) length = array.length;\n\n\t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\n\t\t\t\tv1.fromArray( array, j );\n\t\t\t\tv1.applyMatrix3( this );\n\t\t\t\tv1.toArray( array, j );\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t};\n\n\t}(),\n\n\tapplyToBuffer: function () {\n\n\t\tvar v1;\n\n\t\treturn function applyToBuffer( buffer, offset, length ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\n\t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\n\t\t\t\tv1.x = buffer.getX( j );\n\t\t\t\tv1.y = buffer.getY( j );\n\t\t\t\tv1.z = buffer.getZ( j );\n\n\t\t\t\tv1.applyMatrix3( this );\n\n\t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\n\n\t\t\t}\n\n\t\t\treturn buffer;\n\n\t\t};\n\n\t}(),\n\n\tmultiplyScalar: function ( s ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\treturn this;\n\n\t},\n\n\tdeterminant: function () {\n\n\t\tvar te = this.elements;\n\n\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t},\n\n\tgetInverse: function ( matrix, throwOnDegenerate ) {\n\n\t\tif ( matrix instanceof THREE.Matrix4 ) {\n\n\t\t\tconsole.error( \"THREE.Matrix3.getInverse no longer takes a Matrix4 argument.\" );\n\n\t\t}\n\n\t\tvar me = matrix.elements,\n\t\t\tte = this.elements,\n\n\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\n\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\tif ( det === 0 ) {\n\n\t\t\tvar msg = \"THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0\";\n\n\t\t\tif ( throwOnDegenerate || false ) {\n\n\t\t\t\tthrow new Error( msg );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( msg );\n\n\t\t\t}\n\n\t\t\treturn this.identity();\n\t\t}\n\t\t\n\t\tvar detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\tte[ 3 ] = t12 * detInv;\n\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\tte[ 6 ] = t13 * detInv;\n\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\treturn this;\n\n\t},\n\n\ttranspose: function () {\n\n\t\tvar tmp, m = this.elements;\n\n\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\treturn this;\n\n\t},\n\n\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n\t\t\t\t\"- just use .toArray instead.\" );\n\n\t\treturn this.toArray( array, offset );\n\n\t},\n\n\tgetNormalMatrix: function ( matrix4 ) {\n\n\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\n\t},\n\n\ttransposeIntoArray: function ( r ) {\n\n\t\tvar m = this.elements;\n\n\t\tr[ 0 ] = m[ 0 ];\n\t\tr[ 1 ] = m[ 3 ];\n\t\tr[ 2 ] = m[ 6 ];\n\t\tr[ 3 ] = m[ 1 ];\n\t\tr[ 4 ] = m[ 4 ];\n\t\tr[ 5 ] = m[ 7 ];\n\t\tr[ 6 ] = m[ 2 ];\n\t\tr[ 7 ] = m[ 5 ];\n\t\tr[ 8 ] = m[ 8 ];\n\n\t\treturn this;\n\n\t},\n\n\tfromArray: function ( array ) {\n\n\t\tthis.elements.set( array );\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tvar te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\tarray[ offset + 8 ]  = te[ 8 ];\n\n\t\treturn array;\n\n\t}\n\n};\n\n// File:src/math/Matrix4.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author philogb / http://blog.thejit.org/\n * @author jordi_ros / http://plattsoft.com\n * @author D1plo1d / http://github.com/D1plo1d\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author timknip / http://www.floorplanner.com/\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.Matrix4 = function () {\n\n\tthis.elements = new Float32Array( [\n\n\t\t1, 0, 0, 0,\n\t\t0, 1, 0, 0,\n\t\t0, 0, 1, 0,\n\t\t0, 0, 0, 1\n\n\t] );\n\n\tif ( arguments.length > 0 ) {\n\n\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n\t}\n\n};\n\nTHREE.Matrix4.prototype = {\n\n\tconstructor: THREE.Matrix4,\n\n\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\treturn this;\n\n\t},\n\n\tidentity: function () {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new THREE.Matrix4().fromArray( this.elements );\n\n\t},\n\n\tcopy: function ( m ) {\n\n\t\tthis.elements.set( m.elements );\n\n\t\treturn this;\n\n\t},\n\n\tcopyPosition: function ( m ) {\n\n\t\tvar te = this.elements;\n\t\tvar me = m.elements;\n\n\t\tte[ 12 ] = me[ 12 ];\n\t\tte[ 13 ] = me[ 13 ];\n\t\tte[ 14 ] = me[ 14 ];\n\n\t\treturn this;\n\n\t},\n\n\textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\treturn this;\n\n\t},\n\n\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\tthis.set(\n\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t0,       0,       0,       1\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\textractRotation: function () {\n\n\t\tvar v1;\n\n\t\treturn function extractRotation( m ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\n\t\t\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\n\t\t\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\n\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\n\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tmakeRotationFromEuler: function ( euler ) {\n\n\t\tif ( euler instanceof THREE.Euler === false ) {\n\n\t\t\tconsole.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\tvar te = this.elements;\n\n\t\tvar x = euler.x, y = euler.y, z = euler.z;\n\t\tvar a = Math.cos( x ), b = Math.sin( x );\n\t\tvar c = Math.cos( y ), d = Math.sin( y );\n\t\tvar e = Math.cos( z ), f = Math.sin( z );\n\n\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - c * f;\n\t\t\tte[ 8 ] = d;\n\n\t\t\tte[ 1 ] = af + be * d;\n\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\tte[ 9 ] = - b * c;\n\n\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\tte[ 6 ] = be + af * d;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce + df * b;\n\t\t\tte[ 4 ] = de * b - cf;\n\t\t\tte[ 8 ] = a * d;\n\n\t\t\tte[ 1 ] = a * f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b;\n\n\t\t\tte[ 2 ] = cf * b - de;\n\t\t\tte[ 6 ] = df + ce * b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce - df * b;\n\t\t\tte[ 4 ] = - a * f;\n\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\tte[ 1 ] = cf + de * b;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\tte[ 2 ] = - a * d;\n\t\t\tte[ 6 ] = b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = be * d - af;\n\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\tte[ 1 ] = c * f;\n\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\tte[ 2 ] = - d;\n\t\t\tte[ 6 ] = b * c;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\tte[ 1 ] = f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b * e;\n\n\t\t\tte[ 2 ] = - d * e;\n\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - f;\n\t\t\tte[ 8 ] = d * e;\n\n\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\tte[ 6 ] = b * e;\n\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t}\n\n\t\t// last column\n\t\tte[ 3 ] = 0;\n\t\tte[ 7 ] = 0;\n\t\tte[ 11 ] = 0;\n\n\t\t// bottom row\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationFromQuaternion: function ( q ) {\n\n\t\tvar te = this.elements;\n\n\t\tvar x = q.x, y = q.y, z = q.z, w = q.w;\n\t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\n\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\tte[ 0 ] = 1 - ( yy + zz );\n\t\tte[ 4 ] = xy - wz;\n\t\tte[ 8 ] = xz + wy;\n\n\t\tte[ 1 ] = xy + wz;\n\t\tte[ 5 ] = 1 - ( xx + zz );\n\t\tte[ 9 ] = yz - wx;\n\n\t\tte[ 2 ] = xz - wy;\n\t\tte[ 6 ] = yz + wx;\n\t\tte[ 10 ] = 1 - ( xx + yy );\n\n\t\t// last column\n\t\tte[ 3 ] = 0;\n\t\tte[ 7 ] = 0;\n\t\tte[ 11 ] = 0;\n\n\t\t// bottom row\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t},\n\n\tlookAt: function () {\n\n\t\tvar x, y, z;\n\n\t\treturn function lookAt( eye, target, up ) {\n\n\t\t\tif ( x === undefined ) {\n\n\t\t\t\tx = new THREE.Vector3();\n\t\t\t\ty = new THREE.Vector3();\n\t\t\t\tz = new THREE.Vector3();\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\n\t\t\tz.subVectors( eye, target ).normalize();\n\n\t\t\tif ( z.lengthSq() === 0 ) {\n\n\t\t\t\tz.z = 1;\n\n\t\t\t}\n\n\t\t\tx.crossVectors( up, z ).normalize();\n\n\t\t\tif ( x.lengthSq() === 0 ) {\n\n\t\t\t\tz.z += 0.0001;\n\t\t\t\tx.crossVectors( up, z ).normalize();\n\n\t\t\t}\n\n\t\t\ty.crossVectors( z, x );\n\n\n\t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\n\t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\n\t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tmultiply: function ( m, n ) {\n\n\t\tif ( n !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t\t\treturn this.multiplyMatrices( m, n );\n\n\t\t}\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t},\n\n\tpremultiply: function ( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t},\n\n\tmultiplyMatrices: function ( a, b ) {\n\n\t\tvar ae = a.elements;\n\t\tvar be = b.elements;\n\t\tvar te = this.elements;\n\n\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyToArray: function ( a, b, r ) {\n\n\t\tvar te = this.elements;\n\n\t\tthis.multiplyMatrices( a, b );\n\n\t\tr[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];\n\t\tr[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];\n\t\tr[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];\n\t\tr[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( s ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\treturn this;\n\n\t},\n\n\tapplyToVector3Array: function () {\n\n\t\tvar v1;\n\n\t\treturn function applyToVector3Array( array, offset, length ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\tif ( length === undefined ) length = array.length;\n\n\t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\n\n\t\t\t\tv1.fromArray( array, j );\n\t\t\t\tv1.applyMatrix4( this );\n\t\t\t\tv1.toArray( array, j );\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t};\n\n\t}(),\n\n\tapplyToBuffer: function () {\n\n\t\tvar v1;\n\n\t\treturn function applyToBuffer( buffer, offset, length ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\n\n\t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\n\n\t\t\t\tv1.x = buffer.getX( j );\n\t\t\t\tv1.y = buffer.getY( j );\n\t\t\t\tv1.z = buffer.getZ( j );\n\n\t\t\t\tv1.applyMatrix4( this );\n\n\t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\n\n\t\t\t}\n\n\t\t\treturn buffer;\n\n\t\t};\n\n\t}(),\n\n\tdeterminant: function () {\n\n\t\tvar te = this.elements;\n\n\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t//TODO: make this more efficient\n\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\treturn (\n\t\t\tn41 * (\n\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t - n13 * n24 * n32\n\t\t\t\t - n14 * n22 * n33\n\t\t\t\t + n12 * n24 * n33\n\t\t\t\t + n13 * n22 * n34\n\t\t\t\t - n12 * n23 * n34\n\t\t\t) +\n\t\t\tn42 * (\n\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t - n11 * n24 * n33\n\t\t\t\t + n14 * n21 * n33\n\t\t\t\t - n13 * n21 * n34\n\t\t\t\t + n13 * n24 * n31\n\t\t\t\t - n14 * n23 * n31\n\t\t\t) +\n\t\t\tn43 * (\n\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t - n11 * n22 * n34\n\t\t\t\t - n14 * n21 * n32\n\t\t\t\t + n12 * n21 * n34\n\t\t\t\t + n14 * n22 * n31\n\t\t\t\t - n12 * n24 * n31\n\t\t\t) +\n\t\t\tn44 * (\n\t\t\t\t- n13 * n22 * n31\n\t\t\t\t - n11 * n23 * n32\n\t\t\t\t + n11 * n22 * n33\n\t\t\t\t + n13 * n21 * n32\n\t\t\t\t - n12 * n21 * n33\n\t\t\t\t + n12 * n23 * n31\n\t\t\t)\n\n\t\t);\n\n\t},\n\n\ttranspose: function () {\n\n\t\tvar te = this.elements;\n\t\tvar tmp;\n\n\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\treturn this;\n\n\t},\n\n\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\n\t\t\t\t\"- just use .toArray instead.\" );\n\n\t\treturn this.toArray( array, offset );\n\n\t},\n\n\tgetPosition: function () {\n\n\t\tvar v1;\n\n\t\treturn function getPosition() {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\n\t\t\treturn v1.setFromMatrixColumn( this, 3 );\n\n\t\t};\n\n\t}(),\n\n\tsetPosition: function ( v ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 12 ] = v.x;\n\t\tte[ 13 ] = v.y;\n\t\tte[ 14 ] = v.z;\n\n\t\treturn this;\n\n\t},\n\n\tgetInverse: function ( m, throwOnDegenerate ) {\n\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\tvar te = this.elements,\n\t\t\tme = m.elements,\n\n\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\n\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\tif ( det === 0 ) {\n\n\t\t\tvar msg = \"THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0\";\n\n\t\t\tif ( throwOnDegenerate || false ) {\n\n\t\t\t\tthrow new Error( msg );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( msg );\n\n\t\t\t}\n\n\t\t\treturn this.identity();\n\n\t\t}\n\t\t\n\t\tvar detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\tte[ 4 ] = t12 * detInv;\n\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\tte[ 8 ] = t13 * detInv;\n\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\tte[ 12 ] = t14 * detInv;\n\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\treturn this;\n\n\t},\n\n\tscale: function ( v ) {\n\n\t\tvar te = this.elements;\n\t\tvar x = v.x, y = v.y, z = v.z;\n\n\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\treturn this;\n\n\t},\n\n\tgetMaxScaleOnAxis: function () {\n\n\t\tvar te = this.elements;\n\n\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t},\n\n\tmakeTranslation: function ( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, x,\n\t\t\t0, 1, 0, y,\n\t\t\t0, 0, 1, z,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationX: function ( theta ) {\n\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t1, 0,  0, 0,\n\t\t\t0, c, - s, 0,\n\t\t\t0, s,  c, 0,\n\t\t\t0, 0,  0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationY: function ( theta ) {\n\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t c, 0, s, 0,\n\t\t\t 0, 1, 0, 0,\n\t\t\t- s, 0, c, 0,\n\t\t\t 0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationZ: function ( theta ) {\n\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\tc, - s, 0, 0,\n\t\t\ts,  c, 0, 0,\n\t\t\t0,  0, 1, 0,\n\t\t\t0,  0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationAxis: function ( axis, angle ) {\n\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\tvar c = Math.cos( angle );\n\t\tvar s = Math.sin( angle );\n\t\tvar t = 1 - c;\n\t\tvar x = axis.x, y = axis.y, z = axis.z;\n\t\tvar tx = t * x, ty = t * y;\n\n\t\tthis.set(\n\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\t return this;\n\n\t},\n\n\tmakeScale: function ( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\tx, 0, 0, 0,\n\t\t\t0, y, 0, 0,\n\t\t\t0, 0, z, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tcompose: function ( position, quaternion, scale ) {\n\n\t\tthis.makeRotationFromQuaternion( quaternion );\n\t\tthis.scale( scale );\n\t\tthis.setPosition( position );\n\n\t\treturn this;\n\n\t},\n\n\tdecompose: function () {\n\n\t\tvar vector, matrix;\n\n\t\treturn function decompose( position, quaternion, scale ) {\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tvector = new THREE.Vector3();\n\t\t\t\tmatrix = new THREE.Matrix4();\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t\t// if determine is negative, we need to invert one scale\n\t\t\tvar det = this.determinant();\n\t\t\tif ( det < 0 ) {\n\n\t\t\t\tsx = - sx;\n\n\t\t\t}\n\n\t\t\tposition.x = te[ 12 ];\n\t\t\tposition.y = te[ 13 ];\n\t\t\tposition.z = te[ 14 ];\n\n\t\t\t// scale the rotation part\n\n\t\t\tmatrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()\n\n\t\t\tvar invSX = 1 / sx;\n\t\t\tvar invSY = 1 / sy;\n\t\t\tvar invSZ = 1 / sz;\n\n\t\t\tmatrix.elements[ 0 ] *= invSX;\n\t\t\tmatrix.elements[ 1 ] *= invSX;\n\t\t\tmatrix.elements[ 2 ] *= invSX;\n\n\t\t\tmatrix.elements[ 4 ] *= invSY;\n\t\t\tmatrix.elements[ 5 ] *= invSY;\n\t\t\tmatrix.elements[ 6 ] *= invSY;\n\n\t\t\tmatrix.elements[ 8 ] *= invSZ;\n\t\t\tmatrix.elements[ 9 ] *= invSZ;\n\t\t\tmatrix.elements[ 10 ] *= invSZ;\n\n\t\t\tquaternion.setFromRotationMatrix( matrix );\n\n\t\t\tscale.x = sx;\n\t\t\tscale.y = sy;\n\t\t\tscale.z = sz;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\n\t\tvar te = this.elements;\n\t\tvar x = 2 * near / ( right - left );\n\t\tvar y = 2 * near / ( top - bottom );\n\n\t\tvar a = ( right + left ) / ( right - left );\n\t\tvar b = ( top + bottom ) / ( top - bottom );\n\t\tvar c = - ( far + near ) / ( far - near );\n\t\tvar d = - 2 * far * near / ( far - near );\n\n\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\treturn this;\n\n\t},\n\n\tmakePerspective: function ( fov, aspect, near, far ) {\n\n\t\tvar ymax = near * Math.tan( THREE.Math.DEG2RAD * fov * 0.5 );\n\t\tvar ymin = - ymax;\n\t\tvar xmin = ymin * aspect;\n\t\tvar xmax = ymax * aspect;\n\n\t\treturn this.makeFrustum( xmin, xmax, ymin, ymax, near, far );\n\n\t},\n\n\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\n\t\tvar te = this.elements;\n\t\tvar w = 1.0 / ( right - left );\n\t\tvar h = 1.0 / ( top - bottom );\n\t\tvar p = 1.0 / ( far - near );\n\n\t\tvar x = ( right + left ) * w;\n\t\tvar y = ( top + bottom ) * h;\n\t\tvar z = ( far + near ) * p;\n\n\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( matrix ) {\n\n\t\tvar te = this.elements;\n\t\tvar me = matrix.elements;\n\n\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tfromArray: function ( array ) {\n\n\t\tthis.elements.set( array );\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tvar te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\tarray[ offset + 8 ]  = te[ 8 ];\n\t\tarray[ offset + 9 ]  = te[ 9 ];\n\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\treturn array;\n\n\t}\n\n};\n\n// File:src/math/Ray.js\n\n/**\n * @author bhouston / http://clara.io\n */\n\nTHREE.Ray = function ( origin, direction ) {\n\n\tthis.origin = ( origin !== undefined ) ? origin : new THREE.Vector3();\n\tthis.direction = ( direction !== undefined ) ? direction : new THREE.Vector3();\n\n};\n\nTHREE.Ray.prototype = {\n\n\tconstructor: THREE.Ray,\n\n\tset: function ( origin, direction ) {\n\n\t\tthis.origin.copy( origin );\n\t\tthis.direction.copy( direction );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( ray ) {\n\n\t\tthis.origin.copy( ray.origin );\n\t\tthis.direction.copy( ray.direction );\n\n\t\treturn this;\n\n\t},\n\n\tat: function ( t, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\treturn result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t},\n\n\tlookAt: function ( v ) {\n\n\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\treturn this;\n\n\t},\n\n\trecast: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function recast( t ) {\n\n\t\t\tthis.origin.copy( this.at( t, v1 ) );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclosestPointToPoint: function ( point, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\tresult.subVectors( point, this.origin );\n\t\tvar directionDistance = result.dot( this.direction );\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn result.copy( this.origin );\n\n\t\t}\n\n\t\treturn result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t},\n\n\tdistanceToPoint: function ( point ) {\n\n\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t},\n\n\tdistanceSqToPoint: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function distanceSqToPoint( point ) {\n\n\t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t\t// point behind the ray\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t\t}\n\n\t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t\treturn v1.distanceToSquared( point );\n\n\t\t};\n\n\t}(),\n\n\tdistanceSqToSegment: function () {\n\n\t\tvar segCenter = new THREE.Vector3();\n\t\tvar segDir = new THREE.Vector3();\n\t\tvar diff = new THREE.Vector3();\n\n\t\treturn function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t// defined by v0 and v1\n\t\t\t// It can also set two optional targets :\n\t\t\t// - The closest point on the ray\n\t\t\t// - The closest point on the segment\n\n\t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\n\t\t\tdiff.copy( this.origin ).sub( segCenter );\n\n\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\t\tvar a01 = - this.direction.dot( segDir );\n\t\t\tvar b0 = diff.dot( this.direction );\n\t\t\tvar b1 = - diff.dot( segDir );\n\t\t\tvar c = diff.lengthSq();\n\t\t\tvar det = Math.abs( 1 - a01 * a01 );\n\t\t\tvar s0, s1, sqrDist, extDet;\n\n\t\t\tif ( det > 0 ) {\n\n\t\t\t\t// The ray and segment are not parallel.\n\n\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\textDet = segExtent * det;\n\n\t\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 5\n\n\t\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t\t// region 4\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 3\n\n\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 2\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Ray and segment are parallel.\n\n\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnRay ) {\n\n\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnSegment ) {\n\n\t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\n\n\t\t\t}\n\n\t\t\treturn sqrDist;\n\n\t\t};\n\n\t}(),\n\n\tintersectSphere: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function intersectSphere( sphere, optionalTarget ) {\n\n\t\t\tv1.subVectors( sphere.center, this.origin );\n\t\t\tvar tca = v1.dot( this.direction );\n\t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\n\t\t\tvar radius2 = sphere.radius * sphere.radius;\n\n\t\t\tif ( d2 > radius2 ) return null;\n\n\t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\n\t\t\t// t0 = first intersect point - entrance on front of sphere\n\t\t\tvar t0 = tca - thc;\n\n\t\t\t// t1 = second intersect point - exit point on back of sphere\n\t\t\tvar t1 = tca + thc;\n\n\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\n\t\t\t// test to see if t0 is behind the ray:\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t// in order to always return an intersect point that is in front of the ray.\n\t\t\tif ( t0 < 0 ) return this.at( t1, optionalTarget );\n\n\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\t\treturn this.at( t0, optionalTarget );\n\n\t\t};\n\n\t}(),\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\n\n\t},\n\n\tdistanceToPlane: function ( plane ) {\n\n\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t// Return if the ray never intersects the plane\n\n\t\treturn t >= 0 ? t :  null;\n\n\t},\n\n\tintersectPlane: function ( plane, optionalTarget ) {\n\n\t\tvar t = this.distanceToPlane( plane );\n\n\t\tif ( t === null ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn this.at( t, optionalTarget );\n\n\t},\n\n\n\n\tintersectsPlane: function ( plane ) {\n\n\t\t// check if the ray lies on the plane first\n\n\t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\n\t\tif ( distToPoint === 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\treturn false;\n\n\t},\n\n\tintersectBox: function ( box, optionalTarget ) {\n\n\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\tvar invdirx = 1 / this.direction.x,\n\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\tvar origin = this.origin;\n\n\t\tif ( invdirx >= 0 ) {\n\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t} else {\n\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t}\n\n\t\tif ( invdiry >= 0 ) {\n\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t} else {\n\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t}\n\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\n\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\n\t\tif ( invdirz >= 0 ) {\n\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t} else {\n\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t}\n\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n\t\t//return point closest to the ray (positive side)\n\n\t\tif ( tmax < 0 ) return null;\n\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, optionalTarget );\n\n\t},\n\n\tintersectsBox: ( function () {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function intersectsBox( box ) {\n\n\t\t\treturn this.intersectBox( box, v ) !== null;\n\n\t\t};\n\n\t} )(),\n\n\tintersectTriangle: function () {\n\n\t\t// Compute the offset origin, edges, and normal.\n\t\tvar diff = new THREE.Vector3();\n\t\tvar edge1 = new THREE.Vector3();\n\t\tvar edge2 = new THREE.Vector3();\n\t\tvar normal = new THREE.Vector3();\n\n\t\treturn function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {\n\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t\tedge1.subVectors( b, a );\n\t\t\tedge2.subVectors( c, a );\n\t\t\tnormal.crossVectors( edge1, edge2 );\n\n\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\t\tvar DdN = this.direction.dot( normal );\n\t\t\tvar sign;\n\n\t\t\tif ( DdN > 0 ) {\n\n\t\t\t\tif ( backfaceCulling ) return null;\n\t\t\t\tsign = 1;\n\n\t\t\t} else if ( DdN < 0 ) {\n\n\t\t\t\tsign = - 1;\n\t\t\t\tDdN = - DdN;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tdiff.subVectors( this.origin, a );\n\t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\n\n\t\t\t// b1 < 0, no intersection\n\t\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\n\n\t\t\t// b2 < 0, no intersection\n\t\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// b1+b2 > 1, no intersection\n\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Line intersects triangle, check if ray does.\n\t\t\tvar QdN = - sign * diff.dot( normal );\n\n\t\t\t// t < 0, no intersection\n\t\t\tif ( QdN < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Ray intersects triangle.\n\t\t\treturn this.at( QdN / DdN, optionalTarget );\n\n\t\t};\n\n\t}(),\n\n\tapplyMatrix4: function ( matrix4 ) {\n\n\t\tthis.direction.add( this.origin ).applyMatrix4( matrix4 );\n\t\tthis.origin.applyMatrix4( matrix4 );\n\t\tthis.direction.sub( this.origin );\n\t\tthis.direction.normalize();\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( ray ) {\n\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t}\n\n};\n\n// File:src/math/Sphere.js\n\n/**\n * @author bhouston / http://clara.io\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Sphere = function ( center, radius ) {\n\n\tthis.center = ( center !== undefined ) ? center : new THREE.Vector3();\n\tthis.radius = ( radius !== undefined ) ? radius : 0;\n\n};\n\nTHREE.Sphere.prototype = {\n\n\tconstructor: THREE.Sphere,\n\n\tset: function ( center, radius ) {\n\n\t\tthis.center.copy( center );\n\t\tthis.radius = radius;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPoints: function () {\n\n\t\tvar box = new THREE.Box3();\n\n\t\treturn function setFromPoints( points, optionalCenter ) {\n\n\t\t\tvar center = this.center;\n\n\t\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\t\tcenter.copy( optionalCenter );\n\n\t\t\t} else {\n\n\t\t\t\tbox.setFromPoints( points ).center( center );\n\n\t\t\t}\n\n\t\t\tvar maxRadiusSq = 0;\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t\t}\n\n\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( sphere ) {\n\n\t\tthis.center.copy( sphere.center );\n\t\tthis.radius = sphere.radius;\n\n\t\treturn this;\n\n\t},\n\n\tempty: function () {\n\n\t\treturn ( this.radius <= 0 );\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t},\n\n\tdistanceToPoint: function ( point ) {\n\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t},\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\tvar radiusSum = this.radius + sphere.radius;\n\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\treturn box.intersectsSphere( this );\n\n\t},\n\n\tintersectsPlane: function ( plane ) {\n\n\t\t// We use the following equation to compute the signed distance from\n\t\t// the center of the sphere to the plane.\n\t\t//\n\t\t// distance = q * n - d\n\t\t//\n\t\t// If this distance is greater than the radius of the sphere,\n\t\t// then there is no intersection.\n\n\t\treturn Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;\n\n\t},\n\n\tclampPoint: function ( point, optionalTarget ) {\n\n\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\tresult.copy( point );\n\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\tresult.sub( this.center ).normalize();\n\t\t\tresult.multiplyScalar( this.radius ).add( this.center );\n\n\t\t}\n\n\t\treturn result;\n\n\t},\n\n\tgetBoundingBox: function ( optionalTarget ) {\n\n\t\tvar box = optionalTarget || new THREE.Box3();\n\n\t\tbox.set( this.center, this.center );\n\t\tbox.expandByScalar( this.radius );\n\n\t\treturn box;\n\n\t},\n\n\tapplyMatrix4: function ( matrix ) {\n\n\t\tthis.center.applyMatrix4( matrix );\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\treturn this;\n\n\t},\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.center.add( offset );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( sphere ) {\n\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t}\n\n};\n\n// File:src/math/Frustum.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author bhouston / http://clara.io\n */\n\nTHREE.Frustum = function ( p0, p1, p2, p3, p4, p5 ) {\n\n\tthis.planes = [\n\n\t\t( p0 !== undefined ) ? p0 : new THREE.Plane(),\n\t\t( p1 !== undefined ) ? p1 : new THREE.Plane(),\n\t\t( p2 !== undefined ) ? p2 : new THREE.Plane(),\n\t\t( p3 !== undefined ) ? p3 : new THREE.Plane(),\n\t\t( p4 !== undefined ) ? p4 : new THREE.Plane(),\n\t\t( p5 !== undefined ) ? p5 : new THREE.Plane()\n\n\t];\n\n};\n\nTHREE.Frustum.prototype = {\n\n\tconstructor: THREE.Frustum,\n\n\tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tvar planes = this.planes;\n\n\t\tplanes[ 0 ].copy( p0 );\n\t\tplanes[ 1 ].copy( p1 );\n\t\tplanes[ 2 ].copy( p2 );\n\t\tplanes[ 3 ].copy( p3 );\n\t\tplanes[ 4 ].copy( p4 );\n\t\tplanes[ 5 ].copy( p5 );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( frustum ) {\n\n\t\tvar planes = this.planes;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrix: function ( m ) {\n\n\t\tvar planes = this.planes;\n\t\tvar me = m.elements;\n\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\treturn this;\n\n\t},\n\n\tintersectsObject: function () {\n\n\t\tvar sphere = new THREE.Sphere();\n\n\t\treturn function intersectsObject( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null )\n\t\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\tsphere.copy( geometry.boundingSphere )\n\t\t\t\t.applyMatrix4( object.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t};\n\n\t}(),\n\n\tintersectsSprite: function () {\n\n\t\tvar sphere = new THREE.Sphere();\n\n\t\treturn function intersectsSprite( sprite ) {\n\n\t\t\tsphere.center.set( 0, 0, 0 );\n\t\t\tsphere.radius = 0.7071067811865476;\n\t\t\tsphere.applyMatrix4( sprite.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t};\n\n\t}(),\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\tvar planes = this.planes;\n\t\tvar center = sphere.center;\n\t\tvar negRadius = - sphere.radius;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\n\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tintersectsBox: function () {\n\n\t\tvar p1 = new THREE.Vector3(),\n\t\t\tp2 = new THREE.Vector3();\n\n\t\treturn function intersectsBox( box ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6 ; i ++ ) {\n\n\t\t\t\tvar plane = planes[ i ];\n\n\t\t\t\tp1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\n\t\t\t\tp2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\tp1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\n\t\t\t\tp2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\tp1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\n\t\t\t\tp2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\tvar d1 = plane.distanceToPoint( p1 );\n\t\t\t\tvar d2 = plane.distanceToPoint( p2 );\n\n\t\t\t\t// if both outside plane, no intersection\n\n\t\t\t\tif ( d1 < 0 && d2 < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t};\n\n\t}(),\n\n\n\tcontainsPoint: function ( point ) {\n\n\t\tvar planes = this.planes;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n};\n\n// File:src/math/Plane.js\n\n/**\n * @author bhouston / http://clara.io\n */\n\nTHREE.Plane = function ( normal, constant ) {\n\n\tthis.normal = ( normal !== undefined ) ? normal : new THREE.Vector3( 1, 0, 0 );\n\tthis.constant = ( constant !== undefined ) ? constant : 0;\n\n};\n\nTHREE.Plane.prototype = {\n\n\tconstructor: THREE.Plane,\n\n\tset: function ( normal, constant ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = constant;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponents: function ( x, y, z, w ) {\n\n\t\tthis.normal.set( x, y, z );\n\t\tthis.constant = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = - point.dot( this.normal );\t// must be this.normal, not normal, as this.normal is normalized\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCoplanarPoints: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\t\tvar v2 = new THREE.Vector3();\n\n\t\treturn function setFromCoplanarPoints( a, b, c ) {\n\n\t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\n\n\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( plane ) {\n\n\t\tthis.normal.copy( plane.normal );\n\t\tthis.constant = plane.constant;\n\n\t\treturn this;\n\n\t},\n\n\tnormalize: function () {\n\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\tthis.constant *= inverseNormalLength;\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.constant *= - 1;\n\t\tthis.normal.negate();\n\n\t\treturn this;\n\n\t},\n\n\tdistanceToPoint: function ( point ) {\n\n\t\treturn this.normal.dot( point ) + this.constant;\n\n\t},\n\n\tdistanceToSphere: function ( sphere ) {\n\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t},\n\n\tprojectPoint: function ( point, optionalTarget ) {\n\n\t\treturn this.orthoPoint( point, optionalTarget ).sub( point ).negate();\n\n\t},\n\n\torthoPoint: function ( point, optionalTarget ) {\n\n\t\tvar perpendicularMagnitude = this.distanceToPoint( point );\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );\n\n\t},\n\n\tintersectLine: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function intersectLine( line, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t\tvar direction = line.delta( v1 );\n\n\t\t\tvar denominator = this.normal.dot( direction );\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\t\treturn result.copy( line.start );\n\n\t\t\t\t}\n\n\t\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\treturn result.copy( direction ).multiplyScalar( t ).add( line.start );\n\n\t\t};\n\n\t}(),\n\n\tintersectsLine: function ( line ) {\n\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\tvar startSign = this.distanceToPoint( line.start );\n\t\tvar endSign = this.distanceToPoint( line.end );\n\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\treturn box.intersectsPlane( this );\n\n\t},\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\treturn sphere.intersectsPlane( this );\n\n\t},\n\n\tcoplanarPoint: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t},\n\n\tapplyMatrix4: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\t\tvar m1 = new THREE.Matrix3();\n\n\t\treturn function applyMatrix4( matrix, optionalNormalMatrix ) {\n\n\t\t\tvar referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );\n\n\t\t\t// transform normal based on theory here:\n\t\t\t// http://www.songho.ca/opengl/gl_normaltransform.html\n\t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\n\t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t// recalculate constant (like in setFromNormalAndCoplanarPoint)\n\t\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.constant = this.constant - offset.dot( this.normal );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( plane ) {\n\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t}\n\n};\n\n// File:src/math/Spherical.js\n\n/**\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n *\n * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n *\n * The poles (phi) are at the positive and negative y axis.\n * The equator starts at positive z.\n */\n\nTHREE.Spherical = function ( radius, phi, theta ) {\n\n\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n\tthis.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole\n\tthis.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere\n\n\treturn this;\n\n};\n\nTHREE.Spherical.prototype = {\n\n\tconstructor: THREE.Spherical,\n\n\tset: function ( radius, phi, theta ) {\n\n\t\tthis.radius = radius;\n\t\tthis.phi = phi;\n\t\tthis.theta = theta;\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( other ) {\n\n\t\tthis.radius.copy( other.radius );\n\t\tthis.phi.copy( other.phi );\n\t\tthis.theta.copy( other.theta );\n\n\t\treturn this;\n\n\t},\n\n\t// restrict phi to be betwee EPS and PI-EPS\n\tmakeSafe: function() {\n\n\t\tvar EPS = 0.000001;\n\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromVector3: function( vec3 ) {\n\n\t\tthis.radius = vec3.length();\n\n\t\tif ( this.radius === 0 ) {\n\n\t\t\tthis.theta = 0;\n\t\t\tthis.phi = 0;\n\n\t\t} else {\n\n\t\t\tthis.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis\n\t\t\tthis.phi = Math.acos( THREE.Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n};\n\n// File:src/math/Math.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Math = {\n\n\tDEG2RAD: Math.PI / 180,\n\tRAD2DEG: 180 / Math.PI,\n\n\tgenerateUUID: function () {\n\n\t\t// http://www.broofa.com/Tools/Math.uuid.htm\n\n\t\tvar chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );\n\t\tvar uuid = new Array( 36 );\n\t\tvar rnd = 0, r;\n\n\t\treturn function generateUUID() {\n\n\t\t\tfor ( var i = 0; i < 36; i ++ ) {\n\n\t\t\t\tif ( i === 8 || i === 13 || i === 18 || i === 23 ) {\n\n\t\t\t\t\tuuid[ i ] = '-';\n\n\t\t\t\t} else if ( i === 14 ) {\n\n\t\t\t\t\tuuid[ i ] = '4';\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;\n\t\t\t\t\tr = rnd & 0xf;\n\t\t\t\t\trnd = rnd >> 4;\n\t\t\t\t\tuuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn uuid.join( '' );\n\n\t\t};\n\n\t}(),\n\n\tclamp: function ( value, min, max ) {\n\n\t\treturn Math.max( min, Math.min( max, value ) );\n\n\t},\n\n\t// compute euclidian modulo of m % n\n\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\teuclideanModulo: function ( n, m ) {\n\n\t\treturn ( ( n % m ) + m ) % m;\n\n\t},\n\n\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\n\tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\n\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n\t},\n\n\t// http://en.wikipedia.org/wiki/Smoothstep\n\n\tsmoothstep: function ( x, min, max ) {\n\n\t\tif ( x <= min ) return 0;\n\t\tif ( x >= max ) return 1;\n\n\t\tx = ( x - min ) / ( max - min );\n\n\t\treturn x * x * ( 3 - 2 * x );\n\n\t},\n\n\tsmootherstep: function ( x, min, max ) {\n\n\t\tif ( x <= min ) return 0;\n\t\tif ( x >= max ) return 1;\n\n\t\tx = ( x - min ) / ( max - min );\n\n\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n\t},\n\n\trandom16: function () {\n\n\t\tconsole.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );\n\t\treturn Math.random();\n\n\t},\n\n\t// Random integer from <low, high> interval\n\n\trandInt: function ( low, high ) {\n\n\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n\t},\n\n\t// Random float from <low, high> interval\n\n\trandFloat: function ( low, high ) {\n\n\t\treturn low + Math.random() * ( high - low );\n\n\t},\n\n\t// Random float from <-range/2, range/2> interval\n\n\trandFloatSpread: function ( range ) {\n\n\t\treturn range * ( 0.5 - Math.random() );\n\n\t},\n\n\tdegToRad: function ( degrees ) {\n\n\t\treturn degrees * THREE.Math.DEG2RAD;\n\n\t},\n\n\tradToDeg: function ( radians ) {\n\n\t\treturn radians * THREE.Math.RAD2DEG;\n\n\t},\n\n\tisPowerOfTwo: function ( value ) {\n\n\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t},\n\n\tnearestPowerOfTwo: function ( value ) {\n\n\t\treturn Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );\n\n\t},\n\n\tnextPowerOfTwo: function ( value ) {\n\n\t\tvalue --;\n\t\tvalue |= value >> 1;\n\t\tvalue |= value >> 2;\n\t\tvalue |= value >> 4;\n\t\tvalue |= value >> 8;\n\t\tvalue |= value >> 16;\n\t\tvalue ++;\n\n\t\treturn value;\n\n\t}\n\n};\n\n// File:src/math/Spline.js\n\n/**\n * Spline from Tween.js, slightly optimized (and trashed)\n * http://sole.github.com/tween.js/examples/05_spline.html\n *\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Spline = function ( points ) {\n\n\tthis.points = points;\n\n\tvar c = [], v3 = { x: 0, y: 0, z: 0 },\n\tpoint, intPoint, weight, w2, w3,\n\tpa, pb, pc, pd;\n\n\tthis.initFromArray = function ( a ) {\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0; i < a.length; i ++ ) {\n\n\t\t\tthis.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };\n\n\t\t}\n\n\t};\n\n\tthis.getPoint = function ( k ) {\n\n\t\tpoint = ( this.points.length - 1 ) * k;\n\t\tintPoint = Math.floor( point );\n\t\tweight = point - intPoint;\n\n\t\tc[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\n\t\tc[ 1 ] = intPoint;\n\t\tc[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;\n\t\tc[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;\n\n\t\tpa = this.points[ c[ 0 ] ];\n\t\tpb = this.points[ c[ 1 ] ];\n\t\tpc = this.points[ c[ 2 ] ];\n\t\tpd = this.points[ c[ 3 ] ];\n\n\t\tw2 = weight * weight;\n\t\tw3 = weight * w2;\n\n\t\tv3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );\n\t\tv3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );\n\t\tv3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );\n\n\t\treturn v3;\n\n\t};\n\n\tthis.getControlPointsArray = function () {\n\n\t\tvar i, p, l = this.points.length,\n\t\t\tcoords = [];\n\n\t\tfor ( i = 0; i < l; i ++ ) {\n\n\t\t\tp = this.points[ i ];\n\t\t\tcoords[ i ] = [ p.x, p.y, p.z ];\n\n\t\t}\n\n\t\treturn coords;\n\n\t};\n\n\t// approximate length by summing linear segments\n\n\tthis.getLength = function ( nSubDivisions ) {\n\n\t\tvar i, index, nSamples, position,\n\t\t\tpoint = 0, intPoint = 0, oldIntPoint = 0,\n\t\t\toldPosition = new THREE.Vector3(),\n\t\t\ttmpVec = new THREE.Vector3(),\n\t\t\tchunkLengths = [],\n\t\t\ttotalLength = 0;\n\n\t\t// first point has 0 length\n\n\t\tchunkLengths[ 0 ] = 0;\n\n\t\tif ( ! nSubDivisions ) nSubDivisions = 100;\n\n\t\tnSamples = this.points.length * nSubDivisions;\n\n\t\toldPosition.copy( this.points[ 0 ] );\n\n\t\tfor ( i = 1; i < nSamples; i ++ ) {\n\n\t\t\tindex = i / nSamples;\n\n\t\t\tposition = this.getPoint( index );\n\t\t\ttmpVec.copy( position );\n\n\t\t\ttotalLength += tmpVec.distanceTo( oldPosition );\n\n\t\t\toldPosition.copy( position );\n\n\t\t\tpoint = ( this.points.length - 1 ) * index;\n\t\t\tintPoint = Math.floor( point );\n\n\t\t\tif ( intPoint !== oldIntPoint ) {\n\n\t\t\t\tchunkLengths[ intPoint ] = totalLength;\n\t\t\t\toldIntPoint = intPoint;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// last point ends with total length\n\n\t\tchunkLengths[ chunkLengths.length ] = totalLength;\n\n\t\treturn { chunks: chunkLengths, total: totalLength };\n\n\t};\n\n\tthis.reparametrizeByArcLength = function ( samplingCoef ) {\n\n\t\tvar i, j,\n\t\t\tindex, indexCurrent, indexNext,\n\t\t\trealDistance,\n\t\t\tsampling, position,\n\t\t\tnewpoints = [],\n\t\t\ttmpVec = new THREE.Vector3(),\n\t\t\tsl = this.getLength();\n\n\t\tnewpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );\n\n\t\tfor ( i = 1; i < this.points.length; i ++ ) {\n\n\t\t\t//tmpVec.copy( this.points[ i - 1 ] );\n\t\t\t//linearDistance = tmpVec.distanceTo( this.points[ i ] );\n\n\t\t\trealDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];\n\n\t\t\tsampling = Math.ceil( samplingCoef * realDistance / sl.total );\n\n\t\t\tindexCurrent = ( i - 1 ) / ( this.points.length - 1 );\n\t\t\tindexNext = i / ( this.points.length - 1 );\n\n\t\t\tfor ( j = 1; j < sampling - 1; j ++ ) {\n\n\t\t\t\tindex = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );\n\n\t\t\t\tposition = this.getPoint( index );\n\t\t\t\tnewpoints.push( tmpVec.copy( position ).clone() );\n\n\t\t\t}\n\n\t\t\tnewpoints.push( tmpVec.copy( this.points[ i ] ).clone() );\n\n\t\t}\n\n\t\tthis.points = newpoints;\n\n\t};\n\n\t// Catmull-Rom\n\n\tfunction interpolate( p0, p1, p2, p3, t, t2, t3 ) {\n\n\t\tvar v0 = ( p2 - p0 ) * 0.5,\n\t\t\tv1 = ( p3 - p1 ) * 0.5;\n\n\t\treturn ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n\t}\n\n};\n\n// File:src/math/Triangle.js\n\n/**\n * @author bhouston / http://clara.io\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Triangle = function ( a, b, c ) {\n\n\tthis.a = ( a !== undefined ) ? a : new THREE.Vector3();\n\tthis.b = ( b !== undefined ) ? b : new THREE.Vector3();\n\tthis.c = ( c !== undefined ) ? c : new THREE.Vector3();\n\n};\n\nTHREE.Triangle.normal = function () {\n\n\tvar v0 = new THREE.Vector3();\n\n\treturn function normal( a, b, c, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\tresult.subVectors( c, b );\n\t\tv0.subVectors( a, b );\n\t\tresult.cross( v0 );\n\n\t\tvar resultLengthSq = result.lengthSq();\n\t\tif ( resultLengthSq > 0 ) {\n\n\t\t\treturn result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\n\n\t\t}\n\n\t\treturn result.set( 0, 0, 0 );\n\n\t};\n\n}();\n\n// static/instance method to calculate barycentric coordinates\n// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\nTHREE.Triangle.barycoordFromPoint = function () {\n\n\tvar v0 = new THREE.Vector3();\n\tvar v1 = new THREE.Vector3();\n\tvar v2 = new THREE.Vector3();\n\n\treturn function barycoordFromPoint( point, a, b, c, optionalTarget ) {\n\n\t\tv0.subVectors( c, a );\n\t\tv1.subVectors( b, a );\n\t\tv2.subVectors( point, a );\n\n\t\tvar dot00 = v0.dot( v0 );\n\t\tvar dot01 = v0.dot( v1 );\n\t\tvar dot02 = v0.dot( v2 );\n\t\tvar dot11 = v1.dot( v1 );\n\t\tvar dot12 = v1.dot( v2 );\n\n\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t// collinear or singular triangle\n\t\tif ( denom === 0 ) {\n\n\t\t\t// arbitrary location outside of triangle?\n\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\treturn result.set( - 2, - 1, - 1 );\n\n\t\t}\n\n\t\tvar invDenom = 1 / denom;\n\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t// barycentric coordinates must always sum to 1\n\t\treturn result.set( 1 - u - v, v, u );\n\n\t};\n\n}();\n\nTHREE.Triangle.containsPoint = function () {\n\n\tvar v1 = new THREE.Vector3();\n\n\treturn function containsPoint( point, a, b, c ) {\n\n\t\tvar result = THREE.Triangle.barycoordFromPoint( point, a, b, c, v1 );\n\n\t\treturn ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\n\n\t};\n\n}();\n\nTHREE.Triangle.prototype = {\n\n\tconstructor: THREE.Triangle,\n\n\tset: function ( a, b, c ) {\n\n\t\tthis.a.copy( a );\n\t\tthis.b.copy( b );\n\t\tthis.c.copy( c );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\n\t\tthis.a.copy( points[ i0 ] );\n\t\tthis.b.copy( points[ i1 ] );\n\t\tthis.c.copy( points[ i2 ] );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( triangle ) {\n\n\t\tthis.a.copy( triangle.a );\n\t\tthis.b.copy( triangle.b );\n\t\tthis.c.copy( triangle.c );\n\n\t\treturn this;\n\n\t},\n\n\tarea: function () {\n\n\t\tvar v0 = new THREE.Vector3();\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function area() {\n\n\t\t\tv0.subVectors( this.c, this.b );\n\t\t\tv1.subVectors( this.a, this.b );\n\n\t\t\treturn v0.cross( v1 ).length() * 0.5;\n\n\t\t};\n\n\t}(),\n\n\tmidpoint: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t},\n\n\tnormal: function ( optionalTarget ) {\n\n\t\treturn THREE.Triangle.normal( this.a, this.b, this.c, optionalTarget );\n\n\t},\n\n\tplane: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Plane();\n\n\t\treturn result.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t},\n\n\tbarycoordFromPoint: function ( point, optionalTarget ) {\n\n\t\treturn THREE.Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\treturn THREE.Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t},\n\n\tclosestPointToPoint: function () {\n\n\t\tvar plane, edgeList, projectedPoint, closestPoint;\n\n\t\treturn function closestPointToPoint( point, optionalTarget ) {\n\n\t\t\tif ( plane === undefined ) {\n\n\t\t\t\tplane = new THREE.Plane();\n\t\t\t\tedgeList = [ new THREE.Line3(), new THREE.Line3(), new THREE.Line3() ];\n\t\t\t\tprojectedPoint = new THREE.Vector3();\n\t\t\t\tclosestPoint = new THREE.Vector3();\n\n\t\t\t}\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\t\tvar minDistance = Infinity;\n\n\t\t\t// project the point onto the plane of the triangle\n\n\t\t\tplane.setFromCoplanarPoints( this.a, this.b, this.c );\n\t\t\tplane.projectPoint( point, projectedPoint );\n\n\t\t\t// check if the projection lies within the triangle\n\n\t\t\tif( this.containsPoint( projectedPoint ) === true ) {\n\n\t\t\t\t// if so, this is the closest point\n\n\t\t\t\tresult.copy( projectedPoint );\n\n\t\t\t} else {\n\n\t\t\t\t// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices\n\n\t\t\t\tedgeList[ 0 ].set( this.a, this.b );\n\t\t\t\tedgeList[ 1 ].set( this.b, this.c );\n\t\t\t\tedgeList[ 2 ].set( this.c, this.a );\n\n\t\t\t\tfor( var i = 0; i < edgeList.length; i ++ ) {\n\n\t\t\t\t\tedgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );\n\n\t\t\t\t\tvar distance = projectedPoint.distanceToSquared( closestPoint );\n\n\t\t\t\t\tif( distance < minDistance ) {\n\n\t\t\t\t\t\tminDistance = distance;\n\n\t\t\t\t\t\tresult.copy( closestPoint );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t};\n\n\t}(),\n\n\tequals: function ( triangle ) {\n\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t}\n\n};\n\n// File:src/math/Interpolant.js\n\n/**\n * Abstract base class of interpolants over parametric samples.\n *\n * The parameter domain is one dimensional, typically the time or a path\n * along a curve defined by the data.\n *\n * The sample values can have any dimensionality and derived classes may\n * apply special interpretations to the data.\n *\n * This class provides the interval seek in a Template Method, deferring\n * the actual interpolation to derived classes.\n *\n * Time complexity is O(1) for linear access crossing at most two points\n * and O(log N) for random access, where N is the number of positions.\n *\n * References:\n *\n * \t\thttp://www.oodesign.com/template-method-pattern.html\n *\n * @author tschw\n */\n\nTHREE.Interpolant = function(\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tthis.parameterPositions = parameterPositions;\n\tthis._cachedIndex = 0;\n\n\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\tthis.sampleValues = sampleValues;\n\tthis.valueSize = sampleSize;\n\n};\n\nTHREE.Interpolant.prototype = {\n\n\tconstructor: THREE.Interpolant,\n\n\tevaluate: function( t ) {\n\n\t\tvar pp = this.parameterPositions,\n\t\t\ti1 = this._cachedIndex,\n\n\t\t\tt1 = pp[   i1   ],\n\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\tvalidate_interval: {\n\n\t\t\tseek: {\n\n\t\t\t\tvar right;\n\n\t\t\t\tlinear_scan: {\n//- See http://jsperf.com/comparison-to-undefined/3\n//- slower code:\n//-\n//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ;) {\n\n\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\n\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n//- slower code:\n//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\tvar t1global = pp[ 1 ];\n\n\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ;) {\n\n\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t} // linear scan\n\n\t\t\t\t// binary search\n\n\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tt1 = pp[   i1   ];\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t// check boundary cases, again\n\n\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\n\t\t\t\t}\n\n\t\t\t} // seek\n\n\t\t\tthis._cachedIndex = i1;\n\n\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t} // validate_interval\n\n\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t},\n\n\tsettings: null, // optional, subclass-specific settings structure\n\t// Note: The indirection allows central control of many interpolants.\n\n\t// --- Protected interface\n\n\tDefaultSettings_: {},\n\n\tgetSettings_: function() {\n\n\t\treturn this.settings || this.DefaultSettings_;\n\n\t},\n\n\tcopySampleValue_: function( index ) {\n\n\t\t// copies a sample value to the result buffer\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = index * stride;\n\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t},\n\n\t// Template methods for derived classes:\n\n\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\tthrow new Error( \"call to abstract method\" );\n\t\t// implementations shall return this.resultBuffer\n\n\t},\n\n\tintervalChanged_: function( i1, t0, t1 ) {\n\n\t\t// empty\n\n\t}\n\n};\n\nObject.assign( THREE.Interpolant.prototype, {\n\n\tbeforeStart_: //( 0, t, t0 ), returns this.resultBuffer\n\t\tTHREE.Interpolant.prototype.copySampleValue_,\n\n\tafterEnd_: //( N-1, tN-1, t ), returns this.resultBuffer\n\t\tTHREE.Interpolant.prototype.copySampleValue_\n\n} );\n\n// File:src/math/interpolants/CubicInterpolant.js\n\n/**\n * Fast and simple cubic spline interpolant.\n *\n * It was derived from a Hermitian construction setting the first derivative\n * at each sample position to the linear slope between neighboring positions\n * over their parameter interval.\n *\n * @author tschw\n */\n\nTHREE.CubicInterpolant = function(\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tTHREE.Interpolant.call(\n\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\tthis._weightPrev = -0;\n\tthis._offsetPrev = -0;\n\tthis._weightNext = -0;\n\tthis._offsetNext = -0;\n\n};\n\nTHREE.CubicInterpolant.prototype =\n\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\n\n\tconstructor: THREE.CubicInterpolant,\n\n\tDefaultSettings_: {\n\n\t\tendingStart: \tTHREE.ZeroCurvatureEnding,\n\t\tendingEnd:\t\tTHREE.ZeroCurvatureEnding\n\n\t},\n\n\tintervalChanged_: function( i1, t0, t1 ) {\n\n\t\tvar pp = this.parameterPositions,\n\t\t\tiPrev = i1 - 2,\n\t\t\tiNext = i1 + 1,\n\n\t\t\ttPrev = pp[ iPrev ],\n\t\t\ttNext = pp[ iNext ];\n\n\t\tif ( tPrev === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\tcase THREE.ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = t1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tNext === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\tcase THREE.ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\tiNext = i1;\n\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiNext = 1;\n\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\ttNext = t0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar halfDt = ( t1 - t0 ) * 0.5,\n\t\t\tstride = this.valueSize;\n\n\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\tthis._offsetPrev = iPrev * stride;\n\t\tthis._offsetNext = iNext * stride;\n\n\t},\n\n\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tpp = p * p,\n\t\t\tppp = pp * p;\n\n\t\t// evaluate polynomials\n\n\t\tvar sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;\n\t\tvar s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;\n\t\tvar s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;\n\t\tvar sN =       wN   * ppp   -           wN      * pp;\n\n\t\t// combine data linearly\n\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n} );\n\n// File:src/math/interpolants/DiscreteInterpolant.js\n\n/**\n *\n * Interpolant that evaluates to the sample value at the position preceeding\n * the parameter.\n *\n * @author tschw\n */\n\nTHREE.DiscreteInterpolant = function(\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tTHREE.Interpolant.call(\n\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n};\n\nTHREE.DiscreteInterpolant.prototype =\n\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\n\n\tconstructor: THREE.DiscreteInterpolant,\n\n\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t}\n\n} );\n\n// File:src/math/interpolants/LinearInterpolant.js\n\n/**\n * @author tschw\n */\n\nTHREE.LinearInterpolant = function(\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tTHREE.Interpolant.call(\n\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n};\n\nTHREE.LinearInterpolant.prototype =\n\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\n\n\tconstructor: THREE.LinearInterpolant,\n\n\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\toffset1 = i1 * stride,\n\t\t\toffset0 = offset1 - stride,\n\n\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tweight0 = 1 - weight1;\n\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n} );\n\n// File:src/math/interpolants/QuaternionLinearInterpolant.js\n\n/**\n * Spherical linear unit quaternion interpolant.\n *\n * @author tschw\n */\n\nTHREE.QuaternionLinearInterpolant = function(\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tTHREE.Interpolant.call(\n\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n};\n\nTHREE.QuaternionLinearInterpolant.prototype =\n\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\n\n\tconstructor: THREE.QuaternionLinearInterpolant,\n\n\tinterpolate_: function( i1, t0, t, t1 ) {\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\toffset = i1 * stride,\n\n\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\tTHREE.Quaternion.slerpFlat( result, 0,\n\t\t\t\t\tvalues, offset - stride, values, offset, alpha );\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n} );\n\n// File:src/core/Clock.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Clock = function ( autoStart ) {\n\n\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\n\tthis.startTime = 0;\n\tthis.oldTime = 0;\n\tthis.elapsedTime = 0;\n\n\tthis.running = false;\n\n};\n\nTHREE.Clock.prototype = {\n\n\tconstructor: THREE.Clock,\n\n\tstart: function () {\n\n\t\tthis.startTime = ( performance || Date ).now();\n\n\t\tthis.oldTime = this.startTime;\n\t\tthis.running = true;\n\n\t},\n\n\tstop: function () {\n\n\t\tthis.getElapsedTime();\n\t\tthis.running = false;\n\n\t},\n\n\tgetElapsedTime: function () {\n\n\t\tthis.getDelta();\n\t\treturn this.elapsedTime;\n\n\t},\n\n\tgetDelta: function () {\n\n\t\tvar diff = 0;\n\n\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\tthis.start();\n\n\t\t}\n\n\t\tif ( this.running ) {\n\n\t\t\tvar newTime = ( performance || Date ).now();\n\n\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\tthis.oldTime = newTime;\n\n\t\t\tthis.elapsedTime += diff;\n\n\t\t}\n\n\t\treturn diff;\n\n\t}\n\n};\n\n// File:src/core/EventDispatcher.js\n\n/**\n * https://github.com/mrdoob/eventdispatcher.js/\n */\n\nTHREE.EventDispatcher = function () {};\n\nObject.assign( THREE.EventDispatcher.prototype, {\n\n\taddEventListener: function ( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) this._listeners = {};\n\n\t\tvar listeners = this._listeners;\n\n\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\tlisteners[ type ] = [];\n\n\t\t}\n\n\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\tlisteners[ type ].push( listener );\n\n\t\t}\n\n\t},\n\n\thasEventListener: function ( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return false;\n\n\t\tvar listeners = this._listeners;\n\n\t\tif ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t},\n\n\tremoveEventListener: function ( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tvar listeners = this._listeners;\n\t\tvar listenerArray = listeners[ type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tvar index = listenerArray.indexOf( listener );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tdispatchEvent: function ( event ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tvar listeners = this._listeners;\n\t\tvar listenerArray = listeners[ event.type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tevent.target = this;\n\n\t\t\tvar array = [], i = 0;\n\t\t\tvar length = listenerArray.length;\n\n\t\t\tfor ( i = 0; i < length; i ++ ) {\n\n\t\t\t\tarray[ i ] = listenerArray[ i ];\n\n\t\t\t}\n\n\t\t\tfor ( i = 0; i < length; i ++ ) {\n\n\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n} );\n\n// File:src/core/Layers.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Layers = function () {\n\n\tthis.mask = 1;\n\n};\n\nTHREE.Layers.prototype = {\n\n\tconstructor: THREE.Layers,\n\n\tset: function ( channel ) {\n\n\t\tthis.mask = 1 << channel;\n\n\t},\n\n\tenable: function ( channel ) {\n\n\t\tthis.mask |= 1 << channel;\n\n\t},\n\n\ttoggle: function ( channel ) {\n\n\t\tthis.mask ^= 1 << channel;\n\n\t},\n\n\tdisable: function ( channel ) {\n\n\t\tthis.mask &= ~ ( 1 << channel );\n\n\t},\n\n\ttest: function ( layers ) {\n\n\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t}\n\n};\n\n// File:src/core/Raycaster.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author bhouston / http://clara.io/\n * @author stephomi / http://stephaneginier.com/\n */\n\n( function ( THREE ) {\n\n\tTHREE.Raycaster = function ( origin, direction, near, far ) {\n\n\t\tthis.ray = new THREE.Ray( origin, direction );\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near || 0;\n\t\tthis.far = far || Infinity;\n\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: {},\n\t\t\tLOD: {},\n\t\t\tPoints: { threshold: 1 },\n\t\t\tSprite: {}\n\t\t};\n\n\t\tObject.defineProperties( this.params, {\n\t\t\tPointCloud: {\n\t\t\t\tget: function () {\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n\t\t\t\t\treturn this.Points;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t};\n\n\tfunction ascSort( a, b ) {\n\n\t\treturn a.distance - b.distance;\n\n\t}\n\n\tfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tobject.raycast( raycaster, intersects );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t//\n\n\tTHREE.Raycaster.prototype = {\n\n\t\tconstructor: THREE.Raycaster,\n\n\t\tlinePrecision: 1,\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\t\tthis.ray.set( origin, direction );\n\n\t\t},\n\n\t\tsetFromCamera: function ( coords, camera ) {\n\n\t\t\tif ( camera instanceof THREE.PerspectiveCamera ) {\n\n\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\n\t\t\t} else if ( camera instanceof THREE.OrthographicCamera ) {\n\n\t\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\n\t\t\t}\n\n\t\t},\n\n\t\tintersectObject: function ( object, recursive ) {\n\n\t\t\tvar intersects = [];\n\n\t\t\tintersectObject( object, this, intersects, recursive );\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t},\n\n\t\tintersectObjects: function ( objects, recursive ) {\n\n\t\t\tvar intersects = [];\n\n\t\t\tif ( Array.isArray( objects ) === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t\t\t\treturn intersects;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t\t}\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t}\n\n\t};\n\n}( THREE ) );\n\n// File:src/core/Object3D.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author elephantatwork / www.elephantatwork.ch\n */\n\nTHREE.Object3D = function () {\n\n\tObject.defineProperty( this, 'id', { value: THREE.Object3DIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'Object3D';\n\n\tthis.parent = null;\n\tthis.children = [];\n\n\tthis.up = THREE.Object3D.DefaultUp.clone();\n\n\tvar position = new THREE.Vector3();\n\tvar rotation = new THREE.Euler();\n\tvar quaternion = new THREE.Quaternion();\n\tvar scale = new THREE.Vector3( 1, 1, 1 );\n\n\tfunction onRotationChange() {\n\n\t\tquaternion.setFromEuler( rotation, false );\n\n\t}\n\n\tfunction onQuaternionChange() {\n\n\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t}\n\n\trotation.onChange( onRotationChange );\n\tquaternion.onChange( onQuaternionChange );\n\n\tObject.defineProperties( this, {\n\t\tposition: {\n\t\t\tenumerable: true,\n\t\t\tvalue: position\n\t\t},\n\t\trotation: {\n\t\t\tenumerable: true,\n\t\t\tvalue: rotation\n\t\t},\n\t\tquaternion: {\n\t\t\tenumerable: true,\n\t\t\tvalue: quaternion\n\t\t},\n\t\tscale: {\n\t\t\tenumerable: true,\n\t\t\tvalue: scale\n\t\t},\n\t\tmodelViewMatrix: {\n\t\t\tvalue: new THREE.Matrix4()\n\t\t},\n\t\tnormalMatrix: {\n\t\t\tvalue: new THREE.Matrix3()\n\t\t}\n\t} );\n\n\tthis.matrix = new THREE.Matrix4();\n\tthis.matrixWorld = new THREE.Matrix4();\n\n\tthis.matrixAutoUpdate = THREE.Object3D.DefaultMatrixAutoUpdate;\n\tthis.matrixWorldNeedsUpdate = false;\n\n\tthis.layers = new THREE.Layers();\n\tthis.visible = true;\n\n\tthis.castShadow = false;\n\tthis.receiveShadow = false;\n\n\tthis.frustumCulled = true;\n\tthis.renderOrder = 0;\n\n\tthis.userData = {};\n\n};\n\nTHREE.Object3D.DefaultUp = new THREE.Vector3( 0, 1, 0 );\nTHREE.Object3D.DefaultMatrixAutoUpdate = true;\n\nObject.assign( THREE.Object3D.prototype, THREE.EventDispatcher.prototype, {\n\n\tapplyMatrix: function ( matrix ) {\n\n\t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\n\n\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t},\n\n\tsetRotationFromAxisAngle: function ( axis, angle ) {\n\n\t\t// assumes axis is normalized\n\n\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t},\n\n\tsetRotationFromEuler: function ( euler ) {\n\n\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t},\n\n\tsetRotationFromMatrix: function ( m ) {\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t},\n\n\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t// assumes q is normalized\n\n\t\tthis.quaternion.copy( q );\n\n\t},\n\n\trotateOnAxis: function () {\n\n\t\t// rotate object on axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\tvar q1 = new THREE.Quaternion();\n\n\t\treturn function rotateOnAxis( axis, angle ) {\n\n\t\t\tq1.setFromAxisAngle( axis, angle );\n\n\t\t\tthis.quaternion.multiply( q1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateX: function () {\n\n\t\tvar v1 = new THREE.Vector3( 1, 0, 0 );\n\n\t\treturn function rotateX( angle ) {\n\n\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t};\n\n\t}(),\n\n\trotateY: function () {\n\n\t\tvar v1 = new THREE.Vector3( 0, 1, 0 );\n\n\t\treturn function rotateY( angle ) {\n\n\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t};\n\n\t}(),\n\n\trotateZ: function () {\n\n\t\tvar v1 = new THREE.Vector3( 0, 0, 1 );\n\n\t\treturn function rotateZ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t};\n\n\t}(),\n\n\ttranslateOnAxis: function () {\n\n\t\t// translate object by distance along axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function translateOnAxis( axis, distance ) {\n\n\t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\t\tthis.position.add( v1.multiplyScalar( distance ) );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslateX: function () {\n\n\t\tvar v1 = new THREE.Vector3( 1, 0, 0 );\n\n\t\treturn function translateX( distance ) {\n\n\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t};\n\n\t}(),\n\n\ttranslateY: function () {\n\n\t\tvar v1 = new THREE.Vector3( 0, 1, 0 );\n\n\t\treturn function translateY( distance ) {\n\n\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t};\n\n\t}(),\n\n\ttranslateZ: function () {\n\n\t\tvar v1 = new THREE.Vector3( 0, 0, 1 );\n\n\t\treturn function translateZ( distance ) {\n\n\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t};\n\n\t}(),\n\n\tlocalToWorld: function ( vector ) {\n\n\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t},\n\n\tworldToLocal: function () {\n\n\t\tvar m1 = new THREE.Matrix4();\n\n\t\treturn function worldToLocal( vector ) {\n\n\t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\n\n\t\t};\n\n\t}(),\n\n\tlookAt: function () {\n\n\t\t// This routine does not support objects with rotated and/or translated parent(s)\n\n\t\tvar m1 = new THREE.Matrix4();\n\n\t\treturn function lookAt( vector ) {\n\n\t\t\tm1.lookAt( vector, this.position, this.up );\n\n\t\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n\t\t};\n\n\t}(),\n\n\tadd: function ( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object === this ) {\n\n\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object instanceof THREE.Object3D ) {\n\n\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\tobject.parent.remove( object );\n\n\t\t\t}\n\n\t\t\tobject.parent = this;\n\t\t\tobject.dispatchEvent( { type: 'added' } );\n\n\t\t\tthis.children.push( object );\n\n\t\t} else {\n\n\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tremove: function ( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar index = this.children.indexOf( object );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tobject.parent = null;\n\n\t\t\tobject.dispatchEvent( { type: 'removed' } );\n\n\t\t\tthis.children.splice( index, 1 );\n\n\t\t}\n\n\t},\n\n\tgetObjectById: function ( id ) {\n\n\t\treturn this.getObjectByProperty( 'id', id );\n\n\t},\n\n\tgetObjectByName: function ( name ) {\n\n\t\treturn this.getObjectByProperty( 'name', name );\n\n\t},\n\n\tgetObjectByProperty: function ( name, value ) {\n\n\t\tif ( this[ name ] === value ) return this;\n\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tvar child = this.children[ i ];\n\t\t\tvar object = child.getObjectByProperty( name, value );\n\n\t\t\tif ( object !== undefined ) {\n\n\t\t\t\treturn object;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t},\n\n\tgetWorldPosition: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\tthis.updateMatrixWorld( true );\n\n\t\treturn result.setFromMatrixPosition( this.matrixWorld );\n\n\t},\n\n\tgetWorldQuaternion: function () {\n\n\t\tvar position = new THREE.Vector3();\n\t\tvar scale = new THREE.Vector3();\n\n\t\treturn function getWorldQuaternion( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Quaternion();\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( position, result, scale );\n\n\t\t\treturn result;\n\n\t\t};\n\n\t}(),\n\n\tgetWorldRotation: function () {\n\n\t\tvar quaternion = new THREE.Quaternion();\n\n\t\treturn function getWorldRotation( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Euler();\n\n\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\treturn result.setFromQuaternion( quaternion, this.rotation.order, false );\n\n\t\t};\n\n\t}(),\n\n\tgetWorldScale: function () {\n\n\t\tvar position = new THREE.Vector3();\n\t\tvar quaternion = new THREE.Quaternion();\n\n\t\treturn function getWorldScale( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( position, quaternion, result );\n\n\t\t\treturn result;\n\n\t\t};\n\n\t}(),\n\n\tgetWorldDirection: function () {\n\n\t\tvar quaternion = new THREE.Quaternion();\n\n\t\treturn function getWorldDirection( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\treturn result.set( 0, 0, 1 ).applyQuaternion( quaternion );\n\n\t\t};\n\n\t}(),\n\n\traycast: function () {},\n\n\ttraverse: function ( callback ) {\n\n\t\tcallback( this );\n\n\t\tvar children = this.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverse( callback );\n\n\t\t}\n\n\t},\n\n\ttraverseVisible: function ( callback ) {\n\n\t\tif ( this.visible === false ) return;\n\n\t\tcallback( this );\n\n\t\tvar children = this.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t}\n\n\t},\n\n\ttraverseAncestors: function ( callback ) {\n\n\t\tvar parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tcallback( parent );\n\n\t\t\tparent.traverseAncestors( callback );\n\n\t\t}\n\n\t},\n\n\tupdateMatrix: function () {\n\n\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t},\n\n\tupdateMatrixWorld: function ( force ) {\n\n\t\tif ( this.matrixAutoUpdate === true ) this.updateMatrix();\n\n\t\tif ( this.matrixWorldNeedsUpdate === true || force === true ) {\n\n\t\t\tif ( this.parent === null ) {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t}\n\n\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\tforce = true;\n\n\t\t}\n\n\t\t// update children\n\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tthis.children[ i ].updateMatrixWorld( force );\n\n\t\t}\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\t// meta is '' when called from JSON.stringify\n\t\tvar isRootObject = ( meta === undefined || meta === '' );\n\n\t\tvar output = {};\n\n\t\t// meta is a hash used to collect geometries, materials.\n\t\t// not providing it implies that this is the root object\n\t\t// being serialized.\n\t\tif ( isRootObject ) {\n\n\t\t\t// initialize meta obj\n\t\t\tmeta = {\n\t\t\t\tgeometries: {},\n\t\t\t\tmaterials: {},\n\t\t\t\ttextures: {},\n\t\t\t\timages: {}\n\t\t\t};\n\n\t\t\toutput.metadata = {\n\t\t\t\tversion: 4.4,\n\t\t\t\ttype: 'Object',\n\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t};\n\n\t\t}\n\n\t\t// standard Object3D serialization\n\n\t\tvar object = {};\n\n\t\tobject.uuid = this.uuid;\n\t\tobject.type = this.type;\n\n\t\tif ( this.name !== '' ) object.name = this.name;\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\n\t\tif ( this.castShadow === true ) object.castShadow = true;\n\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t\tif ( this.visible === false ) object.visible = false;\n\n\t\tobject.matrix = this.matrix.toArray();\n\n\t\t//\n\n\t\tif ( this.geometry !== undefined ) {\n\n\t\t\tif ( meta.geometries[ this.geometry.uuid ] === undefined ) {\n\n\t\t\t\tmeta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );\n\n\t\t\t}\n\n\t\t\tobject.geometry = this.geometry.uuid;\n\n\t\t}\n\n\t\tif ( this.material !== undefined ) {\n\n\t\t\tif ( meta.materials[ this.material.uuid ] === undefined ) {\n\n\t\t\t\tmeta.materials[ this.material.uuid ] = this.material.toJSON( meta );\n\n\t\t\t}\n\n\t\t\tobject.material = this.material.uuid;\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.children.length > 0 ) {\n\n\t\t\tobject.children = [];\n\n\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( isRootObject ) {\n\n\t\t\tvar geometries = extractFromCache( meta.geometries );\n\t\t\tvar materials = extractFromCache( meta.materials );\n\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t\t\tif ( images.length > 0 ) output.images = images;\n\n\t\t}\n\n\t\toutput.object = object;\n\n\t\treturn output;\n\n\t\t// extract data from the cache hash\n\t\t// remove metadata on each item\n\t\t// and return as array\n\t\tfunction extractFromCache ( cache ) {\n\n\t\t\tvar values = [];\n\t\t\tfor ( var key in cache ) {\n\n\t\t\t\tvar data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\t\t\treturn values;\n\n\t\t}\n\n\t},\n\n\tclone: function ( recursive ) {\n\n\t\treturn new this.constructor().copy( this, recursive );\n\n\t},\n\n\tcopy: function ( source, recursive ) {\n\n\t\tif ( recursive === undefined ) recursive = true;\n\n\t\tthis.name = source.name;\n\n\t\tthis.up.copy( source.up );\n\n\t\tthis.position.copy( source.position );\n\t\tthis.quaternion.copy( source.quaternion );\n\t\tthis.scale.copy( source.scale );\n\n\t\tthis.matrix.copy( source.matrix );\n\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\tthis.visible = source.visible;\n\n\t\tthis.castShadow = source.castShadow;\n\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\tthis.frustumCulled = source.frustumCulled;\n\t\tthis.renderOrder = source.renderOrder;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\tvar child = source.children[ i ];\n\t\t\t\tthis.add( child.clone() );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\nTHREE.Object3DIdCount = 0;\n\n// File:src/core/Face3.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Face3 = function ( a, b, c, normal, color, materialIndex ) {\n\n\tthis.a = a;\n\tthis.b = b;\n\tthis.c = c;\n\n\tthis.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();\n\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\n\tthis.color = color instanceof THREE.Color ? color : new THREE.Color();\n\tthis.vertexColors = Array.isArray( color ) ? color : [];\n\n\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\n};\n\nTHREE.Face3.prototype = {\n\n\tconstructor: THREE.Face3,\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.a = source.a;\n\t\tthis.b = source.b;\n\t\tthis.c = source.c;\n\n\t\tthis.normal.copy( source.normal );\n\t\tthis.color.copy( source.color );\n\n\t\tthis.materialIndex = source.materialIndex;\n\n\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\n\t\t}\n\n\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\n\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n};\n\n// File:src/core/BufferAttribute.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.BufferAttribute = function ( array, itemSize, normalized ) {\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.array = array;\n\tthis.itemSize = itemSize;\n\n\tthis.dynamic = false;\n\tthis.updateRange = { offset: 0, count: - 1 };\n\n\tthis.version = 0;\n\tthis.normalized = normalized === true;\n\n};\n\nTHREE.BufferAttribute.prototype = {\n\n\tconstructor: THREE.BufferAttribute,\n\n\tget count() {\n\n\t\treturn this.array.length / this.itemSize;\n\n\t},\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t},\n\n\tsetDynamic: function ( value ) {\n\n\t\tthis.dynamic = value;\n\n\t\treturn this;\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.itemSize = source.itemSize;\n\n\t\tthis.dynamic = source.dynamic;\n\n\t\treturn this;\n\n\t},\n\n\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.itemSize;\n\t\tindex2 *= attribute.itemSize;\n\n\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyArray: function ( array ) {\n\n\t\tthis.array.set( array );\n\n\t\treturn this;\n\n\t},\n\n\tcopyColorsArray: function ( colors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\n\t\t\tvar color = colors[ i ];\n\n\t\t\tif ( color === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t\t\t\tcolor = new THREE.Color();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = color.r;\n\t\t\tarray[ offset ++ ] = color.g;\n\t\t\tarray[ offset ++ ] = color.b;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyIndicesArray: function ( indices ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\tvar index = indices[ i ];\n\n\t\t\tarray[ offset ++ ] = index.a;\n\t\t\tarray[ offset ++ ] = index.b;\n\t\t\tarray[ offset ++ ] = index.c;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyVector2sArray: function ( vectors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tvar vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t\t\t\tvector = new THREE.Vector2();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyVector3sArray: function ( vectors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tvar vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t\t\t\tvector = new THREE.Vector3();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\tarray[ offset ++ ] = vector.z;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcopyVector4sArray: function ( vectors ) {\n\n\t\tvar array = this.array, offset = 0;\n\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tvar vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t\t\t\tvector = new THREE.Vector4();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\tarray[ offset ++ ] = vector.z;\n\t\t\tarray[ offset ++ ] = vector.w;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tset: function ( value, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t},\n\n\tgetX: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize ];\n\n\t},\n\n\tsetX: function ( index, x ) {\n\n\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\treturn this;\n\n\t},\n\n\tgetY: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 1 ];\n\n\t},\n\n\tsetY: function ( index, y ) {\n\n\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tgetZ: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 2 ];\n\n\t},\n\n\tsetZ: function ( index, z ) {\n\n\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tgetW: function ( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 3 ];\n\n\t},\n\n\tsetW: function ( index, w ) {\n\n\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetXY: function ( index, x, y ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZ: function ( index, x, y, z ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\t\tthis.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n};\n\n//\n\nTHREE.Int8Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Int8Array( array ), itemSize );\n\n};\n\nTHREE.Uint8Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Uint8Array( array ), itemSize );\n\n};\n\nTHREE.Uint8ClampedAttribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Uint8ClampedArray( array ), itemSize );\n\n};\n\nTHREE.Int16Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Int16Array( array ), itemSize );\n\n};\n\nTHREE.Uint16Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Uint16Array( array ), itemSize );\n\n};\n\nTHREE.Int32Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Int32Array( array ), itemSize );\n\n};\n\nTHREE.Uint32Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Uint32Array( array ), itemSize );\n\n};\n\nTHREE.Float32Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Float32Array( array ), itemSize );\n\n};\n\nTHREE.Float64Attribute = function ( array, itemSize ) {\n\n\treturn new THREE.BufferAttribute( new Float64Array( array ), itemSize );\n\n};\n\n\n// Deprecated\n\nTHREE.DynamicBufferAttribute = function ( array, itemSize ) {\n\n\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\n\treturn new THREE.BufferAttribute( array, itemSize ).setDynamic( true );\n\n};\n\n// File:src/core/InstancedBufferAttribute.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nTHREE.InstancedBufferAttribute = function ( array, itemSize, meshPerAttribute ) {\n\n\tTHREE.BufferAttribute.call( this, array, itemSize );\n\n\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n};\n\nTHREE.InstancedBufferAttribute.prototype = Object.create( THREE.BufferAttribute.prototype );\nTHREE.InstancedBufferAttribute.prototype.constructor = THREE.InstancedBufferAttribute;\n\nTHREE.InstancedBufferAttribute.prototype.copy = function ( source ) {\n\n\tTHREE.BufferAttribute.prototype.copy.call( this, source );\n\n\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\treturn this;\n\n};\n\n// File:src/core/InterleavedBuffer.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nTHREE.InterleavedBuffer = function ( array, stride ) {\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.array = array;\n\tthis.stride = stride;\n\n\tthis.dynamic = false;\n\tthis.updateRange = { offset: 0, count: - 1 };\n\n\tthis.version = 0;\n\n};\n\nTHREE.InterleavedBuffer.prototype = {\n\n\tconstructor: THREE.InterleavedBuffer,\n\n\tget length () {\n\n\t\treturn this.array.length;\n\n\t},\n\n\tget count () {\n\n\t\treturn this.array.length / this.stride;\n\n\t},\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t},\n\n\tsetDynamic: function ( value ) {\n\n\t\tthis.dynamic = value;\n\n\t\treturn this;\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.stride = source.stride;\n\t\tthis.dynamic = source.dynamic;\n\n\t\treturn this;\n\n\t},\n\n\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.stride;\n\t\tindex2 *= attribute.stride;\n\n\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tset: function ( value, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n};\n\n// File:src/core/InstancedInterleavedBuffer.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nTHREE.InstancedInterleavedBuffer = function ( array, stride, meshPerAttribute ) {\n\n\tTHREE.InterleavedBuffer.call( this, array, stride );\n\n\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n};\n\nTHREE.InstancedInterleavedBuffer.prototype = Object.create( THREE.InterleavedBuffer.prototype );\nTHREE.InstancedInterleavedBuffer.prototype.constructor = THREE.InstancedInterleavedBuffer;\n\nTHREE.InstancedInterleavedBuffer.prototype.copy = function ( source ) {\n\n\tTHREE.InterleavedBuffer.prototype.copy.call( this, source );\n\n\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\treturn this;\n\n};\n\n// File:src/core/InterleavedBufferAttribute.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nTHREE.InterleavedBufferAttribute = function ( interleavedBuffer, itemSize, offset ) {\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.data = interleavedBuffer;\n\tthis.itemSize = itemSize;\n\tthis.offset = offset;\n\n};\n\n\nTHREE.InterleavedBufferAttribute.prototype = {\n\n\tconstructor: THREE.InterleavedBufferAttribute,\n\n\tget length() {\n\n\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\n\t\treturn this.array.length;\n\n\t},\n\n\tget count() {\n\n\t\treturn this.data.count;\n\n\t},\n\n\tsetX: function ( index, x ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( index, y ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetZ: function ( index, z ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetW: function ( index, w ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\treturn this;\n\n\t},\n\n\tgetX: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n\t},\n\n\tgetY: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t},\n\n\tgetZ: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t},\n\n\tgetW: function ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t},\n\n\tsetXY: function ( index, x, y ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZ: function ( index, x, y, z ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\t\tthis.data.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n};\n\n// File:src/core/Geometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author kile / http://kile.stravaganza.org/\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author bhouston / http://clara.io\n */\n\nTHREE.Geometry = function () {\n\n\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'Geometry';\n\n\tthis.vertices = [];\n\tthis.colors = [];\n\tthis.faces = [];\n\tthis.faceVertexUvs = [ [] ];\n\n\tthis.morphTargets = [];\n\tthis.morphNormals = [];\n\n\tthis.skinWeights = [];\n\tthis.skinIndices = [];\n\n\tthis.lineDistances = [];\n\n\tthis.boundingBox = null;\n\tthis.boundingSphere = null;\n\n\t// update flags\n\n\tthis.verticesNeedUpdate = false;\n\tthis.elementsNeedUpdate = false;\n\tthis.uvsNeedUpdate = false;\n\tthis.normalsNeedUpdate = false;\n\tthis.colorsNeedUpdate = false;\n\tthis.lineDistancesNeedUpdate = false;\n\tthis.groupsNeedUpdate = false;\n\n};\n\nObject.assign( THREE.Geometry.prototype, THREE.EventDispatcher.prototype, {\n\n\tapplyMatrix: function ( matrix ) {\n\n\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\n\n\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\tvar vertex = this.vertices[ i ];\n\t\t\tvertex.applyMatrix4( matrix );\n\n\t\t}\n\n\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\tvar face = this.faces[ i ];\n\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t\tthis.verticesNeedUpdate = true;\n\t\tthis.normalsNeedUpdate = true;\n\n\t\treturn this;\n\n\t},\n\n\trotateX: function () {\n\n\t\t// rotate geometry around world x-axis\n\n\t\tvar m1;\n\n\t\treturn function rotateX( angle ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateY: function () {\n\n\t\t// rotate geometry around world y-axis\n\n\t\tvar m1;\n\n\t\treturn function rotateY( angle ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateZ: function () {\n\n\t\t// rotate geometry around world z-axis\n\n\t\tvar m1;\n\n\t\treturn function rotateZ( angle ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function () {\n\n\t\t// translate geometry\n\n\t\tvar m1;\n\n\t\treturn function translate( x, y, z ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tscale: function () {\n\n\t\t// scale geometry\n\n\t\tvar m1;\n\n\t\treturn function scale( x, y, z ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tlookAt: function () {\n\n\t\tvar obj;\n\n\t\treturn function lookAt( vector ) {\n\n\t\t\tif ( obj === undefined ) obj = new THREE.Object3D();\n\n\t\t\tobj.lookAt( vector );\n\n\t\t\tobj.updateMatrix();\n\n\t\t\tthis.applyMatrix( obj.matrix );\n\n\t\t};\n\n\t}(),\n\n\tfromBufferGeometry: function ( geometry ) {\n\n\t\tvar scope = this;\n\n\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n\t\tvar attributes = geometry.attributes;\n\n\t\tvar positions = attributes.position.array;\n\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\n\t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\n\n\t\tvar tempNormals = [];\n\t\tvar tempUVs = [];\n\t\tvar tempUVs2 = [];\n\n\t\tfor ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\n\n\t\t\tscope.vertices.push( new THREE.Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );\n\n\t\t\tif ( normals !== undefined ) {\n\n\t\t\t\ttempNormals.push( new THREE.Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( colors !== undefined ) {\n\n\t\t\t\tscope.colors.push( new THREE.Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\ttempUVs.push( new THREE.Vector2( uvs[ j ], uvs[ j + 1 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\ttempUVs2.push( new THREE.Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction addFace( a, b, c, materialIndex ) {\n\n\t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\n\t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\n\n\t\t\tvar face = new THREE.Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\n\t\t\tscope.faces.push( face );\n\n\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\n\n\t\t\t}\n\n\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( indices !== undefined ) {\n\n\t\t\tvar groups = geometry.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\n\t\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex  );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\n\n\t\t\t\taddFace( i, i + 1, i + 2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.computeFaceNormals();\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t}\n\n\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcenter: function () {\n\n\t\tthis.computeBoundingBox();\n\n\t\tvar offset = this.boundingBox.center().negate();\n\n\t\tthis.translate( offset.x, offset.y, offset.z );\n\n\t\treturn offset;\n\n\t},\n\n\tnormalize: function () {\n\n\t\tthis.computeBoundingSphere();\n\n\t\tvar center = this.boundingSphere.center;\n\t\tvar radius = this.boundingSphere.radius;\n\n\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\n\t\tvar matrix = new THREE.Matrix4();\n\t\tmatrix.set(\n\t\t\ts, 0, 0, - s * center.x,\n\t\t\t0, s, 0, - s * center.y,\n\t\t\t0, 0, s, - s * center.z,\n\t\t\t0, 0, 0, 1\n\t\t);\n\n\t\tthis.applyMatrix( matrix );\n\n\t\treturn this;\n\n\t},\n\n\tcomputeFaceNormals: function () {\n\n\t\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3();\n\n\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tvar face = this.faces[ f ];\n\n\t\t\tvar vA = this.vertices[ face.a ];\n\t\t\tvar vB = this.vertices[ face.b ];\n\t\t\tvar vC = this.vertices[ face.c ];\n\n\t\t\tcb.subVectors( vC, vB );\n\t\t\tab.subVectors( vA, vB );\n\t\t\tcb.cross( ab );\n\n\t\t\tcb.normalize();\n\n\t\t\tface.normal.copy( cb );\n\n\t\t}\n\n\t},\n\n\tcomputeVertexNormals: function ( areaWeighted ) {\n\n\t\tif ( areaWeighted === undefined ) areaWeighted = true;\n\n\t\tvar v, vl, f, fl, face, vertices;\n\n\t\tvertices = new Array( this.vertices.length );\n\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\tvertices[ v ] = new THREE.Vector3();\n\n\t\t}\n\n\t\tif ( areaWeighted ) {\n\n\t\t\t// vertex normals weighted by triangle areas\n\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\n\t\t\tvar vA, vB, vC;\n\t\t\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3();\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvA = this.vertices[ face.a ];\n\t\t\t\tvB = this.vertices[ face.b ];\n\t\t\t\tvC = this.vertices[ face.c ];\n\n\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\tcb.cross( ab );\n\n\t\t\t\tvertices[ face.a ].add( cb );\n\t\t\t\tvertices[ face.b ].add( cb );\n\t\t\t\tvertices[ face.c ].add( cb );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvertices[ face.a ].add( face.normal );\n\t\t\t\tvertices[ face.b ].add( face.normal );\n\t\t\t\tvertices[ face.c ].add( face.normal );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\tvertices[ v ].normalize();\n\n\t\t}\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\n\t\t\t} else {\n\n\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.faces.length > 0 ) {\n\n\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t}\n\n\t},\n\n\tcomputeMorphNormals: function () {\n\n\t\tvar i, il, f, fl, face;\n\n\t\t// save original normals\n\t\t// - create temp variables on first access\n\t\t//   otherwise just copy (for faster repeated calls)\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tif ( ! face.__originalFaceNormal ) {\n\n\t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\n\t\t\t} else {\n\n\t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\n\t\t\t}\n\n\t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\n\n\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\n\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// use temp geometry to compute face and vertex normals for each morph\n\n\t\tvar tmpGeo = new THREE.Geometry();\n\t\ttmpGeo.faces = this.faces;\n\n\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\n\t\t\t// create on first access\n\n\t\t\tif ( ! this.morphNormals[ i ] ) {\n\n\t\t\t\tthis.morphNormals[ i ] = {};\n\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\n\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\n\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tfaceNormal = new THREE.Vector3();\n\t\t\t\t\tvertexNormals = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3() };\n\n\t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar morphNormals = this.morphNormals[ i ];\n\n\t\t\t// set vertices to morph target\n\n\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\n\t\t\t// compute morph normals\n\n\t\t\ttmpGeo.computeFaceNormals();\n\t\t\ttmpGeo.computeVertexNormals();\n\n\t\t\t// store morph normals\n\n\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\n\t\t\t\tfaceNormal.copy( face.normal );\n\n\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// restore original normals\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tface.normal = face.__originalFaceNormal;\n\t\t\tface.vertexNormals = face.__originalVertexNormals;\n\n\t\t}\n\n\t},\n\n\tcomputeTangents: function () {\n\n\t\tconsole.warn( 'THREE.Geometry: .computeTangents() has been removed.' );\n\n\t},\n\n\tcomputeLineDistances: function () {\n\n\t\tvar d = 0;\n\t\tvar vertices = this.vertices;\n\n\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\tif ( i > 0 ) {\n\n\t\t\t\td += vertices[ i ].distanceTo( vertices[ i - 1 ] );\n\n\t\t\t}\n\n\t\t\tthis.lineDistances[ i ] = d;\n\n\t\t}\n\n\t},\n\n\tcomputeBoundingBox: function () {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new THREE.Box3();\n\n\t\t}\n\n\t\tthis.boundingBox.setFromPoints( this.vertices );\n\n\t},\n\n\tcomputeBoundingSphere: function () {\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new THREE.Sphere();\n\n\t\t}\n\n\t\tthis.boundingSphere.setFromPoints( this.vertices );\n\n\t},\n\n\tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\n\t\tif ( geometry instanceof THREE.Geometry === false ) {\n\n\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar normalMatrix,\n\t\tvertexOffset = this.vertices.length,\n\t\tvertices1 = this.vertices,\n\t\tvertices2 = geometry.vertices,\n\t\tfaces1 = this.faces,\n\t\tfaces2 = geometry.faces,\n\t\tuvs1 = this.faceVertexUvs[ 0 ],\n\t\tuvs2 = geometry.faceVertexUvs[ 0 ];\n\n\t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\n\n\t\tif ( matrix !== undefined ) {\n\n\t\t\tnormalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\n\n\t\t}\n\n\t\t// vertices\n\n\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\n\t\t\tvar vertex = vertices2[ i ];\n\n\t\t\tvar vertexCopy = vertex.clone();\n\n\t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\n\n\t\t\tvertices1.push( vertexCopy );\n\n\t\t}\n\n\t\t// faces\n\n\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\n\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n\t\t\tfaceVertexNormals = face.vertexNormals,\n\t\t\tfaceVertexColors = face.vertexColors;\n\n\t\t\tfaceCopy = new THREE.Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t\t\tfaceCopy.normal.copy( face.normal );\n\n\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\n\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.vertexNormals.push( normal );\n\n\t\t\t}\n\n\t\t\tfaceCopy.color.copy( face.color );\n\n\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\n\t\t\t\tcolor = faceVertexColors[ j ];\n\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\n\t\t\t}\n\n\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n\t\t\tfaces1.push( faceCopy );\n\n\t\t}\n\n\t\t// uvs\n\n\t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\n\n\t\t\tvar uv = uvs2[ i ], uvCopy = [];\n\n\t\t\tif ( uv === undefined ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\n\n\t\t\t\tuvCopy.push( uv[ j ].clone() );\n\n\t\t\t}\n\n\t\t\tuvs1.push( uvCopy );\n\n\t\t}\n\n\t},\n\n\tmergeMesh: function ( mesh ) {\n\n\t\tif ( mesh instanceof THREE.Mesh === false ) {\n\n\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n\t\t\treturn;\n\n\t\t}\n\n\t\tmesh.matrixAutoUpdate && mesh.updateMatrix();\n\n\t\tthis.merge( mesh.geometry, mesh.matrix );\n\n\t},\n\n\t/*\n\t * Checks for duplicate vertices with hashmap.\n\t * Duplicated vertices are removed\n\t * and faces' vertices are updated.\n\t */\n\n\tmergeVertices: function () {\n\n\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\t\tvar unique = [], changes = [];\n\n\t\tvar v, key;\n\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\t\tvar precision = Math.pow( 10, precisionPoints );\n\t\tvar i, il, face;\n\t\tvar indices, j, jl;\n\n\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\tv = this.vertices[ i ];\n\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n\t\t\tif ( verticesMap[ key ] === undefined ) {\n\n\t\t\t\tverticesMap[ key ] = i;\n\t\t\t\tunique.push( this.vertices[ i ] );\n\t\t\t\tchanges[ i ] = unique.length - 1;\n\n\t\t\t} else {\n\n\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\n\t\t\t}\n\n\t\t}\n\n\n\t\t// if faces are completely degenerate after merging vertices, we\n\t\t// have to remove them from the geometry.\n\t\tvar faceIndicesToRemove = [];\n\n\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\tface = this.faces[ i ];\n\n\t\t\tface.a = changes[ face.a ];\n\t\t\tface.b = changes[ face.b ];\n\t\t\tface.c = changes[ face.c ];\n\n\t\t\tindices = [ face.a, face.b, face.c ];\n\n\t\t\tvar dupIndex = - 1;\n\n\t\t\t// if any duplicate vertices are found in a Face3\n\t\t\t// we have to remove the face as nothing can be saved\n\t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\n\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\n\t\t\t\t\tdupIndex = n;\n\t\t\t\t\tfaceIndicesToRemove.push( i );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\n\t\t\tvar idx = faceIndicesToRemove[ i ];\n\n\t\t\tthis.faces.splice( idx, 1 );\n\n\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Use unique set of vertices\n\n\t\tvar diff = this.vertices.length - unique.length;\n\t\tthis.vertices = unique;\n\t\treturn diff;\n\n\t},\n\n\tsortFacesByMaterialIndex: function () {\n\n\t\tvar faces = this.faces;\n\t\tvar length = faces.length;\n\n\t\t// tag faces\n\n\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\tfaces[ i ]._id = i;\n\n\t\t}\n\n\t\t// sort faces\n\n\t\tfunction materialIndexSort( a, b ) {\n\n\t\t\treturn a.materialIndex - b.materialIndex;\n\n\t\t}\n\n\t\tfaces.sort( materialIndexSort );\n\n\t\t// sort uvs\n\n\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\n\t\tvar newUvs1, newUvs2;\n\n\t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\n\t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\n\n\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\tvar id = faces[ i ]._id;\n\n\t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\n\t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\n\n\t\t}\n\n\t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\n\t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.4,\n\t\t\t\ttype: 'Geometry',\n\t\t\t\tgenerator: 'Geometry.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Geometry serialization\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.parameters !== undefined ) {\n\n\t\t\tvar parameters = this.parameters;\n\n\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tvar vertices = [];\n\n\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\n\t\t\tvar vertex = this.vertices[ i ];\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tvar faces = [];\n\t\tvar normals = [];\n\t\tvar normalsHash = {};\n\t\tvar colors = [];\n\t\tvar colorsHash = {};\n\t\tvar uvs = [];\n\t\tvar uvsHash = {};\n\n\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\n\t\t\tvar face = this.faces[ i ];\n\n\t\t\tvar hasMaterial = true;\n\t\t\tvar hasFaceUv = false; // deprecated\n\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n\t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\n\t\t\tvar faceType = 0;\n\n\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\n\t\t\tfaces.push( faceType );\n\t\t\tfaces.push( face.a, face.b, face.c );\n\t\t\tfaces.push( face.materialIndex );\n\n\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\tfaces.push( getColorIndex( face.color ) );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setBit( value, position, enabled ) {\n\n\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\n\t\t}\n\n\t\tfunction getNormalIndex( normal ) {\n\n\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n\t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\n\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\treturn normalsHash[ hash ];\n\n\t\t}\n\n\t\tfunction getColorIndex( color ) {\n\n\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n\t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\n\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tcolorsHash[ hash ] = colors.length;\n\t\t\tcolors.push( color.getHex() );\n\n\t\t\treturn colorsHash[ hash ];\n\n\t\t}\n\n\t\tfunction getUvIndex( uv ) {\n\n\t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n\t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\n\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\treturn uvsHash[ hash ];\n\n\t\t}\n\n\t\tdata.data = {};\n\n\t\tdata.data.vertices = vertices;\n\t\tdata.data.normals = normals;\n\t\tif ( colors.length > 0 ) data.data.colors = colors;\n\t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\n\t\tdata.data.faces = faces;\n\n\t\treturn data;\n\n\t},\n\n\tclone: function () {\n\n\t\t/*\n\t\t// Handle primitives\n\n\t\tvar parameters = this.parameters;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tvar values = [];\n\n\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\tvalues.push( parameters[ key ] );\n\n\t\t\t}\n\n\t\t\tvar geometry = Object.create( this.constructor.prototype );\n\t\t\tthis.constructor.apply( geometry, values );\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\treturn new this.constructor().copy( this );\n\t\t*/\n\n\t\treturn new THREE.Geometry().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.vertices = [];\n\t\tthis.faces = [];\n\t\tthis.faceVertexUvs = [ [] ];\n\n\t\tvar vertices = source.vertices;\n\n\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\tthis.vertices.push( vertices[ i ].clone() );\n\n\t\t}\n\n\t\tvar faces = source.faces;\n\n\t\tfor ( var i = 0, il = faces.length; i < il; i ++ ) {\n\n\t\t\tthis.faces.push( faces[ i ].clone() );\n\n\t\t}\n\n\t\tfor ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\n\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\n\t\t\t\tthis.faceVertexUvs[ i ] = [];\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\n\t\t\t\tfor ( var k = 0, kl = uvs.length; k < kl; k ++ ) {\n\n\t\t\t\t\tvar uv = uvs[ k ];\n\n\t\t\t\t\tuvsCopy.push( uv.clone() );\n\n\t\t\t\t}\n\n\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\nTHREE.GeometryIdCount = 0;\n\n// File:src/core/DirectGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.DirectGeometry = function () {\n\n\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'DirectGeometry';\n\n\tthis.indices = [];\n\tthis.vertices = [];\n\tthis.normals = [];\n\tthis.colors = [];\n\tthis.uvs = [];\n\tthis.uvs2 = [];\n\n\tthis.groups = [];\n\n\tthis.morphTargets = {};\n\n\tthis.skinWeights = [];\n\tthis.skinIndices = [];\n\n\t// this.lineDistances = [];\n\n\tthis.boundingBox = null;\n\tthis.boundingSphere = null;\n\n\t// update flags\n\n\tthis.verticesNeedUpdate = false;\n\tthis.normalsNeedUpdate = false;\n\tthis.colorsNeedUpdate = false;\n\tthis.uvsNeedUpdate = false;\n\tthis.groupsNeedUpdate = false;\n\n};\n\nObject.assign( THREE.DirectGeometry.prototype, THREE.EventDispatcher.prototype, {\n\n\tcomputeBoundingBox: THREE.Geometry.prototype.computeBoundingBox,\n\tcomputeBoundingSphere: THREE.Geometry.prototype.computeBoundingSphere,\n\n\tcomputeFaceNormals: function () {\n\n\t\tconsole.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );\n\n\t},\n\n\tcomputeVertexNormals: function () {\n\n\t\tconsole.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );\n\n\t},\n\n\tcomputeGroups: function ( geometry ) {\n\n\t\tvar group;\n\t\tvar groups = [];\n\t\tvar materialIndex;\n\n\t\tvar faces = geometry.faces;\n\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\t// materials\n\n\t\t\tif ( face.materialIndex !== materialIndex ) {\n\n\t\t\t\tmaterialIndex = face.materialIndex;\n\n\t\t\t\tif ( group !== undefined ) {\n\n\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\t\tgroups.push( group );\n\n\t\t\t\t}\n\n\t\t\t\tgroup = {\n\t\t\t\t\tstart: i * 3,\n\t\t\t\t\tmaterialIndex: materialIndex\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( group !== undefined ) {\n\n\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\tgroups.push( group );\n\n\t\t}\n\n\t\tthis.groups = groups;\n\n\t},\n\n\tfromGeometry: function ( geometry ) {\n\n\t\tvar faces = geometry.faces;\n\t\tvar vertices = geometry.vertices;\n\t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\n\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\n\t\t// morphs\n\n\t\tvar morphTargets = geometry.morphTargets;\n\t\tvar morphTargetsLength = morphTargets.length;\n\n\t\tvar morphTargetsPosition;\n\n\t\tif ( morphTargetsLength > 0 ) {\n\n\t\t\tmorphTargetsPosition = [];\n\n\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\n\t\t\t\tmorphTargetsPosition[ i ] = [];\n\n\t\t\t}\n\n\t\t\tthis.morphTargets.position = morphTargetsPosition;\n\n\t\t}\n\n\t\tvar morphNormals = geometry.morphNormals;\n\t\tvar morphNormalsLength = morphNormals.length;\n\n\t\tvar morphTargetsNormal;\n\n\t\tif ( morphNormalsLength > 0 ) {\n\n\t\t\tmorphTargetsNormal = [];\n\n\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\n\t\t\t\tmorphTargetsNormal[ i ] = [];\n\n\t\t\t}\n\n\t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\n\t\t}\n\n\t\t// skins\n\n\t\tvar skinIndices = geometry.skinIndices;\n\t\tvar skinWeights = geometry.skinWeights;\n\n\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\n\t\t//\n\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\n\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\n\t\t\t} else {\n\n\t\t\t\tvar normal = face.normal;\n\n\t\t\t\tthis.normals.push( normal, normal, normal );\n\n\t\t\t}\n\n\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\tif ( vertexColors.length === 3 ) {\n\n\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\n\t\t\t} else {\n\n\t\t\t\tvar color = face.color;\n\n\t\t\t\tthis.colors.push( color, color, color );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexUv === true ) {\n\n\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\n\t\t\t\t\tthis.uvs.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexUv2 === true ) {\n\n\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\n\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\n\t\t\t\t\tthis.uvs2.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// morphs\n\n\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\n\t\t\t\tmorphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\n\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\n\t\t\t\tmorphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );\n\n\t\t\t}\n\n\t\t\t// skins\n\n\t\t\tif ( hasSkinIndices ) {\n\n\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\n\t\t\t}\n\n\t\t\tif ( hasSkinWeights ) {\n\n\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.computeGroups( geometry );\n\n\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\n// File:src/core/BufferGeometry.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.BufferGeometry = function () {\n\n\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'BufferGeometry';\n\n\tthis.index = null;\n\tthis.attributes = {};\n\n\tthis.morphAttributes = {};\n\n\tthis.groups = [];\n\n\tthis.boundingBox = null;\n\tthis.boundingSphere = null;\n\n\tthis.drawRange = { start: 0, count: Infinity };\n\n};\n\nObject.assign( THREE.BufferGeometry.prototype, THREE.EventDispatcher.prototype, {\n\n\tgetIndex: function () {\n\n\t\treturn this.index;\n\n\t},\n\n\tsetIndex: function ( index ) {\n\n\t\tthis.index = index;\n\n\t},\n\n\taddAttribute: function ( name, attribute ) {\n\n\t\tif ( attribute instanceof THREE.BufferAttribute === false && attribute instanceof THREE.InterleavedBufferAttribute === false ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n\t\t\tthis.addAttribute( name, new THREE.BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( name === 'index' ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t\t\tthis.setIndex( attribute );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.attributes[ name ] = attribute;\n\n\t\treturn this;\n\n\t},\n\n\tgetAttribute: function ( name ) {\n\n\t\treturn this.attributes[ name ];\n\n\t},\n\n\tremoveAttribute: function ( name ) {\n\n\t\tdelete this.attributes[ name ];\n\n\t\treturn this;\n\n\t},\n\n\taddGroup: function ( start, count, materialIndex ) {\n\n\t\tthis.groups.push( {\n\n\t\t\tstart: start,\n\t\t\tcount: count,\n\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\n\t\t} );\n\n\t},\n\n\tclearGroups: function () {\n\n\t\tthis.groups = [];\n\n\t},\n\n\tsetDrawRange: function ( start, count ) {\n\n\t\tthis.drawRange.start = start;\n\t\tthis.drawRange.count = count;\n\n\t},\n\n\tapplyMatrix: function ( matrix ) {\n\n\t\tvar position = this.attributes.position;\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tmatrix.applyToVector3Array( position.array );\n\t\t\tposition.needsUpdate = true;\n\n\t\t}\n\n\t\tvar normal = this.attributes.normal;\n\n\t\tif ( normal !== undefined ) {\n\n\t\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\n\n\t\t\tnormalMatrix.applyToVector3Array( normal.array );\n\t\t\tnormal.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\trotateX: function () {\n\n\t\t// rotate geometry around world x-axis\n\n\t\tvar m1;\n\n\t\treturn function rotateX( angle ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateY: function () {\n\n\t\t// rotate geometry around world y-axis\n\n\t\tvar m1;\n\n\t\treturn function rotateY( angle ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\trotateZ: function () {\n\n\t\t// rotate geometry around world z-axis\n\n\t\tvar m1;\n\n\t\treturn function rotateZ( angle ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function () {\n\n\t\t// translate geometry\n\n\t\tvar m1;\n\n\t\treturn function translate( x, y, z ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tscale: function () {\n\n\t\t// scale geometry\n\n\t\tvar m1;\n\n\t\treturn function scale( x, y, z ) {\n\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\n\n\t\t\tm1.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix( m1 );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tlookAt: function () {\n\n\t\tvar obj;\n\n\t\treturn function lookAt( vector ) {\n\n\t\t\tif ( obj === undefined ) obj = new THREE.Object3D();\n\n\t\t\tobj.lookAt( vector );\n\n\t\t\tobj.updateMatrix();\n\n\t\t\tthis.applyMatrix( obj.matrix );\n\n\t\t};\n\n\t}(),\n\n\tcenter: function () {\n\n\t\tthis.computeBoundingBox();\n\n\t\tvar offset = this.boundingBox.center().negate();\n\n\t\tthis.translate( offset.x, offset.y, offset.z );\n\n\t\treturn offset;\n\n\t},\n\n\tsetFromObject: function ( object ) {\n\n\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( object instanceof THREE.Points || object instanceof THREE.Line ) {\n\n\t\t\tvar positions = new THREE.Float32Attribute( geometry.vertices.length * 3, 3 );\n\t\t\tvar colors = new THREE.Float32Attribute( geometry.colors.length * 3, 3 );\n\n\t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n\t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\n\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\n\t\t\t\tvar lineDistances = new THREE.Float32Attribute( geometry.lineDistances.length, 1 );\n\n\t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t} else if ( object instanceof THREE.Mesh ) {\n\n\t\t\tif ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\tthis.fromGeometry( geometry );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tupdateFromObject: function ( object ) {\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( object instanceof THREE.Mesh ) {\n\n\t\t\tvar direct = geometry.__directGeometry;\n\n\t\t\tif ( direct === undefined ) {\n\n\t\t\t\treturn this.fromGeometry( geometry );\n\n\t\t\t}\n\n\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\tgeometry.normalsNeedUpdate = false;\n\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\tgeometry.uvsNeedUpdate = false;\n\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\tgeometry = direct;\n\n\t\t}\n\n\t\tif ( geometry.verticesNeedUpdate === true ) {\n\n\t\t\tvar attribute = this.attributes.position;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.verticesNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.normalsNeedUpdate === true ) {\n\n\t\t\tvar attribute = this.attributes.normal;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyVector3sArray( geometry.normals );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.normalsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.colorsNeedUpdate === true ) {\n\n\t\t\tvar attribute = this.attributes.color;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyColorsArray( geometry.colors );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.colorsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.uvsNeedUpdate ) {\n\n\t\t\tvar attribute = this.attributes.uv;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.uvsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.lineDistancesNeedUpdate ) {\n\n\t\t\tvar attribute = this.attributes.lineDistance;\n\n\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\tattribute.copyArray( geometry.lineDistances );\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tgeometry.lineDistancesNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( geometry.groupsNeedUpdate ) {\n\n\t\t\tgeometry.computeGroups( object.geometry );\n\t\t\tthis.groups = geometry.groups;\n\n\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tfromGeometry: function ( geometry ) {\n\n\t\tgeometry.__directGeometry = new THREE.DirectGeometry().fromGeometry( geometry );\n\n\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\n\t},\n\n\tfromDirectGeometry: function ( geometry ) {\n\n\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\n\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n\t\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\n\t\t}\n\n\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n\t\t\tthis.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\n\t\t}\n\n\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n\t\t\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\n\t\t}\n\n\t\tif ( geometry.uvs2.length > 0 ) {\n\n\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n\t\t\tthis.addAttribute( 'uv2', new THREE.BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\n\t\t}\n\n\t\tif ( geometry.indices.length > 0 ) {\n\n\t\t\tvar TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;\n\t\t\tvar indices = new TypeArray( geometry.indices.length * 3 );\n\t\t\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );\n\n\t\t}\n\n\t\t// groups\n\n\t\tthis.groups = geometry.groups;\n\n\t\t// morphs\n\n\t\tfor ( var name in geometry.morphTargets ) {\n\n\t\t\tvar array = [];\n\t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\n\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ i ];\n\n\t\t\t\tvar attribute = new THREE.Float32Attribute( morphTarget.length * 3, 3 );\n\n\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget ) );\n\n\t\t\t}\n\n\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t}\n\n\t\t// skinning\n\n\t\tif ( geometry.skinIndices.length > 0 ) {\n\n\t\t\tvar skinIndices = new THREE.Float32Attribute( geometry.skinIndices.length * 4, 4 );\n\t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\n\t\t}\n\n\t\tif ( geometry.skinWeights.length > 0 ) {\n\n\t\t\tvar skinWeights = new THREE.Float32Attribute( geometry.skinWeights.length * 4, 4 );\n\t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t}\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcomputeBoundingBox: function () {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new THREE.Box3();\n\n\t\t}\n\n\t\tvar positions = this.attributes.position.array;\n\n\t\tif ( positions !== undefined ) {\n\n\t\t\tthis.boundingBox.setFromArray( positions );\n\n\t\t} else {\n\n\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t}\n\n\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t}\n\n\t},\n\n\tcomputeBoundingSphere: function () {\n\n\t\tvar box = new THREE.Box3();\n\t\tvar vector = new THREE.Vector3();\n\n\t\treturn function computeBoundingSphere() {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new THREE.Sphere();\n\n\t\t\t}\n\n\t\t\tvar positions = this.attributes.position;\n\n\t\t\tif ( positions ) {\n\n\t\t\t\tvar array = positions.array;\n\t\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t\tbox.setFromArray( array );\n\t\t\t\tbox.center( center );\n\n\t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\tfor ( var i = 0, il = array.length; i < il; i += 3 ) {\n\n\t\t\t\t\tvector.fromArray( array, i );\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}(),\n\n\tcomputeFaceNormals: function () {\n\n\t\t// backwards compatibility\n\n\t},\n\n\tcomputeVertexNormals: function () {\n\n\t\tvar index = this.index;\n\t\tvar attributes = this.attributes;\n\t\tvar groups = this.groups;\n\n\t\tif ( attributes.position ) {\n\n\t\t\tvar positions = attributes.position.array;\n\n\t\t\tif ( attributes.normal === undefined ) {\n\n\t\t\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\n\t\t\t} else {\n\n\t\t\t\t// reset existing normals to zero\n\n\t\t\t\tvar array = attributes.normal.array;\n\n\t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t\tarray[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar normals = attributes.normal.array;\n\n\t\t\tvar vA, vB, vC,\n\n\t\t\tpA = new THREE.Vector3(),\n\t\t\tpB = new THREE.Vector3(),\n\t\t\tpC = new THREE.Vector3(),\n\n\t\t\tcb = new THREE.Vector3(),\n\t\t\tab = new THREE.Vector3();\n\n\t\t\t// indexed elements\n\n\t\t\tif ( index ) {\n\n\t\t\t\tvar indices = index.array;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tthis.addGroup( 0, indices.length );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = groups.length; j < jl; ++ j ) {\n\n\t\t\t\t\tvar group = groups[ j ];\n\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\n\t\t\t\t\t\tpA.fromArray( positions, vA );\n\t\t\t\t\t\tpB.fromArray( positions, vB );\n\t\t\t\t\t\tpC.fromArray( positions, vC );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormals[ vA ] += cb.x;\n\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vB ] += cb.x;\n\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vC ] += cb.x;\n\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\n\t\t\t\t\tpA.fromArray( positions, i );\n\t\t\t\t\tpB.fromArray( positions, i + 3 );\n\t\t\t\t\tpC.fromArray( positions, i + 6 );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnormals[ i ] = cb.x;\n\t\t\t\t\tnormals[ i + 1 ] = cb.y;\n\t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\n\t\t\t\t\tnormals[ i + 3 ] = cb.x;\n\t\t\t\t\tnormals[ i + 4 ] = cb.y;\n\t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\n\t\t\t\t\tnormals[ i + 6 ] = cb.x;\n\t\t\t\t\tnormals[ i + 7 ] = cb.y;\n\t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.normalizeNormals();\n\n\t\t\tattributes.normal.needsUpdate = true;\n\n\t\t}\n\n\t},\n\n\tmerge: function ( geometry, offset ) {\n\n\t\tif ( geometry instanceof THREE.BufferGeometry === false ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tvar attributes = this.attributes;\n\n\t\tfor ( var key in attributes ) {\n\n\t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\n\n\t\t\tvar attribute1 = attributes[ key ];\n\t\t\tvar attributeArray1 = attribute1.array;\n\n\t\t\tvar attribute2 = geometry.attributes[ key ];\n\t\t\tvar attributeArray2 = attribute2.array;\n\n\t\t\tvar attributeSize = attribute2.itemSize;\n\n\t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\n\n\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tnormalizeNormals: function () {\n\n\t\tvar normals = this.attributes.normal.array;\n\n\t\tvar x, y, z, n;\n\n\t\tfor ( var i = 0, il = normals.length; i < il; i += 3 ) {\n\n\t\t\tx = normals[ i ];\n\t\t\ty = normals[ i + 1 ];\n\t\t\tz = normals[ i + 2 ];\n\n\t\t\tn = 1.0 / Math.sqrt( x * x + y * y + z * z );\n\n\t\t\tnormals[ i ] *= n;\n\t\t\tnormals[ i + 1 ] *= n;\n\t\t\tnormals[ i + 2 ] *= n;\n\n\t\t}\n\n\t},\n\n\ttoNonIndexed: function () {\n\n\t\tif ( this.index === null ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar geometry2 = new THREE.BufferGeometry();\n\n\t\tvar indices = this.index.array;\n\t\tvar attributes = this.attributes;\n\n\t\tfor ( var name in attributes ) {\n\n\t\t\tvar attribute = attributes[ name ];\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\tvar index = 0, index2 = 0;\n\n\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry2.addAttribute( name, new THREE.BufferAttribute( array2, itemSize ) );\n\n\t\t}\n\n\t\treturn geometry2;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.4,\n\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard BufferGeometry serialization\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.parameters !== undefined ) {\n\n\t\t\tvar parameters = this.parameters;\n\n\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tdata.data = { attributes: {} };\n\n\t\tvar index = this.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tvar array = Array.prototype.slice.call( index.array );\n\n\t\t\tdata.data.index = {\n\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\tarray: array\n\t\t\t};\n\n\t\t}\n\n\t\tvar attributes = this.attributes;\n\n\t\tfor ( var key in attributes ) {\n\n\t\t\tvar attribute = attributes[ key ];\n\n\t\t\tvar array = Array.prototype.slice.call( attribute.array );\n\n\t\t\tdata.data.attributes[ key ] = {\n\t\t\t\titemSize: attribute.itemSize,\n\t\t\t\ttype: attribute.array.constructor.name,\n\t\t\t\tarray: array,\n\t\t\t\tnormalized: attribute.normalized\n\t\t\t};\n\n\t\t}\n\n\t\tvar groups = this.groups;\n\n\t\tif ( groups.length > 0 ) {\n\n\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t}\n\n\t\tvar boundingSphere = this.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tdata.data.boundingSphere = {\n\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\tradius: boundingSphere.radius\n\t\t\t};\n\n\t\t}\n\n\t\treturn data;\n\n\t},\n\n\tclone: function () {\n\n\t\t/*\n\t\t// Handle primitives\n\n\t\tvar parameters = this.parameters;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tvar values = [];\n\n\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\tvalues.push( parameters[ key ] );\n\n\t\t\t}\n\n\t\t\tvar geometry = Object.create( this.constructor.prototype );\n\t\t\tthis.constructor.apply( geometry, values );\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\treturn new this.constructor().copy( this );\n\t\t*/\n\n\t\treturn new THREE.BufferGeometry().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tvar index = source.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tthis.setIndex( index.clone() );\n\n\t\t}\n\n\t\tvar attributes = source.attributes;\n\n\t\tfor ( var name in attributes ) {\n\n\t\t\tvar attribute = attributes[ name ];\n\t\t\tthis.addAttribute( name, attribute.clone() );\n\n\t\t}\n\n\t\tvar groups = source.groups;\n\n\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tvar group = groups[ i ];\n\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\nTHREE.BufferGeometry.MaxIndex = 65535;\n\n// File:src/core/InstancedBufferGeometry.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nTHREE.InstancedBufferGeometry = function () {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'InstancedBufferGeometry';\n\tthis.maxInstancedCount = undefined;\n\n};\n\nTHREE.InstancedBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.InstancedBufferGeometry.prototype.constructor = THREE.InstancedBufferGeometry;\n\nTHREE.InstancedBufferGeometry.prototype.addGroup = function ( start, count, instances ) {\n\n\tthis.groups.push( {\n\n\t\tstart: start,\n\t\tcount: count,\n\t\tinstances: instances\n\n\t} );\n\n};\n\nTHREE.InstancedBufferGeometry.prototype.copy = function ( source ) {\n\n\tvar index = source.index;\n\n\tif ( index !== null ) {\n\n\t\tthis.setIndex( index.clone() );\n\n\t}\n\n\tvar attributes = source.attributes;\n\n\tfor ( var name in attributes ) {\n\n\t\tvar attribute = attributes[ name ];\n\t\tthis.addAttribute( name, attribute.clone() );\n\n\t}\n\n\tvar groups = source.groups;\n\n\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\tvar group = groups[ i ];\n\t\tthis.addGroup( group.start, group.count, group.instances );\n\n\t}\n\n\treturn this;\n\n};\n\n// File:src/core/Uniform.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Uniform = function ( value ) {\n\n\tif ( typeof value === 'string' ) {\n\n\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t\tvalue = arguments[ 1 ];\n\n\t}\n\n\tthis.value = value;\n\n\tthis.dynamic = false;\n\n};\n\nTHREE.Uniform.prototype = {\n\n\tconstructor: THREE.Uniform,\n\n\tonUpdate: function ( callback ) {\n\n\t\tthis.dynamic = true;\n\t\tthis.onUpdateCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n};\n\n// File:src/animation/AnimationAction.js\n\n/**\n *\n * Action provided by AnimationMixer for scheduling clip playback on specific\n * objects.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n *\n */\n\nTHREE.AnimationAction = function() {\n\n\tthrow new Error( \"THREE.AnimationAction: \" +\n\t\t\t\"Use mixer.clipAction for construction.\" );\n\n};\n\nTHREE.AnimationAction._new =\n\t\tfunction AnimationAction( mixer, clip, localRoot ) {\n\n\tthis._mixer = mixer;\n\tthis._clip = clip;\n\tthis._localRoot = localRoot || null;\n\n\tvar tracks = clip.tracks,\n\t\tnTracks = tracks.length,\n\t\tinterpolants = new Array( nTracks );\n\n\tvar interpolantSettings = {\n\t\t\tendingStart: \tTHREE.ZeroCurvatureEnding,\n\t\t\tendingEnd:\t\tTHREE.ZeroCurvatureEnding\n\t};\n\n\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\tvar interpolant = tracks[ i ].createInterpolant( null );\n\t\tinterpolants[ i ] = interpolant;\n\t\tinterpolant.settings = interpolantSettings;\n\n\t}\n\n\tthis._interpolantSettings = interpolantSettings;\n\n\tthis._interpolants = interpolants;\t// bound by the mixer\n\n\t// inside: PropertyMixer (managed by the mixer)\n\tthis._propertyBindings = new Array( nTracks );\n\n\tthis._cacheIndex = null;\t\t\t// for the memory manager\n\tthis._byClipCacheIndex = null;\t\t// for the memory manager\n\n\tthis._timeScaleInterpolant = null;\n\tthis._weightInterpolant = null;\n\n\tthis.loop = THREE.LoopRepeat;\n\tthis._loopCount = -1;\n\n\t// global mixer time when the action is to be started\n\t// it's set back to 'null' upon start of the action\n\tthis._startTime = null;\n\n\t// scaled local time of the action\n\t// gets clamped or wrapped to 0..clip.duration according to loop\n\tthis.time = 0;\n\n\tthis.timeScale = 1;\n\tthis._effectiveTimeScale = 1;\n\n\tthis.weight = 1;\n\tthis._effectiveWeight = 1;\n\n\tthis.repetitions = Infinity; \t\t// no. of repetitions when looping\n\n\tthis.paused = false;\t\t\t\t// false -> zero effective time scale\n\tthis.enabled = true;\t\t\t\t// true -> zero effective weight\n\n\tthis.clampWhenFinished \t= false;\t// keep feeding the last frame?\n\n\tthis.zeroSlopeAtStart \t= true;\t\t// for smooth interpolation w/o separate\n\tthis.zeroSlopeAtEnd\t\t= true;\t\t// clips for start, loop and end\n\n};\n\nTHREE.AnimationAction._new.prototype = {\n\n\tconstructor: THREE.AnimationAction._new,\n\n\t// State & Scheduling\n\n\tplay: function() {\n\n\t\tthis._mixer._activateAction( this );\n\n\t\treturn this;\n\n\t},\n\n\tstop: function() {\n\n\t\tthis._mixer._deactivateAction( this );\n\n\t\treturn this.reset();\n\n\t},\n\n\treset: function() {\n\n\t\tthis.paused = false;\n\t\tthis.enabled = true;\n\n\t\tthis.time = 0;\t\t\t// restart clip\n\t\tthis._loopCount = -1;\t// forget previous loops\n\t\tthis._startTime = null;\t// forget scheduling\n\n\t\treturn this.stopFading().stopWarping();\n\n\t},\n\n\tisRunning: function() {\n\n\t\tvar start = this._startTime;\n\n\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t},\n\n\t// return true when play has been called\n\tisScheduled: function() {\n\n\t\treturn this._mixer._isActiveAction( this );\n\n\t},\n\n\tstartAt: function( time ) {\n\n\t\tthis._startTime = time;\n\n\t\treturn this;\n\n\t},\n\n\tsetLoop: function( mode, repetitions ) {\n\n\t\tthis.loop = mode;\n\t\tthis.repetitions = repetitions;\n\n\t\treturn this;\n\n\t},\n\n\t// Weight\n\n\t// set the weight stopping any scheduled fading\n\t// although .enabled = false yields an effective weight of zero, this\n\t// method does *not* change .enabled, because it would be confusing\n\tsetEffectiveWeight: function( weight ) {\n\n\t\tthis.weight = weight;\n\n\t\t// note: same logic as when updated at runtime\n\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\treturn this.stopFading();\n\n\t},\n\n\t// return the weight considering fading and .enabled\n\tgetEffectiveWeight: function() {\n\n\t\treturn this._effectiveWeight;\n\n\t},\n\n\tfadeIn: function( duration ) {\n\n\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t},\n\n\tfadeOut: function( duration ) {\n\n\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t},\n\n\tcrossFadeFrom: function( fadeOutAction, duration, warp ) {\n\n\t\tvar mixer = this._mixer;\n\n\t\tfadeOutAction.fadeOut( duration );\n\t\tthis.fadeIn( duration );\n\n\t\tif( warp ) {\n\n\t\t\tvar fadeInDuration = this._clip.duration,\n\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcrossFadeTo: function( fadeInAction, duration, warp ) {\n\n\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t},\n\n\tstopFading: function() {\n\n\t\tvar weightInterpolant = this._weightInterpolant;\n\n\t\tif ( weightInterpolant !== null ) {\n\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// Time Scale Control\n\n\t// set the weight stopping any scheduled warping\n\t// although .paused = true yields an effective time scale of zero, this\n\t// method does *not* change .paused, because it would be confusing\n\tsetEffectiveTimeScale: function( timeScale ) {\n\n\t\tthis.timeScale = timeScale;\n\t\tthis._effectiveTimeScale = this.paused ? 0 :timeScale;\n\n\t\treturn this.stopWarping();\n\n\t},\n\n\t// return the time scale considering warping and .paused\n\tgetEffectiveTimeScale: function() {\n\n\t\treturn this._effectiveTimeScale;\n\n\t},\n\n\tsetDuration: function( duration ) {\n\n\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\treturn this.stopWarping();\n\n\t},\n\n\tsyncWith: function( action ) {\n\n\t\tthis.time = action.time;\n\t\tthis.timeScale = action.timeScale;\n\n\t\treturn this.stopWarping();\n\n\t},\n\n\thalt: function( duration ) {\n\n\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t},\n\n\twarp: function( startTimeScale, endTimeScale, duration ) {\n\n\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\tinterpolant = this._timeScaleInterpolant,\n\n\t\t\ttimeScale = this.timeScale;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant(),\n\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t}\n\n\t\tvar times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\ttimes[ 1 ] = now + duration;\n\n\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\treturn this;\n\n\t},\n\n\tstopWarping: function() {\n\n\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// Object Accessors\n\n\tgetMixer: function() {\n\n\t\treturn this._mixer;\n\n\t},\n\n\tgetClip: function() {\n\n\t\treturn this._clip;\n\n\t},\n\n\tgetRoot: function() {\n\n\t\treturn this._localRoot || this._mixer._root;\n\n\t},\n\n\t// Interna\n\n\t_update: function( time, deltaTime, timeDirection, accuIndex ) {\n\t\t// called by the mixer\n\n\t\tvar startTime = this._startTime;\n\n\t\tif ( startTime !== null ) {\n\n\t\t\t// check for scheduled start of action\n\n\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\n\t\t\t}\n\n\t\t\t// start\n\n\t\t\tthis._startTime = null; // unschedule\n\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t}\n\n\t\t// apply time scale and advance time\n\n\t\tdeltaTime *= this._updateTimeScale( time );\n\t\tvar clipTime = this._updateTime( deltaTime );\n\n\t\t// note: _updateTime may disable the action resulting in\n\t\t// an effective weight of 0\n\n\t\tvar weight = this._updateWeight( time );\n\n\t\tif ( weight > 0 ) {\n\n\t\t\tvar interpolants = this._interpolants;\n\t\t\tvar propertyMixers = this._propertyBindings;\n\n\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t_updateWeight: function( time ) {\n\n\t\tvar weight = 0;\n\n\t\tif ( this.enabled ) {\n\n\t\t\tweight = this.weight;\n\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveWeight = weight;\n\t\treturn weight;\n\n\t},\n\n\t_updateTimeScale: function( time ) {\n\n\t\tvar timeScale = 0;\n\n\t\tif ( ! this.paused ) {\n\n\t\t\ttimeScale = this.timeScale;\n\n\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveTimeScale = timeScale;\n\t\treturn timeScale;\n\n\t},\n\n\t_updateTime: function( deltaTime ) {\n\n\t\tvar time = this.time + deltaTime;\n\n\t\tif ( deltaTime === 0 ) return time;\n\n\t\tvar duration = this._clip.duration,\n\n\t\t\tloop = this.loop,\n\t\t\tloopCount = this._loopCount;\n\n\t\tif ( loop === THREE.LoopOnce ) {\n\n\t\t\tif ( loopCount === -1 ) {\n\t\t\t\t// just started\n\n\t\t\t\tthis.loopCount = 0;\n\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t}\n\n\t\t\thandle_stop: {\n\n\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\ttime = duration;\n\n\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\ttime = 0;\n\n\t\t\t\t} else break handle_stop;\n\n\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\telse this.enabled = false;\n\n\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\tvar pingPong = ( loop === THREE.LoopPingPong );\n\n\t\t\tif ( loopCount === -1 ) {\n\t\t\t\t// just started\n\n\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\tthis._setEndings(\n\t\t\t\t\t\t\ttrue, this.repetitions === 0, pingPong );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\tthis._setEndings(\n\t\t\t\t\t\t\tthis.repetitions === 0, true, pingPong );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( time >= duration || time < 0 ) {\n\t\t\t\t// wrap around\n\n\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\tvar pending = this.repetitions - loopCount;\n\n\t\t\t\tif ( pending < 0 ) {\n\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\t\t\t\t\t// keep running\n\n\t\t\t\t\tif ( pending === 0 ) {\n\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\tvar atStart = deltaTime < 0;\n\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\tthis.time = time;\n\t\t\t\treturn duration - time;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.time = time;\n\t\treturn time;\n\n\t},\n\n\t_setEndings: function( atStart, atEnd, pingPong ) {\n\n\t\tvar settings = this._interpolantSettings;\n\n\t\tif ( pingPong ) {\n\n\t\t\tsettings.endingStart \t= THREE.ZeroSlopeEnding;\n\t\t\tsettings.endingEnd\t\t= THREE.ZeroSlopeEnding;\n\n\t\t} else {\n\n\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\tif ( atStart ) {\n\n\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ?\n\t\t\t\t\t\tTHREE.ZeroSlopeEnding : THREE.ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingStart = THREE.WrapAroundEnding;\n\n\t\t\t}\n\n\t\t\tif ( atEnd ) {\n\n\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ?\n\t\t\t\t\t\tTHREE.ZeroSlopeEnding : THREE.ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingEnd \t = THREE.WrapAroundEnding;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t_scheduleFading: function( duration, weightNow, weightThen ) {\n\n\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\tinterpolant = this._weightInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant(),\n\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t}\n\n\t\tvar times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now; \t\t\t\tvalues[ 0 ] = weightNow;\n\t\ttimes[ 1 ] = now + duration;\tvalues[ 1 ] = weightThen;\n\n\t\treturn this;\n\n\t}\n\n};\n\n\n// File:src/animation/AnimationClip.js\n\n/**\n *\n * Reusable set of Tracks that represent an animation.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n */\n\nTHREE.AnimationClip = function ( name, duration, tracks ) {\n\n\tthis.name = name;\n\tthis.tracks = tracks;\n\tthis.duration = ( duration !== undefined ) ? duration : -1;\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\t// this means it should figure out its duration by scanning the tracks\n\tif ( this.duration < 0 ) {\n\n\t\tthis.resetDuration();\n\n\t}\n\n\t// maybe only do these on demand, as doing them here could potentially slow down loading\n\t// but leaving these here during development as this ensures a lot of testing of these functions\n\tthis.trim();\n\tthis.optimize();\n\n};\n\nTHREE.AnimationClip.prototype = {\n\n\tconstructor: THREE.AnimationClip,\n\n\tresetDuration: function() {\n\n\t\tvar tracks = this.tracks,\n\t\t\tduration = 0;\n\n\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\tvar track = this.tracks[ i ];\n\n\t\t\tduration = Math.max(\n\t\t\t\t\tduration, track.times[ track.times.length - 1 ] );\n\n\t\t}\n\n\t\tthis.duration = duration;\n\n\t},\n\n\ttrim: function() {\n\n\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\toptimize: function() {\n\n\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].optimize();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n};\n\n// Static methods:\n\nObject.assign( THREE.AnimationClip, {\n\n\tparse: function( json ) {\n\n\t\tvar tracks = [],\n\t\t\tjsonTracks = json.tracks,\n\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( THREE.KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t}\n\n\t\treturn new THREE.AnimationClip( json.name, json.duration, tracks );\n\n\t},\n\n\n\ttoJSON: function( clip ) {\n\n\t\tvar tracks = [],\n\t\t\tclipTracks = clip.tracks;\n\n\t\tvar json = {\n\n\t\t\t'name': clip.name,\n\t\t\t'duration': clip.duration,\n\t\t\t'tracks': tracks\n\n\t\t};\n\n\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( THREE.KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t}\n\n\t\treturn json;\n\n\t},\n\n\n\tCreateFromMorphTargetSequence: function( name, morphTargetSequence, fps, noLoop ) {\n\n\t\tvar numMorphTargets = morphTargetSequence.length;\n\t\tvar tracks = [];\n\n\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\tvar times = [];\n\t\t\tvar values = [];\n\n\t\t\ttimes.push(\n\t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\t\ti,\n\t\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\tvar order = THREE.AnimationUtils.getKeyframeOrder( times );\n\t\t\ttimes = THREE.AnimationUtils.sortedArray( times, 1, order );\n\t\t\tvalues = THREE.AnimationUtils.sortedArray( values, 1, order );\n\n\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t// last frame as well for perfect loop.\n\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t}\n\n\t\t\ttracks.push(\n\t\t\t\t\tnew THREE.NumberKeyframeTrack(\n\t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\t\ttimes, values\n\t\t\t\t\t).scale( 1.0 / fps ) );\n\t\t}\n\n\t\treturn new THREE.AnimationClip( name, -1, tracks );\n\n\t},\n\n\tfindByName: function( objectOrClipArray, name ) {\n\n\t\tvar clipArray = objectOrClipArray;\n\n\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\tvar o = objectOrClipArray;\n\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t}\n\n\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\treturn clipArray[ i ];\n\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\n\t},\n\n\tCreateClipsFromMorphTargetSequences: function( morphTargets, fps, noLoop ) {\n\n\t\tvar animationToMorphTargets = {};\n\n\t\t// tested with https://regex101.com/ on trick sequences\n\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t// sort morph target names into animation groups based\n\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\tvar morphTarget = morphTargets[ i ];\n\t\t\tvar parts = morphTarget.name.match( pattern );\n\n\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\tvar name = parts[ 1 ];\n\n\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t}\n\n\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar clips = [];\n\n\t\tfor ( var name in animationToMorphTargets ) {\n\n\t\t\tclips.push( THREE.AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n\t\t}\n\n\t\treturn clips;\n\n\t},\n\n\t// parse the animation.hierarchy format\n\tparseAnimation: function( animation, bones, nodeName ) {\n\n\t\tif ( ! animation ) {\n\n\t\t\tconsole.error( \"  no animation in JSONLoader data\" );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tvar addNonemptyTrack = function(\n\t\t\t\ttrackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t// only return track if there are actually keys.\n\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\tTHREE.AnimationUtils.flattenJSON(\n\t\t\t\t\t\tanimationKeys, times, values, propertyName );\n\n\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tvar tracks = [];\n\n\t\tvar clipName = animation.name || 'default';\n\t\t// automatic length determination in AnimationClip.\n\t\tvar duration = animation.length || -1;\n\t\tvar fps = animation.fps || 30;\n\n\t\tvar hierarchyTracks = animation.hierarchy || [];\n\n\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t// skip empty tracks\n\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\n\t\t\t// process morph targets in a way exactly compatible\n\t\t\t// with AnimationHandler.init( animation )\n\t\t\tif ( animationKeys[0].morphTargets ) {\n\n\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\tvar morphTargetNames = {};\n\t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\tif ( animationKeys[k].morphTargets ) {\n\n\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t// the morphTarget is named.\n\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\tvar times = [];\n\t\t\t\t\tvar values = [];\n\n\t\t\t\t\tfor ( var m = 0;\n\t\t\t\t\t\t\tm !== animationKeys[k].morphTargets.length; ++ m ) {\n\n\t\t\t\t\t\tvar animationKey = animationKeys[k];\n\n\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttracks.push( new THREE.NumberKeyframeTrack(\n\t\t\t\t\t\t\t'.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t}\n\n\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\n\t\t\t} else {\n\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tTHREE.VectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tTHREE.QuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tTHREE.VectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tracks.length === 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tvar clip = new THREE.AnimationClip( clipName, duration, tracks );\n\n\t\treturn clip;\n\n\t}\n\n} );\n\n// File:src/animation/AnimationMixer.js\n\n/**\n *\n * Player for AnimationClips.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.AnimationMixer = function( root ) {\n\n\tthis._root = root;\n\tthis._initMemoryManager();\n\tthis._accuIndex = 0;\n\n\tthis.time = 0;\n\n\tthis.timeScale = 1.0;\n\n};\n\nObject.assign( THREE.AnimationMixer.prototype, THREE.EventDispatcher.prototype, {\n\n\t// return an action for a clip optionally using a custom root target\n\t// object (this method allocates a lot of dynamic memory in case a\n\t// previously unknown clip/root combination is specified)\n\tclipAction: function( clip, optionalRoot ) {\n\n\t\tvar root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid,\n\n\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tTHREE.AnimationClip.findByName( root, clip ) : clip,\n\n\t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\n\n\t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\n\t\t\tprototypeAction = null;\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\tvar existingAction =\n\t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\tif ( existingAction !== undefined ) {\n\n\t\t\t\treturn existingAction;\n\n\t\t\t}\n\n\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t// the bindings again but can just copy\n\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t// also, take the clip from the prototype action\n\t\t\tif ( clipObject === null )\n\t\t\t\tclipObject = prototypeAction._clip;\n\n\t\t}\n\n\t\t// clip must be known when specified via string\n\t\tif ( clipObject === null ) return null;\n\n\t\t// allocate all resources required to run it\n\t\tvar newAction = new THREE.\n\t\t\t\tAnimationMixer._Action( this, clipObject, optionalRoot );\n\n\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t// and make the action known to the memory manager\n\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\treturn newAction;\n\n\t},\n\n\t// get an existing action\n\texistingAction: function( clip, optionalRoot ) {\n\n\t\tvar root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid,\n\n\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tTHREE.AnimationClip.findByName( root, clip ) : clip,\n\n\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t}\n\n\t\treturn null;\n\n\t},\n\n\t// deactivates all previously scheduled actions\n\tstopAllAction: function() {\n\n\t\tvar actions = this._actions,\n\t\t\tnActions = this._nActiveActions,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = this._nActiveBindings;\n\n\t\tthis._nActiveActions = 0;\n\t\tthis._nActiveBindings = 0;\n\n\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\tactions[ i ].reset();\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\tbindings[ i ].useCount = 0;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// advance the time and update apply the animation\n\tupdate: function( deltaTime ) {\n\n\t\tdeltaTime *= this.timeScale;\n\n\t\tvar actions = this._actions,\n\t\t\tnActions = this._nActiveActions,\n\n\t\t\ttime = this.time += deltaTime,\n\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t// run active actions\n\n\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\tvar action = actions[ i ];\n\n\t\t\tif ( action.enabled ) {\n\n\t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// update scene graph\n\n\t\tvar bindings = this._bindings,\n\t\t\tnBindings = this._nActiveBindings;\n\n\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\tbindings[ i ].apply( accuIndex );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// return this mixer's root target object\n\tgetRoot: function() {\n\n\t\treturn this._root;\n\n\t},\n\n\t// free all resources specific to a particular clip\n\tuncacheClip: function( clip ) {\n\n\t\tvar actions = this._actions,\n\t\t\tclipUuid = clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t// iteration state and also require updating the state we can\n\t\t\t// just throw away\n\n\t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\tvar action = actionsToRemove[ i ];\n\n\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\tvar cacheIndex = action._cacheIndex,\n\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\taction._cacheIndex = null;\n\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\tactions.pop();\n\n\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t}\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t},\n\n\t// free all resources specific to a particular root target object\n\tuncacheRoot: function( root ) {\n\n\t\tvar rootUuid = root.uuid,\n\t\t\tactionsByClip = this._actionsByClip;\n\n\t\tfor ( var clipUuid in actionsByClip ) {\n\n\t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\tif ( action !== undefined ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingByName !== undefined ) {\n\n\t\t\tfor ( var trackName in bindingByName ) {\n\n\t\t\t\tvar binding = bindingByName[ trackName ];\n\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t// remove a targeted clip from the cache\n\tuncacheAction: function( clip, optionalRoot ) {\n\n\t\tvar action = this.existingAction( clip, optionalRoot );\n\n\t\tif ( action !== null ) {\n\n\t\t\tthis._deactivateAction( action );\n\t\t\tthis._removeInactiveAction( action );\n\n\t\t}\n\n\t}\n\n} );\n\nTHREE.AnimationMixer._Action = THREE.AnimationAction._new;\n\n// Implementation details:\n\nObject.assign( THREE.AnimationMixer.prototype, {\n\n\t_bindAction: function( action, prototypeAction ) {\n\n\t\tvar root = action._localRoot || this._root,\n\t\t\ttracks = action._clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tbindings = action._propertyBindings,\n\t\t\tinterpolants = action._interpolants,\n\t\t\trootUuid = root.uuid,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingsByName === undefined ) {\n\n\t\t\tbindingsByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tvar track = tracks[ i ],\n\t\t\t\ttrackName = track.name,\n\t\t\t\tbinding = bindingsByName[ trackName ];\n\n\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t} else {\n\n\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar path = prototypeAction && prototypeAction.\n\t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\tbinding = new THREE.PropertyMixer(\n\t\t\t\t\t\tTHREE.PropertyBinding.create( root, trackName, path ),\n\t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t++ binding.referenceCount;\n\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t}\n\n\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t}\n\n\t},\n\n\t_activateAction: function( action ) {\n\n\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\tthis._bindAction( action,\n\t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t}\n\n\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t// increment reference counts / sort out state\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._lendAction( action );\n\n\t\t}\n\n\t},\n\n\t_deactivateAction: function( action ) {\n\n\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t// decrement reference counts / sort out state\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._takeBackAction( action );\n\n\t\t}\n\n\t},\n\n\t// Memory manager\n\n\t_initMemoryManager: function() {\n\n\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\tthis._nActiveActions = 0;\n\n\t\tthis._actionsByClip = {};\n\t\t// inside:\n\t\t// {\n\t\t// \t\tknownActions: Array< _Action >\t- used as prototypes\n\t\t// \t\tactionByRoot: _Action\t\t\t- lookup\n\t\t// }\n\n\n\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\tthis._nActiveBindings = 0;\n\n\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\tthis._controlInterpolants = []; // same game as above\n\t\tthis._nActiveControlInterpolants = 0;\n\n\t\tvar scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tactions: {\n\t\t\t\tget total() { return scope._actions.length; },\n\t\t\t\tget inUse() { return scope._nActiveActions; }\n\t\t\t},\n\t\t\tbindings: {\n\t\t\t\tget total() { return scope._bindings.length; },\n\t\t\t\tget inUse() { return scope._nActiveBindings; }\n\t\t\t},\n\t\t\tcontrolInterpolants: {\n\t\t\t\tget total() { return scope._controlInterpolants.length; },\n\t\t\t\tget inUse() { return scope._nActiveControlInterpolants; }\n\t\t\t}\n\n\t\t};\n\n\t},\n\n\t// Memory management for _Action objects\n\n\t_isActiveAction: function( action ) {\n\n\t\tvar index = action._cacheIndex;\n\t\treturn index !== null && index < this._nActiveActions;\n\n\t},\n\n\t_addInactiveAction: function( action, clipUuid, rootUuid ) {\n\n\t\tvar actions = this._actions,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip === undefined ) {\n\n\t\t\tactionsForClip = {\n\n\t\t\t\tknownActions: [ action ],\n\t\t\t\tactionByRoot: {}\n\n\t\t\t};\n\n\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t} else {\n\n\t\t\tvar knownActions = actionsForClip.knownActions;\n\n\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\tknownActions.push( action );\n\n\t\t}\n\n\t\taction._cacheIndex = actions.length;\n\t\tactions.push( action );\n\n\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t},\n\n\t_removeInactiveAction: function( action ) {\n\n\t\tvar actions = this._actions,\n\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\tcacheIndex = action._cacheIndex;\n\n\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\tactions.pop();\n\n\t\taction._cacheIndex = null;\n\n\n\t\tvar clipUuid = action._clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\tlastKnownAction =\n\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\tknownActionsForClip.pop();\n\n\t\taction._byClipCacheIndex = null;\n\n\n\t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t\t\trootUuid = ( actions._localRoot || this._root ).uuid;\n\n\t\tdelete actionByRoot[ rootUuid ];\n\n\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t\tthis._removeInactiveBindingsForAction( action );\n\n\t},\n\n\t_removeInactiveBindingsForAction: function( action ) {\n\n\t\tvar bindings = action._propertyBindings;\n\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tvar binding = bindings[ i ];\n\n\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t_lendAction: function( action ) {\n\n\t\t// [ active actions |  inactive actions  ]\n\t\t// [  active actions >| inactive actions ]\n\t\t//                 s        a\n\t\t//                  <-swap->\n\t\t//                 a        s\n\n\t\tvar actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\taction._cacheIndex = lastActiveIndex;\n\t\tactions[ lastActiveIndex ] = action;\n\n\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t},\n\n\t_takeBackAction: function( action ) {\n\n\t\t// [  active actions  | inactive actions ]\n\t\t// [ active actions |< inactive actions  ]\n\t\t//        a        s\n\t\t//         <-swap->\n\t\t//        s        a\n\n\t\tvar actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\taction._cacheIndex = firstInactiveIndex;\n\t\tactions[ firstInactiveIndex ] = action;\n\n\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t},\n\n\t// Memory management for PropertyMixer objects\n\n\t_addInactiveBinding: function( binding, rootUuid, trackName ) {\n\n\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\tbindings = this._bindings;\n\n\t\tif ( bindingByName === undefined ) {\n\n\t\t\tbindingByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t}\n\n\t\tbindingByName[ trackName ] = binding;\n\n\t\tbinding._cacheIndex = bindings.length;\n\t\tbindings.push( binding );\n\n\t},\n\n\t_removeInactiveBinding: function( binding ) {\n\n\t\tvar bindings = this._bindings,\n\t\t\tpropBinding = binding.binding,\n\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\ttrackName = propBinding.path,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\tbindings.pop();\n\n\t\tdelete bindingByName[ trackName ];\n\n\t\tremove_empty_map: {\n\n\t\t\tfor ( var _ in bindingByName ) break remove_empty_map;\n\n\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t}\n\n\t},\n\n\t_lendBinding: function( binding ) {\n\n\t\tvar bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\tbinding._cacheIndex = lastActiveIndex;\n\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t},\n\n\t_takeBackBinding: function( binding ) {\n\n\t\tvar bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t},\n\n\n\t// Memory management of Interpolants for weight and time scale\n\n\t_lendControlInterpolant: function() {\n\n\t\tvar interpolants = this._controlInterpolants,\n\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\n\t\t\tinterpolant = interpolants[ lastActiveIndex ];\n\n\t\tif ( interpolant === undefined ) {\n\n\t\t\tinterpolant = new THREE.LinearInterpolant(\n\t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\n\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t}\n\n\t\treturn interpolant;\n\n\t},\n\n\t_takeBackControlInterpolant: function( interpolant ) {\n\n\t\tvar interpolants = this._controlInterpolants,\n\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t},\n\n\t_controlInterpolantsResultBuffer: new Float32Array( 1 )\n\n} );\n\n// File:src/animation/AnimationObjectGroup.js\n\n/**\n *\n * A group of objects that receives a shared animation state.\n *\n * Usage:\n *\n * \t-\tAdd objects you would otherwise pass as 'root' to the\n * \t\tconstructor or the .clipAction method of AnimationMixer.\n *\n * \t-\tInstead pass this object as 'root'.\n *\n * \t-\tYou can also add and remove objects later when the mixer\n * \t\tis running.\n *\n * Note:\n *\n *  \tObjects of this class appear as one object to the mixer,\n *  \tso cache control of the individual objects must be done\n *  \ton the group.\n *\n * Limitation:\n *\n * \t- \tThe animated properties must be compatible among the\n * \t\tall objects in the group.\n *\n *  -\tA single property can either be controlled through a\n *  \ttarget group or directly, but not both.\n *\n * @author tschw\n */\n\nTHREE.AnimationObjectGroup = function( var_args ) {\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\t// cached objects followed by the active ones\n\tthis._objects = Array.prototype.slice.call( arguments );\n\n\tthis.nCachedObjects_ = 0;\t\t\t// threshold\n\t// note: read by PropertyBinding.Composite\n\n\tvar indices = {};\n\tthis._indicesByUUID = indices;\t\t// for bookkeeping\n\n\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t}\n\n\tthis._paths = [];\t\t\t\t\t// inside: string\n\tthis._parsedPaths = [];\t\t\t\t// inside: { we don't care, here }\n\tthis._bindings = []; \t\t\t\t// inside: Array< PropertyBinding >\n\tthis._bindingsIndicesByPath = {}; \t// inside: indices in these arrays\n\n\tvar scope = this;\n\n\tthis.stats = {\n\n\t\tobjects: {\n\t\t\tget total() { return scope._objects.length; },\n\t\t\tget inUse() { return this.total - scope.nCachedObjects_;  }\n\t\t},\n\n\t\tget bindingsPerObject() { return scope._bindings.length; }\n\n\t};\n\n};\n\nTHREE.AnimationObjectGroup.prototype = {\n\n\tconstructor: THREE.AnimationObjectGroup,\n\n\tadd: function( var_args ) {\n\n\t\tvar objects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tpaths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tvar object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index === undefined ) {\n\n\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\tindex = nObjects ++;\n\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\tobjects.push( object );\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tbindings[ j ].push(\n\t\t\t\t\t\t\tnew THREE.PropertyBinding(\n\t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t}\n\n\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\tvar knownObject = objects[ index ];\n\n\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\tbinding = new THREE.PropertyBinding(\n\t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t} else if ( objects[ index ] !== knownObject) {\n\n\t\t\t\tconsole.error( \"Different objects with the same UUID \" +\n\t\t\t\t\t\t\"detected. Clean the caches or recreate your \" +\n\t\t\t\t\t\t\"infrastructure when reloading scenes...\" );\n\n\t\t\t} // else the object is already where we want it to be\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t},\n\n\tremove: function( var_args ) {\n\n\t\tvar objects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tvar object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t},\n\n\t// remove & forget\n\tuncache: function( var_args ) {\n\n\t\tvar objects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tvar object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\tvar lastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} // cached or active\n\n\t\t\t} // if object is known\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t},\n\n\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\tsubscribe_: function( path, parsedPath ) {\n\t\t// returns an array of bindings for the given path that is changed\n\t\t// according to the contained objects in the group\n\n\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\tindex = indicesByPath[ path ],\n\t\t\tbindings = this._bindings;\n\n\t\tif ( index !== undefined ) return bindings[ index ];\n\n\t\tvar paths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tobjects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\tindex = bindings.length;\n\n\t\tindicesByPath[ path ] = index;\n\n\t\tpaths.push( path );\n\t\tparsedPaths.push( parsedPath );\n\t\tbindings.push( bindingsForPath );\n\n\t\tfor ( var i = nCachedObjects,\n\t\t\t\tn = objects.length; i !== n; ++ i ) {\n\n\t\t\tvar object = objects[ i ];\n\n\t\t\tbindingsForPath[ i ] =\n\t\t\t\t\tnew THREE.PropertyBinding( object, path, parsedPath );\n\n\t\t}\n\n\t\treturn bindingsForPath;\n\n\t},\n\n\tunsubscribe_: function( path ) {\n\t\t// tells the group to forget about a property path and no longer\n\t\t// update the array previously obtained with 'subscribe_'\n\n\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\tindex = indicesByPath[ path ];\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tvar paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\tbindings[ index ] = lastBindings;\n\t\t\tbindings.pop();\n\n\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\tparsedPaths.pop();\n\n\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\tpaths.pop();\n\n\t\t}\n\n\t}\n\n};\n\n\n// File:src/animation/AnimationUtils.js\n\n/**\n * @author tschw\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n */\n\nTHREE.AnimationUtils = {\n\n\t// same as Array.prototype.slice, but also works on typed arrays\n\tarraySlice: function( array, from, to ) {\n\n\t\tif ( THREE.AnimationUtils.isTypedArray( array ) ) {\n\n\t\t\treturn new array.constructor( array.subarray( from, to ) );\n\n\t\t}\n\n\t\treturn array.slice( from, to );\n\n\t},\n\n\t// converts an array to a specific type\n\tconvertArray: function( array, type, forceClone ) {\n\n\t\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t\t\t! forceClone && array.constructor === type ) return array;\n\n\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\t\treturn new type( array ); // create typed array\n\n\t\t}\n\n\t\treturn Array.prototype.slice.call( array ); // create Array\n\n\t},\n\n\tisTypedArray: function( object ) {\n\n\t\treturn ArrayBuffer.isView( object ) &&\n\t\t\t\t! ( object instanceof DataView );\n\n\t},\n\n\t// returns an array by which times and values can be sorted\n\tgetKeyframeOrder: function( times ) {\n\n\t\tfunction compareTime( i, j ) {\n\n\t\t\treturn times[ i ] - times[ j ];\n\n\t\t}\n\n\t\tvar n = times.length;\n\t\tvar result = new Array( n );\n\t\tfor ( var i = 0; i !== n; ++ i ) result[ i ] = i;\n\n\t\tresult.sort( compareTime );\n\n\t\treturn result;\n\n\t},\n\n\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\tsortedArray: function( values, stride, order ) {\n\n\t\tvar nValues = values.length;\n\t\tvar result = new values.constructor( nValues );\n\n\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\t\tvar srcOffset = order[ i ] * stride;\n\n\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn result;\n\n\t},\n\n\t// function for parsing AOS keyframe formats\n\tflattenJSON: function( jsonKeys, times, values, valuePropertyName ) {\n\n\t\tvar i = 1, key = jsonKeys[ 0 ];\n\n\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t}\n\n\t\tif ( key === undefined ) return; // no data\n\n\t\tvar value = key[ valuePropertyName ];\n\t\tif ( value === undefined ) return; // no data\n\n\t\tif ( Array.isArray( value ) ) {\n\n\t\t\tdo {\n\n\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n\t\t\t\t}\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t} while ( key !== undefined );\n\n\t\t} else if ( value.toArray !== undefined ) {\n\t\t\t// ...assume THREE.Math-ish\n\n\t\t\tdo {\n\n\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t\t}\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t} while ( key !== undefined );\n\n\t\t} else {\n\t\t\t// otherwise push as-is\n\n\t\t\tdo {\n\n\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\tvalues.push( value );\n\n\t\t\t\t}\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t} while ( key !== undefined );\n\n\t\t}\n\n\t}\n\n};\n\n// File:src/animation/KeyframeTrack.js\n\n/**\n *\n * A timed sequence of keyframes for a specific property.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.KeyframeTrack = function ( name, times, values, interpolation ) {\n\n\tif( name === undefined ) throw new Error( \"track name is undefined\" );\n\n\tif( times === undefined || times.length === 0 ) {\n\n\t\tthrow new Error( \"no keyframes in track named \" + name );\n\n\t}\n\n\tthis.name = name;\n\n\tthis.times = THREE.AnimationUtils.convertArray( times, this.TimeBufferType );\n\tthis.values = THREE.AnimationUtils.convertArray( values, this.ValueBufferType );\n\n\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\tthis.validate();\n\tthis.optimize();\n\n};\n\nTHREE.KeyframeTrack.prototype = {\n\n\tconstructor: THREE.KeyframeTrack,\n\n\tTimeBufferType: Float32Array,\n\tValueBufferType: Float32Array,\n\n\tDefaultInterpolation: THREE.InterpolateLinear,\n\n\tInterpolantFactoryMethodDiscrete: function( result ) {\n\n\t\treturn new THREE.DiscreteInterpolant(\n\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n\t},\n\n\tInterpolantFactoryMethodLinear: function( result ) {\n\n\t\treturn new THREE.LinearInterpolant(\n\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n\t},\n\n\tInterpolantFactoryMethodSmooth: function( result ) {\n\n\t\treturn new THREE.CubicInterpolant(\n\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n\t},\n\n\tsetInterpolation: function( interpolation ) {\n\n\t\tvar factoryMethod;\n\n\t\tswitch ( interpolation ) {\n\n\t\t\tcase THREE.InterpolateDiscrete:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.InterpolateLinear:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.InterpolateSmooth:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( factoryMethod === undefined ) {\n\n\t\t\tvar message = \"unsupported interpolation for \" +\n\t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\n\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconsole.warn( message );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.createInterpolant = factoryMethod;\n\n\t},\n\n\tgetInterpolation: function() {\n\n\t\tswitch ( this.createInterpolant ) {\n\n\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\treturn THREE.InterpolateDiscrete;\n\n\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\treturn THREE.InterpolateLinear;\n\n\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\treturn THREE.InterpolateSmooth;\n\n\t\t}\n\n\t},\n\n\tgetValueSize: function() {\n\n\t\treturn this.values.length / this.times.length;\n\n\t},\n\n\t// move all keyframes either forwards or backwards in time\n\tshift: function( timeOffset ) {\n\n\t\tif( timeOffset !== 0.0 ) {\n\n\t\t\tvar times = this.times;\n\n\t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\tscale: function( timeScale ) {\n\n\t\tif( timeScale !== 1.0 ) {\n\n\t\t\tvar times = this.times;\n\n\t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\ttrim: function( startTime, endTime ) {\n\n\t\tvar times = this.times,\n\t\t\tnKeys = times.length,\n\t\t\tfrom = 0,\n\t\t\tto = nKeys - 1;\n\n\t\twhile ( from !== nKeys && times[ from ] < startTime ) ++ from;\n\t\twhile ( to !== -1 && times[ to ] > endTime ) -- to;\n\n\t\t++ to; // inclusive -> exclusive bound\n\n\t\tif( from !== 0 || to !== nKeys ) {\n\n\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\tif ( from >= to ) to = Math.max( to , 1 ), from = to - 1;\n\n\t\t\tvar stride = this.getValueSize();\n\t\t\tthis.times = THREE.AnimationUtils.arraySlice( times, from, to );\n\t\t\tthis.values = THREE.AnimationUtils.\n\t\t\t\t\tarraySlice( this.values, from * stride, to * stride );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\tvalidate: function() {\n\n\t\tvar valid = true;\n\n\t\tvar valueSize = this.getValueSize();\n\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\tconsole.error( \"invalid value size in track\", this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tvar times = this.times,\n\t\t\tvalues = this.values,\n\n\t\t\tnKeys = times.length;\n\n\t\tif( nKeys === 0 ) {\n\n\t\t\tconsole.error( \"track is empty\", this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tvar prevTime = null;\n\n\t\tfor( var i = 0; i !== nKeys; i ++ ) {\n\n\t\t\tvar currTime = times[ i ];\n\n\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\tconsole.error( \"time is not a valid number\", this, i, currTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\tconsole.error( \"out of order keys\", this, i, currTime, prevTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tprevTime = currTime;\n\n\t\t}\n\n\t\tif ( values !== undefined ) {\n\n\t\t\tif ( THREE.AnimationUtils.isTypedArray( values ) ) {\n\n\t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar value = values[ i ];\n\n\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\tconsole.error( \"value is not a valid number\", this, i, value );\n\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn valid;\n\n\t},\n\n\t// removes equivalent sequential keys as common in morph target sequences\n\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\toptimize: function() {\n\n\t\tvar times = this.times,\n\t\t\tvalues = this.values,\n\t\t\tstride = this.getValueSize(),\n\n\t\t\twriteIndex = 1;\n\n\t\tfor( var i = 1, n = times.length - 1; i <= n; ++ i ) {\n\n\t\t\tvar keep = false;\n\n\t\t\tvar time = times[ i ];\n\t\t\tvar timeNext = times[ i + 1 ];\n\n\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\n\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\t\t\t\tvar offset = i * stride,\n\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\tvar value = values[ offset + j ];\n\n\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// in-place compaction\n\n\t\t\tif ( keep ) {\n\n\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\tvar readOffset = i * stride,\n\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( writeIndex !== times.length ) {\n\n\t\t\tthis.times = THREE.AnimationUtils.arraySlice( times, 0, writeIndex );\n\t\t\tthis.values = THREE.AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n};\n\n// Static methods:\n\nObject.assign( THREE.KeyframeTrack, {\n\n\t// Serialization (in static context, because of constructor invocation\n\t// and automatic invocation of .toJSON):\n\n\tparse: function( json ) {\n\n\t\tif( json.type === undefined ) {\n\n\t\t\tthrow new Error( \"track type undefined, can not parse\" );\n\n\t\t}\n\n\t\tvar trackType = THREE.KeyframeTrack._getTrackTypeForValueTypeName( json.type );\n\n\t\tif ( json.times === undefined ) {\n\n\t\t\tvar times = [], values = [];\n\n\t\t\tTHREE.AnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\n\t\t\tjson.times = times;\n\t\t\tjson.values = values;\n\n\t\t}\n\n\t\t// derived classes can define a static parse method\n\t\tif ( trackType.parse !== undefined ) {\n\n\t\t\treturn trackType.parse( json );\n\n\t\t} else {\n\n\t\t\t// by default, we asssume a constructor compatible with the base\n\t\t\treturn new trackType(\n\t\t\t\t\tjson.name, json.times, json.values, json.interpolation );\n\n\t\t}\n\n\t},\n\n\ttoJSON: function( track ) {\n\n\t\tvar trackType = track.constructor;\n\n\t\tvar json;\n\n\t\t// derived classes can define a static toJSON method\n\t\tif ( trackType.toJSON !== undefined ) {\n\n\t\t\tjson = trackType.toJSON( track );\n\n\t\t} else {\n\n\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\tjson = {\n\n\t\t\t\t'name': track.name,\n\t\t\t\t'times': THREE.AnimationUtils.convertArray( track.times, Array ),\n\t\t\t\t'values': THREE.AnimationUtils.convertArray( track.values, Array )\n\n\t\t\t};\n\n\t\t\tvar interpolation = track.getInterpolation();\n\n\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t}\n\n\t\t}\n\n\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\treturn json;\n\n\t},\n\n\t_getTrackTypeForValueTypeName: function( typeName ) {\n\n\t\tswitch( typeName.toLowerCase() ) {\n\n\t\t\tcase \"scalar\":\n\t\t\tcase \"double\":\n\t\t\tcase \"float\":\n\t\t\tcase \"number\":\n\t\t\tcase \"integer\":\n\n\t\t\t\treturn THREE.NumberKeyframeTrack;\n\n\t\t\tcase \"vector\":\n\t\t\tcase \"vector2\":\n\t\t\tcase \"vector3\":\n\t\t\tcase \"vector4\":\n\n\t\t\t\treturn THREE.VectorKeyframeTrack;\n\n\t\t\tcase \"color\":\n\n\t\t\t\treturn THREE.ColorKeyframeTrack;\n\n\t\t\tcase \"quaternion\":\n\n\t\t\t\treturn THREE.QuaternionKeyframeTrack;\n\n\t\t\tcase \"bool\":\n\t\t\tcase \"boolean\":\n\n\t\t\t\treturn THREE.BooleanKeyframeTrack;\n\n\t\t\tcase \"string\":\n\n\t\t\t\treturn THREE.StringKeyframeTrack;\n\n\t\t}\n\n\t\tthrow new Error( \"Unsupported typeName: \" + typeName );\n\n\t}\n\n} );\n\n// File:src/animation/PropertyBinding.js\n\n/**\n *\n * A reference to a real property in the scene graph.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.PropertyBinding = function ( rootNode, path, parsedPath ) {\n\n\tthis.path = path;\n\tthis.parsedPath = parsedPath ||\n\t\t\tTHREE.PropertyBinding.parseTrackName( path );\n\n\tthis.node = THREE.PropertyBinding.findNode(\n\t\t\trootNode, this.parsedPath.nodeName ) || rootNode;\n\n\tthis.rootNode = rootNode;\n\n};\n\nTHREE.PropertyBinding.prototype = {\n\n\tconstructor: THREE.PropertyBinding,\n\n\tgetValue: function getValue_unbound( targetArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.getValue( targetArray, offset );\n\n\t\t// Note: This class uses a State pattern on a per-method basis:\n\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t// prototype version of these methods with one that represents\n\t\t// the bound state. When the property is not found, the methods\n\t\t// become no-ops.\n\n\t},\n\n\tsetValue: function getValue_unbound( sourceArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.setValue( sourceArray, offset );\n\n\t},\n\n\t// create getter / setter pair for a property in the scene graph\n\tbind: function() {\n\n\t\tvar targetObject = this.node,\n\t\t\tparsedPath = this.parsedPath,\n\n\t\t\tobjectName = parsedPath.objectName,\n\t\t\tpropertyName = parsedPath.propertyName,\n\t\t\tpropertyIndex = parsedPath.propertyIndex;\n\n\t\tif ( ! targetObject ) {\n\n\t\t\ttargetObject = THREE.PropertyBinding.findNode(\n\t\t\t\t\tthis.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n\t\t\tthis.node = targetObject;\n\n\t\t}\n\n\t\t// set fail state so we can just 'return' on error\n\t\tthis.getValue = this._getValue_unavailable;\n\t\tthis.setValue = this._setValue_unavailable;\n\n \t\t// ensure there is a value node\n\t\tif ( ! targetObject ) {\n\n\t\t\tconsole.error( \"  trying to update node for track: \" + this.path + \" but it wasn't found.\" );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( objectName ) {\n\n\t\t\tvar objectIndex = parsedPath.objectIndex;\n\n\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\tswitch ( objectName ) {\n\n\t\t\t\tcase 'materials':\n\n\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\tconsole.error( '  can not bind to material as node does not have a material', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\tconsole.error( '  can not bind to material.materials as node.material does not have a materials array', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'bones':\n\n\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\tconsole.error( '  can not bind to bones as node does not have a skeleton', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( '  can not bind to objectName of node, undefined', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t}\n\n\n\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\tconsole.error( \"  trying to bind to objectIndex of objectName, but is undefined:\", this, targetObject );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// resolve property\n\t\tvar nodeProperty = targetObject[ propertyName ];\n\n\t\tif ( nodeProperty === undefined ) {\n\n\t\t\tvar nodeName = parsedPath.nodeName;\n\n\t\t\tconsole.error( \"  trying to update property for track: \" + nodeName +\n\t\t\t\t\t'.' + propertyName + \" but it wasn't found.\", targetObject );\n\t\t\treturn;\n\n\t\t}\n\n\t\t// determine versioning scheme\n\t\tvar versioning = this.Versioning.None;\n\n\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n\t\t\tversioning = this.Versioning.NeedsUpdate;\n\t\t\tthis.targetObject = targetObject;\n\n\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\t\t\tthis.targetObject = targetObject;\n\n\t\t}\n\n\t\t// determine how the property gets bound\n\t\tvar bindingType = this.BindingType.Direct;\n\n\t\tif ( propertyIndex !== undefined ) {\n\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\n\t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\n\t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else if ( nodeProperty.length !== undefined ) {\n\n\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else {\n\n\t\t\tthis.propertyName = propertyName;\n\n\t\t}\n\n\t\t// select getter / setter\n\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t},\n\n\tunbind: function() {\n\n\t\tthis.node = null;\n\n\t\t// back to the prototype version of getValue / setValue\n\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\tthis.getValue = this._getValue_unbound;\n\t\tthis.setValue = this._setValue_unbound;\n\n\t}\n\n};\n\nObject.assign( THREE.PropertyBinding.prototype, { // prototype, continued\n\n\t// these are used to \"bind\" a nonexistent property\n\t_getValue_unavailable: function() {},\n\t_setValue_unavailable: function() {},\n\n\t// initial state of these methods that calls 'bind'\n\t_getValue_unbound: THREE.PropertyBinding.prototype.getValue,\n\t_setValue_unbound: THREE.PropertyBinding.prototype.setValue,\n\n\tBindingType: {\n\t\tDirect: 0,\n\t\tEntireArray: 1,\n\t\tArrayElement: 2,\n\t\tHasFromToArray: 3\n\t},\n\n\tVersioning: {\n\t\tNone: 0,\n\t\tNeedsUpdate: 1,\n\t\tMatrixWorldNeedsUpdate: 2\n\t},\n\n\tGetterByBindingType: [\n\n\t\tfunction getValue_direct( buffer, offset ) {\n\n\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\n\t\t},\n\n\t\tfunction getValue_array( buffer, offset ) {\n\n\t\t\tvar source = this.resolvedProperty;\n\n\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t\t}\n\n\t\t},\n\n\t\tfunction getValue_arrayElement( buffer, offset ) {\n\n\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t\t},\n\n\t\tfunction getValue_toArray( buffer, offset ) {\n\n\t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t\t}\n\n\t],\n\n\tSetterByBindingTypeAndVersioning: [\n\n\t\t[\n\t\t\t// Direct\n\n\t\t\tfunction setValue_direct( buffer, offset ) {\n\n\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\n\t\t\t},\n\n\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t},\n\n\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t}\n\n\t\t], [\n\n\t\t\t// EntireArray\n\n\t\t\tfunction setValue_array( buffer, offset ) {\n\n\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t}\n\n\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t},\n\n\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t}\n\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t}\n\n\t\t], [\n\n\t\t\t// ArrayElement\n\n\t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t\t\t},\n\n\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t},\n\n\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t}\n\n\t\t], [\n\n\t\t\t// HasToFromArray\n\n\t\t\tfunction setValue_fromArray( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t\t\t},\n\n\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t},\n\n\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t}\n\n\t\t]\n\n\t]\n\n} );\n\nTHREE.PropertyBinding.Composite =\n\t\tfunction( targetGroup, path, optionalParsedPath ) {\n\n\tvar parsedPath = optionalParsedPath ||\n\t\t\tTHREE.PropertyBinding.parseTrackName( path );\n\n\tthis._targetGroup = targetGroup;\n\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n};\n\nTHREE.PropertyBinding.Composite.prototype = {\n\n\tconstructor: THREE.PropertyBinding.Composite,\n\n\tgetValue: function( array, offset ) {\n\n\t\tthis.bind(); // bind all binding\n\n\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t// and only call .getValue on the first\n\t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\n\t},\n\n\tsetValue: function( array, offset ) {\n\n\t\tvar bindings = this._bindings;\n\n\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t}\n\n\t},\n\n\tbind: function() {\n\n\t\tvar bindings = this._bindings;\n\n\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].bind();\n\n\t\t}\n\n\t},\n\n\tunbind: function() {\n\n\t\tvar bindings = this._bindings;\n\n\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\tn = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].unbind();\n\n\t\t}\n\n\t}\n\n};\n\nTHREE.PropertyBinding.create = function( root, path, parsedPath ) {\n\n\tif ( ! ( root instanceof THREE.AnimationObjectGroup ) ) {\n\n\t\treturn new THREE.PropertyBinding( root, path, parsedPath );\n\n\t} else {\n\n\t\treturn new THREE.PropertyBinding.Composite( root, path, parsedPath );\n\n\t}\n\n};\n\nTHREE.PropertyBinding.parseTrackName = function( trackName ) {\n\n\t// matches strings in the form of:\n\t//    nodeName.property\n\t//    nodeName.property[accessor]\n\t//    nodeName.material.property[accessor]\n\t//    uuid.property[accessor]\n\t//    uuid.objectName[objectIndex].propertyName[propertyIndex]\n\t//    parentName/nodeName.property\n\t//    parentName/parentName/nodeName.property[index]\n\t//\t  .bone[Armature.DEF_cog].position\n\t// created and tested via https://regex101.com/#javascript\n\n\tvar re = /^(([\\w]+\\/)*)([\\w-\\d]+)?(\\.([\\w]+)(\\[([\\w\\d\\[\\]\\_.:\\- ]+)\\])?)?(\\.([\\w.]+)(\\[([\\w\\d\\[\\]\\_. ]+)\\])?)$/;\n\tvar matches = re.exec( trackName );\n\n\tif ( ! matches ) {\n\n\t\tthrow new Error( \"cannot parse trackName at all: \" + trackName );\n\n\t}\n\n\tif ( matches.index === re.lastIndex ) {\n\n\t\tre.lastIndex++;\n\n\t}\n\n\tvar results = {\n\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\tnodeName: matches[ 3 ], \t// allowed to be null, specified root node.\n\t\tobjectName: matches[ 5 ],\n\t\tobjectIndex: matches[ 7 ],\n\t\tpropertyName: matches[ 9 ],\n\t\tpropertyIndex: matches[ 11 ]\t// allowed to be null, specifies that the whole property is set.\n\t};\n\n\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\tthrow new Error( \"can not parse propertyName from trackName: \" + trackName );\n\n\t}\n\n\treturn results;\n\n};\n\nTHREE.PropertyBinding.findNode = function( root, nodeName ) {\n\n\tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\treturn root;\n\n\t}\n\n\t// search into skeleton bones.\n\tif ( root.skeleton ) {\n\n\t\tvar searchSkeleton = function( skeleton ) {\n\n\t\t\tfor( var i = 0; i < skeleton.bones.length; i ++ ) {\n\n\t\t\t\tvar bone = skeleton.bones[ i ];\n\n\t\t\t\tif ( bone.name === nodeName ) {\n\n\t\t\t\t\treturn bone;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t};\n\n\t\tvar bone = searchSkeleton( root.skeleton );\n\n\t\tif ( bone ) {\n\n\t\t\treturn bone;\n\n\t\t}\n\t}\n\n\t// search into node subtree.\n\tif ( root.children ) {\n\n\t\tvar searchNodeSubtree = function( children ) {\n\n\t\t\tfor( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\tvar childNode = children[ i ];\n\n\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\treturn childNode;\n\n\t\t\t\t}\n\n\t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\n\t\t\t\tif ( result ) return result;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t};\n\n\t\tvar subTreeNode = searchNodeSubtree( root.children );\n\n\t\tif ( subTreeNode ) {\n\n\t\t\treturn subTreeNode;\n\n\t\t}\n\n\t}\n\n\treturn null;\n\n};\n\n// File:src/animation/PropertyMixer.js\n\n/**\n *\n * Buffered scene graph property that allows weighted accumulation.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.PropertyMixer = function ( binding, typeName, valueSize ) {\n\n\tthis.binding = binding;\n\tthis.valueSize = valueSize;\n\n\tvar bufferType = Float64Array,\n\t\tmixFunction;\n\n\tswitch ( typeName ) {\n\n\t\tcase 'quaternion':\t\t\tmixFunction = this._slerp;\t\tbreak;\n\n\t\tcase 'string':\n\t\tcase 'bool':\n\n\t\t\tbufferType = Array,\t\tmixFunction = this._select;\t\tbreak;\n\n\t\tdefault:\t\t\t\t\tmixFunction = this._lerp;\n\n\t}\n\n\tthis.buffer = new bufferType( valueSize * 4 );\n\t// layout: [ incoming | accu0 | accu1 | orig ]\n\t//\n\t// interpolators can use .buffer as their .result\n\t// the data then goes to 'incoming'\n\t//\n\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t// the cumulative result and are compared to detect\n\t// changes\n\t//\n\t// 'orig' stores the original state of the property\n\n\tthis._mixBufferRegion = mixFunction;\n\n\tthis.cumulativeWeight = 0;\n\n\tthis.useCount = 0;\n\tthis.referenceCount = 0;\n\n};\n\nTHREE.PropertyMixer.prototype = {\n\n\tconstructor: THREE.PropertyMixer,\n\n\t// accumulate data in the 'incoming' region into 'accu<i>'\n\taccumulate: function( accuIndex, weight ) {\n\n\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t// the weight and shouldn't have made the call in the first place\n\n\t\tvar buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\tcurrentWeight = this.cumulativeWeight;\n\n\t\tif ( currentWeight === 0 ) {\n\n\t\t\t// accuN := incoming * weight\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t}\n\n\t\t\tcurrentWeight = weight;\n\n\t\t} else {\n\n\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\tcurrentWeight += weight;\n\t\t\tvar mix = weight / currentWeight;\n\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t}\n\n\t\tthis.cumulativeWeight = currentWeight;\n\n\t},\n\n\t// apply the state of 'accu<i>' to the binding when accus differ\n\tapply: function( accuIndex ) {\n\n\t\tvar stride = this.valueSize,\n\t\t\tbuffer = this.buffer,\n\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\tweight = this.cumulativeWeight,\n\n\t\t\tbinding = this.binding;\n\n\t\tthis.cumulativeWeight = 0;\n\n\t\tif ( weight < 1 ) {\n\n\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\tvar originalValueOffset = stride * 3;\n\n\t\t\tthis._mixBufferRegion(\n\t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t}\n\n\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t// remember the state of the bound property and copy it to both accus\n\tsaveOriginalState: function() {\n\n\t\tvar binding = this.binding;\n\n\t\tvar buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\n\t\t\toriginalValueOffset = stride * 3;\n\n\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t}\n\n\t\tthis.cumulativeWeight = 0;\n\n\t},\n\n\t// apply the state previously taken via 'saveOriginalState' to the binding\n\trestoreOriginalState: function() {\n\n\t\tvar originalValueOffset = this.valueSize * 3;\n\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t},\n\n\n\t// mix functions\n\n\t_select: function( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tif ( t >= 0.5 ) {\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t_slerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tTHREE.Quaternion.slerpFlat( buffer, dstOffset,\n\t\t\t\tbuffer, dstOffset, buffer, srcOffset, t );\n\n\t},\n\n\t_lerp: function( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tvar s = 1 - t;\n\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\tvar j = dstOffset + i;\n\n\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t}\n\n\t}\n\n};\n\n// File:src/animation/tracks/BooleanKeyframeTrack.js\n\n/**\n *\n * A Track of Boolean keyframe values.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.BooleanKeyframeTrack = function ( name, times, values ) {\n\n\tTHREE.KeyframeTrack.call( this, name, times, values );\n\n};\n\nTHREE.BooleanKeyframeTrack.prototype =\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\n\tconstructor: THREE.BooleanKeyframeTrack,\n\n\tValueTypeName: 'bool',\n\tValueBufferType: Array,\n\n\tDefaultInterpolation: THREE.InterpolateDiscrete,\n\n\tInterpolantFactoryMethodLinear: undefined,\n\tInterpolantFactoryMethodSmooth: undefined\n\n\t// Note: Actually this track could have a optimized / compressed\n\t// representation of a single value and a custom interpolant that\n\t// computes \"firstValue ^ isOdd( index )\".\n\n} );\n\n// File:src/animation/tracks/ColorKeyframeTrack.js\n\n/**\n *\n * A Track of keyframe values that represent color.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.ColorKeyframeTrack = function ( name, times, values, interpolation ) {\n\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\n\n};\n\nTHREE.ColorKeyframeTrack.prototype =\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\n\tconstructor: THREE.ColorKeyframeTrack,\n\n\tValueTypeName: 'color'\n\n\t// ValueBufferType is inherited\n\n\t// DefaultInterpolation is inherited\n\n\n\t// Note: Very basic implementation and nothing special yet.\n\t// However, this is the place for color space parameterization.\n\n} );\n\n// File:src/animation/tracks/NumberKeyframeTrack.js\n\n/**\n *\n * A Track of numeric keyframe values.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.NumberKeyframeTrack = function ( name, times, values, interpolation ) {\n\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\n\n};\n\nTHREE.NumberKeyframeTrack.prototype =\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\n\tconstructor: THREE.NumberKeyframeTrack,\n\n\tValueTypeName: 'number',\n\n\t// ValueBufferType is inherited\n\n\t// DefaultInterpolation is inherited\n\n} );\n\n// File:src/animation/tracks/QuaternionKeyframeTrack.js\n\n/**\n *\n * A Track of quaternion keyframe values.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.QuaternionKeyframeTrack = function ( name, times, values, interpolation ) {\n\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\n\n};\n\nTHREE.QuaternionKeyframeTrack.prototype =\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\n\tconstructor: THREE.QuaternionKeyframeTrack,\n\n\tValueTypeName: 'quaternion',\n\n\t// ValueBufferType is inherited\n\n\tDefaultInterpolation: THREE.InterpolateLinear,\n\n\tInterpolantFactoryMethodLinear: function( result ) {\n\n\t\treturn new THREE.QuaternionLinearInterpolant(\n\t\t\t\tthis.times, this.values, this.getValueSize(), result );\n\n\t},\n\n\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n} );\n\n// File:src/animation/tracks/StringKeyframeTrack.js\n\n/**\n *\n * A Track that interpolates Strings\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.StringKeyframeTrack = function ( name, times, values, interpolation ) {\n\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\n\n};\n\nTHREE.StringKeyframeTrack.prototype =\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\n\tconstructor: THREE.StringKeyframeTrack,\n\n\tValueTypeName: 'string',\n\tValueBufferType: Array,\n\n\tDefaultInterpolation: THREE.InterpolateDiscrete,\n\n\tInterpolantFactoryMethodLinear: undefined,\n\n\tInterpolantFactoryMethodSmooth: undefined\n\n} );\n\n// File:src/animation/tracks/VectorKeyframeTrack.js\n\n/**\n *\n * A Track of vectored keyframe values.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n\nTHREE.VectorKeyframeTrack = function ( name, times, values, interpolation ) {\n\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\n\n};\n\nTHREE.VectorKeyframeTrack.prototype =\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\n\n\tconstructor: THREE.VectorKeyframeTrack,\n\n\tValueTypeName: 'vector'\n\n\t// ValueBufferType is inherited\n\n\t// DefaultInterpolation is inherited\n\n} );\n\n// File:src/audio/Audio.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Reece Aaron Lecrivain / http://reecenotes.com/\n */\n\nTHREE.Audio = function ( listener ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Audio';\n\n\tthis.context = listener.context;\n\tthis.source = this.context.createBufferSource();\n\tthis.source.onended = this.onEnded.bind( this );\n\n\tthis.gain = this.context.createGain();\n\tthis.gain.connect( listener.getInput() );\n\n\tthis.autoplay = false;\n\n\tthis.startTime = 0;\n\tthis.playbackRate = 1;\n\tthis.isPlaying = false;\n\tthis.hasPlaybackControl = true;\n\tthis.sourceType = 'empty';\n\n\tthis.filters = [];\n\n};\n\nTHREE.Audio.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.Audio,\n\n\tgetOutput: function () {\n\n\t\treturn this.gain;\n\n\t},\n\n\tsetNodeSource: function ( audioNode ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'audioNode';\n\t\tthis.source = audioNode;\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t},\n\n\tsetBuffer: function ( audioBuffer ) {\n\n\t\tthis.source.buffer = audioBuffer;\n\t\tthis.sourceType = 'buffer';\n\n\t\tif ( this.autoplay ) this.play();\n\n\t\treturn this;\n\n\t},\n\n\tplay: function () {\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar source = this.context.createBufferSource();\n\n\t\tsource.buffer = this.source.buffer;\n\t\tsource.loop = this.source.loop;\n\t\tsource.onended = this.source.onended;\n\t\tsource.start( 0, this.startTime );\n\t\tsource.playbackRate.value = this.playbackRate;\n\n\t\tthis.isPlaying = true;\n\n\t\tthis.source = source;\n\n\t\treturn this.connect();\n\n\t},\n\n\tpause: function () {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.source.stop();\n\t\tthis.startTime = this.context.currentTime;\n\t\tthis.isPlaying = false;\n\n\t\treturn this;\n\n\t},\n\n\tstop: function () {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.source.stop();\n\t\tthis.startTime = 0;\n\t\tthis.isPlaying = false;\n\n\t\treturn this;\n\n\t},\n\n\tconnect: function () {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tdisconnect: function () {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetFilters: function () {\n\n\t\treturn this.filters;\n\n\t},\n\n\tsetFilters: function ( value ) {\n\n\t\tif ( ! value ) value = [];\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.disconnect();\n\t\t\tthis.filters = value;\n\t\t\tthis.connect();\n\n\t\t} else {\n\n\t\t\tthis.filters = value;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetFilter: function () {\n\n\t\treturn this.getFilters()[ 0 ];\n\n\t},\n\n\tsetFilter: function ( filter ) {\n\n\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t},\n\n\tsetPlaybackRate: function ( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.playbackRate = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.playbackRate.value = this.playbackRate;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetPlaybackRate: function () {\n\n\t\treturn this.playbackRate;\n\n\t},\n\n\tonEnded: function () {\n\n\t\tthis.isPlaying = false;\n\n\t},\n\n\tgetLoop: function () {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn this.source.loop;\n\n\t},\n\n\tsetLoop: function ( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.source.loop = value;\n\n\t},\n\n\tgetVolume: function () {\n\n\t\treturn this.gain.gain.value;\n\n\t},\n\n\n\tsetVolume: function ( value ) {\n\n\t\tthis.gain.gain.value = value;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/audio/AudioAnalyser.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.AudioAnalyser = function ( audio, fftSize ) {\n\n\tthis.analyser = audio.context.createAnalyser();\n\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\n\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\taudio.getOutput().connect( this.analyser );\n\n};\n\nObject.assign( THREE.AudioAnalyser.prototype, {\n\n\tgetFrequencyData: function () {\n\n\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\treturn this.data;\n\n\t},\n\n\tgetAverageFrequency: function () {\n\n\t\tvar value = 0, data = this.getFrequencyData();\n\n\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\tvalue += data[ i ];\n\n\t\t}\n\n\t\treturn value / data.length;\n\n\t}\n\n} );\n\n// File:src/audio/AudioContext.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nObject.defineProperty( THREE, 'AudioContext', {\n\n\tget: ( function () {\n\n\t\tvar context;\n\n\t\treturn function get() {\n\n\t\t\tif ( context === undefined ) {\n\n\t\t\t\tcontext = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t\t}\n\n\t\t\treturn context;\n\n\t\t};\n\n\t} )()\n\n} );\n\n// File:src/audio/PositionalAudio.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.PositionalAudio = function ( listener ) {\n\n\tTHREE.Audio.call( this, listener );\n\n\tthis.panner = this.context.createPanner();\n\tthis.panner.connect( this.gain );\n\n};\n\nTHREE.PositionalAudio.prototype = Object.assign( Object.create( THREE.Audio.prototype ), {\n\n\tconstructor: THREE.PositionalAudio,\n\n\tgetOutput: function () {\n\n\t\treturn this.panner;\n\n\t},\n\n\tgetRefDistance: function () {\n\n\t\treturn this.panner.refDistance;\n\n\t},\n\n\tsetRefDistance: function ( value ) {\n\n\t\tthis.panner.refDistance = value;\n\n\t},\n\n\tgetRolloffFactor: function () {\n\n\t\treturn this.panner.rolloffFactor;\n\n\t},\n\n\tsetRolloffFactor: function ( value ) {\n\n\t\tthis.panner.rolloffFactor = value;\n\n\t},\n\n\tgetDistanceModel: function () {\n\n\t\treturn this.panner.distanceModel;\n\n\t},\n\n\tsetDistanceModel: function ( value ) {\n\n\t\tthis.panner.distanceModel = value;\n\n\t},\n\n\tgetMaxDistance: function () {\n\n\t\treturn this.panner.maxDistance;\n\n\t},\n\n\tsetMaxDistance: function ( value ) {\n\n\t\tthis.panner.maxDistance = value;\n\n\t},\n\n\tupdateMatrixWorld: ( function () {\n\n\t\tvar position = new THREE.Vector3();\n\n\t\treturn function updateMatrixWorld( force ) {\n\n\t\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tposition.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tthis.panner.setPosition( position.x, position.y, position.z );\n\n\t\t};\n\n\t} )()\n\n\n} );\n\n// File:src/audio/AudioListener.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.AudioListener = function () {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'AudioListener';\n\n\tthis.context = THREE.AudioContext;\n\n\tthis.gain = this.context.createGain();\n\tthis.gain.connect( this.context.destination );\n\n\tthis.filter = null;\n\n};\n\nTHREE.AudioListener.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.AudioListener,\n\n\tgetInput: function () {\n\n\t\treturn this.gain;\n\n\t},\n\n\tremoveFilter: function ( ) {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\tthis.gain.connect( this.context.destination );\n\t\t\tthis.filter = null;\n\n\t\t}\n\n\t},\n\n\tgetFilter: function () {\n\n\t\treturn this.filter;\n\n\t},\n\n\tsetFilter: function ( value ) {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t} else {\n\n\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t}\n\n\t\tthis.filter = value;\n\t\tthis.gain.connect( this.filter );\n\t\tthis.filter.connect( this.context.destination );\n\n\t},\n\n\tgetMasterVolume: function () {\n\n\t\treturn this.gain.gain.value;\n\n\t},\n\n\tsetMasterVolume: function ( value ) {\n\n\t\tthis.gain.gain.value = value;\n\n\t},\n\n\tupdateMatrixWorld: ( function () {\n\n\t\tvar position = new THREE.Vector3();\n\t\tvar quaternion = new THREE.Quaternion();\n\t\tvar scale = new THREE.Vector3();\n\n\t\tvar orientation = new THREE.Vector3();\n\n\t\treturn function updateMatrixWorld( force ) {\n\n\t\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tvar listener = this.context.listener;\n\t\t\tvar up = this.up;\n\n\t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\n\t\t\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n\t\t\tlistener.setPosition( position.x, position.y, position.z );\n\t\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\n\n\t\t};\n\n\t} )()\n\n} );\n\n// File:src/cameras/Camera.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nTHREE.Camera = function () {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Camera';\n\n\tthis.matrixWorldInverse = new THREE.Matrix4();\n\tthis.projectionMatrix = new THREE.Matrix4();\n\n};\n\nTHREE.Camera.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.Camera.prototype.constructor = THREE.Camera;\n\nTHREE.Camera.prototype.getWorldDirection = function () {\n\n\tvar quaternion = new THREE.Quaternion();\n\n\treturn function getWorldDirection( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\tthis.getWorldQuaternion( quaternion );\n\n\t\treturn result.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n\t};\n\n}();\n\nTHREE.Camera.prototype.lookAt = function () {\n\n\t// This routine does not support cameras with rotated and/or translated parent(s)\n\n\tvar m1 = new THREE.Matrix4();\n\n\treturn function lookAt( vector ) {\n\n\t\tm1.lookAt( this.position, vector, this.up );\n\n\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n\t};\n\n}();\n\nTHREE.Camera.prototype.clone = function () {\n\n\treturn new this.constructor().copy( this );\n\n};\n\nTHREE.Camera.prototype.copy = function ( source ) {\n\n\tTHREE.Object3D.prototype.copy.call( this, source );\n\n\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\tthis.projectionMatrix.copy( source.projectionMatrix );\n\n\treturn this;\n\n};\n\n// File:src/cameras/CubeCamera.js\n\n/**\n * Camera for rendering cube maps\n *\t- renders scene into axis-aligned cube\n *\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.CubeCamera = function ( near, far, cubeResolution ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'CubeCamera';\n\n\tvar fov = 90, aspect = 1;\n\n\tvar cameraPX = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraPX.up.set( 0, - 1, 0 );\n\tcameraPX.lookAt( new THREE.Vector3( 1, 0, 0 ) );\n\tthis.add( cameraPX );\n\n\tvar cameraNX = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraNX.up.set( 0, - 1, 0 );\n\tcameraNX.lookAt( new THREE.Vector3( - 1, 0, 0 ) );\n\tthis.add( cameraNX );\n\n\tvar cameraPY = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraPY.up.set( 0, 0, 1 );\n\tcameraPY.lookAt( new THREE.Vector3( 0, 1, 0 ) );\n\tthis.add( cameraPY );\n\n\tvar cameraNY = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraNY.up.set( 0, 0, - 1 );\n\tcameraNY.lookAt( new THREE.Vector3( 0, - 1, 0 ) );\n\tthis.add( cameraNY );\n\n\tvar cameraPZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraPZ.up.set( 0, - 1, 0 );\n\tcameraPZ.lookAt( new THREE.Vector3( 0, 0, 1 ) );\n\tthis.add( cameraPZ );\n\n\tvar cameraNZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraNZ.up.set( 0, - 1, 0 );\n\tcameraNZ.lookAt( new THREE.Vector3( 0, 0, - 1 ) );\n\tthis.add( cameraNZ );\n\n\tvar options = { format: THREE.RGBFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter };\n\n\tthis.renderTarget = new THREE.WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\n\n\tthis.updateCubeMap = function ( renderer, scene ) {\n\n\t\tif ( this.parent === null ) this.updateMatrixWorld();\n\n\t\tvar renderTarget = this.renderTarget;\n\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\trenderTarget.activeCubeFace = 0;\n\t\trenderer.render( scene, cameraPX, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 1;\n\t\trenderer.render( scene, cameraNX, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 2;\n\t\trenderer.render( scene, cameraPY, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 3;\n\t\trenderer.render( scene, cameraNY, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 4;\n\t\trenderer.render( scene, cameraPZ, renderTarget );\n\n\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\trenderTarget.activeCubeFace = 5;\n\t\trenderer.render( scene, cameraNZ, renderTarget );\n\n\t\trenderer.setRenderTarget( null );\n\n\t};\n\n};\n\nTHREE.CubeCamera.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.CubeCamera.prototype.constructor = THREE.CubeCamera;\n\n// File:src/cameras/OrthographicCamera.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author arose / http://github.com/arose\n */\n\nTHREE.OrthographicCamera = function ( left, right, top, bottom, near, far ) {\n\n\tTHREE.Camera.call( this );\n\n\tthis.type = 'OrthographicCamera';\n\n\tthis.zoom = 1;\n\tthis.view = null;\n\n\tthis.left = left;\n\tthis.right = right;\n\tthis.top = top;\n\tthis.bottom = bottom;\n\n\tthis.near = ( near !== undefined ) ? near : 0.1;\n\tthis.far = ( far !== undefined ) ? far : 2000;\n\n\tthis.updateProjectionMatrix();\n\n};\n\nTHREE.OrthographicCamera.prototype = Object.assign( Object.create( THREE.Camera.prototype ), {\n\n\tconstructor: THREE.OrthographicCamera,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Camera.prototype.copy.call( this, source );\n\n\t\tthis.left = source.left;\n\t\tthis.right = source.right;\n\t\tthis.top = source.top;\n\t\tthis.bottom = source.bottom;\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\n\t\tthis.zoom = source.zoom;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\treturn this;\n\n\t},\n\n\tsetViewOffset: function( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tthis.view = {\n\t\t\tfullWidth: fullWidth,\n\t\t\tfullHeight: fullHeight,\n\t\t\toffsetX: x,\n\t\t\toffsetY: y,\n\t\t\twidth: width,\n\t\t\theight: height\n\t\t};\n\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tclearViewOffset: function() {\n\n\t\tthis.view = null;\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tupdateProjectionMatrix: function () {\n\n\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\tvar cx = ( this.right + this.left ) / 2;\n\t\tvar cy = ( this.top + this.bottom ) / 2;\n\n\t\tvar left = cx - dx;\n\t\tvar right = cx + dx;\n\t\tvar top = cy + dy;\n\t\tvar bottom = cy - dy;\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\n\t\t\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\n\t\t\tvar scaleW = ( this.right - this.left ) / this.view.width;\n\t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\n\n\t\t\tleft += scaleW * ( this.view.offsetX / zoomW );\n\t\t\tright = left + scaleW * ( this.view.width / zoomW );\n\t\t\ttop -= scaleH * ( this.view.offsetY / zoomH );\n\t\t\tbottom = top - scaleH * ( this.view.height / zoomH );\n\n\t\t}\n\n\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.zoom = this.zoom;\n\t\tdata.object.left = this.left;\n\t\tdata.object.right = this.right;\n\t\tdata.object.top = this.top;\n\t\tdata.object.bottom = this.bottom;\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\treturn data;\n\n\t}\n\n} );\n\n// File:src/cameras/PerspectiveCamera.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author greggman / http://games.greggman.com/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author tschw\n */\n\nTHREE.PerspectiveCamera = function( fov, aspect, near, far ) {\n\n\tTHREE.Camera.call( this );\n\n\tthis.type = 'PerspectiveCamera';\n\n\tthis.fov = fov !== undefined ? fov : 50;\n\tthis.zoom = 1;\n\n\tthis.near = near !== undefined ? near : 0.1;\n\tthis.far = far !== undefined ? far : 2000;\n\tthis.focus = 10;\n\n\tthis.aspect = aspect !== undefined ? aspect : 1;\n\tthis.view = null;\n\n\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\tthis.updateProjectionMatrix();\n\n};\n\nTHREE.PerspectiveCamera.prototype = Object.assign( Object.create( THREE.Camera.prototype ), {\n\n\tconstructor: THREE.PerspectiveCamera,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Camera.prototype.copy.call( this, source );\n\n\t\tthis.fov = source.fov;\n\t\tthis.zoom = source.zoom;\n\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\t\tthis.focus = source.focus;\n\n\t\tthis.aspect = source.aspect;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\tthis.filmGauge = source.filmGauge;\n\t\tthis.filmOffset = source.filmOffset;\n\n\t\treturn this;\n\n\t},\n\n\t/**\n\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t *\n\t * The default film gauge is 35, so that the focal length can be specified for\n\t * a 35mm (full frame) camera.\n\t *\n\t * Values for focal length and film gauge must have the same unit.\n\t */\n\tsetFocalLength: function ( focalLength ) {\n\n\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\tthis.fov = THREE.Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\t/**\n\t * Calculates the focal length from the current .fov and .filmGauge.\n\t */\n\tgetFocalLength: function () {\n\n\t\tvar vExtentSlope = Math.tan( THREE.Math.DEG2RAD * 0.5 * this.fov );\n\n\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t},\n\n\tgetEffectiveFOV: function () {\n\n\t\treturn THREE.Math.RAD2DEG * 2 * Math.atan(\n\t\t\t\tMath.tan( THREE.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t},\n\n\tgetFilmWidth: function () {\n\n\t\t// film not completely covered in portrait format (aspect < 1)\n\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t},\n\n\tgetFilmHeight: function () {\n\n\t\t// film not completely covered in landscape format (aspect > 1)\n\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t},\n\n\t/**\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t * multi-monitor/multi-machine setups.\n\t *\n\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t * the monitors are in grid like this\n\t *\n\t *   +---+---+---+\n\t *   | A | B | C |\n\t *   +---+---+---+\n\t *   | D | E | F |\n\t *   +---+---+---+\n\t *\n\t * then for each monitor you would call it like this\n\t *\n\t *   var w = 1920;\n\t *   var h = 1080;\n\t *   var fullWidth = w * 3;\n\t *   var fullHeight = h * 2;\n\t *\n\t *   --A--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t *   --B--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t *   --C--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t *   --D--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t *   --E--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t *   --F--\n\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t *\n\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t */\n\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\tthis.view = {\n\t\t\tfullWidth: fullWidth,\n\t\t\tfullHeight: fullHeight,\n\t\t\toffsetX: x,\n\t\t\toffsetY: y,\n\t\t\twidth: width,\n\t\t\theight: height\n\t\t};\n\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tclearViewOffset: function() {\n\n\t\tthis.view = null;\n\t\tthis.updateProjectionMatrix();\n\n\t},\n\n\tupdateProjectionMatrix: function () {\n\n\t\tvar near = this.near,\n\t\t\ttop = near * Math.tan(\n\t\t\t\t\tTHREE.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n\t\t\theight = 2 * top,\n\t\t\twidth = this.aspect * height,\n\t\t\tleft = - 0.5 * width,\n\t\t\tview = this.view;\n\n\t\tif ( view !== null ) {\n\n\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\twidth *= view.width / fullWidth;\n\t\t\theight *= view.height / fullHeight;\n\n\t\t}\n\n\t\tvar skew = this.filmOffset;\n\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n\t\tthis.projectionMatrix.makeFrustum(\n\t\t\t\tleft, left + width, top - height, top, near, this.far );\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.fov = this.fov;\n\t\tdata.object.zoom = this.zoom;\n\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\t\tdata.object.focus = this.focus;\n\n\t\tdata.object.aspect = this.aspect;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\tdata.object.filmGauge = this.filmGauge;\n\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\treturn data;\n\n\t}\n\n} );\n\n// File:src/cameras/StereoCamera.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.StereoCamera = function () {\n\n\tthis.type = 'StereoCamera';\n\n\tthis.aspect = 1;\n\n\tthis.cameraL = new THREE.PerspectiveCamera();\n\tthis.cameraL.layers.enable( 1 );\n\tthis.cameraL.matrixAutoUpdate = false;\n\n\tthis.cameraR = new THREE.PerspectiveCamera();\n\tthis.cameraR.layers.enable( 2 );\n\tthis.cameraR.matrixAutoUpdate = false;\n\n};\n\nObject.assign( THREE.StereoCamera.prototype, {\n\n\tupdate: ( function () {\n\n\t\tvar focus, fov, aspect, near, far;\n\n\t\tvar eyeRight = new THREE.Matrix4();\n\t\tvar eyeLeft = new THREE.Matrix4();\n\n\t\treturn function update( camera ) {\n\n\t\t\tvar needsUpdate = focus !== camera.focus || fov !== camera.fov ||\n\t\t\t\t\t\t\t\t\t\t\t\taspect !== camera.aspect * this.aspect || near !== camera.near ||\n\t\t\t\t\t\t\t\t\t\t\t\tfar !== camera.far;\n\n\t\t\tif ( needsUpdate ) {\n\n\t\t\t\tfocus = camera.focus;\n\t\t\t\tfov = camera.fov;\n\t\t\t\taspect = camera.aspect * this.aspect;\n\t\t\t\tnear = camera.near;\n\t\t\t\tfar = camera.far;\n\n\t\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\tvar eyeSep = 0.064 / 2;\n\t\t\t\tvar eyeSepOnProjection = eyeSep * near / focus;\n\t\t\t\tvar ymax = near * Math.tan( THREE.Math.DEG2RAD * fov * 0.5 );\n\t\t\t\tvar xmin, xmax;\n\n\t\t\t\t// translate xOffset\n\n\t\t\t\teyeLeft.elements[ 12 ] = - eyeSep;\n\t\t\t\teyeRight.elements[ 12 ] = eyeSep;\n\n\t\t\t\t// for left eye\n\n\t\t\t\txmin = - ymax * aspect + eyeSepOnProjection;\n\t\t\t\txmax = ymax * aspect + eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t\t// for right eye\n\n\t\t\t\txmin = - ymax * aspect - eyeSepOnProjection;\n\t\t\t\txmax = ymax * aspect - eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t}\n\n\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );\n\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );\n\n\t\t};\n\n\t} )()\n\n} );\n\n// File:src/lights/Light.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Light = function ( color, intensity ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Light';\n\n\tthis.color = new THREE.Color( color );\n\tthis.intensity = intensity !== undefined ? intensity : 1;\n\n\tthis.receiveShadow = undefined;\n\n};\n\nTHREE.Light.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.Light,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Object3D.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.intensity = source.intensity;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.color = this.color.getHex();\n\t\tdata.object.intensity = this.intensity;\n\n\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\n\t\treturn data;\n\n\t}\n\n} );\n\n// File:src/lights/LightShadow.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.LightShadow = function ( camera ) {\n\n\tthis.camera = camera;\n\n\tthis.bias = 0;\n\tthis.radius = 1;\n\n\tthis.mapSize = new THREE.Vector2( 512, 512 );\n\n\tthis.map = null;\n\tthis.matrix = new THREE.Matrix4();\n\n};\n\nObject.assign( THREE.LightShadow.prototype, {\n\n\tcopy: function ( source ) {\n\n\t\tthis.camera = source.camera.clone();\n\n\t\tthis.bias = source.bias;\n\t\tthis.radius = source.radius;\n\n\t\tthis.mapSize.copy( source.mapSize );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n} );\n\n// File:src/lights/AmbientLight.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.AmbientLight = function ( color, intensity ) {\n\n\tTHREE.Light.call( this, color, intensity );\n\n\tthis.type = 'AmbientLight';\n\n\tthis.castShadow = undefined;\n\n};\n\nTHREE.AmbientLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\n\n\tconstructor: THREE.AmbientLight\n\n} );\n\n// File:src/lights/DirectionalLight.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.DirectionalLight = function ( color, intensity ) {\n\n\tTHREE.Light.call( this, color, intensity );\n\n\tthis.type = 'DirectionalLight';\n\n\tthis.position.set( 0, 1, 0 );\n\tthis.updateMatrix();\n\n\tthis.target = new THREE.Object3D();\n\n\tthis.shadow = new THREE.DirectionalLightShadow();\n\n};\n\nTHREE.DirectionalLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\n\n\tconstructor: THREE.DirectionalLight,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Light.prototype.copy.call( this, source );\n\n\t\tthis.target = source.target.clone();\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/lights/DirectionalLightShadow.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.DirectionalLightShadow = function ( light ) {\n\n\tTHREE.LightShadow.call( this, new THREE.OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n};\n\nTHREE.DirectionalLightShadow.prototype = Object.assign( Object.create( THREE.LightShadow.prototype ), {\n\n\tconstructor: THREE.DirectionalLightShadow\n\n} );\n\n// File:src/lights/HemisphereLight.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.HemisphereLight = function ( skyColor, groundColor, intensity ) {\n\n\tTHREE.Light.call( this, skyColor, intensity );\n\n\tthis.type = 'HemisphereLight';\n\n\tthis.castShadow = undefined;\n\n\tthis.position.set( 0, 1, 0 );\n\tthis.updateMatrix();\n\n\tthis.groundColor = new THREE.Color( groundColor );\n\n};\n\nTHREE.HemisphereLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\n\n\tconstructor: THREE.HemisphereLight,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Light.prototype.copy.call( this, source );\n\n\t\tthis.groundColor.copy( source.groundColor );\n\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/lights/PointLight.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\n\nTHREE.PointLight = function ( color, intensity, distance, decay ) {\n\n\tTHREE.Light.call( this, color, intensity );\n\n\tthis.type = 'PointLight';\n\n\tObject.defineProperty( this, 'power', {\n\t\tget: function () {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\treturn this.intensity * 4 * Math.PI;\n\n\t\t},\n\t\tset: function ( power ) {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\tthis.intensity = power / ( 4 * Math.PI );\n\t\t}\n\t} );\n\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\tthis.shadow = new THREE.LightShadow( new THREE.PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n};\n\nTHREE.PointLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\n\n\tconstructor: THREE.PointLight,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Light.prototype.copy.call( this, source );\n\n\t\tthis.distance = source.distance;\n\t\tthis.decay = source.decay;\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/lights/SpotLight.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.SpotLight = function ( color, intensity, distance, angle, penumbra, decay ) {\n\n\tTHREE.Light.call( this, color, intensity );\n\n\tthis.type = 'SpotLight';\n\n\tthis.position.set( 0, 1, 0 );\n\tthis.updateMatrix();\n\n\tthis.target = new THREE.Object3D();\n\n\tObject.defineProperty( this, 'power', {\n\t\tget: function () {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\treturn this.intensity * Math.PI;\n\t\t},\n\t\tset: function ( power ) {\n\t\t\t// intensity = power per solid angle.\n\t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n\t\t\tthis.intensity = power / Math.PI;\n\t\t}\n\t} );\n\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\tthis.shadow = new THREE.SpotLightShadow();\n\n};\n\nTHREE.SpotLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\n\n\tconstructor: THREE.SpotLight,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Light.prototype.copy.call( this, source );\n\n\t\tthis.distance = source.distance;\n\t\tthis.angle = source.angle;\n\t\tthis.penumbra = source.penumbra;\n\t\tthis.decay = source.decay;\n\n\t\tthis.target = source.target.clone();\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/lights/SpotLightShadow.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.SpotLightShadow = function () {\n\n\tTHREE.LightShadow.call( this, new THREE.PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n};\n\nTHREE.SpotLightShadow.prototype = Object.assign( Object.create( THREE.LightShadow.prototype ), {\n\n\tconstructor: THREE.SpotLightShadow,\n\n\tupdate: function ( light ) {\n\n\t\tvar fov = THREE.Math.RAD2DEG * 2 * light.angle;\n\t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t\tvar far = light.distance || 500;\n\n\t\tvar camera = this.camera;\n\n\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\tcamera.fov = fov;\n\t\t\tcamera.aspect = aspect;\n\t\t\tcamera.far = far;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t}\n\n\t}\n\n} );\n\n// File:src/loaders/AudioLoader.js\n\n/**\n * @author Reece Aaron Lecrivain / http://reecenotes.com/\n */\n\nTHREE.AudioLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nObject.assign( THREE.AudioLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tvar context = THREE.AudioContext;\n\n\t\t\tcontext.decodeAudioData( buffer, function ( audioBuffer ) {\n\n\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t} );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n} );\n\n// File:src/loaders/Cache.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Cache = {\n\n\tenabled: false,\n\n\tfiles: {},\n\n\tadd: function ( key, file ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\tthis.files[ key ] = file;\n\n\t},\n\n\tget: function ( key ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\treturn this.files[ key ];\n\n\t},\n\n\tremove: function ( key ) {\n\n\t\tdelete this.files[ key ];\n\n\t},\n\n\tclear: function () {\n\n\t\tthis.files = {};\n\n\t}\n\n};\n\n// File:src/loaders/Loader.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Loader = function () {\n\n\tthis.onLoadStart = function () {};\n\tthis.onLoadProgress = function () {};\n\tthis.onLoadComplete = function () {};\n\n};\n\nTHREE.Loader.prototype = {\n\n\tconstructor: THREE.Loader,\n\n\tcrossOrigin: undefined,\n\n\textractUrlBase: function ( url ) {\n\n\t\tvar parts = url.split( '/' );\n\n\t\tif ( parts.length === 1 ) return './';\n\n\t\tparts.pop();\n\n\t\treturn parts.join( '/' ) + '/';\n\n\t},\n\n\tinitMaterials: function ( materials, texturePath, crossOrigin ) {\n\n\t\tvar array = [];\n\n\t\tfor ( var i = 0; i < materials.length; ++ i ) {\n\n\t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\n\n\t\t}\n\n\t\treturn array;\n\n\t},\n\n\tcreateMaterial: ( function () {\n\n\t\tvar color, textureLoader, materialLoader;\n\n\t\treturn function createMaterial( m, texturePath, crossOrigin ) {\n\n\t\t\tif ( color === undefined ) color = new THREE.Color();\n\t\t\tif ( textureLoader === undefined ) textureLoader = new THREE.TextureLoader();\n\t\t\tif ( materialLoader === undefined ) materialLoader = new THREE.MaterialLoader();\n\n\t\t\t// convert from old material format\n\n\t\t\tvar textures = {};\n\n\t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\n\n\t\t\t\tvar fullPath = texturePath + path;\n\t\t\t\tvar loader = THREE.Loader.Handlers.get( fullPath );\n\n\t\t\t\tvar texture;\n\n\t\t\t\tif ( loader !== null ) {\n\n\t\t\t\t\ttexture = loader.load( fullPath );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttextureLoader.setCrossOrigin( crossOrigin );\n\t\t\t\t\ttexture = textureLoader.load( fullPath );\n\n\t\t\t\t}\n\n\t\t\t\tif ( repeat !== undefined ) {\n\n\t\t\t\t\ttexture.repeat.fromArray( repeat );\n\n\t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = THREE.RepeatWrapping;\n\t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = THREE.RepeatWrapping;\n\n\t\t\t\t}\n\n\t\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\t\ttexture.offset.fromArray( offset );\n\n\t\t\t\t}\n\n\t\t\t\tif ( wrap !== undefined ) {\n\n\t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = THREE.RepeatWrapping;\n\t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = THREE.MirroredRepeatWrapping;\n\n\t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = THREE.RepeatWrapping;\n\t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = THREE.MirroredRepeatWrapping;\n\n\t\t\t\t}\n\n\t\t\t\tif ( anisotropy !== undefined ) {\n\n\t\t\t\t\ttexture.anisotropy = anisotropy;\n\n\t\t\t\t}\n\n\t\t\t\tvar uuid = THREE.Math.generateUUID();\n\n\t\t\t\ttextures[ uuid ] = texture;\n\n\t\t\t\treturn uuid;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar json = {\n\t\t\t\tuuid: THREE.Math.generateUUID(),\n\t\t\t\ttype: 'MeshLambertMaterial'\n\t\t\t};\n\n\t\t\tfor ( var name in m ) {\n\n\t\t\t\tvar value = m[ name ];\n\n\t\t\t\tswitch ( name ) {\n\t\t\t\t\tcase 'DbgColor':\n\t\t\t\t\tcase 'DbgIndex':\n\t\t\t\t\tcase 'opticalDensity':\n\t\t\t\t\tcase 'illumination':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'DbgName':\n\t\t\t\t\t\tjson.name = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'blending':\n\t\t\t\t\t\tjson.blending = THREE[ value ];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'colorAmbient':\n\t\t\t\t\tcase 'mapAmbient':\n\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'colorDiffuse':\n\t\t\t\t\t\tjson.color = color.fromArray( value ).getHex();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'colorSpecular':\n\t\t\t\t\t\tjson.specular = color.fromArray( value ).getHex();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'colorEmissive':\n\t\t\t\t\t\tjson.emissive = color.fromArray( value ).getHex();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'specularCoef':\n\t\t\t\t\t\tjson.shininess = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'shading':\n\t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\n\t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\n\t\t\t\t\t\tif ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapDiffuse':\n\t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapDiffuseRepeat':\n\t\t\t\t\tcase 'mapDiffuseOffset':\n\t\t\t\t\tcase 'mapDiffuseWrap':\n\t\t\t\t\tcase 'mapDiffuseAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapEmissive':\n\t\t\t\t\t\tjson.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapEmissiveRepeat':\n\t\t\t\t\tcase 'mapEmissiveOffset':\n\t\t\t\t\tcase 'mapEmissiveWrap':\n\t\t\t\t\tcase 'mapEmissiveAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapLight':\n\t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapLightRepeat':\n\t\t\t\t\tcase 'mapLightOffset':\n\t\t\t\t\tcase 'mapLightWrap':\n\t\t\t\t\tcase 'mapLightAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapAO':\n\t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapAORepeat':\n\t\t\t\t\tcase 'mapAOOffset':\n\t\t\t\t\tcase 'mapAOWrap':\n\t\t\t\t\tcase 'mapAOAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapBump':\n\t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapBumpScale':\n\t\t\t\t\t\tjson.bumpScale = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapBumpRepeat':\n\t\t\t\t\tcase 'mapBumpOffset':\n\t\t\t\t\tcase 'mapBumpWrap':\n\t\t\t\t\tcase 'mapBumpAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapNormal':\n\t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapNormalFactor':\n\t\t\t\t\t\tjson.normalScale = [ value, value ];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapNormalRepeat':\n\t\t\t\t\tcase 'mapNormalOffset':\n\t\t\t\t\tcase 'mapNormalWrap':\n\t\t\t\t\tcase 'mapNormalAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapSpecular':\n\t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapSpecularRepeat':\n\t\t\t\t\tcase 'mapSpecularOffset':\n\t\t\t\t\tcase 'mapSpecularWrap':\n\t\t\t\t\tcase 'mapSpecularAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapMetalness':\n\t\t\t\t\t\tjson.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapMetalnessRepeat':\n\t\t\t\t\tcase 'mapMetalnessOffset':\n\t\t\t\t\tcase 'mapMetalnessWrap':\n\t\t\t\t\tcase 'mapMetalnessAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapRoughness':\n\t\t\t\t\t\tjson.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapRoughnessRepeat':\n\t\t\t\t\tcase 'mapRoughnessOffset':\n\t\t\t\t\tcase 'mapRoughnessWrap':\n\t\t\t\t\tcase 'mapRoughnessAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapAlpha':\n\t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mapAlphaRepeat':\n\t\t\t\t\tcase 'mapAlphaOffset':\n\t\t\t\t\tcase 'mapAlphaWrap':\n\t\t\t\t\tcase 'mapAlphaAnisotropy':\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'flipSided':\n\t\t\t\t\t\tjson.side = THREE.BackSide;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'doubleSided':\n\t\t\t\t\t\tjson.side = THREE.DoubleSide;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'transparency':\n\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );\n\t\t\t\t\t\tjson.opacity = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'depthTest':\n\t\t\t\t\tcase 'depthWrite':\n\t\t\t\t\tcase 'colorWrite':\n\t\t\t\t\tcase 'opacity':\n\t\t\t\t\tcase 'reflectivity':\n\t\t\t\t\tcase 'transparent':\n\t\t\t\t\tcase 'visible':\n\t\t\t\t\tcase 'wireframe':\n\t\t\t\t\t\tjson[ name ] = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'vertexColors':\n\t\t\t\t\t\tif ( value === true ) json.vertexColors = THREE.VertexColors;\n\t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = THREE.FaceColors;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'THREE.Loader.createMaterial: Unsupported', name, value );\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.type === 'MeshBasicMaterial' ) delete json.emissive;\n\t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\n\n\t\t\tif ( json.opacity < 1 ) json.transparent = true;\n\n\t\t\tmaterialLoader.setTextures( textures );\n\n\t\t\treturn materialLoader.parse( json );\n\n\t\t};\n\n\t} )()\n\n};\n\nTHREE.Loader.Handlers = {\n\n\thandlers: [],\n\n\tadd: function ( regex, loader ) {\n\n\t\tthis.handlers.push( regex, loader );\n\n\t},\n\n\tget: function ( file ) {\n\n\t\tvar handlers = this.handlers;\n\n\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\tvar regex = handlers[ i ];\n\t\t\tvar loader  = handlers[ i + 1 ];\n\n\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\treturn loader;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n};\n\n// File:src/loaders/XHRLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.XHRLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nObject.assign( THREE.XHRLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\tvar scope = this;\n\n\t\tvar cached = THREE.Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tif ( onLoad ) {\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tonLoad( cached );\n\n\t\t\t\t}, 0 );\n\n\t\t\t}\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tvar request = new XMLHttpRequest();\n\t\trequest.overrideMimeType( 'text/plain' );\n\t\trequest.open( 'GET', url, true );\n\n\t\trequest.addEventListener( 'load', function ( event ) {\n\n\t\t\tvar response = event.target.response;\n\n\t\t\tTHREE.Cache.add( url, response );\n\n\t\t\tif ( this.status === 200 ) {\n\n\t\t\t\tif ( onLoad ) onLoad( response );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} else if ( this.status === 0 ) {\n\n\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\tconsole.warn( 'THREE.XHRLoader: HTTP Status 0 received.' );\n\n\t\t\t\tif ( onLoad ) onLoad( response );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} else {\n\n\t\t\t\tif ( onError ) onError( event );\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, false );\n\n\t\tif ( onProgress !== undefined ) {\n\n\t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\tonProgress( event );\n\n\t\t\t}, false );\n\n\t\t}\n\n\t\trequest.addEventListener( 'error', function ( event ) {\n\n\t\t\tif ( onError ) onError( event );\n\n\t\t\tscope.manager.itemError( url );\n\n\t\t}, false );\n\n\t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\n\t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\n\n\t\trequest.send( null );\n\n\t\tscope.manager.itemStart( url );\n\n\t\treturn request;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t},\n\n\tsetResponseType: function ( value ) {\n\n\t\tthis.responseType = value;\n\t\treturn this;\n\n\t},\n\n\tsetWithCredentials: function ( value ) {\n\n\t\tthis.withCredentials = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/loaders/FontLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.FontLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nObject.assign( THREE.FontLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tvar json;\n\n\t\t\ttry {\n\n\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\n\t\t\t}\n\n\t\t\tvar font = scope.parse( json );\n\n\t\t\tif ( onLoad ) onLoad( font );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( json ) {\n\n\t\treturn new THREE.Font( json );\n\n\t}\n\n} );\n\n// File:src/loaders/ImageLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.ImageLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nObject.assign( THREE.ImageLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n\t\timage.onload = function () {\n\n\t\t\tURL.revokeObjectURL( image.src );\n\t\t\tif ( onLoad ) onLoad( image );\n\n\t\t};\n\n\t\tif ( url.indexOf( 'data:' ) === 0 ) {\n\n\t\t\timage.src = url;\n\n\t\t} else {\n\n\t\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'blob' );\n\t\t\tloader.load( url, function ( blob ) {\n\n\t\t\t\timage.src = URL.createObjectURL( blob );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\treturn image;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/loaders/JSONLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.JSONLoader = function ( manager ) {\n\n\tif ( typeof manager === 'boolean' ) {\n\n\t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\n\t\tmanager = undefined;\n\n\t}\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\tthis.withCredentials = false;\n\n};\n\nObject.assign( THREE.JSONLoader.prototype, {\n\n\tload: function( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar texturePath = this.texturePath && ( typeof this.texturePath === \"string\" ) ? this.texturePath : THREE.Loader.prototype.extractUrlBase( url );\n\n\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tvar json = JSON.parse( text );\n\t\t\tvar metadata = json.metadata;\n\n\t\t\tif ( metadata !== undefined ) {\n\n\t\t\t\tvar type = metadata.type;\n\n\t\t\t\tif ( type !== undefined ) {\n\n\t\t\t\t\tif ( type.toLowerCase() === 'object' ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( type.toLowerCase() === 'scene' ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar object = scope.parse( json, texturePath );\n\t\t\tonLoad( object.geometry, object.materials );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetTexturePath: function ( value ) {\n\n\t\tthis.texturePath = value;\n\n\t},\n\n\tparse: function ( json, texturePath ) {\n\n\t\tvar geometry = new THREE.Geometry(),\n\t\tscale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;\n\n\t\tparseModel( scale );\n\n\t\tparseSkin();\n\t\tparseMorphing( scale );\n\t\tparseAnimations();\n\n\t\tgeometry.computeFaceNormals();\n\t\tgeometry.computeBoundingSphere();\n\n\t\tfunction parseModel( scale ) {\n\n\t\t\tfunction isBitSet( value, position ) {\n\n\t\t\t\treturn value & ( 1 << position );\n\n\t\t\t}\n\n\t\t\tvar i, j, fi,\n\n\t\t\toffset, zLength,\n\n\t\tcolorIndex, normalIndex, uvIndex, materialIndex,\n\n\t\t\ttype,\n\t\t\tisQuad,\n\t\t\thasMaterial,\n\t\t\thasFaceVertexUv,\n\t\t\thasFaceNormal, hasFaceVertexNormal,\n\t\t\thasFaceColor, hasFaceVertexColor,\n\n\t\tvertex, face, faceA, faceB, hex, normal,\n\n\t\t\tuvLayer, uv, u, v,\n\n\t\t\tfaces = json.faces,\n\t\t\tvertices = json.vertices,\n\t\t\tnormals = json.normals,\n\t\t\tcolors = json.colors,\n\n\t\t\tnUvLayers = 0;\n\n\t\t\tif ( json.uvs !== undefined ) {\n\n\t\t\t\t// disregard empty arrays\n\n\t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\n\n\t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\toffset = 0;\n\t\t\tzLength = vertices.length;\n\n\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\tvertex = new THREE.Vector3();\n\n\t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\n\t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\n\t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\n\n\t\t\t\tgeometry.vertices.push( vertex );\n\n\t\t\t}\n\n\t\t\toffset = 0;\n\t\t\tzLength = faces.length;\n\n\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\ttype = faces[ offset ++ ];\n\n\n\t\t\t\tisQuad              = isBitSet( type, 0 );\n\t\t\t\thasMaterial         = isBitSet( type, 1 );\n\t\t\t\thasFaceVertexUv     = isBitSet( type, 3 );\n\t\t\t\thasFaceNormal       = isBitSet( type, 4 );\n\t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\n\t\t\t\thasFaceColor\t     = isBitSet( type, 6 );\n\t\t\t\thasFaceVertexColor  = isBitSet( type, 7 );\n\n\t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\n\t\t\t\tif ( isQuad ) {\n\n\t\t\t\t\tfaceA = new THREE.Face3();\n\t\t\t\t\tfaceA.a = faces[ offset ];\n\t\t\t\t\tfaceA.b = faces[ offset + 1 ];\n\t\t\t\t\tfaceA.c = faces[ offset + 3 ];\n\n\t\t\t\t\tfaceB = new THREE.Face3();\n\t\t\t\t\tfaceB.a = faces[ offset + 1 ];\n\t\t\t\t\tfaceB.b = faces[ offset + 2 ];\n\t\t\t\t\tfaceB.c = faces[ offset + 3 ];\n\n\t\t\t\t\toffset += 4;\n\n\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\tfaceA.materialIndex = materialIndex;\n\t\t\t\t\t\tfaceB.materialIndex = materialIndex;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\n\n\t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\n\n\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\tuv = new THREE.Vector2( u, v );\n\n\t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\n\t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\tfaceA.normal.set(\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tnormal = new THREE.Vector3(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\n\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\n\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\tfaceA.color.setHex( hex );\n\t\t\t\t\t\tfaceB.color.setHex( hex );\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new THREE.Color( hex ) );\n\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new THREE.Color( hex ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.faces.push( faceA );\n\t\t\t\t\tgeometry.faces.push( faceB );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface = new THREE.Face3();\n\t\t\t\t\tface.a = faces[ offset ++ ];\n\t\t\t\t\tface.b = faces[ offset ++ ];\n\t\t\t\t\tface.c = faces[ offset ++ ];\n\n\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\tface.materialIndex = materialIndex;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\n\t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\tuv = new THREE.Vector2( u, v );\n\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\tface.normal.set(\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tnormal = new THREE.Vector3(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tface.vertexNormals.push( normal );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tface.vertexColors.push( new THREE.Color( colors[ colorIndex ] ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.faces.push( face );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseSkin() {\n\n\t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\n\n\t\t\tif ( json.skinWeights ) {\n\n\t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\tvar x =                               json.skinWeights[ i ];\n\t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\n\t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\n\t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\n\n\t\t\t\t\tgeometry.skinWeights.push( new THREE.Vector4( x, y, z, w ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.skinIndices ) {\n\n\t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\tvar a =                               json.skinIndices[ i ];\n\t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\n\t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\n\t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\n\n\t\t\t\t\tgeometry.skinIndices.push( new THREE.Vector4( a, b, c, d ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry.bones = json.bones;\n\n\t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\n\n\t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\n\t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseMorphing( scale ) {\n\n\t\t\tif ( json.morphTargets !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\tgeometry.morphTargets[ i ] = {};\n\t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\n\t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\n\n\t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\n\t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\n\n\t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\n\n\t\t\t\t\t\tvar vertex = new THREE.Vector3();\n\t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\n\t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\n\t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\n\n\t\t\t\t\t\tdstVertices.push( vertex );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\n\n\t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\n\n\t\t\t\tvar faces = geometry.faces;\n\t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\n\n\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseAnimations() {\n\n\t\t\tvar outputAnimations = [];\n\n\t\t\t// parse old style Bone/Hierarchy animations\n\t\t\tvar animations = [];\n\n\t\t\tif ( json.animation !== undefined ) {\n\n\t\t\t\tanimations.push( json.animation );\n\n\t\t\t}\n\n\t\t\tif ( json.animations !== undefined ) {\n\n\t\t\t\tif ( json.animations.length ) {\n\n\t\t\t\t\tanimations = animations.concat( json.animations );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tanimations.push( json.animations );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\n\n\t\t\t\tvar clip = THREE.AnimationClip.parseAnimation( animations[ i ], geometry.bones );\n\t\t\t\tif ( clip ) outputAnimations.push( clip );\n\n\t\t\t}\n\n\t\t\t// parse implicit morph animations\n\t\t\tif ( geometry.morphTargets ) {\n\n\t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\n\t\t\t\tvar morphAnimationClips = THREE.AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\n\t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\n\n\t\t\t}\n\n\t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\n\n\t\t}\n\n\t\tif ( json.materials === undefined || json.materials.length === 0 ) {\n\n\t\t\treturn { geometry: geometry };\n\n\t\t} else {\n\n\t\t\tvar materials = THREE.Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\n\n\t\t\treturn { geometry: geometry, materials: materials };\n\n\t\t}\n\n\t}\n\n} );\n\n// File:src/loaders/LoadingManager.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.LoadingManager = function ( onLoad, onProgress, onError ) {\n\n\tvar scope = this;\n\n\tvar isLoading = false, itemsLoaded = 0, itemsTotal = 0;\n\n\tthis.onStart = undefined;\n\tthis.onLoad = onLoad;\n\tthis.onProgress = onProgress;\n\tthis.onError = onError;\n\n\tthis.itemStart = function ( url ) {\n\n\t\titemsTotal ++;\n\n\t\tif ( isLoading === false ) {\n\n\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t}\n\n\t\tisLoading = true;\n\n\t};\n\n\tthis.itemEnd = function ( url ) {\n\n\t\titemsLoaded ++;\n\n\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t}\n\n\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\tisLoading = false;\n\n\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\tscope.onLoad();\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tthis.itemError = function ( url ) {\n\n\t\tif ( scope.onError !== undefined ) {\n\n\t\t\tscope.onError( url );\n\n\t\t}\n\n\t};\n\n};\n\nTHREE.DefaultLoadingManager = new THREE.LoadingManager();\n\n// File:src/loaders/BufferGeometryLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.BufferGeometryLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nObject.assign( THREE.BufferGeometryLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new THREE.XHRLoader( scope.manager );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( json ) {\n\n\t\tvar geometry = new THREE.BufferGeometry();\n\n\t\tvar index = json.data.index;\n\n\t\tvar TYPED_ARRAYS = {\n\t\t\t'Int8Array': Int8Array,\n\t\t\t'Uint8Array': Uint8Array,\n\t\t\t'Uint8ClampedArray': Uint8ClampedArray,\n\t\t\t'Int16Array': Int16Array,\n\t\t\t'Uint16Array': Uint16Array,\n\t\t\t'Int32Array': Int32Array,\n\t\t\t'Uint32Array': Uint32Array,\n\t\t\t'Float32Array': Float32Array,\n\t\t\t'Float64Array': Float64Array\n\t\t};\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n\t\t\tgeometry.setIndex( new THREE.BufferAttribute( typedArray, 1 ) );\n\n\t\t}\n\n\t\tvar attributes = json.data.attributes;\n\n\t\tfor ( var key in attributes ) {\n\n\t\t\tvar attribute = attributes[ key ];\n\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\n\t\t\tgeometry.addAttribute( key, new THREE.BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );\n\n\t\t}\n\n\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\tif ( groups !== undefined ) {\n\n\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\n\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar boundingSphere = json.data.boundingSphere;\n\n\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\tvar center = new THREE.Vector3();\n\n\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t}\n\n\t\t\tgeometry.boundingSphere = new THREE.Sphere( center, boundingSphere.radius );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n} );\n\n// File:src/loaders/MaterialLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.MaterialLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\tthis.textures = {};\n\n};\n\nObject.assign( THREE.MaterialLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new THREE.XHRLoader( scope.manager );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetTextures: function ( value ) {\n\n\t\tthis.textures = value;\n\n\t},\n\n\tgetTexture: function ( name ) {\n\n\t\tvar textures = this.textures;\n\n\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t}\n\n\t\treturn textures[ name ];\n\n\t},\n\n\tparse: function ( json ) {\n\n\t\tvar material = new THREE[ json.type ];\n\n\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t\tif ( json.name !== undefined ) material.name = json.name;\n\t\tif ( json.color !== undefined ) material.color.setHex( json.color );\n\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\n\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t\tif ( json.uniforms !== undefined ) material.uniforms = json.uniforms;\n\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\n\t\tif ( json.shading !== undefined ) material.shading = json.shading;\n\t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t\tif ( json.side !== undefined ) material.side = json.side;\n\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\n\t\t// for PointsMaterial\n\t\tif ( json.size !== undefined ) material.size = json.size;\n\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n\t\t// maps\n\n\t\tif ( json.map !== undefined ) material.map = this.getTexture( json.map );\n\n\t\tif ( json.alphaMap !== undefined ) {\n\n\t\t\tmaterial.alphaMap = this.getTexture( json.alphaMap );\n\t\t\tmaterial.transparent = true;\n\n\t\t}\n\n\t\tif ( json.bumpMap !== undefined ) material.bumpMap = this.getTexture( json.bumpMap );\n\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n\t\tif ( json.normalMap !== undefined ) material.normalMap = this.getTexture( json.normalMap );\n\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\tvar normalScale = json.normalScale;\n\n\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t}\n\n\t\t\tmaterial.normalScale = new THREE.Vector2().fromArray( normalScale );\n\n\t\t}\n\n\t\tif ( json.displacementMap !== undefined ) material.displacementMap = this.getTexture( json.displacementMap );\n\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = this.getTexture( json.roughnessMap );\n\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = this.getTexture( json.metalnessMap );\n\n\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = this.getTexture( json.emissiveMap );\n\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n\t\tif ( json.specularMap !== undefined ) material.specularMap = this.getTexture( json.specularMap );\n\n\t\tif ( json.envMap !== undefined ) {\n\n\t\t\tmaterial.envMap = this.getTexture( json.envMap );\n\t\t\tmaterial.combine = THREE.MultiplyOperation;\n\n\t\t}\n\n\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\n\t\tif ( json.lightMap !== undefined ) material.lightMap = this.getTexture( json.lightMap );\n\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n\t\tif ( json.aoMap !== undefined ) material.aoMap = this.getTexture( json.aoMap );\n\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n\t\t// MultiMaterial\n\n\t\tif ( json.materials !== undefined ) {\n\n\t\t\tfor ( var i = 0, l = json.materials.length; i < l; i ++ ) {\n\n\t\t\t\tmaterial.materials.push( this.parse( json.materials[ i ] ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn material;\n\n\t}\n\n} );\n\n// File:src/loaders/ObjectLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.ObjectLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\tthis.texturePath = '';\n\n};\n\nObject.assign( THREE.ObjectLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tif ( this.texturePath === '' ) {\n\n\t\t\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\n\n\t\t}\n\n\t\tvar scope = this;\n\n\t\tvar loader = new THREE.XHRLoader( scope.manager );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tscope.parse( JSON.parse( text ), onLoad );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetTexturePath: function ( value ) {\n\n\t\tthis.texturePath = value;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\n\t},\n\n\tparse: function ( json, onLoad ) {\n\n\t\tvar geometries = this.parseGeometries( json.geometries );\n\n\t\tvar images = this.parseImages( json.images, function () {\n\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t} );\n\n\t\tvar textures  = this.parseTextures( json.textures, images );\n\t\tvar materials = this.parseMaterials( json.materials, textures );\n\n\t\tvar object = this.parseObject( json.object, geometries, materials );\n\n\t\tif ( json.animations ) {\n\n\t\t\tobject.animations = this.parseAnimations( json.animations );\n\n\t\t}\n\n\t\tif ( json.images === undefined || json.images.length === 0 ) {\n\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t}\n\n\t\treturn object;\n\n\t},\n\n\tparseGeometries: function ( json ) {\n\n\t\tvar geometries = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tvar geometryLoader = new THREE.JSONLoader();\n\t\t\tvar bufferGeometryLoader = new THREE.BufferGeometryLoader();\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar geometry;\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\tcase 'PlaneBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\tdata.heightSegments\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.depth,\n\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.depthSegments\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\tcase 'CircleBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\tcase 'CylinderBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.radiusTop,\n\t\t\t\t\t\t\tdata.radiusBottom,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\tcase 'ConeBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE [ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\tcase 'SphereBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\tdata.phiLength,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\tcase 'TetrahedronGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.detail\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\tcase 'RingBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.innerRadius,\n\t\t\t\t\t\t\tdata.outerRadius,\n\t\t\t\t\t\t\tdata.thetaSegments,\n\t\t\t\t\t\t\tdata.phiSegments,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\tcase 'TorusBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\tdata.arc\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.p,\n\t\t\t\t\t\t\tdata.q\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\tcase 'LatheBufferGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\n\t\t\t\t\t\t\tdata.points,\n\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\tdata.phiLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'BufferGeometry':\n\n\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Geometry':\n\n\t\t\t\t\t\tgeometry = geometryLoader.parse( data.data, this.texturePath ).geometry;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\n\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn geometries;\n\n\t},\n\n\tparseMaterials: function ( json, textures ) {\n\n\t\tvar materials = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tvar loader = new THREE.MaterialLoader();\n\t\t\tloader.setTextures( textures );\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar material = loader.parse( json[ i ] );\n\t\t\t\tmaterials[ material.uuid ] = material;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn materials;\n\n\t},\n\n\tparseAnimations: function ( json ) {\n\n\t\tvar animations = [];\n\n\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\tvar clip = THREE.AnimationClip.parse( json[ i ] );\n\n\t\t\tanimations.push( clip );\n\n\t\t}\n\n\t\treturn animations;\n\n\t},\n\n\tparseImages: function ( json, onLoad ) {\n\n\t\tvar scope = this;\n\t\tvar images = {};\n\n\t\tfunction loadImage( url ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn loader.load( url, function () {\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\tvar manager = new THREE.LoadingManager( onLoad );\n\n\t\t\tvar loader = new THREE.ImageLoader( manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar image = json[ i ];\n\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\n\n\t\t\t\timages[ image.uuid ] = loadImage( path );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn images;\n\n\t},\n\n\tparseTextures: function ( json, images ) {\n\n\t\tfunction parseConstant( value ) {\n\n\t\t\tif ( typeof( value ) === 'number' ) return value;\n\n\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\treturn THREE[ value ];\n\n\t\t}\n\n\t\tvar textures = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t}\n\n\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t}\n\n\t\t\t\tvar texture = new THREE.Texture( images[ data.image ] );\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping );\n\t\t\t\tif ( data.offset !== undefined ) texture.offset = new THREE.Vector2( data.offset[ 0 ], data.offset[ 1 ] );\n\t\t\t\tif ( data.repeat !== undefined ) texture.repeat = new THREE.Vector2( data.repeat[ 0 ], data.repeat[ 1 ] );\n\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter );\n\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter );\n\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\t\t\t\tif ( Array.isArray( data.wrap ) ) {\n\n\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ] );\n\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ] );\n\n\t\t\t\t}\n\n\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn textures;\n\n\t},\n\n\tparseObject: function () {\n\n\t\tvar matrix = new THREE.Matrix4();\n\n\t\treturn function parseObject( data, geometries, materials ) {\n\n\t\t\tvar object;\n\n\t\t\tfunction getGeometry( name ) {\n\n\t\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn geometries[ name ];\n\n\t\t\t}\n\n\t\t\tfunction getMaterial( name ) {\n\n\t\t\t\tif ( name === undefined ) return undefined;\n\n\t\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn materials[ name ];\n\n\t\t\t}\n\n\t\t\tswitch ( data.type ) {\n\n\t\t\t\tcase 'Scene':\n\n\t\t\t\t\tobject = new THREE.Scene();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\t\tobject = new THREE.PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n\t\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n\t\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n\t\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\t\tobject = new THREE.OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientLight':\n\n\t\t\t\t\tobject = new THREE.AmbientLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DirectionalLight':\n\n\t\t\t\t\tobject = new THREE.DirectionalLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\n\t\t\t\t\tobject = new THREE.PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\n\t\t\t\t\tobject = new THREE.SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\n\t\t\t\t\tobject = new THREE.HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Mesh':\n\n\t\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t\t\t\t\tvar material = getMaterial( data.material );\n\n\t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\n\n\t\t\t\t\t\tobject = new THREE.SkinnedMesh( geometry, material );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tobject = new THREE.Mesh( geometry, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LOD':\n\n\t\t\t\t\tobject = new THREE.LOD();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Line':\n\n\t\t\t\t\tobject = new THREE.Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointCloud':\n\t\t\t\tcase 'Points':\n\n\t\t\t\t\tobject = new THREE.Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Sprite':\n\n\t\t\t\t\tobject = new THREE.Sprite( getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Group':\n\n\t\t\t\t\tobject = new THREE.Group();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tobject = new THREE.Object3D();\n\n\t\t\t}\n\n\t\t\tobject.uuid = data.uuid;\n\n\t\t\tif ( data.name !== undefined ) object.name = data.name;\n\t\t\tif ( data.matrix !== undefined ) {\n\n\t\t\t\tmatrix.fromArray( data.matrix );\n\t\t\t\tmatrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t\t} else {\n\n\t\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n\t\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n\t\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\n\t\t\t}\n\n\t\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n\t\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\n\t\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n\t\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\n\t\t\tif ( data.children !== undefined ) {\n\n\t\t\t\tfor ( var child in data.children ) {\n\n\t\t\t\t\tobject.add( this.parseObject( data.children[ child ], geometries, materials ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( data.type === 'LOD' ) {\n\n\t\t\t\tvar levels = data.levels;\n\n\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\t\tvar level = levels[ l ];\n\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\t\tobject.addLevel( child, level.distance );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t};\n\n\t}()\n\n} );\n\n// File:src/loaders/TextureLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.TextureLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nObject.assign( THREE.TextureLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar texture = new THREE.Texture();\n\n\t\tvar loader = new THREE.ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\t\tloader.load( url, function ( image ) {\n\n\t\t\ttexture.image = image;\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\tonLoad( texture );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t\treturn texture;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/loaders/CubeTextureLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.CubeTextureLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nObject.assign( THREE.CubeTextureLoader.prototype, {\n\n\tload: function ( urls, onLoad, onProgress, onError ) {\n\n\t\tvar texture = new THREE.CubeTexture();\n\n\t\tvar loader = new THREE.ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tvar loaded = 0;\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\tloaded ++;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, undefined, onError );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\n\t\t\tloadTexture( i );\n\n\t\t}\n\n\t\treturn texture;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\t\treturn this;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/loaders/BinaryTextureLoader.js\n\n/**\n * @author Nikos M. / https://github.com/foo123/\n *\n * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n */\n\nTHREE.DataTextureLoader = THREE.BinaryTextureLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t// override in sub classes\n\tthis._parser = null;\n\n};\n\nObject.assign( THREE.BinaryTextureLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar texture = new THREE.DataTexture();\n\n\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tvar texData = scope._parser( buffer );\n\n\t\t\tif ( ! texData ) return;\n\n\t\t\tif ( undefined !== texData.image ) {\n\n\t\t\t\ttexture.image = texData.image;\n\n\t\t\t} else if ( undefined !== texData.data ) {\n\n\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t}\n\n\t\t\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : THREE.ClampToEdgeWrapping;\n\t\t\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : THREE.ClampToEdgeWrapping;\n\n\t\t\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : THREE.LinearFilter;\n\t\t\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : THREE.LinearMipMapLinearFilter;\n\n\t\t\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\n\n\t\t\tif ( undefined !== texData.format ) {\n\n\t\t\t\ttexture.format = texData.format;\n\n\t\t\t}\n\t\t\tif ( undefined !== texData.type ) {\n\n\t\t\t\ttexture.type = texData.type;\n\n\t\t\t}\n\n\t\t\tif ( undefined !== texData.mipmaps ) {\n\n\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\n\t\t\t}\n\n\t\t\tif ( 1 === texData.mipmapCount ) {\n\n\t\t\t\ttexture.minFilter = THREE.LinearFilter;\n\n\t\t\t}\n\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}, onProgress, onError );\n\n\n\t\treturn texture;\n\n\t}\n\n} );\n\n// File:src/loaders/CompressedTextureLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n *\n * Abstract Base class to block based textures loader (dds, pvr, ...)\n */\n\nTHREE.CompressedTextureLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t// override in sub classes\n\tthis._parser = null;\n\n};\n\nObject.assign( THREE.CompressedTextureLoader.prototype, {\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar images = [];\n\n\t\tvar texture = new THREE.CompressedTexture();\n\t\ttexture.image = images;\n\n\t\tvar loader = new THREE.XHRLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n\t\t\t\timages[ i ] = {\n\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t};\n\n\t\t\t\tloaded += 1;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n\t\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\tif ( Array.isArray( url ) ) {\n\n\t\t\tvar loaded = 0;\n\n\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\timages[ f ] = { mipmaps : [] };\n\n\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\treturn texture;\n\n\t},\n\n\tsetPath: function ( value ) {\n\n\t\tthis.path = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/materials/Material.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Material = function () {\n\n\tObject.defineProperty( this, 'id', { value: THREE.MaterialIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'Material';\n\n\tthis.fog = true;\n\tthis.lights = true;\n\n\tthis.blending = THREE.NormalBlending;\n\tthis.side = THREE.FrontSide;\n\tthis.shading = THREE.SmoothShading; // THREE.FlatShading, THREE.SmoothShading\n\tthis.vertexColors = THREE.NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\n\tthis.opacity = 1;\n\tthis.transparent = false;\n\n\tthis.blendSrc = THREE.SrcAlphaFactor;\n\tthis.blendDst = THREE.OneMinusSrcAlphaFactor;\n\tthis.blendEquation = THREE.AddEquation;\n\tthis.blendSrcAlpha = null;\n\tthis.blendDstAlpha = null;\n\tthis.blendEquationAlpha = null;\n\n\tthis.depthFunc = THREE.LessEqualDepth;\n\tthis.depthTest = true;\n\tthis.depthWrite = true;\n\n\tthis.clippingPlanes = null;\n\tthis.clipShadows = false;\n\n\tthis.colorWrite = true;\n\n\tthis.precision = null; // override the renderer's default precision for this material\n\n\tthis.polygonOffset = false;\n\tthis.polygonOffsetFactor = 0;\n\tthis.polygonOffsetUnits = 0;\n\n\tthis.alphaTest = 0;\n\tthis.premultipliedAlpha = false;\n\n\tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n\n\tthis.visible = true;\n\n\tthis._needsUpdate = true;\n\n};\n\nTHREE.Material.prototype = {\n\n\tconstructor: THREE.Material,\n\n\tget needsUpdate() {\n\n\t\treturn this._needsUpdate;\n\n\t},\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.update();\n\t\tthis._needsUpdate = value;\n\n\t},\n\n\tsetValues: function ( values ) {\n\n\t\tif ( values === undefined ) return;\n\n\t\tfor ( var key in values ) {\n\n\t\t\tvar newValue = values[ key ];\n\n\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tvar currentValue = this[ key ];\n\n\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( currentValue instanceof THREE.Color ) {\n\n\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t} else if ( currentValue instanceof THREE.Vector3 && newValue instanceof THREE.Vector3 ) {\n\n\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t} else if ( key === 'overdraw' ) {\n\n\t\t\t\t// ensure overdraw is backwards-compatible with legacy boolean type\n\t\t\t\tthis[ key ] = Number( newValue );\n\n\t\t\t} else {\n\n\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar isRoot = meta === undefined;\n\n\t\tif ( isRoot ) {\n\n\t\t\tmeta = {\n\t\t\t\ttextures: {},\n\t\t\t\timages: {}\n\t\t\t};\n\n\t\t}\n\n\t\tvar data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.4,\n\t\t\t\ttype: 'Material',\n\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Material serialization\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.color instanceof THREE.Color ) data.color = this.color.getHex();\n\n\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n\t\tif ( this.emissive instanceof THREE.Color ) data.emissive = this.emissive.getHex();\n\t\tif ( this.specular instanceof THREE.Color ) data.specular = this.specular.getHex();\n\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\n\t\tif ( this.map instanceof THREE.Texture ) data.map = this.map.toJSON( meta ).uuid;\n\t\tif ( this.alphaMap instanceof THREE.Texture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\t\tif ( this.lightMap instanceof THREE.Texture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\n\t\tif ( this.bumpMap instanceof THREE.Texture ) {\n\n\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t}\n\t\tif ( this.normalMap instanceof THREE.Texture ) {\n\n\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t}\n\t\tif ( this.displacementMap instanceof THREE.Texture ) {\n\n\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t}\n\t\tif ( this.roughnessMap instanceof THREE.Texture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t\tif ( this.metalnessMap instanceof THREE.Texture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n\t\tif ( this.emissiveMap instanceof THREE.Texture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t\tif ( this.specularMap instanceof THREE.Texture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\n\t\tif ( this.envMap instanceof THREE.Texture ) {\n\n\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\n\t\t}\n\n\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n\t\tif ( this.blending !== THREE.NormalBlending ) data.blending = this.blending;\n\t\tif ( this.shading !== THREE.SmoothShading ) data.shading = this.shading;\n\t\tif ( this.side !== THREE.FrontSide ) data.side = this.side;\n\t\tif ( this.vertexColors !== THREE.NoColors ) data.vertexColors = this.vertexColors;\n\n\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\n\t\t// TODO: Copied from Object3D.toJSON\n\n\t\tfunction extractFromCache ( cache ) {\n\n\t\t\tvar values = [];\n\n\t\t\tfor ( var key in cache ) {\n\n\t\t\t\tvar data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t\tif ( isRoot ) {\n\n\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\tif ( images.length > 0 ) data.images = images;\n\n\t\t}\n\n\t\treturn data;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.fog = source.fog;\n\t\tthis.lights = source.lights;\n\n\t\tthis.blending = source.blending;\n\t\tthis.side = source.side;\n\t\tthis.shading = source.shading;\n\t\tthis.vertexColors = source.vertexColors;\n\n\t\tthis.opacity = source.opacity;\n\t\tthis.transparent = source.transparent;\n\n\t\tthis.blendSrc = source.blendSrc;\n\t\tthis.blendDst = source.blendDst;\n\t\tthis.blendEquation = source.blendEquation;\n\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\tthis.depthFunc = source.depthFunc;\n\t\tthis.depthTest = source.depthTest;\n\t\tthis.depthWrite = source.depthWrite;\n\n\t\tthis.colorWrite = source.colorWrite;\n\n\t\tthis.precision = source.precision;\n\n\t\tthis.polygonOffset = source.polygonOffset;\n\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\tthis.alphaTest = source.alphaTest;\n\n\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n\t\tthis.overdraw = source.overdraw;\n\n\t\tthis.visible = source.visible;\n\t\tthis.clipShadows = source.clipShadows;\n\n\t\tvar srcPlanes = source.clippingPlanes,\n\t\t\tdstPlanes = null;\n\n\t\tif ( srcPlanes !== null ) {\n\n\t\t\tvar n = srcPlanes.length;\n\t\t\tdstPlanes = new Array( n );\n\n\t\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n\t\t}\n\n\t\tthis.clippingPlanes = dstPlanes;\n\n\t\treturn this;\n\n\t},\n\n\tupdate: function () {\n\n\t\tthis.dispatchEvent( { type: 'update' } );\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n};\n\nObject.assign( THREE.Material.prototype, THREE.EventDispatcher.prototype );\n\nTHREE.MaterialIdCount = 0;\n\n// File:src/materials/LineBasicMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  linewidth: <float>,\n *  linecap: \"round\",\n *  linejoin: \"round\"\n * }\n */\n\nTHREE.LineBasicMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'LineBasicMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff );\n\n\tthis.linewidth = 1;\n\tthis.linecap = 'round';\n\tthis.linejoin = 'round';\n\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.LineBasicMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.LineBasicMaterial.prototype.constructor = THREE.LineBasicMaterial;\n\nTHREE.LineBasicMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.linewidth = source.linewidth;\n\tthis.linecap = source.linecap;\n\tthis.linejoin = source.linejoin;\n\n\treturn this;\n\n};\n\n// File:src/materials/LineDashedMaterial.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  linewidth: <float>,\n *\n *  scale: <float>,\n *  dashSize: <float>,\n *  gapSize: <float>\n * }\n */\n\nTHREE.LineDashedMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'LineDashedMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff );\n\n\tthis.linewidth = 1;\n\n\tthis.scale = 1;\n\tthis.dashSize = 3;\n\tthis.gapSize = 1;\n\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.LineDashedMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.LineDashedMaterial.prototype.constructor = THREE.LineDashedMaterial;\n\nTHREE.LineDashedMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.linewidth = source.linewidth;\n\n\tthis.scale = source.scale;\n\tthis.dashSize = source.dashSize;\n\tthis.gapSize = source.gapSize;\n\n\treturn this;\n\n};\n\n// File:src/materials/MeshBasicMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  shading: THREE.SmoothShading,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>\n * }\n */\n\nTHREE.MeshBasicMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'MeshBasicMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff ); // emissive\n\n\tthis.map = null;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.specularMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.combine = THREE.MultiplyOperation;\n\tthis.reflectivity = 1;\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshBasicMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.MeshBasicMaterial.prototype.constructor = THREE.MeshBasicMaterial;\n\nTHREE.MeshBasicMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.map = source.map;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.specularMap = source.specularMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.combine = source.combine;\n\tthis.reflectivity = source.reflectivity;\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\n\treturn this;\n\n};\n\n// File:src/materials/MeshDepthMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author bhouston / https://clara.io\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>\n * }\n */\n\nTHREE.MeshDepthMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'MeshDepthMaterial';\n\n\tthis.depthPacking = THREE.BasicDepthPacking;\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\n\tthis.map = null;\n\n\tthis.alphaMap = null;\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\n\tthis.fog = false;\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshDepthMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.MeshDepthMaterial.prototype.constructor = THREE.MeshDepthMaterial;\n\nTHREE.MeshDepthMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.depthPacking = source.depthPacking;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\n\tthis.map = source.map;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\treturn this;\n\n};\n\n// File:src/materials/MeshLambertMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nTHREE.MeshLambertMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'MeshLambertMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff ); // diffuse\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\tthis.lightMapIntensity = 1.0;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.emissive = new THREE.Color( 0x000000 );\n\tthis.emissiveIntensity = 1.0;\n\tthis.emissiveMap = null;\n\n\tthis.specularMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.combine = THREE.MultiplyOperation;\n\tthis.reflectivity = 1;\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshLambertMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.MeshLambertMaterial.prototype.constructor = THREE.MeshLambertMaterial;\n\nTHREE.MeshLambertMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.map = source.map;\n\n\tthis.lightMap = source.lightMap;\n\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.emissive.copy( source.emissive );\n\tthis.emissiveMap = source.emissiveMap;\n\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\tthis.specularMap = source.specularMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.combine = source.combine;\n\tthis.reflectivity = source.reflectivity;\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n// File:src/materials/MeshNormalMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n *\n * parameters = {\n *  opacity: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>\n * }\n */\n\nTHREE.MeshNormalMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this, parameters );\n\n\tthis.type = 'MeshNormalMaterial';\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\n\tthis.fog = false;\n\tthis.lights = false;\n\tthis.morphTargets = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshNormalMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.MeshNormalMaterial.prototype.constructor = THREE.MeshNormalMaterial;\n\nTHREE.MeshNormalMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\treturn this;\n\n};\n\n// File:src/materials/MeshPhongMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  specular: <hex>,\n *  shininess: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nTHREE.MeshPhongMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'MeshPhongMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff ); // diffuse\n\tthis.specular = new THREE.Color( 0x111111 );\n\tthis.shininess = 30;\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\tthis.lightMapIntensity = 1.0;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.emissive = new THREE.Color( 0x000000 );\n\tthis.emissiveIntensity = 1.0;\n\tthis.emissiveMap = null;\n\n\tthis.bumpMap = null;\n\tthis.bumpScale = 1;\n\n\tthis.normalMap = null;\n\tthis.normalScale = new THREE.Vector2( 1, 1 );\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.specularMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.combine = THREE.MultiplyOperation;\n\tthis.reflectivity = 1;\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshPhongMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.MeshPhongMaterial.prototype.constructor = THREE.MeshPhongMaterial;\n\nTHREE.MeshPhongMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\tthis.specular.copy( source.specular );\n\tthis.shininess = source.shininess;\n\n\tthis.map = source.map;\n\n\tthis.lightMap = source.lightMap;\n\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.emissive.copy( source.emissive );\n\tthis.emissiveMap = source.emissiveMap;\n\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\tthis.bumpMap = source.bumpMap;\n\tthis.bumpScale = source.bumpScale;\n\n\tthis.normalMap = source.normalMap;\n\tthis.normalScale.copy( source.normalScale );\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\tthis.specularMap = source.specularMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.combine = source.combine;\n\tthis.reflectivity = source.reflectivity;\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n// File:src/materials/MeshStandardMaterial.js\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *  color: <hex>,\n *  roughness: <float>,\n *  metalness: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  roughnessMap: new THREE.Texture( <Image> ),\n *\n *  metalnessMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  envMapIntensity: <float>\n *\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nTHREE.MeshStandardMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.defines = { 'STANDARD': '' };\n\n\tthis.type = 'MeshStandardMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff ); // diffuse\n\tthis.roughness = 0.5;\n\tthis.metalness = 0.5;\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\tthis.lightMapIntensity = 1.0;\n\n\tthis.aoMap = null;\n\tthis.aoMapIntensity = 1.0;\n\n\tthis.emissive = new THREE.Color( 0x000000 );\n\tthis.emissiveIntensity = 1.0;\n\tthis.emissiveMap = null;\n\n\tthis.bumpMap = null;\n\tthis.bumpScale = 1;\n\n\tthis.normalMap = null;\n\tthis.normalScale = new THREE.Vector2( 1, 1 );\n\n\tthis.displacementMap = null;\n\tthis.displacementScale = 1;\n\tthis.displacementBias = 0;\n\n\tthis.roughnessMap = null;\n\n\tthis.metalnessMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.envMapIntensity = 1.0;\n\n\tthis.refractionRatio = 0.98;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshStandardMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.MeshStandardMaterial.prototype.constructor = THREE.MeshStandardMaterial;\n\nTHREE.MeshStandardMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.defines = { 'STANDARD': '' };\n\n\tthis.color.copy( source.color );\n\tthis.roughness = source.roughness;\n\tthis.metalness = source.metalness;\n\n\tthis.map = source.map;\n\n\tthis.lightMap = source.lightMap;\n\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\tthis.aoMap = source.aoMap;\n\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\tthis.emissive.copy( source.emissive );\n\tthis.emissiveMap = source.emissiveMap;\n\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\tthis.bumpMap = source.bumpMap;\n\tthis.bumpScale = source.bumpScale;\n\n\tthis.normalMap = source.normalMap;\n\tthis.normalScale.copy( source.normalScale );\n\n\tthis.displacementMap = source.displacementMap;\n\tthis.displacementScale = source.displacementScale;\n\tthis.displacementBias = source.displacementBias;\n\n\tthis.roughnessMap = source.roughnessMap;\n\n\tthis.metalnessMap = source.metalnessMap;\n\n\tthis.alphaMap = source.alphaMap;\n\n\tthis.envMap = source.envMap;\n\tthis.envMapIntensity = source.envMapIntensity;\n\n\tthis.refractionRatio = source.refractionRatio;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\tthis.wireframeLinecap = source.wireframeLinecap;\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\tthis.skinning = source.skinning;\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\treturn this;\n\n};\n\n// File:src/materials/MeshPhysicalMaterial.js\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *  reflectivity: <float>\n * }\n */\n\nTHREE.MeshPhysicalMaterial = function ( parameters ) {\n\n\tTHREE.MeshStandardMaterial.call( this );\n\n\tthis.defines = { 'PHYSICAL': '' };\n\n\tthis.type = 'MeshPhysicalMaterial';\n\n\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\tthis.clearCoat = 0.0;\n\tthis.clearCoatRoughness = 0.0;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshPhysicalMaterial.prototype = Object.create( THREE.MeshStandardMaterial.prototype );\nTHREE.MeshPhysicalMaterial.prototype.constructor = THREE.MeshPhysicalMaterial;\n\nTHREE.MeshPhysicalMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.MeshStandardMaterial.prototype.copy.call( this, source );\n\n\tthis.defines = { 'PHYSICAL': '' };\n\n\tthis.reflectivity = source.reflectivity;\n\n\tthis.clearCoat = source.clearCoat;\n\tthis.clearCoatRoughness = source.clearCoatRoughness;\n\n\treturn this;\n\n};\n\n// File:src/materials/MultiMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.MultiMaterial = function ( materials ) {\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.type = 'MultiMaterial';\n\n\tthis.materials = materials instanceof Array ? materials : [];\n\n\tthis.visible = true;\n\n};\n\nTHREE.MultiMaterial.prototype = {\n\n\tconstructor: THREE.MultiMaterial,\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar output = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.2,\n\t\t\t\ttype: 'material',\n\t\t\t\tgenerator: 'MaterialExporter'\n\t\t\t},\n\t\t\tuuid: this.uuid,\n\t\t\ttype: this.type,\n\t\t\tmaterials: []\n\t\t};\n\n\t\tvar materials = this.materials;\n\n\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n\t\t\tvar material = materials[ i ].toJSON( meta );\n\t\t\tdelete material.metadata;\n\n\t\t\toutput.materials.push( material );\n\n\t\t}\n\n\t\toutput.visible = this.visible;\n\n\t\treturn output;\n\n\t},\n\n\tclone: function () {\n\n\t\tvar material = new this.constructor();\n\n\t\tfor ( var i = 0; i < this.materials.length; i ++ ) {\n\n\t\t\tmaterial.materials.push( this.materials[ i ].clone() );\n\n\t\t}\n\n\t\tmaterial.visible = this.visible;\n\n\t\treturn material;\n\n\t}\n\n};\n\n// File:src/materials/PointsMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *  size: <float>,\n *  sizeAttenuation: <bool>\n * }\n */\n\nTHREE.PointsMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'PointsMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff );\n\n\tthis.map = null;\n\n\tthis.size = 1;\n\tthis.sizeAttenuation = true;\n\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.PointsMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.PointsMaterial.prototype.constructor = THREE.PointsMaterial;\n\nTHREE.PointsMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\n\tthis.map = source.map;\n\n\tthis.size = source.size;\n\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\treturn this;\n\n};\n\n// File:src/materials/ShaderMaterial.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  defines: { \"label\" : \"value\" },\n *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n *\n *  fragmentShader: <string>,\n *  vertexShader: <string>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  lights: <bool>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\n\nTHREE.ShaderMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'ShaderMaterial';\n\n\tthis.defines = {};\n\tthis.uniforms = {};\n\n\tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\n\tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\n\n\tthis.linewidth = 1;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\n\tthis.fog = false; // set to use scene fog\n\tthis.lights = false; // set to use scene lights\n\tthis.clipping = false; // set to use user-defined clipping planes\n\n\tthis.skinning = false; // set to use skinning attribute streams\n\tthis.morphTargets = false; // set to use morph targets\n\tthis.morphNormals = false; // set to use morph normals\n\n\tthis.extensions = {\n\t\tderivatives: false, // set to use derivatives\n\t\tfragDepth: false, // set to use fragment depth values\n\t\tdrawBuffers: false, // set to use draw buffers\n\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t};\n\n\t// When rendered geometry doesn't include these attributes but the material does,\n\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\tthis.defaultAttributeValues = {\n\t\t'color': [ 1, 1, 1 ],\n\t\t'uv': [ 0, 0 ],\n\t\t'uv2': [ 0, 0 ]\n\t};\n\n\tthis.index0AttributeName = undefined;\n\n\tif ( parameters !== undefined ) {\n\n\t\tif ( parameters.attributes !== undefined ) {\n\n\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n};\n\nTHREE.ShaderMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.ShaderMaterial.prototype.constructor = THREE.ShaderMaterial;\n\nTHREE.ShaderMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.fragmentShader = source.fragmentShader;\n\tthis.vertexShader = source.vertexShader;\n\n\tthis.uniforms = THREE.UniformsUtils.clone( source.uniforms );\n\n\tthis.defines = source.defines;\n\n\tthis.wireframe = source.wireframe;\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\tthis.lights = source.lights;\n\tthis.clipping = source.clipping;\n\n\tthis.skinning = source.skinning;\n\n\tthis.morphTargets = source.morphTargets;\n\tthis.morphNormals = source.morphNormals;\n\n\tthis.extensions = source.extensions;\n\n\treturn this;\n\n};\n\nTHREE.ShaderMaterial.prototype.toJSON = function ( meta ) {\n\n\tvar data = THREE.Material.prototype.toJSON.call( this, meta );\n\n\tdata.uniforms = this.uniforms;\n\tdata.vertexShader = this.vertexShader;\n\tdata.fragmentShader = this.fragmentShader;\n\n\treturn data;\n\n};\n\n// File:src/materials/RawShaderMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.RawShaderMaterial = function ( parameters ) {\n\n\tTHREE.ShaderMaterial.call( this, parameters );\n\n\tthis.type = 'RawShaderMaterial';\n\n};\n\nTHREE.RawShaderMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );\nTHREE.RawShaderMaterial.prototype.constructor = THREE.RawShaderMaterial;\n\n// File:src/materials/SpriteMaterial.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *\tuvOffset: new THREE.Vector2(),\n *\tuvScale: new THREE.Vector2()\n * }\n */\n\nTHREE.SpriteMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'SpriteMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff );\n\tthis.map = null;\n\n\tthis.rotation = 0;\n\n\tthis.fog = false;\n\tthis.lights = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.SpriteMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.SpriteMaterial.prototype.constructor = THREE.SpriteMaterial;\n\nTHREE.SpriteMaterial.prototype.copy = function ( source ) {\n\n\tTHREE.Material.prototype.copy.call( this, source );\n\n\tthis.color.copy( source.color );\n\tthis.map = source.map;\n\n\tthis.rotation = source.rotation;\n\n\treturn this;\n\n};\n\n// File:src/materials/ShadowMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.ShadowMaterial = function () {\n\n\tTHREE.ShaderMaterial.call( this, {\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\t\t\tTHREE.UniformsLib[ \"lights\" ],\n\t\t\t{\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t}\n\t\t] ),\n\t\tvertexShader: THREE.ShaderChunk[ 'shadow_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'shadow_frag' ]\n\t} );\n\n\tthis.lights = true;\n\tthis.transparent = true;\n\n\tObject.defineProperties( this, {\n\t\topacity: {\n\t\t\tenumerable: true,\n\t\t\tget: function () {\n\t\t\t\treturn this.uniforms.opacity.value;\n\t\t\t},\n\t\t\tset: function ( value ) {\n\t\t\t\tthis.uniforms.opacity.value = value;\n\t\t\t}\n\t\t}\n\t} );\n\n};\n\nTHREE.ShadowMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );\nTHREE.ShadowMaterial.prototype.constructor = THREE.ShadowMaterial;\n\n// File:src/textures/Texture.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author szimek / https://github.com/szimek/\n */\n\nTHREE.Texture = function ( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\tObject.defineProperty( this, 'id', { value: THREE.TextureIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.sourceFile = '';\n\n\tthis.image = image !== undefined ? image : THREE.Texture.DEFAULT_IMAGE;\n\tthis.mipmaps = [];\n\n\tthis.mapping = mapping !== undefined ? mapping : THREE.Texture.DEFAULT_MAPPING;\n\n\tthis.wrapS = wrapS !== undefined ? wrapS : THREE.ClampToEdgeWrapping;\n\tthis.wrapT = wrapT !== undefined ? wrapT : THREE.ClampToEdgeWrapping;\n\n\tthis.magFilter = magFilter !== undefined ? magFilter : THREE.LinearFilter;\n\tthis.minFilter = minFilter !== undefined ? minFilter : THREE.LinearMipMapLinearFilter;\n\n\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n\tthis.format = format !== undefined ? format : THREE.RGBAFormat;\n\tthis.type = type !== undefined ? type : THREE.UnsignedByteType;\n\n\tthis.offset = new THREE.Vector2( 0, 0 );\n\tthis.repeat = new THREE.Vector2( 1, 1 );\n\n\tthis.generateMipmaps = true;\n\tthis.premultiplyAlpha = false;\n\tthis.flipY = true;\n\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\n\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t//\n\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\tthis.encoding = encoding !== undefined ? encoding :  THREE.LinearEncoding;\n\n\tthis.version = 0;\n\tthis.onUpdate = null;\n\n};\n\nTHREE.Texture.DEFAULT_IMAGE = undefined;\nTHREE.Texture.DEFAULT_MAPPING = THREE.UVMapping;\n\nTHREE.Texture.prototype = {\n\n\tconstructor: THREE.Texture,\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.image = source.image;\n\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\tthis.mapping = source.mapping;\n\n\t\tthis.wrapS = source.wrapS;\n\t\tthis.wrapT = source.wrapT;\n\n\t\tthis.magFilter = source.magFilter;\n\t\tthis.minFilter = source.minFilter;\n\n\t\tthis.anisotropy = source.anisotropy;\n\n\t\tthis.format = source.format;\n\t\tthis.type = source.type;\n\n\t\tthis.offset.copy( source.offset );\n\t\tthis.repeat.copy( source.repeat );\n\n\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\tthis.flipY = source.flipY;\n\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\tthis.encoding = source.encoding;\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tif ( meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t}\n\n\t\tfunction getDataURL( image ) {\n\n\t\t\tvar canvas;\n\n\t\t\tif ( image.toDataURL !== undefined ) {\n\n\t\t\t\tcanvas = image;\n\n\t\t\t} else {\n\n\t\t\t\tcanvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\t\tcanvas.width = image.width;\n\t\t\t\tcanvas.height = image.height;\n\n\t\t\t\tcanvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t}\n\n\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t\t} else {\n\n\t\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar output = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.4,\n\t\t\t\ttype: 'Texture',\n\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t},\n\n\t\t\tuuid: this.uuid,\n\t\t\tname: this.name,\n\n\t\t\tmapping: this.mapping,\n\n\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\tminFilter: this.minFilter,\n\t\t\tmagFilter: this.magFilter,\n\t\t\tanisotropy: this.anisotropy\n\t\t};\n\n\t\tif ( this.image !== undefined ) {\n\n\t\t\t// TODO: Move to THREE.Image\n\n\t\t\tvar image = this.image;\n\n\t\t\tif ( image.uuid === undefined ) {\n\n\t\t\t\timage.uuid = THREE.Math.generateUUID(); // UGH\n\n\t\t\t}\n\n\t\t\tif ( meta.images[ image.uuid ] === undefined ) {\n\n\t\t\t\tmeta.images[ image.uuid ] = {\n\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\turl: getDataURL( image )\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\toutput.image = image.uuid;\n\n\t\t}\n\n\t\tmeta.textures[ this.uuid ] = output;\n\n\t\treturn output;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t},\n\n\ttransformUv: function ( uv ) {\n\n\t\tif ( this.mapping !== THREE.UVMapping )  return;\n\n\t\tuv.multiply( this.repeat );\n\t\tuv.add( this.offset );\n\n\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\tcase THREE.RepeatWrapping:\n\n\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\tcase THREE.RepeatWrapping:\n\n\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.flipY ) {\n\n\t\t\tuv.y = 1 - uv.y;\n\n\t\t}\n\n\t}\n\n};\n\nObject.assign( THREE.Texture.prototype, THREE.EventDispatcher.prototype );\n\nTHREE.TextureIdCount = 0;\n\n// File:src/textures/DepthTexture.js\n\n/**\n * @author Matt DesLauriers / @mattdesl\n */\n\nTHREE.DepthTexture = function ( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {\n\n  THREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, THREE.DepthFormat, type, anisotropy );\n\n  this.image = { width: width, height: height };\n\n  this.type = type !== undefined ? type : THREE.UnsignedShortType;\n\n  this.magFilter = magFilter !== undefined ? magFilter : THREE.NearestFilter;\n  this.minFilter = minFilter !== undefined ? minFilter : THREE.NearestFilter;\n\n  this.flipY = false;\n  this.generateMipmaps  = false;\n\n};\n\nTHREE.DepthTexture.prototype = Object.create( THREE.Texture.prototype );\nTHREE.DepthTexture.prototype.constructor = THREE.DepthTexture;\n\n// File:src/textures/CanvasTexture.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.CanvasTexture = function ( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\tTHREE.Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\tthis.needsUpdate = true;\n\n};\n\nTHREE.CanvasTexture.prototype = Object.create( THREE.Texture.prototype );\nTHREE.CanvasTexture.prototype.constructor = THREE.CanvasTexture;\n\n// File:src/textures/CubeTexture.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.CubeTexture = function ( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\timages = images !== undefined ? images : [];\n\tmapping = mapping !== undefined ? mapping : THREE.CubeReflectionMapping;\n\n\tTHREE.Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\tthis.flipY = false;\n\n};\n\nTHREE.CubeTexture.prototype = Object.create( THREE.Texture.prototype );\nTHREE.CubeTexture.prototype.constructor = THREE.CubeTexture;\n\nObject.defineProperty( THREE.CubeTexture.prototype, 'images', {\n\n\tget: function () {\n\n\t\treturn this.image;\n\n\t},\n\n\tset: function ( value ) {\n\n\t\tthis.image = value;\n\n\t}\n\n} );\n\n// File:src/textures/CompressedTexture.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.CompressedTexture = function ( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\tthis.image = { width: width, height: height };\n\tthis.mipmaps = mipmaps;\n\n\t// no flipping for cube textures\n\t// (also flipping doesn't work for compressed textures )\n\n\tthis.flipY = false;\n\n\t// can't generate mipmaps for compressed textures\n\t// mips must be embedded in DDS files\n\n\tthis.generateMipmaps = false;\n\n};\n\nTHREE.CompressedTexture.prototype = Object.create( THREE.Texture.prototype );\nTHREE.CompressedTexture.prototype.constructor = THREE.CompressedTexture;\n\n// File:src/textures/DataTexture.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.DataTexture = function ( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\tthis.image = { data: data, width: width, height: height };\n\n\tthis.magFilter = magFilter !== undefined ? magFilter : THREE.NearestFilter;\n\tthis.minFilter = minFilter !== undefined ? minFilter : THREE.NearestFilter;\n\n\tthis.flipY = false;\n\tthis.generateMipmaps  = false;\n\n};\n\nTHREE.DataTexture.prototype = Object.create( THREE.Texture.prototype );\nTHREE.DataTexture.prototype.constructor = THREE.DataTexture;\n\n// File:src/textures/VideoTexture.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.VideoTexture = function ( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\tTHREE.Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\tthis.generateMipmaps = false;\n\n\tvar scope = this;\n\n\tfunction update() {\n\n\t\trequestAnimationFrame( update );\n\n\t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\tscope.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\tupdate();\n\n};\n\nTHREE.VideoTexture.prototype = Object.create( THREE.Texture.prototype );\nTHREE.VideoTexture.prototype.constructor = THREE.VideoTexture;\n\n// File:src/objects/Group.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Group = function () {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Group';\n\n};\n\nTHREE.Group.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.Group\n\n} );\n\n// File:src/objects/Points.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Points = function ( geometry, material ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Points';\n\n\tthis.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();\n\tthis.material = material !== undefined ? material : new THREE.PointsMaterial( { color: Math.random() * 0xffffff } );\n\n};\n\nTHREE.Points.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.Points,\n\n\traycast: ( function () {\n\n\t\tvar inverseMatrix = new THREE.Matrix4();\n\t\tvar ray = new THREE.Ray();\n\t\tvar sphere = new THREE.Sphere();\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tvar object = this;\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Points.threshold;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t//\n\n\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\t\t\tvar position = new THREE.Vector3();\n\n\t\t\tfunction testPoint( point, index ) {\n\n\t\t\t\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\n\n\t\t\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\t\t\t\tvar intersectPoint = ray.closestPointToPoint( point );\n\t\t\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\t\t\t\tpoint: intersectPoint.clone(),\n\t\t\t\t\t\tindex: index,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tobject: object\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\n\t\t\t\t\t\tposition.fromArray( positions, a * 3 );\n\n\t\t\t\t\t\ttestPoint( position, a );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\n\t\t\t\t\t\tposition.fromArray( positions, i * 3 );\n\n\t\t\t\t\t\ttestPoint( position, i );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\ttestPoint( vertices[ i ], i );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}() ),\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t}\n\n} );\n\n// File:src/objects/Line.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Line = function ( geometry, material, mode ) {\n\n\tif ( mode === 1 ) {\n\n\t\tconsole.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );\n\t\treturn new THREE.LineSegments( geometry, material );\n\n\t}\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Line';\n\n\tthis.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();\n\tthis.material = material !== undefined ? material : new THREE.LineBasicMaterial( { color: Math.random() * 0xffffff } );\n\n};\n\nTHREE.Line.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.Line,\n\n\traycast: ( function () {\n\n\t\tvar inverseMatrix = new THREE.Matrix4();\n\t\tvar ray = new THREE.Ray();\n\t\tvar sphere = new THREE.Sphere();\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tvar precision = raycaster.linePrecision;\n\t\t\tvar precisionSq = precision * precision;\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t//\n\n\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\tvar vStart = new THREE.Vector3();\n\t\t\tvar vEnd = new THREE.Vector3();\n\t\t\tvar interSegment = new THREE.Vector3();\n\t\t\tvar interRay = new THREE.Vector3();\n\t\t\tvar step = this instanceof THREE.LineSegments ? 2 : 1;\n\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\t\t\t\t\t\tvar b = indices[ i + 1 ];\n\n\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\n\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\n\t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\n\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar nbVertices = vertices.length;\n\n\t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\n\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\n\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}() ),\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t}\n\n} );\n\n// File:src/objects/LineSegments.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.LineSegments = function ( geometry, material ) {\n\n\tTHREE.Line.call( this, geometry, material );\n\n\tthis.type = 'LineSegments';\n\n};\n\nTHREE.LineSegments.prototype = Object.assign( Object.create( THREE.Line.prototype ), {\n\n\tconstructor: THREE.LineSegments\n\n} );\n\n// File:src/objects/Mesh.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author jonobr1 / http://jonobr1.com/\n */\n\nTHREE.Mesh = function ( geometry, material ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Mesh';\n\n\tthis.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();\n\tthis.material = material !== undefined ? material : new THREE.MeshBasicMaterial( { color: Math.random() * 0xffffff } );\n\n\tthis.drawMode = THREE.TrianglesDrawMode;\n\n\tthis.updateMorphTargets();\n\n};\n\nTHREE.Mesh.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.Mesh,\n\n\tsetDrawMode: function ( value ) {\n\n\t\tthis.drawMode = value;\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Object3D.prototype.copy.call( this, source );\n\n\t\tthis.drawMode = source.drawMode;\n\n\t\treturn this;\n\n\t},\n\n\tupdateMorphTargets: function () {\n\n\t\tif ( this.geometry.morphTargets !== undefined && this.geometry.morphTargets.length > 0 ) {\n\n\t\t\tthis.morphTargetBase = - 1;\n\t\t\tthis.morphTargetInfluences = [];\n\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\tfor ( var m = 0, ml = this.geometry.morphTargets.length; m < ml; m ++ ) {\n\n\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\tthis.morphTargetDictionary[ this.geometry.morphTargets[ m ].name ] = m;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tgetMorphTargetIndexByName: function ( name ) {\n\n\t\tif ( this.morphTargetDictionary[ name ] !== undefined ) {\n\n\t\t\treturn this.morphTargetDictionary[ name ];\n\n\t\t}\n\n\t\tconsole.warn( 'THREE.Mesh.getMorphTargetIndexByName: morph target ' + name + ' does not exist. Returning 0.' );\n\n\t\treturn 0;\n\n\t},\n\n\traycast: ( function () {\n\n\t\tvar inverseMatrix = new THREE.Matrix4();\n\t\tvar ray = new THREE.Ray();\n\t\tvar sphere = new THREE.Sphere();\n\n\t\tvar vA = new THREE.Vector3();\n\t\tvar vB = new THREE.Vector3();\n\t\tvar vC = new THREE.Vector3();\n\n\t\tvar tempA = new THREE.Vector3();\n\t\tvar tempB = new THREE.Vector3();\n\t\tvar tempC = new THREE.Vector3();\n\n\t\tvar uvA = new THREE.Vector2();\n\t\tvar uvB = new THREE.Vector2();\n\t\tvar uvC = new THREE.Vector2();\n\n\t\tvar barycoord = new THREE.Vector3();\n\n\t\tvar intersectionPoint = new THREE.Vector3();\n\t\tvar intersectionPointWorld = new THREE.Vector3();\n\n\t\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\n\n\t\t\tTHREE.Triangle.barycoordFromPoint( point, p1, p2, p3, barycoord );\n\n\t\t\tuv1.multiplyScalar( barycoord.x );\n\t\t\tuv2.multiplyScalar( barycoord.y );\n\t\t\tuv3.multiplyScalar( barycoord.z );\n\n\t\t\tuv1.add( uv2 ).add( uv3 );\n\n\t\t\treturn uv1.clone();\n\n\t\t}\n\n\t\tfunction checkIntersection( object, raycaster, ray, pA, pB, pC, point ) {\n\n\t\t\tvar intersect;\n\t\t\tvar material = object.material;\n\n\t\t\tif ( material.side === THREE.BackSide ) {\n\n\t\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t\t\t} else {\n\n\t\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== THREE.DoubleSide, point );\n\n\t\t\t}\n\n\t\t\tif ( intersect === null ) return null;\n\n\t\t\tintersectionPointWorld.copy( point );\n\t\t\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\n\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\t\t\treturn {\n\t\t\t\tdistance: distance,\n\t\t\t\tpoint: intersectionPointWorld.clone(),\n\t\t\t\tobject: object\n\t\t\t};\n\n\t\t}\n\n\t\tfunction checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {\n\n\t\t\tvA.fromArray( positions, a * 3 );\n\t\t\tvB.fromArray( positions, b * 3 );\n\t\t\tvC.fromArray( positions, c * 3 );\n\n\t\t\tvar intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );\n\n\t\t\tif ( intersection ) {\n\n\t\t\t\tif ( uvs ) {\n\n\t\t\t\t\tuvA.fromArray( uvs, a * 2 );\n\t\t\t\t\tuvB.fromArray( uvs, b * 2 );\n\t\t\t\t\tuvC.fromArray( uvs, c * 2 );\n\n\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );\n\n\t\t\t\t}\n\n\t\t\t\tintersection.face = new THREE.Face3( a, b, c, THREE.Triangle.normal( vA, vB, vC ) );\n\t\t\t\tintersection.faceIndex = a;\n\n\t\t\t}\n\n\t\t\treturn intersection;\n\n\t\t}\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar material = this.material;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\tif ( material === undefined ) return;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t//\n\n\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\t// Check boundingBox before continuing\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tif ( ray.intersectsBox( geometry.boundingBox ) === false ) return;\n\n\t\t\t}\n\n\t\t\tvar uvs, intersection;\n\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\tvar a, b, c;\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( attributes.uv !== undefined ) {\n\n\t\t\t\t\tuvs = attributes.uv.array;\n\n\t\t\t\t}\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\ta = indices[ i ];\n\t\t\t\t\t\tb = indices[ i + 1 ];\n\t\t\t\t\t\tc = indices[ i + 2 ];\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 9 ) {\n\n\t\t\t\t\t\ta = i / 3;\n\t\t\t\t\t\tb = a + 1;\n\t\t\t\t\t\tc = a + 2;\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.index = a; // triangle number in positions buffer semantics\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\tvar fvA, fvB, fvC;\n\t\t\t\tvar isFaceMaterial = material instanceof THREE.MultiMaterial;\n\t\t\t\tvar materials = isFaceMaterial === true ? material.materials : null;\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar faces = geometry.faces;\n\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\n\n\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tvar face = faces[ f ];\n\t\t\t\t\tvar faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;\n\n\t\t\t\t\tif ( faceMaterial === undefined ) continue;\n\n\t\t\t\t\tfvA = vertices[ face.a ];\n\t\t\t\t\tfvB = vertices[ face.b ];\n\t\t\t\t\tfvC = vertices[ face.c ];\n\n\t\t\t\t\tif ( faceMaterial.morphTargets === true ) {\n\n\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\n\n\t\t\t\t\t\tvA.set( 0, 0, 0 );\n\t\t\t\t\t\tvB.set( 0, 0, 0 );\n\t\t\t\t\t\tvC.set( 0, 0, 0 );\n\n\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\n\n\t\t\t\t\t\t\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\n\t\t\t\t\t\t\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\n\t\t\t\t\t\t\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvA.add( fvA );\n\t\t\t\t\t\tvB.add( fvB );\n\t\t\t\t\t\tvC.add( fvC );\n\n\t\t\t\t\t\tfvA = vA;\n\t\t\t\t\t\tfvB = vB;\n\t\t\t\t\t\tfvC = vC;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tintersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tif ( uvs ) {\n\n\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n\t\t\t\t\t\t\tuvA.copy( uvs_f[ 0 ] );\n\t\t\t\t\t\t\tuvB.copy( uvs_f[ 1 ] );\n\t\t\t\t\t\t\tuvC.copy( uvs_f[ 2 ] );\n\n\t\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tintersection.face = face;\n\t\t\t\t\t\tintersection.faceIndex = f;\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}() ),\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t}\n\n} );\n\n// File:src/objects/Bone.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author ikerr / http://verold.com\n */\n\nTHREE.Bone = function ( skin ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Bone';\n\n\tthis.skin = skin;\n\n};\n\nTHREE.Bone.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.Bone,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Object3D.prototype.copy.call( this, source );\n\n\t\tthis.skin = source.skin;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n// File:src/objects/Skeleton.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author michael guerrero / http://realitymeltdown.com\n * @author ikerr / http://verold.com\n */\n\nTHREE.Skeleton = function ( bones, boneInverses, useVertexTexture ) {\n\n\tthis.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;\n\n\tthis.identityMatrix = new THREE.Matrix4();\n\n\t// copy the bone array\n\n\tbones = bones || [];\n\n\tthis.bones = bones.slice( 0 );\n\n\t// create a bone texture or an array of floats\n\n\tif ( this.useVertexTexture ) {\n\n\t\t// layout (1 matrix = 4 pixels)\n\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\n\t\tvar size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\tsize = THREE.Math.nextPowerOfTwo( Math.ceil( size ) );\n\t\tsize = Math.max( size, 4 );\n\n\t\tthis.boneTextureWidth = size;\n\t\tthis.boneTextureHeight = size;\n\n\t\tthis.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel\n\t\tthis.boneTexture = new THREE.DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType );\n\n\t} else {\n\n\t\tthis.boneMatrices = new Float32Array( 16 * this.bones.length );\n\n\t}\n\n\t// use the supplied bone inverses or calculate the inverses\n\n\tif ( boneInverses === undefined ) {\n\n\t\tthis.calculateInverses();\n\n\t} else {\n\n\t\tif ( this.bones.length === boneInverses.length ) {\n\n\t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Skeleton bonInverses is the wrong length.' );\n\n\t\t\tthis.boneInverses = [];\n\n\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\t\tthis.boneInverses.push( new THREE.Matrix4() );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n};\n\nObject.assign( THREE.Skeleton.prototype, {\n\n\tcalculateInverses: function () {\n\n\t\tthis.boneInverses = [];\n\n\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\tvar inverse = new THREE.Matrix4();\n\n\t\t\tif ( this.bones[ b ] ) {\n\n\t\t\t\tinverse.getInverse( this.bones[ b ].matrixWorld );\n\n\t\t\t}\n\n\t\t\tthis.boneInverses.push( inverse );\n\n\t\t}\n\n\t},\n\n\tpose: function () {\n\n\t\tvar bone;\n\n\t\t// recover the bind-time world matrices\n\n\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\tbone = this.bones[ b ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ b ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// compute the local matrices, positions, rotations and scales\n\n\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\tbone = this.bones[ b ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tif ( bone.parent instanceof THREE.Bone ) {\n\n\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tupdate: ( function () {\n\n\t\tvar offsetMatrix = new THREE.Matrix4();\n\n\t\treturn function update() {\n\n\t\t\t// flatten bone matrices to array\n\n\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\t\t// compute the offset between the current and the original transform\n\n\t\t\t\tvar matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;\n\n\t\t\t\toffsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );\n\t\t\t\toffsetMatrix.toArray( this.boneMatrices, b * 16 );\n\n\t\t\t}\n\n\t\t\tif ( this.useVertexTexture ) {\n\n\t\t\t\tthis.boneTexture.needsUpdate = true;\n\n\t\t\t}\n\n\t\t};\n\n\t} )(),\n\n\tclone: function () {\n\n\t\treturn new THREE.Skeleton( this.bones, this.boneInverses, this.useVertexTexture );\n\n\t}\n\n} );\n\n// File:src/objects/SkinnedMesh.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author ikerr / http://verold.com\n */\n\nTHREE.SkinnedMesh = function ( geometry, material, useVertexTexture ) {\n\n\tTHREE.Mesh.call( this, geometry, material );\n\n\tthis.type = 'SkinnedMesh';\n\n\tthis.bindMode = \"attached\";\n\tthis.bindMatrix = new THREE.Matrix4();\n\tthis.bindMatrixInverse = new THREE.Matrix4();\n\n\t// init bones\n\n\t// TODO: remove bone creation as there is no reason (other than\n\t// convenience) for THREE.SkinnedMesh to do this.\n\n\tvar bones = [];\n\n\tif ( this.geometry && this.geometry.bones !== undefined ) {\n\n\t\tvar bone, gbone;\n\n\t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\n\t\t\tgbone = this.geometry.bones[ b ];\n\n\t\t\tbone = new THREE.Bone( this );\n\t\t\tbones.push( bone );\n\n\t\t\tbone.name = gbone.name;\n\t\t\tbone.position.fromArray( gbone.pos );\n\t\t\tbone.quaternion.fromArray( gbone.rotq );\n\t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\n\n\t\t}\n\n\t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\n\n\t\t\tgbone = this.geometry.bones[ b ];\n\n\t\t\tif ( gbone.parent !== - 1 && gbone.parent !== null &&\n\t\t\t\t\tbones[ gbone.parent ] !== undefined ) {\n\n\t\t\t\tbones[ gbone.parent ].add( bones[ b ] );\n\n\t\t\t} else {\n\n\t\t\t\tthis.add( bones[ b ] );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tthis.normalizeSkinWeights();\n\n\tthis.updateMatrixWorld( true );\n\tthis.bind( new THREE.Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );\n\n};\n\n\nTHREE.SkinnedMesh.prototype = Object.assign( Object.create( THREE.Mesh.prototype ), {\n\n\tconstructor: THREE.SkinnedMesh,\n\n\tbind: function( skeleton, bindMatrix ) {\n\n\t\tthis.skeleton = skeleton;\n\n\t\tif ( bindMatrix === undefined ) {\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t}\n\n\t\tthis.bindMatrix.copy( bindMatrix );\n\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\n\t},\n\n\tpose: function () {\n\n\t\tthis.skeleton.pose();\n\n\t},\n\n\tnormalizeSkinWeights: function () {\n\n\t\tif ( this.geometry instanceof THREE.Geometry ) {\n\n\t\t\tfor ( var i = 0; i < this.geometry.skinWeights.length; i ++ ) {\n\n\t\t\t\tvar sw = this.geometry.skinWeights[ i ];\n\n\t\t\t\tvar scale = 1.0 / sw.lengthManhattan();\n\n\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\tsw.multiplyScalar( scale );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsw.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( this.geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\tvar vec = new THREE.Vector4();\n\n\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\tfor ( var i = 0; i < skinWeight.count; i ++ ) {\n\n\t\t\t\tvec.x = skinWeight.getX( i );\n\t\t\t\tvec.y = skinWeight.getY( i );\n\t\t\t\tvec.z = skinWeight.getZ( i );\n\t\t\t\tvec.w = skinWeight.getW( i );\n\n\t\t\t\tvar scale = 1.0 / vec.lengthManhattan();\n\n\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\tvec.multiplyScalar( scale );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvec.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t}\n\n\t\t\t\tskinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tupdateMatrixWorld: function( force ) {\n\n\t\tTHREE.Mesh.prototype.updateMatrixWorld.call( this, true );\n\n\t\tif ( this.bindMode === \"attached\" ) {\n\n\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\n\t\t} else if ( this.bindMode === \"detached\" ) {\n\n\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );\n\n\t\t}\n\n\t},\n\n\tclone: function() {\n\n\t\treturn new this.constructor( this.geometry, this.material, this.skeleton.useVertexTexture ).copy( this );\n\n\t}\n\n} );\n\n// File:src/objects/LOD.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.LOD = function () {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'LOD';\n\n\tObject.defineProperties( this, {\n\t\tlevels: {\n\t\t\tenumerable: true,\n\t\t\tvalue: []\n\t\t}\n\t} );\n\n};\n\n\nTHREE.LOD.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.LOD,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Object3D.prototype.copy.call( this, source, false );\n\n\t\tvar levels = source.levels;\n\n\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tvar level = levels[ i ];\n\n\t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\taddLevel: function ( object, distance ) {\n\n\t\tif ( distance === undefined ) distance = 0;\n\n\t\tdistance = Math.abs( distance );\n\n\t\tvar levels = this.levels;\n\n\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n\t\tthis.add( object );\n\n\t},\n\n\tgetObjectForDistance: function ( distance ) {\n\n\t\tvar levels = this.levels;\n\n\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\tif ( distance < levels[ i ].distance ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn levels[ i - 1 ].object;\n\n\t},\n\n\traycast: ( function () {\n\n\t\tvar matrixPosition = new THREE.Vector3();\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\n\n\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t};\n\n\t}() ),\n\n\tupdate: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\t\tvar v2 = new THREE.Vector3();\n\n\t\treturn function update( camera ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 1 ) {\n\n\t\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = v1.distanceTo( v2 );\n\n\t\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}(),\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.levels = [];\n\n\t\tvar levels = this.levels;\n\n\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tvar level = levels[ i ];\n\n\t\t\tdata.object.levels.push( {\n\t\t\t\tobject: level.object.uuid,\n\t\t\t\tdistance: level.distance\n\t\t\t} );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n} );\n\n// File:src/objects/Sprite.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Sprite = function ( material ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Sprite';\n\n\tthis.material = ( material !== undefined ) ? material : new THREE.SpriteMaterial();\n\n};\n\nTHREE.Sprite.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.Sprite,\n\n\traycast: ( function () {\n\n\t\tvar matrixPosition = new THREE.Vector3();\n\n\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tvar distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );\n\t\t\tvar guessSizeSq = this.scale.x * this.scale.y / 4;\n\n\t\t\tif ( distanceSq > guessSizeSq ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tintersects.push( {\n\n\t\t\t\tdistance: Math.sqrt( distanceSq ),\n\t\t\t\tpoint: this.position,\n\t\t\t\tface: null,\n\t\t\t\tobject: this\n\n\t\t\t} );\n\n\t\t};\n\n\t}() ),\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.material ).copy( this );\n\n\t}\n\n} );\n\n// File:src/objects/LensFlare.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.LensFlare = function ( texture, size, distance, blending, color ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.lensFlares = [];\n\n\tthis.positionScreen = new THREE.Vector3();\n\tthis.customUpdateCallback = undefined;\n\n\tif ( texture !== undefined ) {\n\n\t\tthis.add( texture, size, distance, blending, color );\n\n\t}\n\n};\n\nTHREE.LensFlare.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\n\n\tconstructor: THREE.LensFlare,\n\n\tcopy: function ( source ) {\n\n\t\tTHREE.Object3D.prototype.copy.call( this, source );\n\n\t\tthis.positionScreen.copy( source.positionScreen );\n\t\tthis.customUpdateCallback = source.customUpdateCallback;\n\n\t\tfor ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {\n\n\t\t\tthis.lensFlares.push( source.lensFlares[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( texture, size, distance, blending, color, opacity ) {\n\n\t\tif ( size === undefined ) size = - 1;\n\t\tif ( distance === undefined ) distance = 0;\n\t\tif ( opacity === undefined ) opacity = 1;\n\t\tif ( color === undefined ) color = new THREE.Color( 0xffffff );\n\t\tif ( blending === undefined ) blending = THREE.NormalBlending;\n\n\t\tdistance = Math.min( distance, Math.max( 0, distance ) );\n\n\t\tthis.lensFlares.push( {\n\t\t\ttexture: texture,\t// THREE.Texture\n\t\t\tsize: size, \t\t// size in pixels (-1 = use texture.width)\n\t\t\tdistance: distance, \t// distance (0-1) from light source (0=at light source)\n\t\t\tx: 0, y: 0, z: 0,\t// screen position (-1 => 1) z = 0 is in front z = 1 is back\n\t\t\tscale: 1, \t\t// scale\n\t\t\trotation: 0, \t\t// rotation\n\t\t\topacity: opacity,\t// opacity\n\t\t\tcolor: color,\t\t// color\n\t\t\tblending: blending\t// blending\n\t\t} );\n\n\t},\n\n\t/*\n\t * Update lens flares update positions on all flares based on the screen position\n\t * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\n\t */\n\n\tupdateLensFlares: function () {\n\n\t\tvar f, fl = this.lensFlares.length;\n\t\tvar flare;\n\t\tvar vecX = - this.positionScreen.x * 2;\n\t\tvar vecY = - this.positionScreen.y * 2;\n\n\t\tfor ( f = 0; f < fl; f ++ ) {\n\n\t\t\tflare = this.lensFlares[ f ];\n\n\t\t\tflare.x = this.positionScreen.x + vecX * flare.distance;\n\t\t\tflare.y = this.positionScreen.y + vecY * flare.distance;\n\n\t\t\tflare.wantedRotation = flare.x * Math.PI * 0.25;\n\t\t\tflare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\n\n\t\t}\n\n\t}\n\n} );\n\n// File:src/scenes/Scene.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Scene = function () {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Scene';\n\n\tthis.background = null;\n\tthis.fog = null;\n\tthis.overrideMaterial = null;\n\n\tthis.autoUpdate = true; // checked by the renderer\n\n};\n\nTHREE.Scene.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.Scene.prototype.constructor = THREE.Scene;\n\nTHREE.Scene.prototype.copy = function ( source, recursive ) {\n\n\tTHREE.Object3D.prototype.copy.call( this, source, recursive );\n\n\tif ( source.background !== null ) this.background = source.background.clone();\n\tif ( source.fog !== null ) this.fog = source.fog.clone();\n\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\n\tthis.autoUpdate = source.autoUpdate;\n\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\treturn this;\n\n};\n\n// File:src/scenes/Fog.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Fog = function ( color, near, far ) {\n\n\tthis.name = '';\n\n\tthis.color = new THREE.Color( color );\n\n\tthis.near = ( near !== undefined ) ? near : 1;\n\tthis.far = ( far !== undefined ) ? far : 1000;\n\n};\n\nTHREE.Fog.prototype.clone = function () {\n\n\treturn new THREE.Fog( this.color.getHex(), this.near, this.far );\n\n};\n\n// File:src/scenes/FogExp2.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.FogExp2 = function ( color, density ) {\n\n\tthis.name = '';\n\n\tthis.color = new THREE.Color( color );\n\tthis.density = ( density !== undefined ) ? density : 0.00025;\n\n};\n\nTHREE.FogExp2.prototype.clone = function () {\n\n\treturn new THREE.FogExp2( this.color.getHex(), this.density );\n\n};\n\n// File:src/renderers/shaders/ShaderChunk.js\n\nTHREE.ShaderChunk = {};\n\n// File:src/renderers/shaders/ShaderChunk/alphamap_fragment.glsl\n\nTHREE.ShaderChunk[ 'alphamap_fragment' ] = \"#ifdef USE_ALPHAMAP\\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/alphamap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'alphamap_pars_fragment' ] = \"#ifdef USE_ALPHAMAP\\n\tuniform sampler2D alphaMap;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/alphatest_fragment.glsl\n\nTHREE.ShaderChunk[ 'alphatest_fragment' ] = \"#ifdef ALPHATEST\\n\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/aomap_fragment.glsl\n\nTHREE.ShaderChunk[ 'aomap_fragment' ] = \"#ifdef USE_AOMAP\\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/aomap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'aomap_pars_fragment' ] = \"#ifdef USE_AOMAP\\n\tuniform sampler2D aoMap;\\n\tuniform float aoMapIntensity;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/begin_vertex.glsl\n\nTHREE.ShaderChunk[ 'begin_vertex' ] = \"\\nvec3 transformed = vec3( position );\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/beginnormal_vertex.glsl\n\nTHREE.ShaderChunk[ 'beginnormal_vertex' ] = \"\\nvec3 objectNormal = vec3( normal );\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/bsdfs.glsl\n\nTHREE.ShaderChunk[ 'bsdfs' ] = \"bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\\n\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\t\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\t\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\t\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\t\t\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\t\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\t\t}\\n\t\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\tfloat alpha = pow2( roughness );\\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\tvec3 F = F_Schlick( specularColor, dotLH );\\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\tfloat D = D_GGX( alpha, dotNH );\\n\treturn F * ( G * D );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\tvec4 r = roughness * c0 + c1;\\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\tvec3 F = F_Schlick( specularColor, dotLH );\\n\tfloat G = G_BlinnPhong_Implicit( );\\n\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/bumpmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'bumpmap_pars_fragment' ] = \"#ifdef USE_BUMPMAP\\n\tuniform sampler2D bumpMap;\\n\tuniform float bumpScale;\\n\tvec2 dHdxy_fwd() {\\n\t\tvec2 dSTdx = dFdx( vUv );\\n\t\tvec2 dSTdy = dFdy( vUv );\\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\t\treturn vec2( dBx, dBy );\\n\t}\\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\t\tvec3 vSigmaX = dFdx( surf_pos );\\n\t\tvec3 vSigmaY = dFdy( surf_pos );\\n\t\tvec3 vN = surf_norm;\\n\t\tvec3 R1 = cross( vSigmaY, vN );\\n\t\tvec3 R2 = cross( vN, vSigmaX );\\n\t\tfloat fDet = dot( vSigmaX, R1 );\\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\t}\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/clipping_planes_fragment.glsl\n\nTHREE.ShaderChunk[ 'clipping_planes_fragment' ] = \"#if NUM_CLIPPING_PLANES > 0\\n\tfor ( int i = 0; i < NUM_CLIPPING_PLANES; ++ i ) {\\n\t\tvec4 plane = clippingPlanes[ i ];\\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\t}\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/clipping_planes_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'clipping_planes_pars_fragment' ] = \"#if NUM_CLIPPING_PLANES > 0\\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\t\tvarying vec3 vViewPosition;\\n\t#endif\\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/clipping_planes_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'clipping_planes_pars_vertex' ] = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\tvarying vec3 vViewPosition;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/clipping_planes_vertex.glsl\n\nTHREE.ShaderChunk[ 'clipping_planes_vertex' ] = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/color_fragment.glsl\n\nTHREE.ShaderChunk[ 'color_fragment' ] = \"#ifdef USE_COLOR\\n\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/color_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'color_pars_fragment' ] = \"#ifdef USE_COLOR\\n\tvarying vec3 vColor;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/color_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'color_pars_vertex' ] = \"#ifdef USE_COLOR\\n\tvarying vec3 vColor;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/color_vertex.glsl\n\nTHREE.ShaderChunk[ 'color_vertex' ] = \"#ifdef USE_COLOR\\n\tvColor.xyz = color.xyz;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/common.glsl\n\nTHREE.ShaderChunk[ 'common' ] = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\tvec3 color;\\n\tvec3 direction;\\n\tbool visible;\\n};\\nstruct ReflectedLight {\\n\tvec3 directDiffuse;\\n\tvec3 directSpecular;\\n\tvec3 indirectDiffuse;\\n\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\tvec3 position;\\n\tvec3 normal;\\n\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/cube_uv_reflection_fragment.glsl\n\nTHREE.ShaderChunk[ 'cube_uv_reflection_fragment' ] = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\tvec3 absDirection = abs(direction);\\n\tint face = -1;\\n\tif( absDirection.x > absDirection.z ) {\\n\t\tif(absDirection.x > absDirection.y )\\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\\n\t\telse\\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\\n\t}\\n\telse {\\n\t\tif(absDirection.z > absDirection.y )\\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\\n\t\telse\\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\\n\t}\\n\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\tfloat dxRoughness = dFdx(roughness);\\n\tfloat dyRoughness = dFdy(roughness);\\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\tfloat mipLevel = 0.5 * log2(d);\\n\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\tbool bRes = mipLevel == 0.0;\\n\tscale =  bRes && (scale < a) ? a : scale;\\n\tvec3 r;\\n\tvec2 offset;\\n\tint face = getFaceFromDirection(direction);\\n\tfloat rcpPowScale = 1.0 / powScale;\\n\tif( face == 0) {\\n\t\tr = vec3(direction.x, -direction.z, direction.y);\\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\t}\\n\telse if( face == 1) {\\n\t\tr = vec3(direction.y, direction.x, direction.z);\\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\t}\\n\telse if( face == 2) {\\n\t\tr = vec3(direction.z, direction.x, direction.y);\\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\t}\\n\telse if( face == 3) {\\n\t\tr = vec3(direction.x, direction.z, direction.y);\\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\t}\\n\telse if( face == 4) {\\n\t\tr = vec3(direction.y, direction.x, -direction.z);\\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\t}\\n\telse {\\n\t\tr = vec3(direction.z, -direction.x, direction.y);\\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\t}\\n\tr = normalize(r);\\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\tvec2 base = offset + vec2( texelOffset );\\n\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\tfloat r1 = floor(roughnessVal);\\n\tfloat r2 = r1 + 1.0;\\n\tfloat t = fract(roughnessVal);\\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\tfloat s = mipInfo.y;\\n\tfloat level0 = mipInfo.x;\\n\tfloat level1 = level0 + 1.0;\\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\tvec4 result = mix(color10, color20, t);\\n\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/defaultnormal_vertex.glsl\n\nTHREE.ShaderChunk[ 'defaultnormal_vertex' ] = \"#ifdef FLIP_SIDED\\n\tobjectNormal = -objectNormal;\\n#endif\\nvec3 transformedNormal = normalMatrix * objectNormal;\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/displacementmap_vertex.glsl\n\nTHREE.ShaderChunk[ 'displacementmap_vertex' ] = \"#ifdef USE_DISPLACEMENTMAP\\n\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/displacementmap_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'displacementmap_pars_vertex' ] = \"#ifdef USE_DISPLACEMENTMAP\\n\tuniform sampler2D displacementMap;\\n\tuniform float displacementScale;\\n\tuniform float displacementBias;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/emissivemap_fragment.glsl\n\nTHREE.ShaderChunk[ 'emissivemap_fragment' ] = \"#ifdef USE_EMISSIVEMAP\\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/emissivemap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'emissivemap_pars_fragment' ] = \"#ifdef USE_EMISSIVEMAP\\n\tuniform sampler2D emissiveMap;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/encodings_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'encodings_pars_fragment' ] = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n  return value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n  float maxComponent = max( max( value.r, value.g ), value.b );\\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n  float maxRGB = max( value.x, max( value.g, value.b ) );\\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n  M            = ceil( M * 255.0 ) / 255.0;\\n  return vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n    float maxRGB = max( value.x, max( value.g, value.b ) );\\n    float D      = max( maxRange / maxRGB, 1.0 );\\n    D            = min( floor( D ) / 255.0, 1.0 );\\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n  vec4 vResult;\\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n  vResult.w = fract(Le);\\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n  return vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n  float Le = value.z * 255.0 + value.w;\\n  vec3 Xp_Y_XYZp;\\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n  return vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/encodings_fragment.glsl\n\nTHREE.ShaderChunk[ 'encodings_fragment' ] = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/envmap_fragment.glsl\n\nTHREE.ShaderChunk[ 'envmap_fragment' ] = \"#ifdef USE_ENVMAP\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\t\t#else\\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\t\t#endif\\n\t#else\\n\t\tvec3 reflectVec = vReflect;\\n\t#endif\\n\t#ifdef ENVMAP_TYPE_CUBE\\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\t\tvec2 sampleUV;\\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\\n\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\t#endif\\n\tenvColor = envMapTexelToLinear( envColor );\\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\t#elif defined( ENVMAP_BLENDING_MIX )\\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\t#elif defined( ENVMAP_BLENDING_ADD )\\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/envmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'envmap_pars_fragment' ] = \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\tuniform float reflectivity;\\n\tuniform float envMapIntenstiy;\\n#endif\\n#ifdef USE_ENVMAP\\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\t\tvarying vec3 vWorldPosition;\\n\t#endif\\n\t#ifdef ENVMAP_TYPE_CUBE\\n\t\tuniform samplerCube envMap;\\n\t#else\\n\t\tuniform sampler2D envMap;\\n\t#endif\\n\tuniform float flipEnvMap;\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\t\tuniform float refractionRatio;\\n\t#else\\n\t\tvarying vec3 vReflect;\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/envmap_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'envmap_pars_vertex' ] = \"#ifdef USE_ENVMAP\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\t\tvarying vec3 vWorldPosition;\\n\t#else\\n\t\tvarying vec3 vReflect;\\n\t\tuniform float refractionRatio;\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/envmap_vertex.glsl\n\nTHREE.ShaderChunk[ 'envmap_vertex' ] = \"#ifdef USE_ENVMAP\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\t\tvWorldPosition = worldPosition.xyz;\\n\t#else\\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\\n\t\t#else\\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\t\t#endif\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/fog_fragment.glsl\n\nTHREE.ShaderChunk[ 'fog_fragment' ] = \"#ifdef USE_FOG\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\\n\t#else\\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\n\t#endif\\n\t#ifdef FOG_EXP2\\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\\n\t#else\\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\\n\t#endif\\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/fog_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'fog_pars_fragment' ] = \"#ifdef USE_FOG\\n\tuniform vec3 fogColor;\\n\t#ifdef FOG_EXP2\\n\t\tuniform float fogDensity;\\n\t#else\\n\t\tuniform float fogNear;\\n\t\tuniform float fogFar;\\n\t#endif\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/lightmap_fragment.glsl\n\nTHREE.ShaderChunk[ 'lightmap_fragment' ] = \"#ifdef USE_LIGHTMAP\\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lightmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'lightmap_pars_fragment' ] = \"#ifdef USE_LIGHTMAP\\n\tuniform sampler2D lightMap;\\n\tuniform float lightMapIntensity;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_lambert_vertex.glsl\n\nTHREE.ShaderChunk[ 'lights_lambert_vertex' ] = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\t\t#endif\\n\t}\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_pars.glsl\n\nTHREE.ShaderChunk[ 'lights_pars' ] = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\tvec3 irradiance = ambientLightColor;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\tstruct DirectionalLight {\\n\t\tvec3 direction;\\n\t\tvec3 color;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\t\tdirectLight.color = directionalLight.color;\\n\t\tdirectLight.direction = directionalLight.direction;\\n\t\tdirectLight.visible = true;\\n\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\tstruct PointLight {\\n\t\tvec3 position;\\n\t\tvec3 color;\\n\t\tfloat distance;\\n\t\tfloat decay;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\t\tvec3 lVector = pointLight.position - geometry.position;\\n\t\tdirectLight.direction = normalize( lVector );\\n\t\tfloat lightDistance = length( lVector );\\n\t\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\\n\t\t\tdirectLight.color = pointLight.color;\\n\t\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\t\t\tdirectLight.visible = true;\\n\t\t} else {\\n\t\t\tdirectLight.color = vec3( 0.0 );\\n\t\t\tdirectLight.visible = false;\\n\t\t}\\n\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\tstruct SpotLight {\\n\t\tvec3 position;\\n\t\tvec3 direction;\\n\t\tvec3 color;\\n\t\tfloat distance;\\n\t\tfloat decay;\\n\t\tfloat coneCos;\\n\t\tfloat penumbraCos;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\t\tvec3 lVector = spotLight.position - geometry.position;\\n\t\tdirectLight.direction = normalize( lVector );\\n\t\tfloat lightDistance = length( lVector );\\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\t\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\t\t\tdirectLight.color = spotLight.color;\\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\t\t\tdirectLight.visible = true;\\n\t\t} else {\\n\t\t\tdirectLight.color = vec3( 0.0 );\\n\t\t\tdirectLight.visible = false;\\n\t\t}\\n\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\tstruct HemisphereLight {\\n\t\tvec3 direction;\\n\t\tvec3 skyColor;\\n\t\tvec3 groundColor;\\n\t};\\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\t\tirradiance *= PI;\\n\t\t#endif\\n\t\treturn irradiance;\\n\t}\\n#endif\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\t\t#include <normal_flip>\\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\t\t#ifdef ENVMAP_TYPE_CUBE\\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\t\t#else\\n\t\t\tvec4 envMapColor = vec4( 0.0 );\\n\t\t#endif\\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\\n\t}\\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\t}\\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\t\t#else\\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\t\t#endif\\n\t\t#include <normal_flip>\\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\t\t#ifdef ENVMAP_TYPE_CUBE\\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\t\t\tvec2 sampleUV;\\n\t\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\t\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\t\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#endif\\n\t\treturn envMapColor.rgb * envMapIntensity;\\n\t}\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_phong_fragment.glsl\n\nTHREE.ShaderChunk[ 'lights_phong_fragment' ] = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_phong_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'lights_phong_pars_fragment' ] = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\tvec3\tdiffuseColor;\\n\tvec3\tspecularColor;\\n\tfloat\tspecularShininess;\\n\tfloat\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\tvec3 irradiance = dotNL * directLight.color;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\t(0)\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_physical_fragment.glsl\n\nTHREE.ShaderChunk[ 'lights_physical_fragment' ] = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_physical_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'lights_physical_pars_fragment' ] = \"struct PhysicalMaterial {\\n\tvec3\tdiffuseColor;\\n\tfloat\tspecularRoughness;\\n\tvec3\tspecularColor;\\n\t#ifndef STANDARD\\n\t\tfloat clearCoat;\\n\t\tfloat clearCoatRoughness;\\n\t#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\tvec3 irradiance = dotNL * directLight.color;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\t#ifndef STANDARD\\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\t#endif\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\treflectedLight.indirectSpecular += radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\t#ifndef STANDARD\\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\t#endif\\n}\\n#define RE_Direct\t\t\t\tRE_Direct_Physical\\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_template.glsl\n\nTHREE.ShaderChunk[ 'lights_template' ] = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\tPointLight pointLight;\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tpointLight = pointLights[ i ];\\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\tSpotLight spotLight;\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tspotLight = spotLights[ i ];\\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\tDirectionalLight directionalLight;\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tdirectionalLight = directionalLights[ i ];\\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\t#ifdef USE_LIGHTMAP\\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\t\tlightMapIrradiance *= PI;\\n\t\t#endif\\n\t\tirradiance += lightMapIrradiance;\\n\t#endif\\n\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\t\t}\\n\t#endif\\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\t \tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\t#endif\\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\t#ifndef STANDARD\\n\t\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\\n\t#else\\n\t\tvec3 clearCoatRadiance = vec3( 0.0 );\\n\t#endif\\n\t\t\\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_fragment.glsl\n\nTHREE.ShaderChunk[ 'logdepthbuf_fragment' ] = \"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'logdepthbuf_pars_fragment' ] = \"#ifdef USE_LOGDEPTHBUF\\n\tuniform float logDepthBufFC;\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvarying float vFragDepth;\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'logdepthbuf_pars_vertex' ] = \"#ifdef USE_LOGDEPTHBUF\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvarying float vFragDepth;\\n\t#endif\\n\tuniform float logDepthBufFC;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_vertex.glsl\n\nTHREE.ShaderChunk[ 'logdepthbuf_vertex' ] = \"#ifdef USE_LOGDEPTHBUF\\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvFragDepth = 1.0 + gl_Position.w;\\n\t#else\\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/map_fragment.glsl\n\nTHREE.ShaderChunk[ 'map_fragment' ] = \"#ifdef USE_MAP\\n\tvec4 texelColor = texture2D( map, vUv );\\n\ttexelColor = mapTexelToLinear( texelColor );\\n\tdiffuseColor *= texelColor;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/map_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'map_pars_fragment' ] = \"#ifdef USE_MAP\\n\tuniform sampler2D map;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/map_particle_fragment.glsl\n\nTHREE.ShaderChunk[ 'map_particle_fragment' ] = \"#ifdef USE_MAP\\n\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/map_particle_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'map_particle_pars_fragment' ] = \"#ifdef USE_MAP\\n\tuniform vec4 offsetRepeat;\\n\tuniform sampler2D map;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/metalnessmap_fragment.glsl\n\nTHREE.ShaderChunk[ 'metalnessmap_fragment' ] = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\tmetalnessFactor *= texelMetalness.r;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/metalnessmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'metalnessmap_pars_fragment' ] = \"#ifdef USE_METALNESSMAP\\n\tuniform sampler2D metalnessMap;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/morphnormal_vertex.glsl\n\nTHREE.ShaderChunk[ 'morphnormal_vertex' ] = \"#ifdef USE_MORPHNORMALS\\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/morphtarget_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'morphtarget_pars_vertex' ] = \"#ifdef USE_MORPHTARGETS\\n\t#ifndef USE_MORPHNORMALS\\n\tuniform float morphTargetInfluences[ 8 ];\\n\t#else\\n\tuniform float morphTargetInfluences[ 4 ];\\n\t#endif\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/morphtarget_vertex.glsl\n\nTHREE.ShaderChunk[ 'morphtarget_vertex' ] = \"#ifdef USE_MORPHTARGETS\\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\t#ifndef USE_MORPHNORMALS\\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/normal_flip.glsl\n\nTHREE.ShaderChunk[ 'normal_flip' ] = \"#ifdef DOUBLE_SIDED\\n\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n#else\\n\tfloat flipNormal = 1.0;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/normal_fragment.glsl\n\nTHREE.ShaderChunk[ 'normal_fragment' ] = \"#ifdef FLAT_SHADED\\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\tvec3 normal = normalize( vNormal ) * flipNormal;\\n#endif\\n#ifdef USE_NORMALMAP\\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/normalmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'normalmap_pars_fragment' ] = \"#ifdef USE_NORMALMAP\\n\tuniform sampler2D normalMap;\\n\tuniform vec2 normalScale;\\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\\n\t\tvec2 st0 = dFdx( vUv.st );\\n\t\tvec2 st1 = dFdy( vUv.st );\\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\t\tvec3 N = normalize( surf_norm );\\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\t\tmapN.xy = normalScale * mapN.xy;\\n\t\tmat3 tsn = mat3( S, T, N );\\n\t\treturn normalize( tsn * mapN );\\n\t}\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/packing.glsl\n\nTHREE.ShaderChunk[ 'packing' ] = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n  return normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n  return 1.0 - 2.0 * rgb.xyz;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n  return ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n  return linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/premultiplied_alpha_fragment.glsl\n\nTHREE.ShaderChunk[ 'premultiplied_alpha_fragment' ] = \"#ifdef PREMULTIPLIED_ALPHA\\n\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/project_vertex.glsl\n\nTHREE.ShaderChunk[ 'project_vertex' ] = \"#ifdef USE_SKINNING\\n\tvec4 mvPosition = modelViewMatrix * skinned;\\n#else\\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\n#endif\\ngl_Position = projectionMatrix * mvPosition;\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/roughnessmap_fragment.glsl\n\nTHREE.ShaderChunk[ 'roughnessmap_fragment' ] = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\troughnessFactor *= texelRoughness.r;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/roughnessmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'roughnessmap_pars_fragment' ] = \"#ifdef USE_ROUGHNESSMAP\\n\tuniform sampler2D roughnessMap;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'shadowmap_pars_fragment' ] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\t#endif\\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\t}\\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\t\tvec2 f = fract( uv * size + 0.5 );\\n\t\tfloat a = mix( lb, lt, f.y );\\n\t\tfloat b = mix( rb, rt, f.y );\\n\t\tfloat c = mix( a, b, f.x );\\n\t\treturn c;\\n\t}\\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\t\tshadowCoord.xyz /= shadowCoord.w;\\n\t\tshadowCoord.z += shadowBias;\\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\t\tbool inFrustum = all( inFrustumVec );\\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\t\tbool frustumTest = all( frustumTestVec );\\n\t\tif ( frustumTest ) {\\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\\n\t\t\treturn (\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\\n\t\t\treturn (\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#else\\n\t\t\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\t\t#endif\\n\t\t}\\n\t\treturn 1.0;\\n\t}\\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\t\tvec3 absV = abs( v );\\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\t\tabsV *= scaleToCube;\\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\t\tvec2 planar = v.xy;\\n\t\tfloat almostATexel = 1.5 * texelSizeY;\\n\t\tfloat almostOne = 1.0 - almostATexel;\\n\t\tif ( absV.z >= almostOne ) {\\n\t\t\tif ( v.z > 0.0 )\\n\t\t\t\tplanar.x = 4.0 - v.x;\\n\t\t} else if ( absV.x >= almostOne ) {\\n\t\t\tfloat signX = sign( v.x );\\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\\n\t\t} else if ( absV.y >= almostOne ) {\\n\t\t\tfloat signY = sign( v.y );\\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\t\t\tplanar.y = v.z * signY - 2.0;\\n\t\t}\\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\t}\\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\t\tvec3 lightToPosition = shadowCoord.xyz;\\n\t\tvec3 bd3D = normalize( lightToPosition );\\n\t\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\t\t\treturn (\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#else\\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\t\t#endif\\n\t}\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'shadowmap_pars_vertex' ] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/shadowmap_vertex.glsl\n\nTHREE.ShaderChunk[ 'shadowmap_vertex' ] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/shadowmask_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'shadowmask_pars_fragment' ] = \"float getShadowMask() {\\n\tfloat shadow = 1.0;\\n\t#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\tDirectionalLight directionalLight;\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tdirectionalLight = directionalLights[ i ];\\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\tSpotLight spotLight;\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tspotLight = spotLights[ i ];\\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\tPointLight pointLight;\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tpointLight = pointLights[ i ];\\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#endif\\n\treturn shadow;\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/skinbase_vertex.glsl\n\nTHREE.ShaderChunk[ 'skinbase_vertex' ] = \"#ifdef USE_SKINNING\\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/skinning_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'skinning_pars_vertex' ] = \"#ifdef USE_SKINNING\\n\tuniform mat4 bindMatrix;\\n\tuniform mat4 bindMatrixInverse;\\n\t#ifdef BONE_TEXTURE\\n\t\tuniform sampler2D boneTexture;\\n\t\tuniform int boneTextureWidth;\\n\t\tuniform int boneTextureHeight;\\n\t\tmat4 getBoneMatrix( const in float i ) {\\n\t\t\tfloat j = i * 4.0;\\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\\n\t\t\ty = dy * ( y + 0.5 );\\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\t\t\treturn bone;\\n\t\t}\\n\t#else\\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\t\tmat4 getBoneMatrix( const in float i ) {\\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\\n\t\t\treturn bone;\\n\t\t}\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/skinning_vertex.glsl\n\nTHREE.ShaderChunk[ 'skinning_vertex' ] = \"#ifdef USE_SKINNING\\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\tvec4 skinned = vec4( 0.0 );\\n\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\tskinned  = bindMatrixInverse * skinned;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/skinnormal_vertex.glsl\n\nTHREE.ShaderChunk[ 'skinnormal_vertex' ] = \"#ifdef USE_SKINNING\\n\tmat4 skinMatrix = mat4( 0.0 );\\n\tskinMatrix += skinWeight.x * boneMatX;\\n\tskinMatrix += skinWeight.y * boneMatY;\\n\tskinMatrix += skinWeight.z * boneMatZ;\\n\tskinMatrix += skinWeight.w * boneMatW;\\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/specularmap_fragment.glsl\n\nTHREE.ShaderChunk[ 'specularmap_fragment' ] = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\tspecularStrength = texelSpecular.r;\\n#else\\n\tspecularStrength = 1.0;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/specularmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'specularmap_pars_fragment' ] = \"#ifdef USE_SPECULARMAP\\n\tuniform sampler2D specularMap;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/tonemapping_fragment.glsl\n\nTHREE.ShaderChunk[ 'tonemapping_fragment' ] = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/tonemapping_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'tonemapping_pars_fragment' ] = \"#define saturate(a) clamp( a, 0.0, 1.0 )\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n  return toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  color = max( vec3( 0.0 ), color - 0.004 );\\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/uv2_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'uv2_pars_fragment' ] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tvarying vec2 vUv2;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/uv2_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'uv2_pars_vertex' ] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tattribute vec2 uv2;\\n\tvarying vec2 vUv2;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/uv2_vertex.glsl\n\nTHREE.ShaderChunk[ 'uv2_vertex' ] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tvUv2 = uv2;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/uv_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'uv_pars_fragment' ] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvarying vec2 vUv;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/uv_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'uv_pars_vertex' ] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvarying vec2 vUv;\\n\tuniform vec4 offsetRepeat;\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/uv_vertex.glsl\n\nTHREE.ShaderChunk[ 'uv_vertex' ] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/worldpos_vertex.glsl\n\nTHREE.ShaderChunk[ 'worldpos_vertex' ] = \"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\\n\t#ifdef USE_SKINNING\\n\t\tvec4 worldPosition = modelMatrix * skinned;\\n\t#else\\n\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n\t#endif\\n#endif\\n\";\n\n// File:src/renderers/shaders/UniformsUtils.js\n\n/**\n * Uniform Utilities\n */\n\nTHREE.UniformsUtils = {\n\n\tmerge: function ( uniforms ) {\n\n\t\tvar merged = {};\n\n\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\n\t\t\tvar tmp = this.clone( uniforms[ u ] );\n\n\t\t\tfor ( var p in tmp ) {\n\n\t\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn merged;\n\n\t},\n\n\tclone: function ( uniforms_src ) {\n\n\t\tvar uniforms_dst = {};\n\n\t\tfor ( var u in uniforms_src ) {\n\n\t\t\tuniforms_dst[ u ] = {};\n\n\t\t\tfor ( var p in uniforms_src[ u ] ) {\n\n\t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\n\n\t\t\t\tif ( parameter_src instanceof THREE.Color ||\n\t\t\t\t\t parameter_src instanceof THREE.Vector2 ||\n\t\t\t\t\t parameter_src instanceof THREE.Vector3 ||\n\t\t\t\t\t parameter_src instanceof THREE.Vector4 ||\n\t\t\t\t\t parameter_src instanceof THREE.Matrix3 ||\n\t\t\t\t\t parameter_src instanceof THREE.Matrix4 ||\n\t\t\t\t\t parameter_src instanceof THREE.Texture ) {\n\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\n\n\t\t\t\t} else if ( Array.isArray( parameter_src ) ) {\n\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn uniforms_dst;\n\n\t}\n\n};\n\n// File:src/renderers/shaders/UniformsLib.js\n\n/**\n * Uniforms library for shared webgl shaders\n */\n\nTHREE.UniformsLib = {\n\n\tcommon: {\n\n\t\t\"diffuse\": { value: new THREE.Color( 0xeeeeee ) },\n\t\t\"opacity\": { value: 1.0 },\n\n\t\t\"map\": { value: null },\n\t\t\"offsetRepeat\": { value: new THREE.Vector4( 0, 0, 1, 1 ) },\n\n\t\t\"specularMap\": { value: null },\n\t\t\"alphaMap\": { value: null },\n\n\t\t\"envMap\": { value: null },\n\t\t\"flipEnvMap\": { value: - 1 },\n\t\t\"reflectivity\": { value: 1.0 },\n\t\t\"refractionRatio\": { value: 0.98 }\n\n\t},\n\n\taomap: {\n\n\t\t\"aoMap\": { value: null },\n\t\t\"aoMapIntensity\": { value: 1 }\n\n\t},\n\n\tlightmap: {\n\n\t\t\"lightMap\": { value: null },\n\t\t\"lightMapIntensity\": { value: 1 }\n\n\t},\n\n\temissivemap: {\n\n\t\t\"emissiveMap\": { value: null }\n\n\t},\n\n\tbumpmap: {\n\n\t\t\"bumpMap\": { value: null },\n\t\t\"bumpScale\": { value: 1 }\n\n\t},\n\n\tnormalmap: {\n\n\t\t\"normalMap\": { value: null },\n\t\t\"normalScale\": { value: new THREE.Vector2( 1, 1 ) }\n\n\t},\n\n\tdisplacementmap: {\n\n\t\t\"displacementMap\": { value: null },\n\t\t\"displacementScale\": { value: 1 },\n\t\t\"displacementBias\": { value: 0 }\n\n\t},\n\n\troughnessmap: {\n\n\t\t\"roughnessMap\": { value: null }\n\n\t},\n\n\tmetalnessmap: {\n\n\t\t\"metalnessMap\": { value: null }\n\n\t},\n\n\tfog: {\n\n\t\t\"fogDensity\": { value: 0.00025 },\n\t\t\"fogNear\": { value: 1 },\n\t\t\"fogFar\": { value: 2000 },\n\t\t\"fogColor\": { value: new THREE.Color( 0xffffff ) }\n\n\t},\n\n\tlights: {\n\n\t\t\"ambientLightColor\": { value: [] },\n\n\t\t\"directionalLights\": { value: [], properties: {\n\t\t\t\"direction\": {},\n\t\t\t\"color\": {},\n\n\t\t\t\"shadow\": {},\n\t\t\t\"shadowBias\": {},\n\t\t\t\"shadowRadius\": {},\n\t\t\t\"shadowMapSize\": {}\n\t\t} },\n\n\t\t\"directionalShadowMap\": { value: [] },\n\t\t\"directionalShadowMatrix\": { value: [] },\n\n\t\t\"spotLights\": { value: [], properties: {\n\t\t\t\"color\": {},\n\t\t\t\"position\": {},\n\t\t\t\"direction\": {},\n\t\t\t\"distance\": {},\n\t\t\t\"coneCos\": {},\n\t\t\t\"penumbraCos\": {},\n\t\t\t\"decay\": {},\n\n\t\t\t\"shadow\": {},\n\t\t\t\"shadowBias\": {},\n\t\t\t\"shadowRadius\": {},\n\t\t\t\"shadowMapSize\": {}\n\t\t} },\n\n\t\t\"spotShadowMap\": { value: [] },\n\t\t\"spotShadowMatrix\": { value: [] },\n\n\t\t\"pointLights\": { value: [], properties: {\n\t\t\t\"color\": {},\n\t\t\t\"position\": {},\n\t\t\t\"decay\": {},\n\t\t\t\"distance\": {},\n\n\t\t\t\"shadow\": {},\n\t\t\t\"shadowBias\": {},\n\t\t\t\"shadowRadius\": {},\n\t\t\t\"shadowMapSize\": {}\n\t\t} },\n\n\t\t\"pointShadowMap\": { value: [] },\n\t\t\"pointShadowMatrix\": { value: [] },\n\n\t\t\"hemisphereLights\": { value: [], properties: {\n\t\t\t\"direction\": {},\n\t\t\t\"skyColor\": {},\n\t\t\t\"groundColor\": {}\n\t\t} }\n\n\t},\n\n\tpoints: {\n\n\t\t\"diffuse\": { value: new THREE.Color( 0xeeeeee ) },\n\t\t\"opacity\": { value: 1.0 },\n\t\t\"size\": { value: 1.0 },\n\t\t\"scale\": { value: 1.0 },\n\t\t\"map\": { value: null },\n\t\t\"offsetRepeat\": { value: new THREE.Vector4( 0, 0, 1, 1 ) }\n\n\t}\n\n};\n\n// File:src/renderers/shaders/ShaderLib/cube_frag.glsl\n\nTHREE.ShaderChunk[ 'cube_frag' ] = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\t#include <logdepthbuf_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/cube_vert.glsl\n\nTHREE.ShaderChunk[ 'cube_vert' ] = \"varying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\tvWorldPosition = transformDirection( position, modelMatrix );\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/depth_frag.glsl\n\nTHREE.ShaderChunk[ 'depth_frag' ] = \"#if DEPTH_PACKING == 3200\\n\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( 1.0 );\\n\t#if DEPTH_PACKING == 3200\\n\t\tdiffuseColor.a = opacity;\\n\t#endif\\n\t#include <map_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <logdepthbuf_fragment>\\n\t#if DEPTH_PACKING == 3200\\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\n\t#elif DEPTH_PACKING == 3201\\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\t#endif\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/depth_vert.glsl\n\nTHREE.ShaderChunk[ 'depth_vert' ] = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/distanceRGBA_frag.glsl\n\nTHREE.ShaderChunk[ 'distanceRGBA_frag' ] = \"uniform vec3 lightPos;\\nvarying vec4 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\t#include <clipping_planes_fragment>\\n\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/distanceRGBA_vert.glsl\n\nTHREE.ShaderChunk[ 'distanceRGBA_vert' ] = \"varying vec4 vWorldPosition;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <skinbase_vertex>\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <clipping_planes_vertex>\\n\tvWorldPosition = worldPosition;\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/equirect_frag.glsl\n\nTHREE.ShaderChunk[ 'equirect_frag' ] = \"uniform sampler2D tEquirect;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec3 direction = normalize( vWorldPosition );\\n\tvec2 sampleUV;\\n\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n\t#include <logdepthbuf_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/equirect_vert.glsl\n\nTHREE.ShaderChunk[ 'equirect_vert' ] = \"varying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\tvWorldPosition = transformDirection( position, modelMatrix );\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/linedashed_frag.glsl\n\nTHREE.ShaderChunk[ 'linedashed_frag' ] = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\t\tdiscard;\\n\t}\\n\tvec3 outgoingLight = vec3( 0.0 );\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <color_fragment>\\n\toutgoingLight = diffuseColor.rgb;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/linedashed_vert.glsl\n\nTHREE.ShaderChunk[ 'linedashed_vert' ] = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <color_vertex>\\n\tvLineDistance = scale * lineDistance;\\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\tgl_Position = projectionMatrix * mvPosition;\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/meshbasic_frag.glsl\n\nTHREE.ShaderChunk[ 'meshbasic_frag' ] = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\tReflectedLight reflectedLight;\\n\treflectedLight.directDiffuse = vec3( 0.0 );\\n\treflectedLight.directSpecular = vec3( 0.0 );\\n\treflectedLight.indirectDiffuse = diffuseColor.rgb;\\n\treflectedLight.indirectSpecular = vec3( 0.0 );\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\t#include <normal_flip>\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/meshbasic_vert.glsl\n\nTHREE.ShaderChunk[ 'meshbasic_vert' ] = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <skinbase_vertex>\\n\t#ifdef USE_ENVMAP\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n\t#endif\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <clipping_planes_vertex>\\n\t#include <envmap_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/meshlambert_frag.glsl\n\nTHREE.ShaderChunk[ 'meshlambert_frag' ] = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <emissivemap_fragment>\\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\t#include <lightmap_fragment>\\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\t#ifdef DOUBLE_SIDED\\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\t#else\\n\t\treflectedLight.directDiffuse = vLightFront;\\n\t#endif\\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\t#include <normal_flip>\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/meshlambert_vert.glsl\n\nTHREE.ShaderChunk[ 'meshlambert_vert' ] = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <envmap_vertex>\\n\t#include <lights_lambert_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/meshphong_frag.glsl\n\nTHREE.ShaderChunk[ 'meshphong_frag' ] = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <normal_flip>\\n\t#include <normal_fragment>\\n\t#include <emissivemap_fragment>\\n\t#include <lights_phong_fragment>\\n\t#include <lights_template>\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/meshphong_vert.glsl\n\nTHREE.ShaderChunk[ 'meshphong_vert' ] = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\tvNormal = normalize( transformedNormal );\\n#endif\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\tvViewPosition = - mvPosition.xyz;\\n\t#include <worldpos_vertex>\\n\t#include <envmap_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/meshphysical_frag.glsl\n\nTHREE.ShaderChunk[ 'meshphysical_frag' ] = \"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifndef STANDARD\\n\tuniform float clearCoat;\\n\tuniform float clearCoatRoughness;\\n#endif\\nuniform float envMapIntensity;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <roughnessmap_fragment>\\n\t#include <metalnessmap_fragment>\\n\t#include <normal_flip>\\n\t#include <normal_fragment>\\n\t#include <emissivemap_fragment>\\n\t#include <lights_physical_fragment>\\n\t#include <lights_template>\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/meshphysical_vert.glsl\n\nTHREE.ShaderChunk[ 'meshphysical_vert' ] = \"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\tvNormal = normalize( transformedNormal );\\n#endif\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\tvViewPosition = - mvPosition.xyz;\\n\t#include <worldpos_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/normal_frag.glsl\n\nTHREE.ShaderChunk[ 'normal_frag' ] = \"uniform float opacity;\\nvarying vec3 vNormal;\\n#include <common>\\n#include <packing>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tgl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\\n\t#include <logdepthbuf_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/normal_vert.glsl\n\nTHREE.ShaderChunk[ 'normal_vert' ] = \"varying vec3 vNormal;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\tvNormal = normalize( normalMatrix * normal );\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/points_frag.glsl\n\nTHREE.ShaderChunk[ 'points_frag' ] = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec3 outgoingLight = vec3( 0.0 );\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_particle_fragment>\\n\t#include <color_fragment>\\n\t#include <alphatest_fragment>\\n\toutgoingLight = diffuseColor.rgb;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/points_vert.glsl\n\nTHREE.ShaderChunk[ 'points_vert' ] = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <color_vertex>\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#ifdef USE_SIZEATTENUATION\\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\t#else\\n\t\tgl_PointSize = size;\\n\t#endif\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/shadow_frag.glsl\n\nTHREE.ShaderChunk[ 'shadow_frag' ] = \"uniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib/shadow_vert.glsl\n\nTHREE.ShaderChunk[ 'shadow_vert' ] = \"#include <shadowmap_pars_vertex>\\nvoid main() {\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\n\n// File:src/renderers/shaders/ShaderLib.js\n\n/**\n * Webgl Shader Library for three.js\n *\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n */\n\n\nTHREE.ShaderLib = {\n\n\t'basic': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\tTHREE.UniformsLib[ 'aomap' ],\n\t\t\tTHREE.UniformsLib[ 'fog' ]\n\n\t\t] ),\n\n\t\tvertexShader: THREE.ShaderChunk[ 'meshbasic_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'meshbasic_frag' ]\n\n\t},\n\n\t'lambert': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\tTHREE.UniformsLib[ 'aomap' ],\n\t\t\tTHREE.UniformsLib[ 'lightmap' ],\n\t\t\tTHREE.UniformsLib[ 'emissivemap' ],\n\t\t\tTHREE.UniformsLib[ 'fog' ],\n\t\t\tTHREE.UniformsLib[ 'lights' ],\n\n\t\t\t{\n\t\t\t\t\"emissive\" : { value: new THREE.Color( 0x000000 ) }\n\t\t\t}\n\n\t\t] ),\n\n\t\tvertexShader: THREE.ShaderChunk[ 'meshlambert_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'meshlambert_frag' ]\n\n\t},\n\n\t'phong': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\tTHREE.UniformsLib[ 'aomap' ],\n\t\t\tTHREE.UniformsLib[ 'lightmap' ],\n\t\t\tTHREE.UniformsLib[ 'emissivemap' ],\n\t\t\tTHREE.UniformsLib[ 'bumpmap' ],\n\t\t\tTHREE.UniformsLib[ 'normalmap' ],\n\t\t\tTHREE.UniformsLib[ 'displacementmap' ],\n\t\t\tTHREE.UniformsLib[ 'fog' ],\n\t\t\tTHREE.UniformsLib[ 'lights' ],\n\n\t\t\t{\n\t\t\t\t\"emissive\" : { value: new THREE.Color( 0x000000 ) },\n\t\t\t\t\"specular\" : { value: new THREE.Color( 0x111111 ) },\n\t\t\t\t\"shininess\": { value: 30 }\n\t\t\t}\n\n\t\t] ),\n\n\t\tvertexShader: THREE.ShaderChunk[ 'meshphong_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'meshphong_frag' ]\n\n\t},\n\n\t'standard': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\tTHREE.UniformsLib[ 'aomap' ],\n\t\t\tTHREE.UniformsLib[ 'lightmap' ],\n\t\t\tTHREE.UniformsLib[ 'emissivemap' ],\n\t\t\tTHREE.UniformsLib[ 'bumpmap' ],\n\t\t\tTHREE.UniformsLib[ 'normalmap' ],\n\t\t\tTHREE.UniformsLib[ 'displacementmap' ],\n\t\t\tTHREE.UniformsLib[ 'roughnessmap' ],\n\t\t\tTHREE.UniformsLib[ 'metalnessmap' ],\n\t\t\tTHREE.UniformsLib[ 'fog' ],\n\t\t\tTHREE.UniformsLib[ 'lights' ],\n\n\t\t\t{\n\t\t\t\t\"emissive\" : { value: new THREE.Color( 0x000000 ) },\n\t\t\t\t\"roughness\": { value: 0.5 },\n\t\t\t\t\"metalness\": { value: 0 },\n\t\t\t\t\"envMapIntensity\" : { value: 1 }, // temporary\n\t\t\t}\n\n\t\t] ),\n\n\t\tvertexShader: THREE.ShaderChunk[ 'meshphysical_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'meshphysical_frag' ]\n\n\t},\n\n\t'points': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ 'points' ],\n\t\t\tTHREE.UniformsLib[ 'fog' ]\n\n\t\t] ),\n\n\t\tvertexShader: THREE.ShaderChunk[ 'points_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'points_frag' ]\n\n\t},\n\n\t'dashed': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\tTHREE.UniformsLib[ 'fog' ],\n\n\t\t\t{\n\t\t\t\t\"scale\"    : { value: 1 },\n\t\t\t\t\"dashSize\" : { value: 1 },\n\t\t\t\t\"totalSize\": { value: 2 }\n\t\t\t}\n\n\t\t] ),\n\n\t\tvertexShader: THREE.ShaderChunk[ 'linedashed_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'linedashed_frag' ]\n\n\t},\n\n\t'depth': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ 'common' ],\n\t\t\tTHREE.UniformsLib[ 'displacementmap' ]\n\n\t\t] ),\n\n\t\tvertexShader: THREE.ShaderChunk[ 'depth_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'depth_frag' ]\n\n\t},\n\n\t'normal': {\n\n\t\tuniforms: {\n\n\t\t\t\"opacity\" : { value: 1.0 }\n\n\t\t},\n\n\t\tvertexShader: THREE.ShaderChunk[ 'normal_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'normal_frag' ]\n\n\t},\n\n\t/* -------------------------------------------------------------------------\n\t//\tCube map shader\n\t ------------------------------------------------------------------------- */\n\n\t'cube': {\n\n\t\tuniforms: {\n\t\t\t\"tCube\": { value: null },\n\t\t\t\"tFlip\": { value: - 1 }\n\t\t},\n\n\t\tvertexShader: THREE.ShaderChunk[ 'cube_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'cube_frag' ]\n\n\t},\n\n\t/* -------------------------------------------------------------------------\n\t//\tCube map shader\n\t ------------------------------------------------------------------------- */\n\n\t'equirect': {\n\n\t\tuniforms: {\n\t\t\t\"tEquirect\": { value: null },\n\t\t\t\"tFlip\": { value: - 1 }\n\t\t},\n\n\t\tvertexShader: THREE.ShaderChunk[ 'equirect_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'equirect_frag' ]\n\n\t},\n\n\t'distanceRGBA': {\n\n\t\tuniforms: {\n\n\t\t\t\"lightPos\": { value: new THREE.Vector3() }\n\n\t\t},\n\n\t\tvertexShader: THREE.ShaderChunk[ 'distanceRGBA_vert' ],\n\t\tfragmentShader: THREE.ShaderChunk[ 'distanceRGBA_frag' ]\n\n\t}\n\n};\n\nTHREE.ShaderLib[ 'physical' ] = {\n\n\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\tTHREE.ShaderLib[ 'standard' ].uniforms,\n\n\t\t{\n\t\t\t\"clearCoat\": { value: 0 },\n\t\t\t\"clearCoatRoughness\": { value: 0 }\n\t\t}\n\n\t] ),\n\n\tvertexShader: THREE.ShaderChunk[ 'meshphysical_vert' ],\n\tfragmentShader: THREE.ShaderChunk[ 'meshphysical_frag' ]\n\n};\n\n// File:src/renderers/WebGLRenderer.js\n\n/**\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author szimek / https://github.com/szimek/\n * @author tschw\n */\n\nTHREE.WebGLRenderer = function ( parameters ) {\n\n\tconsole.log( 'THREE.WebGLRenderer', THREE.REVISION );\n\n\tparameters = parameters || {};\n\n\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;\n\n\tvar lights = [];\n\n\tvar opaqueObjects = [];\n\tvar opaqueObjectsLastIndex = - 1;\n\tvar transparentObjects = [];\n\tvar transparentObjectsLastIndex = - 1;\n\n\tvar morphInfluences = new Float32Array( 8 );\n\n\tvar sprites = [];\n\tvar lensFlares = [];\n\n\t// public properties\n\n\tthis.domElement = _canvas;\n\tthis.context = null;\n\n\t// clearing\n\n\tthis.autoClear = true;\n\tthis.autoClearColor = true;\n\tthis.autoClearDepth = true;\n\tthis.autoClearStencil = true;\n\n\t// scene graph\n\n\tthis.sortObjects = true;\n\n\t// user-defined clipping\n\n\tthis.clippingPlanes = [];\n\tthis.localClippingEnabled = false;\n\n\t// physically based shading\n\n\tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\tthis.gammaInput = false;\n\tthis.gammaOutput = false;\n\n\t// physical lights\n\n\tthis.physicallyCorrectLights = false;\n\n\t// tone mapping\n\n\tthis.toneMapping = THREE.LinearToneMapping;\n\tthis.toneMappingExposure = 1.0;\n\tthis.toneMappingWhitePoint = 1.0;\n\n\t// morphs\n\n\tthis.maxMorphTargets = 8;\n\tthis.maxMorphNormals = 4;\n\n\t// internal properties\n\n\tvar _this = this,\n\n\t// internal state cache\n\n\t_currentProgram = null,\n\t_currentRenderTarget = null,\n\t_currentFramebuffer = null,\n\t_currentMaterialId = - 1,\n\t_currentGeometryProgram = '',\n\t_currentCamera = null,\n\n\t_currentScissor = new THREE.Vector4(),\n\t_currentScissorTest = null,\n\n\t_currentViewport = new THREE.Vector4(),\n\n\t//\n\n\t_usedTextureUnits = 0,\n\n\t//\n\n\t_clearColor = new THREE.Color( 0x000000 ),\n\t_clearAlpha = 0,\n\n\t_width = _canvas.width,\n\t_height = _canvas.height,\n\n\t_pixelRatio = 1,\n\n\t_scissor = new THREE.Vector4( 0, 0, _width, _height ),\n\t_scissorTest = false,\n\n\t_viewport = new THREE.Vector4( 0, 0, _width, _height ),\n\n\t// frustum\n\n\t_frustum = new THREE.Frustum(),\n\n\t// clipping\n\n\t_clipping = new THREE.WebGLClipping(),\n\t_clippingEnabled = false,\n\t_localClippingEnabled = false,\n\n\t_sphere = new THREE.Sphere(),\n\n\t// camera matrices cache\n\n\t_projScreenMatrix = new THREE.Matrix4(),\n\n\t_vector3 = new THREE.Vector3(),\n\n\t// light arrays cache\n\n\t_lights = {\n\n\t\thash: '',\n\n\t\tambient: [ 0, 0, 0 ],\n\t\tdirectional: [],\n\t\tdirectionalShadowMap: [],\n\t\tdirectionalShadowMatrix: [],\n\t\tspot: [],\n\t\tspotShadowMap: [],\n\t\tspotShadowMatrix: [],\n\t\tpoint: [],\n\t\tpointShadowMap: [],\n\t\tpointShadowMatrix: [],\n\t\themi: [],\n\n\t\tshadows: []\n\n\t},\n\n\t// info\n\n\t_infoRender = {\n\n\t\tcalls: 0,\n\t\tvertices: 0,\n\t\tfaces: 0,\n\t\tpoints: 0\n\n\t};\n\n\tthis.info = {\n\n\t\trender: _infoRender,\n\t\tmemory: {\n\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\n\t\t},\n\t\tprograms: null\n\n\t};\n\n\n\t// initialize\n\n\tvar _gl;\n\n\ttry {\n\n\t\tvar attributes = {\n\t\t\talpha: _alpha,\n\t\t\tdepth: _depth,\n\t\t\tstencil: _stencil,\n\t\t\tantialias: _antialias,\n\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer\n\t\t};\n\n\t\t_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );\n\n\t\tif ( _gl === null ) {\n\n\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\n\t\t\t\tthrow 'Error creating WebGL context with your selected attributes.';\n\n\t\t\t} else {\n\n\t\t\t\tthrow 'Error creating WebGL context.';\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t};\n\n\t\t}\n\n\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\n\t} catch ( error ) {\n\n\t\tconsole.error( 'THREE.WebGLRenderer: ' + error );\n\n\t}\n\n\tvar extensions = new THREE.WebGLExtensions( _gl );\n\n\textensions.get( 'WEBGL_depth_texture' );\n\textensions.get( 'OES_texture_float' );\n\textensions.get( 'OES_texture_float_linear' );\n\textensions.get( 'OES_texture_half_float' );\n\textensions.get( 'OES_texture_half_float_linear' );\n\textensions.get( 'OES_standard_derivatives' );\n\textensions.get( 'ANGLE_instanced_arrays' );\n\n\tif ( extensions.get( 'OES_element_index_uint' ) ) {\n\n\t\tTHREE.BufferGeometry.MaxIndex = 4294967296;\n\n\t}\n\n\tvar capabilities = new THREE.WebGLCapabilities( _gl, extensions, parameters );\n\n\tvar state = new THREE.WebGLState( _gl, extensions, paramThreeToGL );\n\tvar properties = new THREE.WebGLProperties();\n\tvar textures = new THREE.WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, this.info );\n\tvar objects = new THREE.WebGLObjects( _gl, properties, this.info );\n\tvar programCache = new THREE.WebGLPrograms( this, capabilities );\n\tvar lightCache = new THREE.WebGLLights();\n\n\tthis.info.programs = programCache.programs;\n\n\tvar bufferRenderer = new THREE.WebGLBufferRenderer( _gl, extensions, _infoRender );\n\tvar indexedBufferRenderer = new THREE.WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );\n\n\t//\n\n\tvar backgroundCamera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar backgroundCamera2 = new THREE.PerspectiveCamera();\n\tvar backgroundPlaneMesh = new THREE.Mesh(\n\t\tnew THREE.PlaneBufferGeometry( 2, 2 ),\n\t\tnew THREE.MeshBasicMaterial( { depthTest: false, depthWrite: false } )\n\t);\n\tvar backgroundBoxShader = THREE.ShaderLib[ 'cube' ];\n\tvar backgroundBoxMesh = new THREE.Mesh(\n\t\tnew THREE.BoxBufferGeometry( 5, 5, 5 ),\n\t\tnew THREE.ShaderMaterial( {\n\t\t\tuniforms: backgroundBoxShader.uniforms,\n\t\t\tvertexShader: backgroundBoxShader.vertexShader,\n\t\t\tfragmentShader: backgroundBoxShader.fragmentShader,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\tside: THREE.BackSide\n\t\t} )\n\t);\n\tobjects.update( backgroundPlaneMesh );\n\tobjects.update( backgroundBoxMesh );\n\n\t//\n\n\tfunction getTargetPixelRatio() {\n\n\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t}\n\n\tfunction glClearColor( r, g, b, a ) {\n\n\t\tif ( _premultipliedAlpha === true ) {\n\n\t\t\tr *= a; g *= a; b *= a;\n\n\t\t}\n\n\t\tstate.clearColor( r, g, b, a );\n\n\t}\n\n\tfunction setDefaultGLState() {\n\n\t\tstate.init();\n\n\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\n\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\n\n\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n\t}\n\n\tfunction resetGLState() {\n\n\t\t_currentProgram = null;\n\t\t_currentCamera = null;\n\n\t\t_currentGeometryProgram = '';\n\t\t_currentMaterialId = - 1;\n\n\t\tstate.reset();\n\n\t}\n\n\tsetDefaultGLState();\n\n\tthis.context = _gl;\n\tthis.capabilities = capabilities;\n\tthis.extensions = extensions;\n\tthis.properties = properties;\n\tthis.state = state;\n\n\t// shadow map\n\n\tvar shadowMap = new THREE.WebGLShadowMap( this, _lights, objects );\n\n\tthis.shadowMap = shadowMap;\n\n\n\t// Plugins\n\n\tvar spritePlugin = new THREE.SpritePlugin( this, sprites );\n\tvar lensFlarePlugin = new THREE.LensFlarePlugin( this, lensFlares );\n\n\t// API\n\n\tthis.getContext = function () {\n\n\t\treturn _gl;\n\n\t};\n\n\tthis.getContextAttributes = function () {\n\n\t\treturn _gl.getContextAttributes();\n\n\t};\n\n\tthis.forceContextLoss = function () {\n\n\t\textensions.get( 'WEBGL_lose_context' ).loseContext();\n\n\t};\n\n\tthis.getMaxAnisotropy = function () {\n\n\t\treturn capabilities.getMaxAnisotropy();\n\n\t};\n\n\tthis.getPrecision = function () {\n\n\t\treturn capabilities.precision;\n\n\t};\n\n\tthis.getPixelRatio = function () {\n\n\t\treturn _pixelRatio;\n\n\t};\n\n\tthis.setPixelRatio = function ( value ) {\n\n\t\tif ( value === undefined ) return;\n\n\t\t_pixelRatio = value;\n\n\t\tthis.setSize( _viewport.z, _viewport.w, false );\n\n\t};\n\n\tthis.getSize = function () {\n\n\t\treturn {\n\t\t\twidth: _width,\n\t\t\theight: _height\n\t\t};\n\n\t};\n\n\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\t_width = width;\n\t\t_height = height;\n\n\t\t_canvas.width = width * _pixelRatio;\n\t\t_canvas.height = height * _pixelRatio;\n\n\t\tif ( updateStyle !== false ) {\n\n\t\t\t_canvas.style.width = width + 'px';\n\t\t\t_canvas.style.height = height + 'px';\n\n\t\t}\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\tstate.viewport( _viewport.set( x, y, width, height ) );\n\n\t};\n\n\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\tstate.scissor( _scissor.set( x, y, width, height ) );\n\n\t};\n\n\tthis.setScissorTest = function ( boolean ) {\n\n\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t};\n\n\t// Clearing\n\n\tthis.getClearColor = function () {\n\n\t\treturn _clearColor;\n\n\t};\n\n\tthis.setClearColor = function ( color, alpha ) {\n\n\t\t_clearColor.set( color );\n\n\t\t_clearAlpha = alpha !== undefined ? alpha : 1;\n\n\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n\t};\n\n\tthis.getClearAlpha = function () {\n\n\t\treturn _clearAlpha;\n\n\t};\n\n\tthis.setClearAlpha = function ( alpha ) {\n\n\t\t_clearAlpha = alpha;\n\n\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n\t};\n\n\tthis.clear = function ( color, depth, stencil ) {\n\n\t\tvar bits = 0;\n\n\t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\n\t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\n\t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t_gl.clear( bits );\n\n\t};\n\n\tthis.clearColor = function () {\n\n\t\tthis.clear( true, false, false );\n\n\t};\n\n\tthis.clearDepth = function () {\n\n\t\tthis.clear( false, true, false );\n\n\t};\n\n\tthis.clearStencil = function () {\n\n\t\tthis.clear( false, false, true );\n\n\t};\n\n\tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\n\n\t\tthis.setRenderTarget( renderTarget );\n\t\tthis.clear( color, depth, stencil );\n\n\t};\n\n\t// Reset\n\n\tthis.resetGLState = resetGLState;\n\n\tthis.dispose = function() {\n\n\t\ttransparentObjects = [];\n\t\ttransparentObjectsLastIndex = -1;\n\t\topaqueObjects = [];\n\t\topaqueObjectsLastIndex = -1;\n\n\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\n\t};\n\n\t// Events\n\n\tfunction onContextLost( event ) {\n\n\t\tevent.preventDefault();\n\n\t\tresetGLState();\n\t\tsetDefaultGLState();\n\n\t\tproperties.clear();\n\n\t}\n\n\tfunction onMaterialDispose( event ) {\n\n\t\tvar material = event.target;\n\n\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\tdeallocateMaterial( material );\n\n\t}\n\n\t// Buffer deallocation\n\n\tfunction deallocateMaterial( material ) {\n\n\t\treleaseMaterialProgramReference( material );\n\n\t\tproperties.delete( material );\n\n\t}\n\n\n\tfunction releaseMaterialProgramReference( material ) {\n\n\t\tvar programInfo = properties.get( material ).program;\n\n\t\tmaterial.program = undefined;\n\n\t\tif ( programInfo !== undefined ) {\n\n\t\t\tprogramCache.releaseProgram( programInfo );\n\n\t\t}\n\n\t}\n\n\t// Buffer rendering\n\n\tthis.renderBufferImmediate = function ( object, program, material ) {\n\n\t\tstate.initAttributes();\n\n\t\tvar buffers = properties.get( object );\n\n\t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\n\t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\n\t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\n\t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\n\n\t\tvar attributes = program.getAttributes();\n\n\t\tif ( object.hasPositions ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( attributes.position );\n\t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasNormals ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\n\n\t\t\tif ( material.type !== 'MeshPhongMaterial' && material.type !== 'MeshStandardMaterial' && material.type !== 'MeshPhysicalMaterial' && material.shading === THREE.FlatShading ) {\n\n\t\t\t\tfor ( var i = 0, l = object.count * 3; i < l; i += 9 ) {\n\n\t\t\t\t\tvar array = object.normalArray;\n\n\t\t\t\t\tvar nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;\n\t\t\t\t\tvar ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;\n\t\t\t\t\tvar nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;\n\n\t\t\t\t\tarray[ i + 0 ] = nx;\n\t\t\t\t\tarray[ i + 1 ] = ny;\n\t\t\t\t\tarray[ i + 2 ] = nz;\n\n\t\t\t\t\tarray[ i + 3 ] = nx;\n\t\t\t\t\tarray[ i + 4 ] = ny;\n\t\t\t\t\tarray[ i + 5 ] = nz;\n\n\t\t\t\t\tarray[ i + 6 ] = nx;\n\t\t\t\t\tarray[ i + 7 ] = ny;\n\t\t\t\t\tarray[ i + 8 ] = nz;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( attributes.normal );\n\n\t\t\t_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasUvs && material.map ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( attributes.uv );\n\n\t\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasColors && material.vertexColors !== THREE.NoColors ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( attributes.color );\n\n\t\t\t_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tstate.disableUnusedAttributes();\n\n\t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\n\n\t\tobject.count = 0;\n\n\t};\n\n\tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\n\n\t\tsetMaterial( material );\n\n\t\tvar program = setProgram( camera, fog, material, object );\n\n\t\tvar updateBuffers = false;\n\t\tvar geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;\n\n\t\tif ( geometryProgram !== _currentGeometryProgram ) {\n\n\t\t\t_currentGeometryProgram = geometryProgram;\n\t\t\tupdateBuffers = true;\n\n\t\t}\n\n\t\t// morph targets\n\n\t\tvar morphTargetInfluences = object.morphTargetInfluences;\n\n\t\tif ( morphTargetInfluences !== undefined ) {\n\n\t\t\tvar activeInfluences = [];\n\n\t\t\tfor ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {\n\n\t\t\t\tvar influence = morphTargetInfluences[ i ];\n\t\t\t\tactiveInfluences.push( [ influence, i ] );\n\n\t\t\t}\n\n\t\t\tactiveInfluences.sort( absNumericalSort );\n\n\t\t\tif ( activeInfluences.length > 8 ) {\n\n\t\t\t\tactiveInfluences.length = 8;\n\n\t\t\t}\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {\n\n\t\t\t\tvar influence = activeInfluences[ i ];\n\t\t\t\tmorphInfluences[ i ] = influence[ 0 ];\n\n\t\t\t\tif ( influence[ 0 ] !== 0 ) {\n\n\t\t\t\t\tvar index = influence[ 1 ];\n\n\t\t\t\t\tif ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );\n\t\t\t\t\tif ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );\n\t\t\t\t\tif ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tprogram.getUniforms().setValue(\n\t\t\t\t\t_gl, 'morphTargetInfluences', morphInfluences );\n\n\t\t\tupdateBuffers = true;\n\n\t\t}\n\n\t\t//\n\n\t\tvar index = geometry.index;\n\t\tvar position = geometry.attributes.position;\n\n\t\tif ( material.wireframe === true ) {\n\n\t\t\tindex = objects.getWireframeAttribute( geometry );\n\n\t\t}\n\n\t\tvar renderer;\n\n\t\tif ( index !== null ) {\n\n\t\t\trenderer = indexedBufferRenderer;\n\t\t\trenderer.setIndex( index );\n\n\t\t} else {\n\n\t\t\trenderer = bufferRenderer;\n\n\t\t}\n\n\t\tif ( updateBuffers ) {\n\n\t\t\tsetupVertexAttributes( material, program, geometry );\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar dataStart = 0;\n\t\tvar dataCount = Infinity;\n\n\t\tif ( index !== null ) {\n\n\t\t\tdataCount = index.count;\n\n\t\t} else if ( position !== undefined ) {\n\n\t\t\tdataCount = position.count;\n\n\t\t}\n\n\t\tvar rangeStart = geometry.drawRange.start;\n\t\tvar rangeCount = geometry.drawRange.count;\n\n\t\tvar groupStart = group !== null ? group.start : 0;\n\t\tvar groupCount = group !== null ? group.count : Infinity;\n\n\t\tvar drawStart = Math.max( dataStart, rangeStart, groupStart );\n\t\tvar drawEnd = Math.min( dataStart + dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n\t\t//\n\n\t\tif ( object instanceof THREE.Mesh ) {\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t} else {\n\n\t\t\t\tswitch ( object.drawMode ) {\n\n\t\t\t\t\tcase THREE.TrianglesDrawMode:\n\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.TriangleStripDrawMode:\n\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_STRIP );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.TriangleFanDrawMode:\n\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_FAN );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t} else if ( object instanceof THREE.Line ) {\n\n\t\t\tvar lineWidth = material.linewidth;\n\n\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\n\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\tif ( object instanceof THREE.LineSegments ) {\n\n\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setMode( _gl.LINE_STRIP );\n\n\t\t\t}\n\n\t\t} else if ( object instanceof THREE.Points ) {\n\n\t\t\trenderer.setMode( _gl.POINTS );\n\n\t\t}\n\n\t\tif ( geometry instanceof THREE.InstancedBufferGeometry ) {\n\n\t\t\tif ( geometry.maxInstancedCount > 0 ) {\n\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t}\n\n\t};\n\n\tfunction setupVertexAttributes( material, program, geometry, startIndex ) {\n\n\t\tvar extension;\n\n\t\tif ( geometry instanceof THREE.InstancedBufferGeometry ) {\n\n\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( startIndex === undefined ) startIndex = 0;\n\n\t\tstate.initAttributes();\n\n\t\tvar geometryAttributes = geometry.attributes;\n\n\t\tvar programAttributes = program.getAttributes();\n\n\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\tfor ( var name in programAttributes ) {\n\n\t\t\tvar programAttribute = programAttributes[ name ];\n\n\t\t\tif ( programAttribute >= 0 ) {\n\n\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\tvar type = _gl.FLOAT;\n\t\t\t\t\tvar array = geometryAttribute.array;\n\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\n\t\t\t\t\tif ( array instanceof Float32Array ) {\n\n\t\t\t\t\t\ttype = _gl.FLOAT;\n\n\t\t\t\t\t} else if ( array instanceof Float64Array ) {\n\n\t\t\t\t\t\tconsole.warn(\"Unsupported data buffer format: Float64Array\");\n\n\t\t\t\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\t\t\t\ttype = _gl.UNSIGNED_SHORT;\n\n\t\t\t\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\t\t\t\ttype = _gl.SHORT;\n\n\t\t\t\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\t\t\t\ttype = _gl.UNSIGNED_INT;\n\n\t\t\t\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\t\t\t\ttype = _gl.INT;\n\n\t\t\t\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\t\t\t\ttype = _gl.BYTE;\n\n\t\t\t\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\t\t\t\ttype = _gl.UNSIGNED_BYTE;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\t\t\t\t\tvar buffer = objects.getAttributeBuffer( geometryAttribute );\n\n\t\t\t\t\tif ( geometryAttribute instanceof THREE.InterleavedBufferAttribute ) {\n\n\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n\t\t\t\t\t\tif ( data instanceof THREE.InstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );\n\n\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( geometryAttribute instanceof THREE.InstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );\n\n\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * geometryAttribute.array.BYTES_PER_ELEMENT );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.disableUnusedAttributes();\n\n\t}\n\n\t// Sorting\n\n\tfunction absNumericalSort( a, b ) {\n\n\t\treturn Math.abs( b[ 0 ] ) - Math.abs( a[ 0 ] );\n\n\t}\n\n\tfunction painterSortStable ( a, b ) {\n\n\t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\n\t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\n\t\t} else if ( a.material.id !== b.material.id ) {\n\n\t\t\treturn a.material.id - b.material.id;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn a.z - b.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\tfunction reversePainterSortStable ( a, b ) {\n\n\t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\n\n\t\t\treturn a.object.renderOrder - b.object.renderOrder;\n\n\t\t} if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\t// Rendering\n\n\tthis.render = function ( scene, camera, renderTarget, forceClear ) {\n\n\t\tif ( camera instanceof THREE.Camera === false ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar fog = scene.fog;\n\n\t\t// reset caching for this frame\n\n\t\t_currentGeometryProgram = '';\n\t\t_currentMaterialId = - 1;\n\t\t_currentCamera = null;\n\n\t\t// update scene graph\n\n\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t// update camera matrices and frustum\n\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\tlights.length = 0;\n\n\t\topaqueObjectsLastIndex = - 1;\n\t\ttransparentObjectsLastIndex = - 1;\n\n\t\tsprites.length = 0;\n\t\tlensFlares.length = 0;\n\n\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n\t\tprojectObject( scene, camera );\n\n\t\topaqueObjects.length = opaqueObjectsLastIndex + 1;\n\t\ttransparentObjects.length = transparentObjectsLastIndex + 1;\n\n\t\tif ( _this.sortObjects === true ) {\n\n\t\t\topaqueObjects.sort( painterSortStable );\n\t\t\ttransparentObjects.sort( reversePainterSortStable );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( _clippingEnabled ) _clipping.beginShadows();\n\n\t\tsetupShadows( lights );\n\n\t\tshadowMap.render( scene, camera );\n\n\t\tsetupLights( lights, camera );\n\n\t\tif ( _clippingEnabled ) _clipping.endShadows();\n\n\t\t//\n\n\t\t_infoRender.calls = 0;\n\t\t_infoRender.vertices = 0;\n\t\t_infoRender.faces = 0;\n\t\t_infoRender.points = 0;\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\trenderTarget = null;\n\n\t\t}\n\n\t\tthis.setRenderTarget( renderTarget );\n\n\t\t//\n\n\t\tvar background = scene.background;\n\n\t\tif ( background === null ) {\n\n\t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n\t\t} else if ( background instanceof THREE.Color ) {\n\n\t\t\tglClearColor( background.r, background.g, background.b, 1 );\n\n\t\t}\n\n\t\tif ( this.autoClear || forceClear ) {\n\n\t\t\tthis.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );\n\n\t\t}\n\n\t\tif ( background instanceof THREE.CubeTexture ) {\n\n\t\t\tbackgroundCamera2.projectionMatrix.copy( camera.projectionMatrix );\n\n\t\t\tbackgroundCamera2.matrixWorld.extractRotation( camera.matrixWorld );\n\t\t\tbackgroundCamera2.matrixWorldInverse.getInverse( backgroundCamera2.matrixWorld );\n\n\t\t\tbackgroundBoxMesh.material.uniforms[ \"tCube\" ].value = background;\n\t\t\tbackgroundBoxMesh.modelViewMatrix.multiplyMatrices( backgroundCamera2.matrixWorldInverse, backgroundBoxMesh.matrixWorld );\n\n\t\t\t_this.renderBufferDirect( backgroundCamera2, null, backgroundBoxMesh.geometry, backgroundBoxMesh.material, backgroundBoxMesh, null );\n\n\t\t} else if ( background instanceof THREE.Texture ) {\n\n\t\t\tbackgroundPlaneMesh.material.map = background;\n\n\t\t\t_this.renderBufferDirect( backgroundCamera, null, backgroundPlaneMesh.geometry, backgroundPlaneMesh.material, backgroundPlaneMesh, null );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( scene.overrideMaterial ) {\n\n\t\t\tvar overrideMaterial = scene.overrideMaterial;\n\n\t\t\trenderObjects( opaqueObjects, camera, fog, overrideMaterial );\n\t\t\trenderObjects( transparentObjects, camera, fog, overrideMaterial );\n\n\t\t} else {\n\n\t\t\t// opaque pass (front-to-back order)\n\n\t\t\tstate.setBlending( THREE.NoBlending );\n\t\t\trenderObjects( opaqueObjects, camera, fog );\n\n\t\t\t// transparent pass (back-to-front order)\n\n\t\t\trenderObjects( transparentObjects, camera, fog );\n\n\t\t}\n\n\t\t// custom render plugins (post pass)\n\n\t\tspritePlugin.render( scene, camera );\n\t\tlensFlarePlugin.render( scene, camera, _currentViewport );\n\n\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\tif ( renderTarget ) {\n\n\t\t\ttextures.updateRenderTargetMipmap( renderTarget );\n\n\t\t}\n\n\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\tstate.setDepthTest( true );\n\t\tstate.setDepthWrite( true );\n\t\tstate.setColorWrite( true );\n\n\t\t// _gl.finish();\n\n\t};\n\n\tfunction pushRenderItem( object, geometry, material, z, group ) {\n\n\t\tvar array, index;\n\n\t\t// allocate the next position in the appropriate array\n\n\t\tif ( material.transparent ) {\n\n\t\t\tarray = transparentObjects;\n\t\t\tindex = ++ transparentObjectsLastIndex;\n\n\t\t} else {\n\n\t\t\tarray = opaqueObjects;\n\t\t\tindex = ++ opaqueObjectsLastIndex;\n\n\t\t}\n\n\t\t// recycle existing render item or grow the array\n\n\t\tvar renderItem = array[ index ];\n\n\t\tif ( renderItem !== undefined ) {\n\n\t\t\trenderItem.id = object.id;\n\t\t\trenderItem.object = object;\n\t\t\trenderItem.geometry = geometry;\n\t\t\trenderItem.material = material;\n\t\t\trenderItem.z = _vector3.z;\n\t\t\trenderItem.group = group;\n\n\t\t} else {\n\n\t\t\trenderItem = {\n\t\t\t\tid: object.id,\n\t\t\t\tobject: object,\n\t\t\t\tgeometry: geometry,\n\t\t\t\tmaterial: material,\n\t\t\t\tz: _vector3.z,\n\t\t\t\tgroup: group\n\t\t\t};\n\n\t\t\t// assert( index === array.length );\n\t\t\tarray.push( renderItem );\n\n\t\t}\n\n\t}\n\n\t// TODO Duplicated code (Frustum)\n\n\tfunction isObjectViewable( object ) {\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( geometry.boundingSphere === null )\n\t\t\tgeometry.computeBoundingSphere();\n\n\t\t_sphere.copy( geometry.boundingSphere ).\n\t\t\tapplyMatrix4( object.matrixWorld );\n\n\t\treturn isSphereViewable( _sphere );\n\n\t}\n\n\tfunction isSpriteViewable( sprite ) {\n\n\t\t_sphere.center.set( 0, 0, 0 );\n\t\t_sphere.radius = 0.7071067811865476;\n\t\t_sphere.applyMatrix4( sprite.matrixWorld );\n\n\t\treturn isSphereViewable( _sphere );\n\n\t}\n\n\tfunction isSphereViewable( sphere ) {\n\n\t\tif ( ! _frustum.intersectsSphere( sphere ) ) return false;\n\n\t\tvar numPlanes = _clipping.numPlanes;\n\n\t\tif ( numPlanes === 0 ) return true;\n\n\t\tvar planes = _this.clippingPlanes,\n\n\t\t\tcenter = sphere.center,\n\t\t\tnegRad = - sphere.radius,\n\t\t\ti = 0;\n\n\t\tdo {\n\n\t\t\t// out when deeper than radius in the negative halfspace\n\t\t\tif ( planes[ i ].distanceToPoint( center ) < negRad ) return false;\n\n\t\t} while ( ++ i !== numPlanes );\n\n\t\treturn true;\n\n\t}\n\n\tfunction projectObject( object, camera ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tif ( object.layers.test( camera.layers ) ) {\n\n\t\t\tif ( object instanceof THREE.Light ) {\n\n\t\t\t\tlights.push( object );\n\n\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\n\t\t\t\tif ( object.frustumCulled === false || isSpriteViewable( object ) === true ) {\n\n\t\t\t\t\tsprites.push( object );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object instanceof THREE.LensFlare ) {\n\n\t\t\t\tlensFlares.push( object );\n\n\t\t\t} else if ( object instanceof THREE.ImmediateRenderObject ) {\n\n\t\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\n\t\t\t\t}\n\n\t\t\t\tpushRenderItem( object, null, object.material, _vector3.z, null );\n\n\t\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) {\n\n\t\t\t\tif ( object instanceof THREE.SkinnedMesh ) {\n\n\t\t\t\t\tobject.skeleton.update();\n\n\t\t\t\t}\n\n\t\t\t\tif ( object.frustumCulled === false || isObjectViewable( object ) === true ) {\n\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( material.visible === true ) {\n\n\t\t\t\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update( object );\n\n\t\t\t\t\t\tif ( material instanceof THREE.MultiMaterial ) {\n\n\t\t\t\t\t\t\tvar groups = geometry.groups;\n\t\t\t\t\t\t\tvar materials = material.materials;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\n\t\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\n\t\t\t\t\t\t\t\t\tpushRenderItem( object, geometry, groupMaterial, _vector3.z, group );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tpushRenderItem( object, geometry, material, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar children = object.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tprojectObject( children[ i ], camera );\n\n\t\t}\n\n\t}\n\n\tfunction renderObjects( renderList, camera, fog, overrideMaterial ) {\n\n\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\tvar renderItem = renderList[ i ];\n\n\t\t\tvar object = renderItem.object;\n\t\t\tvar geometry = renderItem.geometry;\n\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n\t\t\tvar group = renderItem.group;\n\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\t\tif ( object instanceof THREE.ImmediateRenderObject ) {\n\n\t\t\t\tsetMaterial( material );\n\n\t\t\t\tvar program = setProgram( camera, fog, material, object );\n\n\t\t\t\t_currentGeometryProgram = '';\n\n\t\t\t\tobject.render( function ( object ) {\n\n\t\t\t\t\t_this.renderBufferImmediate( object, program, material );\n\n\t\t\t\t} );\n\n\t\t\t} else {\n\n\t\t\t\t_this.renderBufferDirect( camera, fog, geometry, material, object, group );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction initMaterial( material, fog, object ) {\n\n\t\tvar materialProperties = properties.get( material );\n\n\t\tvar parameters = programCache.getParameters(\n\t\t\t\tmaterial, _lights, fog, _clipping.numPlanes, object );\n\n\t\tvar code = programCache.getProgramCode( material, parameters );\n\n\t\tvar program = materialProperties.program;\n\t\tvar programChange = true;\n\n\t\tif ( program === undefined ) {\n\n\t\t\t// new material\n\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t} else if ( program.code !== code ) {\n\n\t\t\t// changed glsl or parameters\n\t\t\treleaseMaterialProgramReference( material );\n\n\t\t} else if ( parameters.shaderID !== undefined ) {\n\n\t\t\t// same glsl and uniform list\n\t\t\treturn;\n\n\t\t} else {\n\n\t\t\t// only rebuild uniform list\n\t\t\tprogramChange = false;\n\n\t\t}\n\n\t\tif ( programChange ) {\n\n\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\tvar shader = THREE.ShaderLib[ parameters.shaderID ];\n\n\t\t\t\tmaterialProperties.__webglShader = {\n\t\t\t\t\tname: material.type,\n\t\t\t\t\tuniforms: THREE.UniformsUtils.clone( shader.uniforms ),\n\t\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\t\tfragmentShader: shader.fragmentShader\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tmaterialProperties.__webglShader = {\n\t\t\t\t\tname: material.type,\n\t\t\t\t\tuniforms: material.uniforms,\n\t\t\t\t\tvertexShader: material.vertexShader,\n\t\t\t\t\tfragmentShader: material.fragmentShader\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tmaterial.__webglShader = materialProperties.__webglShader;\n\n\t\t\tprogram = programCache.acquireProgram( material, parameters, code );\n\n\t\t\tmaterialProperties.program = program;\n\t\t\tmaterial.program = program;\n\n\t\t}\n\n\t\tvar attributes = program.getAttributes();\n\n\t\tif ( material.morphTargets ) {\n\n\t\t\tmaterial.numSupportedMorphTargets = 0;\n\n\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\n\t\t\t\tif ( attributes[ 'morphTarget' + i ] >= 0 ) {\n\n\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.morphNormals ) {\n\n\t\t\tmaterial.numSupportedMorphNormals = 0;\n\n\t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\n\t\t\t\tif ( attributes[ 'morphNormal' + i ] >= 0 ) {\n\n\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar uniforms = materialProperties.__webglShader.uniforms;\n\n\t\tif ( ! ( material instanceof THREE.ShaderMaterial ) &&\n\t\t\t\t! ( material instanceof THREE.RawShaderMaterial ) ||\n\t\t\t\tmaterial.clipping === true ) {\n\n\t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n\t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\n\t\t}\n\n\t\tif ( material.lights ) {\n\n\t\t\t// store the light setup it was created for\n\n\t\t\tmaterialProperties.lightsHash = _lights.hash;\n\n\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\tuniforms.ambientLightColor.value = _lights.ambient;\n\t\t\tuniforms.directionalLights.value = _lights.directional;\n\t\t\tuniforms.spotLights.value = _lights.spot;\n\t\t\tuniforms.pointLights.value = _lights.point;\n\t\t\tuniforms.hemisphereLights.value = _lights.hemi;\n\n\t\t\tuniforms.directionalShadowMap.value = _lights.directionalShadowMap;\n\t\t\tuniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;\n\t\t\tuniforms.spotShadowMap.value = _lights.spotShadowMap;\n\t\t\tuniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;\n\t\t\tuniforms.pointShadowMap.value = _lights.pointShadowMap;\n\t\t\tuniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;\n\n\t\t}\n\n\t\tvar progUniforms = materialProperties.program.getUniforms(),\n\t\t\tuniformsList =\n\t\t\t\t\tTHREE.WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\tmaterialProperties.uniformsList = uniformsList;\n\t\tmaterialProperties.dynamicUniforms =\n\t\t\t\tTHREE.WebGLUniforms.splitDynamic( uniformsList, uniforms );\n\n\t}\n\n\tfunction setMaterial( material ) {\n\n\t\tif ( material.side !== THREE.DoubleSide )\n\t\t\tstate.enable( _gl.CULL_FACE );\n\t\telse\n\t\t\tstate.disable( _gl.CULL_FACE );\n\n\t\tstate.setFlipSided( material.side === THREE.BackSide );\n\n\t\tif ( material.transparent === true ) {\n\n\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\n\t\t} else {\n\n\t\t\tstate.setBlending( THREE.NoBlending );\n\n\t\t}\n\n\t\tstate.setDepthFunc( material.depthFunc );\n\t\tstate.setDepthTest( material.depthTest );\n\t\tstate.setDepthWrite( material.depthWrite );\n\t\tstate.setColorWrite( material.colorWrite );\n\t\tstate.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t}\n\n\tfunction setProgram( camera, fog, material, object ) {\n\n\t\t_usedTextureUnits = 0;\n\n\t\tvar materialProperties = properties.get( material );\n\n\t\tif ( _clippingEnabled ) {\n\n\t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\n\t\t\t\tvar useCache =\n\t\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t// (#8465, #8379)\n\t\t\t\t_clipping.setState(\n\t\t\t\t\t\tmaterial.clippingPlanes, material.clipShadows,\n\t\t\t\t\t\tcamera, materialProperties, useCache );\n\n\t\t\t}\n\n\t\t\tif ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\tmaterialProperties.numClippingPlanes !== _clipping.numPlanes ) {\n\n\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialProperties.program === undefined ) {\n\n\t\t\tmaterial.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( materialProperties.lightsHash !== undefined &&\n\t\t\tmaterialProperties.lightsHash !== _lights.hash ) {\n\n\t\t\tmaterial.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( material.needsUpdate ) {\n\n\t\t\tinitMaterial( material, fog, object );\n\t\t\tmaterial.needsUpdate = false;\n\n\t\t}\n\n\t\tvar refreshProgram = false;\n\t\tvar refreshMaterial = false;\n\t\tvar refreshLights = false;\n\n\t\tvar program = materialProperties.program,\n\t\t\tp_uniforms = program.getUniforms(),\n\t\t\tm_uniforms = materialProperties.__webglShader.uniforms;\n\n\t\tif ( program.id !== _currentProgram ) {\n\n\t\t\t_gl.useProgram( program.program );\n\t\t\t_currentProgram = program.id;\n\n\t\t\trefreshProgram = true;\n\t\t\trefreshMaterial = true;\n\t\t\trefreshLights = true;\n\n\t\t}\n\n\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t_currentMaterialId = material.id;\n\n\t\t\trefreshMaterial = true;\n\n\t\t}\n\n\t\tif ( refreshProgram || camera !== _currentCamera ) {\n\n\t\t\tp_uniforms.set( _gl, camera, 'projectionMatrix' );\n\n\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t}\n\n\n\t\t\tif ( camera !== _currentCamera ) {\n\n\t\t\t\t_currentCamera = camera;\n\n\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t}\n\n\t\t\t// load material specific uniforms\n\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\tif ( material instanceof THREE.ShaderMaterial ||\n\t\t\t\t material instanceof THREE.MeshPhongMaterial ||\n\t\t\t\t material instanceof THREE.MeshStandardMaterial ||\n\t\t\t\t material.envMap ) {\n\n\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material instanceof THREE.MeshPhongMaterial ||\n\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\n\t\t\t\t material instanceof THREE.MeshBasicMaterial ||\n\t\t\t\t material instanceof THREE.MeshStandardMaterial ||\n\t\t\t\t material instanceof THREE.ShaderMaterial ||\n\t\t\t\t material.skinning ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t}\n\n\t\t\tp_uniforms.set( _gl, _this, 'toneMappingExposure' );\n\t\t\tp_uniforms.set( _gl, _this, 'toneMappingWhitePoint' );\n\n\t\t}\n\n\t\t// skinning uniforms must be set even if material didn't change\n\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t// not sure why, but otherwise weird things happen\n\n\t\tif ( material.skinning ) {\n\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\tvar skeleton = object.skeleton;\n\n\t\t\tif ( skeleton ) {\n\n\t\t\t\tif ( capabilities.floatVertexTextures && skeleton.useVertexTexture ) {\n\n\t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTexture' );\n\t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureWidth' );\n\t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureHeight' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( refreshMaterial ) {\n\n\t\t\tif ( material.lights ) {\n\n\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t// values\n\t\t\t\t//\n\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t// the GL state when required\n\n\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t}\n\n\t\t\t// refresh uniforms common to several materials\n\n\t\t\tif ( fog && material.fog ) {\n\n\t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\n\t\t\t}\n\n\t\t\tif ( material instanceof THREE.MeshBasicMaterial ||\n\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\n\t\t\t\t material instanceof THREE.MeshPhongMaterial ||\n\t\t\t\t material instanceof THREE.MeshStandardMaterial ||\n\t\t\t\t material instanceof THREE.MeshDepthMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t}\n\n\t\t\t// refresh single material specific uniforms\n\n\t\t\tif ( material instanceof THREE.LineBasicMaterial ) {\n\n\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.LineDashedMaterial ) {\n\n\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\t\t\t\trefreshUniformsDash( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.PointsMaterial ) {\n\n\t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.MeshLambertMaterial ) {\n\n\t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.MeshPhongMaterial ) {\n\n\t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.MeshPhysicalMaterial ) {\n\n\t\t\t\trefreshUniformsPhysical( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.MeshStandardMaterial ) {\n\n\t\t\t\trefreshUniformsStandard( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.MeshDepthMaterial ) {\n\n\t\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\t\tm_uniforms.displacementMap.value = material.displacementMap;\n\t\t\t\t\tm_uniforms.displacementScale.value = material.displacementScale;\n\t\t\t\t\tm_uniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t\t}\n\n\t\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\n\n\t\t\t\tm_uniforms.opacity.value = material.opacity;\n\n\t\t\t}\n\n\t\t\tTHREE.WebGLUniforms.upload(\n\t\t\t\t\t_gl, materialProperties.uniformsList, m_uniforms, _this );\n\n\t\t}\n\n\n\t\t// common matrices\n\n\t\tp_uniforms.set( _gl, object, 'modelViewMatrix' );\n\t\tp_uniforms.set( _gl, object, 'normalMatrix' );\n\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\n\t\t// dynamic uniforms\n\n\t\tvar dynUniforms = materialProperties.dynamicUniforms;\n\n\t\tif ( dynUniforms !== null ) {\n\n\t\t\tTHREE.WebGLUniforms.evalDynamic(\n\t\t\t\t\tdynUniforms, m_uniforms, object, camera );\n\n\t\t\tTHREE.WebGLUniforms.upload( _gl, dynUniforms, m_uniforms, _this );\n\n\t\t}\n\n\t\treturn program;\n\n\t}\n\n\t// Uniforms (refresh uniforms objects)\n\n\tfunction refreshUniformsCommon ( uniforms, material ) {\n\n\t\tuniforms.opacity.value = material.opacity;\n\n\t\tuniforms.diffuse.value = material.color;\n\n\t\tif ( material.emissive ) {\n\n\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t}\n\n\t\tuniforms.map.value = material.map;\n\t\tuniforms.specularMap.value = material.specularMap;\n\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\tif ( material.aoMap ) {\n\n\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. specular map\n\t\t// 3. normal map\n\t\t// 4. bump map\n\t\t// 5. alpha map\n\t\t// 6. emissive map\n\n\t\tvar uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.specularMap ) {\n\n\t\t\tuvScaleMap = material.specularMap;\n\n\t\t} else if ( material.displacementMap ) {\n\n\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t} else if ( material.normalMap ) {\n\n\t\t\tuvScaleMap = material.normalMap;\n\n\t\t} else if ( material.bumpMap ) {\n\n\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t} else if ( material.roughnessMap ) {\n\n\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t} else if ( material.metalnessMap ) {\n\n\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t} else if ( material.emissiveMap ) {\n\n\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t// backwards compatibility\n\t\t\tif ( uvScaleMap instanceof THREE.WebGLRenderTarget ) {\n\n\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t}\n\n\t\t\tvar offset = uvScaleMap.offset;\n\t\t\tvar repeat = uvScaleMap.repeat;\n\n\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\n\t\t}\n\n\t\tuniforms.envMap.value = material.envMap;\n\n\t\t// don't flip CubeTexture envMaps, flip everything else:\n\t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\n\t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n\t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n\t\tuniforms.flipEnvMap.value = ( ! ( material.envMap instanceof THREE.CubeTexture ) ) ? 1 : - 1;\n\n\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t}\n\n\tfunction refreshUniformsLine ( uniforms, material ) {\n\n\t\tuniforms.diffuse.value = material.color;\n\t\tuniforms.opacity.value = material.opacity;\n\n\t}\n\n\tfunction refreshUniformsDash ( uniforms, material ) {\n\n\t\tuniforms.dashSize.value = material.dashSize;\n\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\tuniforms.scale.value = material.scale;\n\n\t}\n\n\tfunction refreshUniformsPoints ( uniforms, material ) {\n\n\t\tuniforms.diffuse.value = material.color;\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.size.value = material.size * _pixelRatio;\n\t\tuniforms.scale.value = _canvas.clientHeight * 0.5;\n\n\t\tuniforms.map.value = material.map;\n\n\t\tif ( material.map !== null ) {\n\n\t\t\tvar offset = material.map.offset;\n\t\t\tvar repeat = material.map.repeat;\n\n\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsFog ( uniforms, fog ) {\n\n\t\tuniforms.fogColor.value = fog.color;\n\n\t\tif ( fog instanceof THREE.Fog ) {\n\n\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t} else if ( fog instanceof THREE.FogExp2 ) {\n\n\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsLambert ( uniforms, material ) {\n\n\t\tif ( material.lightMap ) {\n\n\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhong ( uniforms, material ) {\n\n\t\tuniforms.specular.value = material.specular;\n\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\tif ( material.lightMap ) {\n\n\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsStandard ( uniforms, material ) {\n\n\t\tuniforms.roughness.value = material.roughness;\n\t\tuniforms.metalness.value = material.metalness;\n\n\t\tif ( material.roughnessMap ) {\n\n\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t}\n\n\t\tif ( material.metalnessMap ) {\n\n\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t}\n\n\t\tif ( material.lightMap ) {\n\n\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t\tif ( material.envMap ) {\n\n\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhysical ( uniforms, material ) {\n\n\t\tuniforms.clearCoat.value = material.clearCoat;\n\t\tuniforms.clearCoatRoughness.value = material.clearCoatRoughness;\n\n\t\trefreshUniformsStandard( uniforms, material );\n\n\t}\n\n\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\tfunction markUniformsLightsNeedsUpdate ( uniforms, value ) {\n\n\t\tuniforms.ambientLightColor.needsUpdate = value;\n\n\t\tuniforms.directionalLights.needsUpdate = value;\n\t\tuniforms.pointLights.needsUpdate = value;\n\t\tuniforms.spotLights.needsUpdate = value;\n\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t}\n\n\t// Lighting\n\n\tfunction setupShadows ( lights ) {\n\n\t\tvar lightShadowsLength = 0;\n\n\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\tvar light = lights[ i ];\n\n\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t_lights.shadows[ lightShadowsLength ++ ] = light;\n\n\t\t\t}\n\n\t\t}\n\n\t\t_lights.shadows.length = lightShadowsLength;\n\n\t}\n\n\tfunction setupLights ( lights, camera ) {\n\n\t\tvar l, ll, light,\n\t\tr = 0, g = 0, b = 0,\n\t\tcolor,\n\t\tintensity,\n\t\tdistance,\n\t\tshadowMap,\n\n\t\tviewMatrix = camera.matrixWorldInverse,\n\n\t\tdirectionalLength = 0,\n\t\tpointLength = 0,\n\t\tspotLength = 0,\n\t\themiLength = 0;\n\n\t\tfor ( l = 0, ll = lights.length; l < ll; l ++ ) {\n\n\t\t\tlight = lights[ l ];\n\n\t\t\tcolor = light.color;\n\t\t\tintensity = light.intensity;\n\t\t\tdistance = light.distance;\n\n\t\t\tshadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\tif ( light instanceof THREE.AmbientLight ) {\n\n\t\t\t\tr += color.r * intensity;\n\t\t\t\tg += color.g * intensity;\n\t\t\t\tb += color.b * intensity;\n\n\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\n\n\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( _vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\n\t\t\t\t}\n\n\t\t\t\t_lights.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t_lights.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\t\t\t\t_lights.directional[ directionalLength ++ ] = uniforms;\n\n\t\t\t} else if ( light instanceof THREE.SpotLight ) {\n\n\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\t\t\t\tuniforms.distance = distance;\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( _vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\n\t\t\t\t}\n\n\t\t\t\t_lights.spotShadowMap[ spotLength ] = shadowMap;\n\t\t\t\t_lights.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\t\t\t\t_lights.spot[ spotLength ++ ] = uniforms;\n\n\t\t\t} else if ( light instanceof THREE.PointLight ) {\n\n\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\n\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\n\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\n\n\t\t\t\t}\n\n\t\t\t\t_lights.pointShadowMap[ pointLength ] = shadowMap;\n\n\t\t\t\tif ( _lights.pointShadowMatrix[ pointLength ] === undefined ) {\n\n\t\t\t\t\t_lights.pointShadowMatrix[ pointLength ] = new THREE.Matrix4();\n\n\t\t\t\t}\n\n\t\t\t\t// for point lights we set the shadow matrix to be a translation-only matrix\n\t\t\t\t// equal to inverse of the light's position\n\t\t\t\t_vector3.setFromMatrixPosition( light.matrixWorld ).negate();\n\t\t\t\t_lights.pointShadowMatrix[ pointLength ].identity().setPosition( _vector3 );\n\n\t\t\t\t_lights.point[ pointLength ++ ] = uniforms;\n\n\t\t\t} else if ( light instanceof THREE.HemisphereLight ) {\n\n\t\t\t\tvar uniforms = lightCache.get( light );\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\t\t\tuniforms.direction.normalize();\n\n\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\n\t\t\t\t_lights.hemi[ hemiLength ++ ] = uniforms;\n\n\t\t\t}\n\n\t\t}\n\n\t\t_lights.ambient[ 0 ] = r;\n\t\t_lights.ambient[ 1 ] = g;\n\t\t_lights.ambient[ 2 ] = b;\n\n\t\t_lights.directional.length = directionalLength;\n\t\t_lights.spot.length = spotLength;\n\t\t_lights.point.length = pointLength;\n\t\t_lights.hemi.length = hemiLength;\n\n\t\t_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + hemiLength + ',' + _lights.shadows.length;\n\n\t}\n\n\t// GL state setting\n\n\tthis.setFaceCulling = function ( cullFace, frontFaceDirection ) {\n\n\t\tstate.setCullFace( cullFace );\n\t\tstate.setFlipSided( frontFaceDirection === THREE.FrontFaceDirectionCW );\n\n\t};\n\n\t// Textures\n\n\tfunction allocTextureUnit() {\n\n\t\tvar textureUnit = _usedTextureUnits;\n\n\t\tif ( textureUnit >= capabilities.maxTextures ) {\n\n\t\t\tconsole.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\n\n\t\t}\n\n\t\t_usedTextureUnits += 1;\n\n\t\treturn textureUnit;\n\n\t}\n\n\tthis.allocTextureUnit = allocTextureUnit;\n\n\t// this.setTexture2D = setTexture2D;\n\tthis.setTexture2D = ( function() {\n\n\t\tvar warned = false;\n\n\t\t// backwards compatibility: peel texture.texture\n\t\treturn function setTexture2D( texture, slot ) {\n\n\t\t\tif ( texture instanceof THREE.WebGLRenderTarget ) {\n\n\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarned = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\ttextures.setTexture2D( texture, slot );\n\n\t\t};\n\n\t}() );\n\n\tthis.setTexture = ( function() {\n\n\t\tvar warned = false;\n\n\t\treturn function setTexture( texture, slot ) {\n\n\t\t\tif ( ! warned ) {\n\n\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\" );\n\t\t\t\twarned = true;\n\n\t\t\t}\n\n\t\t\ttextures.setTexture2D( texture, slot );\n\n\t\t};\n\n\t}() );\n\n\tthis.setTextureCube = ( function() {\n\n\t\tvar warned = false;\n\n\t\treturn function setTextureCube( texture, slot ) {\n\n\t\t\t// backwards compatibility: peel texture.texture\n\t\t\tif ( texture instanceof THREE.WebGLRenderTargetCube ) {\n\n\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarned = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n\t\t\t// TODO: unify these code paths\n\t\t\tif ( texture instanceof THREE.CubeTexture ||\n\t\t\t\t ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\n\t\t\t\t// CompressedTexture can have Array in image :/\n\n\t\t\t\t// this function alone should take care of cube textures\n\t\t\t\ttextures.setTextureCube( texture, slot );\n\n\t\t\t} else {\n\n\t\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\n\n\t\t\t\ttextures.setTextureCubeDynamic( texture, slot );\n\n\t\t\t}\n\n\t\t};\n\n\t}() );\n\n\tthis.getCurrentRenderTarget = function() {\n\n\t\treturn _currentRenderTarget;\n\n\t};\n\n\tthis.setRenderTarget = function ( renderTarget ) {\n\n\t\t_currentRenderTarget = renderTarget;\n\n\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t}\n\n\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\n\t\tvar framebuffer;\n\n\t\tif ( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];\n\n\t\t\t} else {\n\n\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer;\n\n\t\t\t}\n\n\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t\t_currentViewport.copy( renderTarget.viewport );\n\n\t\t} else {\n\n\t\t\tframebuffer = null;\n\n\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );\n\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );\n\n\t\t}\n\n\t\tif ( _currentFramebuffer !== framebuffer ) {\n\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t\t_currentFramebuffer = framebuffer;\n\n\t\t}\n\n\t\tstate.scissor( _currentScissor );\n\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\tstate.viewport( _currentViewport );\n\n\t\tif ( isCube ) {\n\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );\n\n\t\t}\n\n\t};\n\n\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\n\n\t\tif ( renderTarget instanceof THREE.WebGLRenderTarget === false ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\tif ( framebuffer ) {\n\n\t\t\tvar restore = false;\n\n\t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\t\trestore = true;\n\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\tvar texture = renderTarget.texture;\n\n\t\t\t\tif ( texture.format !== THREE.RGBAFormat && paramThreeToGL( texture.format ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.type !== THREE.UnsignedByteType &&\n\t\t\t\t     paramThreeToGL( texture.type ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) &&\n\t\t\t\t     ! ( texture.type === THREE.FloatType && extensions.get( 'WEBGL_color_buffer_float' ) ) &&\n\t\t\t\t     ! ( texture.type === THREE.HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\n\n\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t\t_gl.readPixels( x, y, width, height, paramThreeToGL( texture.format ), paramThreeToGL( texture.type ), buffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n\t\t\t\t}\n\n\t\t\t} finally {\n\n\t\t\t\tif ( restore ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t// Map three.js constants to WebGL constants\n\n\tfunction paramThreeToGL ( p ) {\n\n\t\tvar extension;\n\n\t\tif ( p === THREE.RepeatWrapping ) return _gl.REPEAT;\n\t\tif ( p === THREE.ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;\n\t\tif ( p === THREE.MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;\n\n\t\tif ( p === THREE.NearestFilter ) return _gl.NEAREST;\n\t\tif ( p === THREE.NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;\n\t\tif ( p === THREE.NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;\n\n\t\tif ( p === THREE.LinearFilter ) return _gl.LINEAR;\n\t\tif ( p === THREE.LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;\n\t\tif ( p === THREE.LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;\n\n\t\tif ( p === THREE.UnsignedByteType ) return _gl.UNSIGNED_BYTE;\n\t\tif ( p === THREE.UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;\n\t\tif ( p === THREE.UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;\n\t\tif ( p === THREE.UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;\n\n\t\tif ( p === THREE.ByteType ) return _gl.BYTE;\n\t\tif ( p === THREE.ShortType ) return _gl.SHORT;\n\t\tif ( p === THREE.UnsignedShortType ) return _gl.UNSIGNED_SHORT;\n\t\tif ( p === THREE.IntType ) return _gl.INT;\n\t\tif ( p === THREE.UnsignedIntType ) return _gl.UNSIGNED_INT;\n\t\tif ( p === THREE.FloatType ) return _gl.FLOAT;\n\n\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tif ( p === THREE.HalfFloatType ) return extension.HALF_FLOAT_OES;\n\n\t\t}\n\n\t\tif ( p === THREE.AlphaFormat ) return _gl.ALPHA;\n\t\tif ( p === THREE.RGBFormat ) return _gl.RGB;\n\t\tif ( p === THREE.RGBAFormat ) return _gl.RGBA;\n\t\tif ( p === THREE.LuminanceFormat ) return _gl.LUMINANCE;\n\t\tif ( p === THREE.LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;\n\t\tif ( p === THREE.DepthFormat ) return _gl.DEPTH_COMPONENT;\n\n\t\tif ( p === THREE.AddEquation ) return _gl.FUNC_ADD;\n\t\tif ( p === THREE.SubtractEquation ) return _gl.FUNC_SUBTRACT;\n\t\tif ( p === THREE.ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;\n\n\t\tif ( p === THREE.ZeroFactor ) return _gl.ZERO;\n\t\tif ( p === THREE.OneFactor ) return _gl.ONE;\n\t\tif ( p === THREE.SrcColorFactor ) return _gl.SRC_COLOR;\n\t\tif ( p === THREE.OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;\n\t\tif ( p === THREE.SrcAlphaFactor ) return _gl.SRC_ALPHA;\n\t\tif ( p === THREE.OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;\n\t\tif ( p === THREE.DstAlphaFactor ) return _gl.DST_ALPHA;\n\t\tif ( p === THREE.OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;\n\n\t\tif ( p === THREE.DstColorFactor ) return _gl.DST_COLOR;\n\t\tif ( p === THREE.OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;\n\t\tif ( p === THREE.SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;\n\n\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tif ( p === THREE.RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n\t\t}\n\n\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tif ( p === THREE.RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\tif ( p === THREE.RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\tif ( p === THREE.RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\tif ( p === THREE.RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n\t\t}\n\n\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tif ( p === THREE.RGB_ETC1_Format ) return extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t}\n\n\t\textension = extensions.get( 'EXT_blend_minmax' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tif ( p === THREE.MinEquation ) return extension.MIN_EXT;\n\t\t\tif ( p === THREE.MaxEquation ) return extension.MAX_EXT;\n\n\t\t}\n\n\t\treturn 0;\n\n\t}\n\n};\n\n// File:src/renderers/WebGLRenderTarget.js\n\n/**\n * @author szimek / https://github.com/szimek/\n * @author alteredq / http://alteredqualia.com/\n * @author Marius Kintel / https://github.com/kintel\n */\n\n/*\n In options, we can specify:\n * Texture parameters for an auto-generated target texture\n * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n*/\nTHREE.WebGLRenderTarget = function ( width, height, options ) {\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.width = width;\n\tthis.height = height;\n\n\tthis.scissor = new THREE.Vector4( 0, 0, width, height );\n\tthis.scissorTest = false;\n\n\tthis.viewport = new THREE.Vector4( 0, 0, width, height );\n\n\toptions = options || {};\n\n\tif ( options.minFilter === undefined ) options.minFilter = THREE.LinearFilter;\n\n\tthis.texture = new THREE.Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\tthis.depthTexture = null;\n\n};\n\nObject.assign( THREE.WebGLRenderTarget.prototype, THREE.EventDispatcher.prototype, {\n\n\tsetSize: function ( width, height ) {\n\n\t\tif ( this.width !== width || this.height !== height ) {\n\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\n\t\t\tthis.dispose();\n\n\t\t}\n\n\t\tthis.viewport.set( 0, 0, width, height );\n\t\tthis.scissor.set( 0, 0, width, height );\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\n\t\tthis.viewport.copy( source.viewport );\n\n\t\tthis.texture = source.texture.clone();\n\n\t\tthis.depthBuffer = source.depthBuffer;\n\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\tthis.depthTexture = source.depthTexture;\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\n// File:src/renderers/WebGLRenderTargetCube.js\n\n/**\n * @author alteredq / http://alteredqualia.com\n */\n\nTHREE.WebGLRenderTargetCube = function ( width, height, options ) {\n\n\tTHREE.WebGLRenderTarget.call( this, width, height, options );\n\n\tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n\tthis.activeMipMapLevel = 0;\n\n};\n\nTHREE.WebGLRenderTargetCube.prototype = Object.create( THREE.WebGLRenderTarget.prototype );\nTHREE.WebGLRenderTargetCube.prototype.constructor = THREE.WebGLRenderTargetCube;\n\n// File:src/renderers/webgl/WebGLBufferRenderer.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLBufferRenderer = function ( _gl, extensions, _infoRender ) {\n\n\tvar mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\t_gl.drawArrays( mode, start, count );\n\n\t\t_infoRender.calls ++;\n\t\t_infoRender.vertices += count;\n\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;\n\n\t}\n\n\tfunction renderInstances( geometry ) {\n\n\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\tif ( extension === null ) {\n\n\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar position = geometry.attributes.position;\n\n\t\tvar count = 0;\n\n\t\tif ( position instanceof THREE.InterleavedBufferAttribute ) {\n\n\t\t\tcount = position.data.count;\n\n\t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\n\t\t} else {\n\n\t\t\tcount = position.count;\n\n\t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\n\n\t\t}\n\n\t\t_infoRender.calls ++;\n\t\t_infoRender.vertices += count * geometry.maxInstancedCount;\n\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += geometry.maxInstancedCount * count / 3;\n\n\t}\n\n\tthis.setMode = setMode;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n};\n\n// File:src/renderers/webgl/WebGLClipping.js\n\nTHREE.WebGLClipping = function() {\n\n\tvar scope = this,\n\n\t\tglobalState = null,\n\t\tnumGlobalPlanes = 0,\n\t\tlocalClippingEnabled = false,\n\t\trenderingShadows = false,\n\n\t\tplane = new THREE.Plane(),\n\t\tviewNormalMatrix = new THREE.Matrix3(),\n\n\t\tuniform = { value: null, needsUpdate: false };\n\n\tthis.uniform = uniform;\n\tthis.numPlanes = 0;\n\n\tthis.init = function( planes, enableLocalClipping, camera ) {\n\n\t\tvar enabled =\n\t\t\tplanes.length !== 0 ||\n\t\t\tenableLocalClipping ||\n\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t// run another frame in order to reset the state:\n\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\tlocalClippingEnabled;\n\n\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\tglobalState = projectPlanes( planes, camera, 0 );\n\t\tnumGlobalPlanes = planes.length;\n\n\t\treturn enabled;\n\n\t};\n\n\tthis.beginShadows = function() {\n\n\t\trenderingShadows = true;\n\t\tprojectPlanes( null );\n\n\t};\n\n\tthis.endShadows = function() {\n\n\t\trenderingShadows = false;\n\t\tresetGlobalState();\n\n\t};\n\n\tthis.setState = function( planes, clipShadows, camera, cache, fromCache ) {\n\n\t\tif ( ! localClippingEnabled ||\n\t\t\t\tplanes === null || planes.length === 0 ||\n\t\t\t\trenderingShadows && ! clipShadows ) {\n\t\t\t// there's no local clipping\n\n\t\t\tif ( renderingShadows ) {\n\t\t\t\t// there's no global clipping\n\n\t\t\t\tprojectPlanes( null );\n\n\t\t\t} else {\n\n\t\t\t\tresetGlobalState();\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\tlGlobal = nGlobal * 4,\n\n\t\t\t\tdstArray = cache.clippingState || null;\n\n\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\n\t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t}\n\n\t\t\tcache.clippingState = dstArray;\n\t\t\tthis.numPlanes += nGlobal;\n\n\t\t}\n\n\n\t};\n\n\tfunction resetGlobalState() {\n\n\t\tif ( uniform.value !== globalState ) {\n\n\t\t\tuniform.value = globalState;\n\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t}\n\n\t\tscope.numPlanes = numGlobalPlanes;\n\n\t}\n\n\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\tvar nPlanes = planes !== null ? planes.length : 0,\n\t\t\tdstArray = null;\n\n\t\tif ( nPlanes !== 0 ) {\n\n\t\t\tdstArray = uniform.value;\n\n\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0, i4 = dstOffset;\n\t\t\t\t\t\t\t\t\ti !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\tplane.copy( planes[ i ] ).\n\t\t\t\t\t\t\tapplyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tuniform.value = dstArray;\n\t\t\tuniform.needsUpdate = true;\n\n\t\t}\n\n\t\tscope.numPlanes = nPlanes;\n\t\treturn dstArray;\n\n\t}\n\n};\n\n\n// File:src/renderers/webgl/WebGLIndexedBufferRenderer.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLIndexedBufferRenderer = function ( _gl, extensions, _infoRender ) {\n\n\tvar mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tvar type, size;\n\n\tfunction setIndex( index ) {\n\n\t\tif ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {\n\n\t\t\ttype = _gl.UNSIGNED_INT;\n\t\t\tsize = 4;\n\n\t\t} else {\n\n\t\t\ttype = _gl.UNSIGNED_SHORT;\n\t\t\tsize = 2;\n\n\t\t}\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\t_gl.drawElements( mode, count, type, start * size );\n\n\t\t_infoRender.calls ++;\n\t\t_infoRender.vertices += count;\n\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;\n\n\t}\n\n\tfunction renderInstances( geometry, start, count ) {\n\n\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\tif ( extension === null ) {\n\n\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\textension.drawElementsInstancedANGLE( mode, count, type, start * size, geometry.maxInstancedCount );\n\n\t\t_infoRender.calls ++;\n\t\t_infoRender.vertices += count * geometry.maxInstancedCount;\n\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += geometry.maxInstancedCount * count / 3;\n\t}\n\n\tthis.setMode = setMode;\n\tthis.setIndex = setIndex;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n};\n\n// File:src/renderers/webgl/WebGLExtensions.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLExtensions = function ( gl ) {\n\n\tvar extensions = {};\n\n\tthis.get = function ( name ) {\n\n\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\treturn extensions[ name ];\n\n\t\t}\n\n\t\tvar extension;\n\n\t\tswitch ( name ) {\n\n\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_etc1':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\textension = gl.getExtension( name );\n\n\t\t}\n\n\t\tif ( extension === null ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t}\n\n\t\textensions[ name ] = extension;\n\n\t\treturn extension;\n\n\t};\n\n};\n\n// File:src/renderers/webgl/WebGLCapabilities.js\n\nTHREE.WebGLCapabilities = function ( gl, extensions, parameters ) {\n\n\tvar maxAnisotropy;\n\n\tfunction getMaxAnisotropy() {\n\n\t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t} else {\n\n\t\t\tmaxAnisotropy = 0;\n\n\t\t}\n\n\t\treturn maxAnisotropy;\n\n\t}\n\n\tfunction getMaxPrecision( precision ) {\n\n\t\tif ( precision === 'highp' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\n\t\t\t\treturn 'highp';\n\n\t\t\t}\n\n\t\t\tprecision = 'mediump';\n\n\t\t}\n\n\t\tif ( precision === 'mediump' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\n\t\t\t\treturn 'mediump';\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn 'lowp';\n\n\t}\n\n\tthis.getMaxAnisotropy = getMaxAnisotropy;\n\tthis.getMaxPrecision = getMaxPrecision;\n\n\tthis.precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\tthis.logarithmicDepthBuffer = parameters.logarithmicDepthBuffer !== undefined ? parameters.logarithmicDepthBuffer : false;\n\n\tthis.maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\tthis.maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n\tthis.maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n\tthis.maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\n\tthis.maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\tthis.maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n\tthis.maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n\tthis.maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\n\tthis.vertexTextures = this.maxVertexTextures > 0;\n\tthis.floatFragmentTextures = !! extensions.get( 'OES_texture_float' );\n\tthis.floatVertexTextures = this.vertexTextures && this.floatFragmentTextures;\n\n\tvar _maxPrecision = getMaxPrecision( this.precision );\n\n\tif ( _maxPrecision !== this.precision ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer:', this.precision, 'not supported, using', _maxPrecision, 'instead.' );\n\t\tthis.precision = _maxPrecision;\n\n\t}\n\n\tif ( this.logarithmicDepthBuffer ) {\n\n\t\tthis.logarithmicDepthBuffer = !! extensions.get( 'EXT_frag_depth' );\n\n\t}\n\n};\n\n// File:src/renderers/webgl/WebGLGeometries.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLGeometries = function ( gl, properties, info ) {\n\n\tvar geometries = {};\n\n\tfunction get( object ) {\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( geometries[ geometry.id ] !== undefined ) {\n\n\t\t\treturn geometries[ geometry.id ];\n\n\t\t}\n\n\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\tvar buffergeometry;\n\n\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\tbuffergeometry = geometry;\n\n\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\n\t\t\t\tgeometry._bufferGeometry = new THREE.BufferGeometry().setFromObject( object );\n\n\t\t\t}\n\n\t\t\tbuffergeometry = geometry._bufferGeometry;\n\n\t\t}\n\n\t\tgeometries[ geometry.id ] = buffergeometry;\n\n\t\tinfo.memory.geometries ++;\n\n\t\treturn buffergeometry;\n\n\t}\n\n\tfunction onGeometryDispose( event ) {\n\n\t\tvar geometry = event.target;\n\t\tvar buffergeometry = geometries[ geometry.id ];\n\n\t\tif ( buffergeometry.index !== null ) {\n\n\t\t\tdeleteAttribute( buffergeometry.index );\n\n\t\t}\n\n\t\tdeleteAttributes( buffergeometry.attributes );\n\n\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\tdelete geometries[ geometry.id ];\n\n\t\t// TODO\n\n\t\tvar property = properties.get( geometry );\n\n\t\tif ( property.wireframe ) {\n\n\t\t\tdeleteAttribute( property.wireframe );\n\n\t\t}\n\n\t\tproperties.delete( geometry );\n\n\t\tvar bufferproperty = properties.get( buffergeometry );\n\n\t\tif ( bufferproperty.wireframe ) {\n\n\t\t\tdeleteAttribute( bufferproperty.wireframe );\n\n\t\t}\n\n\t\tproperties.delete( buffergeometry );\n\n\t\t//\n\n\t\tinfo.memory.geometries --;\n\n\t}\n\n\tfunction getAttributeBuffer( attribute ) {\n\n\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\n\n\t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\n\t\t}\n\n\t\treturn properties.get( attribute ).__webglBuffer;\n\n\t}\n\n\tfunction deleteAttribute( attribute ) {\n\n\t\tvar buffer = getAttributeBuffer( attribute );\n\n\t\tif ( buffer !== undefined ) {\n\n\t\t\tgl.deleteBuffer( buffer );\n\t\t\tremoveAttributeBuffer( attribute );\n\n\t\t}\n\n\t}\n\n\tfunction deleteAttributes( attributes ) {\n\n\t\tfor ( var name in attributes ) {\n\n\t\t\tdeleteAttribute( attributes[ name ] );\n\n\t\t}\n\n\t}\n\n\tfunction removeAttributeBuffer( attribute ) {\n\n\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\n\n\t\t\tproperties.delete( attribute.data );\n\n\t\t} else {\n\n\t\t\tproperties.delete( attribute );\n\n\t\t}\n\n\t}\n\n\tthis.get = get;\n\n};\n\n// File:src/renderers/webgl/WebGLLights.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLLights = function () {\n\n\tvar lights = {};\n\n\tthis.get = function ( light ) {\n\n\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\treturn lights[ light.id ];\n\n\t\t}\n\n\t\tvar uniforms;\n\n\t\tswitch ( light.type ) {\n\n\t\t\tcase 'DirectionalLight':\n\t\t\t\tuniforms = {\n\t\t\t\t\tdirection: new THREE.Vector3(),\n\t\t\t\t\tcolor: new THREE.Color(),\n\n\t\t\t\t\tshadow: false,\n\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\tshadowMapSize: new THREE.Vector2()\n\t\t\t\t};\n\t\t\t\tbreak;\n\n\t\t\tcase 'SpotLight':\n\t\t\t\tuniforms = {\n\t\t\t\t\tposition: new THREE.Vector3(),\n\t\t\t\t\tdirection: new THREE.Vector3(),\n\t\t\t\t\tcolor: new THREE.Color(),\n\t\t\t\t\tdistance: 0,\n\t\t\t\t\tconeCos: 0,\n\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\tshadow: false,\n\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\tshadowMapSize: new THREE.Vector2()\n\t\t\t\t};\n\t\t\t\tbreak;\n\n\t\t\tcase 'PointLight':\n\t\t\t\tuniforms = {\n\t\t\t\t\tposition: new THREE.Vector3(),\n\t\t\t\t\tcolor: new THREE.Color(),\n\t\t\t\t\tdistance: 0,\n\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\tshadow: false,\n\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\tshadowMapSize: new THREE.Vector2()\n\t\t\t\t};\n\t\t\t\tbreak;\n\n\t\t\tcase 'HemisphereLight':\n\t\t\t\tuniforms = {\n\t\t\t\t\tdirection: new THREE.Vector3(),\n\t\t\t\t\tskyColor: new THREE.Color(),\n\t\t\t\t\tgroundColor: new THREE.Color()\n\t\t\t\t};\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tlights[ light.id ] = uniforms;\n\n\t\treturn uniforms;\n\n\t};\n\n};\n\n// File:src/renderers/webgl/WebGLObjects.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLObjects = function ( gl, properties, info ) {\n\n\tvar geometries = new THREE.WebGLGeometries( gl, properties, info );\n\n\t//\n\n\tfunction update( object ) {\n\n\t\t// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.\n\n\t\tvar geometry = geometries.get( object );\n\n\t\tif ( object.geometry instanceof THREE.Geometry ) {\n\n\t\t\tgeometry.updateFromObject( object );\n\n\t\t}\n\n\t\tvar index = geometry.index;\n\t\tvar attributes = geometry.attributes;\n\n\t\tif ( index !== null ) {\n\n\t\t\tupdateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );\n\n\t\t}\n\n\t\tfor ( var name in attributes ) {\n\n\t\t\tupdateAttribute( attributes[ name ], gl.ARRAY_BUFFER );\n\n\t\t}\n\n\t\t// morph targets\n\n\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\tfor ( var name in morphAttributes ) {\n\n\t\t\tvar array = morphAttributes[ name ];\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tupdateAttribute( array[ i ], gl.ARRAY_BUFFER );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n\tfunction updateAttribute( attribute, bufferType ) {\n\n\t\tvar data = ( attribute instanceof THREE.InterleavedBufferAttribute ) ? attribute.data : attribute;\n\n\t\tvar attributeProperties = properties.get( data );\n\n\t\tif ( attributeProperties.__webglBuffer === undefined ) {\n\n\t\t\tcreateBuffer( attributeProperties, data, bufferType );\n\n\t\t} else if ( attributeProperties.version !== data.version ) {\n\n\t\t\tupdateBuffer( attributeProperties, data, bufferType );\n\n\t\t}\n\n\t}\n\n\tfunction createBuffer( attributeProperties, data, bufferType ) {\n\n\t\tattributeProperties.__webglBuffer = gl.createBuffer();\n\t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\n\t\tvar usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\n\t\tgl.bufferData( bufferType, data.array, usage );\n\n\t\tattributeProperties.version = data.version;\n\n\t}\n\n\tfunction updateBuffer( attributeProperties, data, bufferType ) {\n\n\t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\n\n\t\tif ( data.dynamic === false || data.updateRange.count === - 1 ) {\n\n\t\t\t// Not using update ranges\n\n\t\t\tgl.bufferSubData( bufferType, 0, data.array );\n\n\t\t} else if ( data.updateRange.count === 0 ) {\n\n\t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\n\n\t\t} else {\n\n\t\t\tgl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\t\t  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );\n\n\t\t\tdata.updateRange.count = 0; // reset range\n\n\t\t}\n\n\t\tattributeProperties.version = data.version;\n\n\t}\n\n\tfunction getAttributeBuffer( attribute ) {\n\n\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\n\n\t\t\treturn properties.get( attribute.data ).__webglBuffer;\n\n\t\t}\n\n\t\treturn properties.get( attribute ).__webglBuffer;\n\n\t}\n\n\tfunction getWireframeAttribute( geometry ) {\n\n\t\tvar property = properties.get( geometry );\n\n\t\tif ( property.wireframe !== undefined ) {\n\n\t\t\treturn property.wireframe;\n\n\t\t}\n\n\t\tvar indices = [];\n\n\t\tvar index = geometry.index;\n\t\tvar attributes = geometry.attributes;\n\t\tvar position = attributes.position;\n\n\t\t// console.time( 'wireframe' );\n\n\t\tif ( index !== null ) {\n\n\t\t\tvar edges = {};\n\t\t\tvar array = index.array;\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tvar a = array[ i + 0 ];\n\t\t\t\tvar b = array[ i + 1 ];\n\t\t\t\tvar c = array[ i + 2 ];\n\n\t\t\t\tif ( checkEdge( edges, a, b ) ) indices.push( a, b );\n\t\t\t\tif ( checkEdge( edges, b, c ) ) indices.push( b, c );\n\t\t\t\tif ( checkEdge( edges, c, a ) ) indices.push( c, a );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tvar array = attributes.position.array;\n\n\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\t\tvar a = i + 0;\n\t\t\t\tvar b = i + 1;\n\t\t\t\tvar c = i + 2;\n\n\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// console.timeEnd( 'wireframe' );\n\n\t\tvar TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;\n\t\tvar attribute = new THREE.BufferAttribute( new TypeArray( indices ), 1 );\n\n\t\tupdateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );\n\n\t\tproperty.wireframe = attribute;\n\n\t\treturn attribute;\n\n\t}\n\n\tfunction checkEdge( edges, a, b ) {\n\n\t\tif ( a > b ) {\n\n\t\t\tvar tmp = a;\n\t\t\ta = b;\n\t\t\tb = tmp;\n\n\t\t}\n\n\t\tvar list = edges[ a ];\n\n\t\tif ( list === undefined ) {\n\n\t\t\tedges[ a ] = [ b ];\n\t\t\treturn true;\n\n\t\t} else if ( list.indexOf( b ) === -1 ) {\n\n\t\t\tlist.push( b );\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tthis.getAttributeBuffer = getAttributeBuffer;\n\tthis.getWireframeAttribute = getWireframeAttribute;\n\n\tthis.update = update;\n\n};\n\n// File:src/renderers/webgl/WebGLProgram.js\n\nTHREE.WebGLProgram = ( function () {\n\n\tvar programIdCount = 0;\n\n\tfunction getEncodingComponents( encoding ) {\n\n\t\tswitch ( encoding ) {\n\n\t\t\tcase THREE.LinearEncoding:\n\t\t\t\treturn [ 'Linear','( value )' ];\n\t\t\tcase THREE.sRGBEncoding:\n\t\t\t\treturn [ 'sRGB','( value )' ];\n\t\t\tcase THREE.RGBEEncoding:\n\t\t\t\treturn [ 'RGBE','( value )' ];\n\t\t\tcase THREE.RGBM7Encoding:\n\t\t\t\treturn [ 'RGBM','( value, 7.0 )' ];\n\t\t\tcase THREE.RGBM16Encoding:\n\t\t\t\treturn [ 'RGBM','( value, 16.0 )' ];\n\t\t\tcase THREE.RGBDEncoding:\n\t\t\t\treturn [ 'RGBD','( value, 256.0 )' ];\n\t\t\tcase THREE.GammaEncoding:\n\t\t\t\treturn [ 'Gamma','( value, float( GAMMA_FACTOR ) )' ];\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\n\n\t\t}\n\n\t}\n\n\tfunction getTexelDecodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn \"vec4 \" + functionName + \"( vec4 value ) { return \" + components[ 0 ] + \"ToLinear\" + components[ 1 ] + \"; }\";\n\n\t}\n\n\tfunction getTexelEncodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn \"vec4 \" + functionName + \"( vec4 value ) { return LinearTo\" + components[ 0 ] + components[ 1 ] + \"; }\";\n\n\t}\n\n\tfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\t\tvar toneMappingName;\n\n\t\tswitch ( toneMapping ) {\n\n\t\t\tcase THREE.LinearToneMapping:\n\t\t\t\ttoneMappingName = \"Linear\";\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.ReinhardToneMapping:\n\t\t\t\ttoneMappingName = \"Reinhard\";\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.Uncharted2ToneMapping:\n\t\t\t\ttoneMappingName = \"Uncharted2\";\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.CineonToneMapping:\n\t\t\t\ttoneMappingName = \"OptimizedCineon\";\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\n\n\t\t}\n\n\t\treturn \"vec3 \" + functionName + \"( vec3 color ) { return \" + toneMappingName + \"ToneMapping( color ); }\";\n\n\t}\n\n\tfunction generateExtensions( extensions, parameters, rendererExtensions ) {\n\n\t\textensions = extensions || {};\n\n\t\tvar chunks = [\n\t\t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : '',\n\t\t];\n\n\t\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n\t}\n\n\tfunction generateDefines( defines ) {\n\n\t\tvar chunks = [];\n\n\t\tfor ( var name in defines ) {\n\n\t\t\tvar value = defines[ name ];\n\n\t\t\tif ( value === false ) continue;\n\n\t\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t\t}\n\n\t\treturn chunks.join( '\\n' );\n\n\t}\n\n\tfunction fetchAttributeLocations( gl, program, identifiers ) {\n\n\t\tvar attributes = {};\n\n\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\n\n\t\tfor ( var i = 0; i < n; i ++ ) {\n\n\t\t\tvar info = gl.getActiveAttrib( program, i );\n\t\t\tvar name = info.name;\n\n\t\t\t// console.log(\"THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:\", name, i );\n\n\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\n\t\t}\n\n\t\treturn attributes;\n\n\t}\n\n\tfunction filterEmptyLine( string ) {\n\n\t\treturn string !== '';\n\n\t}\n\n\tfunction replaceLightNums( string, parameters ) {\n\n\t\treturn string\n\t\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );\n\n\t}\n\n\tfunction parseIncludes( string ) {\n\n\t\tvar pattern = /#include +<([\\w\\d.]+)>/g;\n\n\t\tfunction replace( match, include ) {\n\n\t\t\tvar replace = THREE.ShaderChunk[ include ];\n\n\t\t\tif ( replace === undefined ) {\n\n\t\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t\t\t}\n\n\t\t\treturn parseIncludes( replace );\n\n\t\t}\n\n\t\treturn string.replace( pattern, replace );\n\n\t}\n\n\tfunction unrollLoops( string ) {\n\n\t\tvar pattern = /for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\n\t\tfunction replace( match, start, end, snippet ) {\n\n\t\t\tvar unroll = '';\n\n\t\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\t\t\tunroll += snippet.replace( /\\[ i \\]/g, '[ ' + i + ' ]' );\n\n\t\t\t}\n\n\t\t\treturn unroll;\n\n\t\t}\n\n\t\treturn string.replace( pattern, replace );\n\n\t}\n\n\treturn function WebGLProgram( renderer, code, material, parameters ) {\n\n\t\tvar gl = renderer.context;\n\n\t\tvar extensions = material.extensions;\n\t\tvar defines = material.defines;\n\n\t\tvar vertexShader = material.__webglShader.vertexShader;\n\t\tvar fragmentShader = material.__webglShader.fragmentShader;\n\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif ( parameters.shadowMapType === THREE.PCFShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t\t} else if ( parameters.shadowMapType === THREE.PCFSoftShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t\t}\n\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( material.envMap.mapping ) {\n\n\t\t\t\tcase THREE.CubeReflectionMapping:\n\t\t\t\tcase THREE.CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.CubeUVReflectionMapping:\n\t\t\t\tcase THREE.CubeUVRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.EquirectangularReflectionMapping:\n\t\t\t\tcase THREE.EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.SphericalReflectionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tswitch ( material.envMap.mapping ) {\n\n\t\t\t\tcase THREE.CubeRefractionMapping:\n\t\t\t\tcase THREE.EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tswitch ( material.combine ) {\n\n\t\t\t\tcase THREE.MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase THREE.AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n\t\t// console.log( 'building new program ' );\n\n\t\t//\n\n\t\tvar customExtensions = generateExtensions( extensions, parameters, renderer.extensions );\n\n\t\tvar customDefines = generateDefines( defines );\n\n\t\t//\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar prefixVertex, prefixFragment;\n\n\t\tif ( material instanceof THREE.RawShaderMaterial ) {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t} else {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t\t'precision ' + parameters.precision + ' int;',\n\n\t\t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\n\t\t\t\t'attribute vec3 position;',\n\t\t\t\t'attribute vec3 normal;',\n\t\t\t\t'attribute vec2 uv;',\n\n\t\t\t\t'#ifdef USE_COLOR',\n\n\t\t\t\t'\tattribute vec3 color;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_MORPHTARGETS',\n\n\t\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t\t'\t#else',\n\n\t\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t\t'\t#endif',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\n\t\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t\t'precision ' + parameters.precision + ' int;',\n\n\t\t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.premultipliedAlpha ? \"#define PREMULTIPLIED_ALPHA\" : '',\n\n\t\t\t\tparameters.physicallyCorrectLights ? \"#define PHYSICALLY_CORRECT_LIGHTS\" : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\tparameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',\n\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\n\t\t\t\t( parameters.toneMapping !== THREE.NoToneMapping ) ? \"#define TONE_MAPPING\" : '',\n\t\t\t\t( parameters.toneMapping !== THREE.NoToneMapping ) ? THREE.ShaderChunk[ 'tonemapping_pars_fragment' ] : '',  // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t\t( parameters.toneMapping !== THREE.NoToneMapping ) ? getToneMappingFunction( \"toneMapping\", parameters.toneMapping ) : '',\n\n\t\t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? THREE.ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t\t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t\t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t\t\t\tparameters.outputEncoding ? getTexelEncodingFunction( \"linearToOutputTexel\", parameters.outputEncoding ) : '',\n\n\t\t\t\tparameters.depthPacking ? \"#define DEPTH_PACKING \" + material.depthPacking : '',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t}\n\n\t\tvertexShader = parseIncludes( vertexShader, parameters );\n\t\tvertexShader = replaceLightNums( vertexShader, parameters );\n\n\t\tfragmentShader = parseIncludes( fragmentShader, parameters );\n\t\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\n\t\tif ( material instanceof THREE.ShaderMaterial === false ) {\n\n\t\t\tvertexShader = unrollLoops( vertexShader );\n\t\t\tfragmentShader = unrollLoops( fragmentShader );\n\n\t\t}\n\n\t\tvar vertexGlsl = prefixVertex + vertexShader;\n\t\tvar fragmentGlsl = prefixFragment + fragmentShader;\n\n\t\t// console.log( '*VERTEX*', vertexGlsl );\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\tvar glVertexShader = THREE.WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\n\t\tvar glFragmentShader = THREE.WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\n\n\t\tgl.attachShader( program, glVertexShader );\n\t\tgl.attachShader( program, glFragmentShader );\n\n\t\t// Force a particular attribute to index 0.\n\n\t\tif ( material.index0AttributeName !== undefined ) {\n\n\t\t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\n\n\t\t} else if ( parameters.morphTargets === true ) {\n\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t\t}\n\n\t\tgl.linkProgram( program );\n\n\t\tvar programLog = gl.getProgramInfoLog( program );\n\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader );\n\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader );\n\n\t\tvar runnable = true;\n\t\tvar haveDiagnostics = true;\n\n\t\t// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\n\t\t// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\n\n\t\tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\n\n\t\t\trunnable = false;\n\n\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\n\n\t\t} else if ( programLog !== '' ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\n\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\t\thaveDiagnostics = false;\n\n\t\t}\n\n\t\tif ( haveDiagnostics ) {\n\n\t\t\tthis.diagnostics = {\n\n\t\t\t\trunnable: runnable,\n\t\t\t\tmaterial: material,\n\n\t\t\t\tprogramLog: programLog,\n\n\t\t\t\tvertexShader: {\n\n\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\tprefix: prefixVertex\n\n\t\t\t\t},\n\n\t\t\t\tfragmentShader: {\n\n\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\tprefix: prefixFragment\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\t// clean up\n\n\t\tgl.deleteShader( glVertexShader );\n\t\tgl.deleteShader( glFragmentShader );\n\n\t\t// set up caching for uniform locations\n\n\t\tvar cachedUniforms;\n\n\t\tthis.getUniforms = function() {\n\n\t\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\t\tcachedUniforms =\n\t\t\t\t\t\tnew THREE.WebGLUniforms( gl, program, renderer );\n\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\n\t\t};\n\n\t\t// set up caching for attribute locations\n\n\t\tvar cachedAttributes;\n\n\t\tthis.getAttributes = function() {\n\n\t\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\n\t\t};\n\n\t\t// free resource\n\n\t\tthis.destroy = function() {\n\n\t\t\tgl.deleteProgram( program );\n\t\t\tthis.program = undefined;\n\n\t\t};\n\n\t\t// DEPRECATED\n\n\t\tObject.defineProperties( this, {\n\n\t\t\tuniforms: {\n\t\t\t\tget: function() {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\n\t\t\t\t\treturn this.getUniforms();\n\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tattributes: {\n\t\t\t\tget: function() {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\n\t\t\t\t\treturn this.getAttributes();\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t} );\n\n\n\t\t//\n\n\t\tthis.id = programIdCount ++;\n\t\tthis.code = code;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\n\t\treturn this;\n\n\t};\n\n} )();\n\n// File:src/renderers/webgl/WebGLPrograms.js\n\nTHREE.WebGLPrograms = function ( renderer, capabilities ) {\n\n\tvar programs = [];\n\n\tvar shaderIDs = {\n\t\tMeshDepthMaterial: 'depth',\n\t\tMeshNormalMaterial: 'normal',\n\t\tMeshBasicMaterial: 'basic',\n\t\tMeshLambertMaterial: 'lambert',\n\t\tMeshPhongMaterial: 'phong',\n\t\tMeshStandardMaterial: 'physical',\n\t\tMeshPhysicalMaterial: 'physical',\n\t\tLineBasicMaterial: 'basic',\n\t\tLineDashedMaterial: 'dashed',\n\t\tPointsMaterial: 'points'\n\t};\n\n\tvar parameterNames = [\n\t\t\"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\",\n\t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\",\n\t\t\"roughnessMap\", \"metalnessMap\",\n\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\n\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\",\n\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"depthPacking\"\n\t];\n\n\n\tfunction allocateBones ( object ) {\n\n\t\tif ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {\n\n\t\t\treturn 1024;\n\n\t\t} else {\n\n\t\t\t// default for when object is not specified\n\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t//\n\t\t\t//  - leave some extra space for other uniforms\n\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t//    (up to 54 should be safe)\n\n\t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\n\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\tvar maxBones = nVertexMatrices;\n\n\t\t\tif ( object !== undefined && object instanceof THREE.SkinnedMesh ) {\n\n\t\t\t\tmaxBones = Math.min( object.skeleton.bones.length, maxBones );\n\n\t\t\t\tif ( maxBones < object.skeleton.bones.length ) {\n\n\t\t\t\t\tconsole.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn maxBones;\n\n\t\t}\n\n\t}\n\n\tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\n\n\t\tvar encoding;\n\n\t\tif ( ! map ) {\n\n\t\t\tencoding = THREE.LinearEncoding;\n\n\t\t} else if ( map instanceof THREE.Texture ) {\n\n\t\t\tencoding = map.encoding;\n\n\t\t} else if ( map instanceof THREE.WebGLRenderTarget ) {\n\n\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\tencoding = map.texture.encoding;\n\n\t\t}\n\n\t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n\t\tif ( encoding === THREE.LinearEncoding && gammaOverrideLinear ) {\n\n\t\t\tencoding = THREE.GammaEncoding;\n\n\t\t}\n\n\t\treturn encoding;\n\n\t}\n\n\tthis.getParameters = function ( material, lights, fog, nClipPlanes, object ) {\n\n\t\tvar shaderID = shaderIDs[ material.type ];\n\n\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t// (not to blow over maxLights budget)\n\n\t\tvar maxBones = allocateBones( object );\n\t\tvar precision = renderer.getPrecision();\n\n\t\tif ( material.precision !== null ) {\n\n\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar currentRenderTarget = renderer.getCurrentRenderTarget();\n\n\t\tvar parameters = {\n\n\t\t\tshaderID: shaderID,\n\n\t\t\tprecision: precision,\n\t\t\tsupportsVertexTextures: capabilities.vertexTextures,\n\t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\n\t\t\tmap: !! material.map,\n\t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\n\t\t\tenvMap: !! material.envMap,\n\t\t\tenvMapMode: material.envMap && material.envMap.mapping,\n\t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\n\t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === THREE.CubeUVReflectionMapping ) || ( material.envMap.mapping === THREE.CubeUVRefractionMapping ) ),\n\t\t\tlightMap: !! material.lightMap,\n\t\t\taoMap: !! material.aoMap,\n\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\n\t\t\tbumpMap: !! material.bumpMap,\n\t\t\tnormalMap: !! material.normalMap,\n\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\tspecularMap: !! material.specularMap,\n\t\t\talphaMap: !! material.alphaMap,\n\n\t\t\tcombine: material.combine,\n\n\t\t\tvertexColors: material.vertexColors,\n\n\t\t\tfog: fog,\n\t\t\tuseFog: material.fog,\n\t\t\tfogExp: fog instanceof THREE.FogExp2,\n\n\t\t\tflatShading: material.shading === THREE.FlatShading,\n\n\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\n\n\t\t\tskinning: material.skinning,\n\t\t\tmaxBones: maxBones,\n\t\t\tuseVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,\n\n\t\t\tmorphTargets: material.morphTargets,\n\t\t\tmorphNormals: material.morphNormals,\n\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n\t\t\tnumDirLights: lights.directional.length,\n\t\t\tnumPointLights: lights.point.length,\n\t\t\tnumSpotLights: lights.spot.length,\n\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\tnumClippingPlanes: nClipPlanes,\n\n\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,\n\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\ttoneMapping: renderer.toneMapping,\n\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\talphaTest: material.alphaTest,\n\t\t\tdoubleSided: material.side === THREE.DoubleSide,\n\t\t\tflipSided: material.side === THREE.BackSide,\n\n\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\n\n\t\t};\n\n\t\treturn parameters;\n\n\t};\n\n\tthis.getProgramCode = function ( material, parameters ) {\n\n\t\tvar array = [];\n\n\t\tif ( parameters.shaderID ) {\n\n\t\t\tarray.push( parameters.shaderID );\n\n\t\t} else {\n\n\t\t\tarray.push( material.fragmentShader );\n\t\t\tarray.push( material.vertexShader );\n\n\t\t}\n\n\t\tif ( material.defines !== undefined ) {\n\n\t\t\tfor ( var name in material.defines ) {\n\n\t\t\t\tarray.push( name );\n\t\t\t\tarray.push( material.defines[ name ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\n\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n\t\t}\n\n\t\treturn array.join();\n\n\t};\n\n\tthis.acquireProgram = function ( material, parameters, code ) {\n\n\t\tvar program;\n\n\t\t// Check if code has been already compiled\n\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\tvar programInfo = programs[ p ];\n\n\t\t\tif ( programInfo.code === code ) {\n\n\t\t\t\tprogram = programInfo;\n\t\t\t\t++ program.usedTimes;\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( program === undefined ) {\n\n\t\t\tprogram = new THREE.WebGLProgram( renderer, code, material, parameters );\n\t\t\tprograms.push( program );\n\n\t\t}\n\n\t\treturn program;\n\n\t};\n\n\tthis.releaseProgram = function( program ) {\n\n\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t// Remove from unordered set\n\t\t\tvar i = programs.indexOf( program );\n\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\tprograms.pop();\n\n\t\t\t// Free WebGL resources\n\t\t\tprogram.destroy();\n\n\t\t}\n\n\t};\n\n\t// Exposed for resource monitoring & error feedback via renderer.info:\n\tthis.programs = programs;\n\n};\n\n// File:src/renderers/webgl/WebGLProperties.js\n\n/**\n* @author fordacious / fordacious.github.io\n*/\n\nTHREE.WebGLProperties = function () {\n\n\tvar properties = {};\n\n\tthis.get = function ( object ) {\n\n\t\tvar uuid = object.uuid;\n\t\tvar map = properties[ uuid ];\n\n\t\tif ( map === undefined ) {\n\n\t\t\tmap = {};\n\t\t\tproperties[ uuid ] = map;\n\n\t\t}\n\n\t\treturn map;\n\n\t};\n\n\tthis.delete = function ( object ) {\n\n\t\tdelete properties[ object.uuid ];\n\n\t};\n\n\tthis.clear = function () {\n\n\t\tproperties = {};\n\n\t};\n\n};\n\n// File:src/renderers/webgl/WebGLShader.js\n\nTHREE.WebGLShader = ( function () {\n\n\tfunction addLineNumbers( string ) {\n\n\t\tvar lines = string.split( '\\n' );\n\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n\t\t}\n\n\t\treturn lines.join( '\\n' );\n\n\t}\n\n\treturn function WebGLShader( gl, type, string ) {\n\n\t\tvar shader = gl.createShader( type );\n\n\t\tgl.shaderSource( shader, string );\n\t\tgl.compileShader( shader );\n\n\t\tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\n\n\t\t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\n\n\t\t}\n\n\t\tif ( gl.getShaderInfoLog( shader ) !== '' ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\n\n\t\t}\n\n\t\t// --enable-privileged-webgl-extension\n\t\t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\treturn shader;\n\n\t};\n\n} )();\n\n// File:src/renderers/webgl/WebGLShadowMap.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.WebGLShadowMap = function ( _renderer, _lights, _objects ) {\n\n\tvar _gl = _renderer.context,\n\t_state = _renderer.state,\n\t_frustum = new THREE.Frustum(),\n\t_projScreenMatrix = new THREE.Matrix4(),\n\n\t_lightShadows = _lights.shadows,\n\n\t_shadowMapSize = new THREE.Vector2(),\n\n\t_lookTarget = new THREE.Vector3(),\n\t_lightPositionWorld = new THREE.Vector3(),\n\n\t_renderList = [],\n\n\t_MorphingFlag = 1,\n\t_SkinningFlag = 2,\n\n\t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\n\n\t_depthMaterials = new Array( _NumberOfMaterialVariants ),\n\t_distanceMaterials = new Array( _NumberOfMaterialVariants ),\n\n\t_materialCache = {};\n\n\tvar cubeDirections = [\n\t\tnew THREE.Vector3( 1, 0, 0 ), new THREE.Vector3( - 1, 0, 0 ), new THREE.Vector3( 0, 0, 1 ),\n\t\tnew THREE.Vector3( 0, 0, - 1 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, - 1, 0 )\n\t];\n\n\tvar cubeUps = [\n\t\tnew THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ),\n\t\tnew THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 0, 1 ),\tnew THREE.Vector3( 0, 0, - 1 )\n\t];\n\n\tvar cube2DViewPorts = [\n\t\tnew THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4(),\n\t\tnew THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4()\n\t];\n\n\t// init\n\n\tvar depthMaterialTemplate = new THREE.MeshDepthMaterial();\n\tdepthMaterialTemplate.depthPacking = THREE.RGBADepthPacking;\n\tdepthMaterialTemplate.clipping = true;\n\n\tvar distanceShader = THREE.ShaderLib[ \"distanceRGBA\" ];\n\tvar distanceUniforms = THREE.UniformsUtils.clone( distanceShader.uniforms );\n\n\tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\n\n\t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\n\t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\n\n\t\tvar depthMaterial = depthMaterialTemplate.clone();\n\t\tdepthMaterial.morphTargets = useMorphing;\n\t\tdepthMaterial.skinning = useSkinning;\n\n\t\t_depthMaterials[ i ] = depthMaterial;\n\n\t\tvar distanceMaterial = new THREE.ShaderMaterial( {\n\t\t\tdefines: {\n\t\t\t\t'USE_SHADOWMAP': ''\n\t\t\t},\n\t\t\tuniforms: distanceUniforms,\n\t\t\tvertexShader: distanceShader.vertexShader,\n\t\t\tfragmentShader: distanceShader.fragmentShader,\n\t\t\tmorphTargets: useMorphing,\n\t\t\tskinning: useSkinning,\n\t\t\tclipping: true\n\t\t} );\n\n\t\t_distanceMaterials[ i ] = distanceMaterial;\n\n\t}\n\n\t//\n\n\tvar scope = this;\n\n\tthis.enabled = false;\n\n\tthis.autoUpdate = true;\n\tthis.needsUpdate = false;\n\n\tthis.type = THREE.PCFShadowMap;\n\n\tthis.renderReverseSided = true;\n\tthis.renderSingleSided = true;\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tif ( scope.enabled === false ) return;\n\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\n\t\tif ( _lightShadows.length === 0 ) return;\n\n\t\t// Set GL state for depth map.\n\t\t_state.clearColor( 1, 1, 1, 1 );\n\t\t_state.disable( _gl.BLEND );\n\t\t_state.setDepthTest( true );\n\t\t_state.setScissorTest( false );\n\n\t\t// render depth map\n\n\t\tvar faceCount, isPointLight;\n\n\t\tfor ( var i = 0, il = _lightShadows.length; i < il; i ++ ) {\n\n\t\t\tvar light = _lightShadows[ i ];\n\t\t\tvar shadow = light.shadow;\n\n\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tvar shadowCamera = shadow.camera;\n\n\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\n\t\t\tif ( light instanceof THREE.PointLight ) {\n\n\t\t\t\tfaceCount = 6;\n\t\t\t\tisPointLight = true;\n\n\t\t\t\tvar vpWidth = _shadowMapSize.x;\n\t\t\t\tvar vpHeight = _shadowMapSize.y;\n\n\t\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t\t// following orientation:\n\t\t\t\t//\n\t\t\t\t//  xzXZ\n\t\t\t\t//   y Y\n\t\t\t\t//\n\t\t\t\t// X - Positive x direction\n\t\t\t\t// x - Negative x direction\n\t\t\t\t// Y - Positive y direction\n\t\t\t\t// y - Negative y direction\n\t\t\t\t// Z - Positive z direction\n\t\t\t\t// z - Negative z direction\n\n\t\t\t\t// positive X\n\t\t\t\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\n\t\t\t\t// negative X\n\t\t\t\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\n\t\t\t\t// positive Z\n\t\t\t\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\n\t\t\t\t// negative Z\n\t\t\t\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\n\t\t\t\t// positive Y\n\t\t\t\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\n\t\t\t\t// negative Y\n\t\t\t\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\n\n\t\t\t\t_shadowMapSize.x *= 4.0;\n\t\t\t\t_shadowMapSize.y *= 2.0;\n\n\t\t\t} else {\n\n\t\t\t\tfaceCount = 1;\n\t\t\t\tisPointLight = false;\n\n\t\t\t}\n\n\t\t\tif ( shadow.map === null ) {\n\n\t\t\t\tvar pars = { minFilter: THREE.NearestFilter, magFilter: THREE.NearestFilter, format: THREE.RGBAFormat };\n\n\t\t\t\tshadow.map = new THREE.WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\n\t\t\t\tshadowCamera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t\tif ( shadow instanceof THREE.SpotLightShadow ) {\n\n\t\t\t\tshadow.update( light );\n\n\t\t\t}\n\n\t\t\tvar shadowMap = shadow.map;\n\t\t\tvar shadowMatrix = shadow.matrix;\n\n\t\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\tshadowCamera.position.copy( _lightPositionWorld );\n\n\t\t\t_renderer.setRenderTarget( shadowMap );\n\t\t\t_renderer.clear();\n\n\t\t\t// render shadow map for each cube face (if omni-directional) or\n\t\t\t// run a single pass if not\n\n\t\t\tfor ( var face = 0; face < faceCount; face ++ ) {\n\n\t\t\t\tif ( isPointLight ) {\n\n\t\t\t\t\t_lookTarget.copy( shadowCamera.position );\n\t\t\t\t\t_lookTarget.add( cubeDirections[ face ] );\n\t\t\t\t\tshadowCamera.up.copy( cubeUps[ face ] );\n\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\n\t\t\t\t\tvar vpDimensions = cube2DViewPorts[ face ];\n\t\t\t\t\t_state.viewport( vpDimensions );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\n\t\t\t\t}\n\n\t\t\t\tshadowCamera.updateMatrixWorld();\n\t\t\t\tshadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );\n\n\t\t\t\t// compute shadow matrix\n\n\t\t\t\tshadowMatrix.set(\n\t\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t\t\t);\n\n\t\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n\t\t\t\t// update camera matrices and frustum\n\n\t\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\t\t\t// set object matrices & frustum culling\n\n\t\t\t\t_renderList.length = 0;\n\n\t\t\t\tprojectObject( scene, camera, shadowCamera );\n\n\t\t\t\t// render shadow map\n\t\t\t\t// render regular objects\n\n\t\t\t\tfor ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar object = _renderList[ j ];\n\t\t\t\t\tvar geometry = _objects.update( object );\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( material instanceof THREE.MultiMaterial ) {\n\n\t\t\t\t\t\tvar groups = geometry.groups;\n\t\t\t\t\t\tvar materials = material.materials;\n\n\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\t\tvar group = groups[ k ];\n\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\n\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );\n\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Restore GL state.\n\t\tvar clearColor = _renderer.getClearColor(),\n\t\tclearAlpha = _renderer.getClearAlpha();\n\t\t_renderer.setClearColor( clearColor, clearAlpha );\n\n\t\tscope.needsUpdate = false;\n\n\t};\n\n\tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {\n\n\t\tvar geometry = object.geometry;\n\n\t\tvar result = null;\n\n\t\tvar materialVariants = _depthMaterials;\n\t\tvar customMaterial = object.customDepthMaterial;\n\n\t\tif ( isPointLight ) {\n\n\t\t\tmaterialVariants = _distanceMaterials;\n\t\t\tcustomMaterial = object.customDistanceMaterial;\n\n\t\t}\n\n\t\tif ( ! customMaterial ) {\n\n\t\t\tvar useMorphing = geometry.morphTargets !== undefined &&\n\t\t\t\t\tgeometry.morphTargets.length > 0 && material.morphTargets;\n\n\t\t\tvar useSkinning = object instanceof THREE.SkinnedMesh && material.skinning;\n\n\t\t\tvar variantIndex = 0;\n\n\t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\n\t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\n\n\t\t\tresult = materialVariants[ variantIndex ];\n\n\t\t} else {\n\n\t\t\tresult = customMaterial;\n\n\t\t}\n\n\t\tif ( _renderer.localClippingEnabled &&\n\t\t\t material.clipShadows === true &&\n\t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\n\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t// appropriate state\n\n\t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\n\t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\n\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t}\n\n\t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n\t\t\t}\n\n\t\t\tresult = cachedMaterial;\n\n\t\t}\n\n\t\tresult.visible = material.visible;\n\t\tresult.wireframe = material.wireframe;\n\n\t\tvar side = material.side;\n\n\t\tif ( scope.renderSingleSided && side == THREE.DoubleSide ) {\n\n\t\t\tside = THREE.FrontSide;\n\n\t\t}\n\n\t\tif ( scope.renderReverseSided ) {\n\n\t\t\tif ( side === THREE.FrontSide ) side = THREE.BackSide;\n\t\t\telse if ( side === THREE.BackSide ) side = THREE.FrontSide;\n\n\t\t}\n\n\t\tresult.side = side;\n\n\t\tresult.clipShadows = material.clipShadows;\n\t\tresult.clippingPlanes = material.clippingPlanes;\n\n\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\tresult.linewidth = material.linewidth;\n\n\t\tif ( isPointLight && result.uniforms.lightPos !== undefined ) {\n\n\t\t\tresult.uniforms.lightPos.value.copy( lightPositionWorld );\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tfunction projectObject( object, camera, shadowCamera ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tif ( object.layers.test( camera.layers ) && ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) ) {\n\n\t\t\tif ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {\n\n\t\t\t\tvar material = object.material;\n\n\t\t\t\tif ( material.visible === true ) {\n\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\t\t\t\t\t_renderList.push( object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar children = object.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tprojectObject( children[ i ], camera, shadowCamera );\n\n\t\t}\n\n\t}\n\n};\n\n// File:src/renderers/webgl/WebGLState.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLState = function ( gl, extensions, paramThreeToGL ) {\n\n\tvar _this = this;\n\n\tthis.buffers = {\n\t\tcolor: new THREE.WebGLColorBuffer( gl, this ),\n\t\tdepth: new THREE.WebGLDepthBuffer( gl, this ),\n\t\tstencil: new THREE.WebGLStencilBuffer( gl, this )\n\t};\n\n\tvar maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\tvar newAttributes = new Uint8Array( maxVertexAttributes );\n\tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n\tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\n\tvar capabilities = {};\n\n\tvar compressedTextureFormats = null;\n\n\tvar currentBlending = null;\n\tvar currentBlendEquation = null;\n\tvar currentBlendSrc = null;\n\tvar currentBlendDst = null;\n\tvar currentBlendEquationAlpha = null;\n\tvar currentBlendSrcAlpha = null;\n\tvar currentBlendDstAlpha = null;\n\tvar currentPremultipledAlpha = false;\n\n\tvar currentFlipSided = null;\n\tvar currentCullFace = null;\n\n\tvar currentLineWidth = null;\n\n\tvar currentPolygonOffsetFactor = null;\n\tvar currentPolygonOffsetUnits = null;\n\n\tvar currentScissorTest = null;\n\n\tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\n\tvar currentTextureSlot = null;\n\tvar currentBoundTextures = {};\n\n\tvar currentScissor = new THREE.Vector4();\n\tvar currentViewport = new THREE.Vector4();\n\n\tfunction createTexture( type, target, count ) {\n\n\t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\tvar texture = gl.createTexture();\n\n\t\tgl.bindTexture( type, texture );\n\t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\n\t\tfor ( var i = 0; i < count; i ++ ) {\n\n\t\t\tgl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tvar emptyTextures = {};\n\temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\n\temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\n\n\t//\n\n\tthis.init = function () {\n\n\t\tthis.clearColor( 0, 0, 0, 1 );\n\t\tthis.clearDepth( 1 );\n\t\tthis.clearStencil( 0 );\n\n\t\tthis.enable( gl.DEPTH_TEST );\n\t\tthis.setDepthFunc( THREE.LessEqualDepth );\n\n\t\tthis.setFlipSided( false );\n\t\tthis.setCullFace( THREE.CullFaceBack );\n\t\tthis.enable( gl.CULL_FACE );\n\n\t\tthis.enable( gl.BLEND );\n\t\tthis.setBlending( THREE.NormalBlending );\n\n\t};\n\n\tthis.initAttributes = function () {\n\n\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\n\t\t\tnewAttributes[ i ] = 0;\n\n\t\t}\n\n\t};\n\n\tthis.enableAttribute = function ( attribute ) {\n\n\t\tnewAttributes[ attribute ] = 1;\n\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t}\n\n\t\tif ( attributeDivisors[ attribute ] !== 0 ) {\n\n\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\textension.vertexAttribDivisorANGLE( attribute, 0 );\n\t\t\tattributeDivisors[ attribute ] = 0;\n\n\t\t}\n\n\t};\n\n\tthis.enableAttributeAndDivisor = function ( attribute, meshPerAttribute, extension ) {\n\n\t\tnewAttributes[ attribute ] = 1;\n\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t}\n\n\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\textension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );\n\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t}\n\n\t};\n\n\tthis.disableUnusedAttributes = function () {\n\n\t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\n\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tthis.enable = function ( id ) {\n\n\t\tif ( capabilities[ id ] !== true ) {\n\n\t\t\tgl.enable( id );\n\t\t\tcapabilities[ id ] = true;\n\n\t\t}\n\n\t};\n\n\tthis.disable = function ( id ) {\n\n\t\tif ( capabilities[ id ] !== false ) {\n\n\t\t\tgl.disable( id );\n\t\t\tcapabilities[ id ] = false;\n\n\t\t}\n\n\t};\n\n\tthis.getCompressedTextureFormats = function () {\n\n\t\tif ( compressedTextureFormats === null ) {\n\n\t\t\tcompressedTextureFormats = [];\n\n\t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\n\t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||\n\t\t\t     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {\n\n\t\t\t\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\n\n\t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\n\n\t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn compressedTextureFormats;\n\n\t};\n\n\tthis.setBlending = function ( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\tif ( blending !== THREE.NoBlending ) {\n\n\t\t\tthis.enable( gl.BLEND );\n\n\t\t} else {\n\n\t\t\tthis.disable( gl.BLEND );\n\t\t\tcurrentBlending = blending; // no blending, that is\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n\t\t\tif ( blending === THREE.AdditiveBlending ) {\n\n\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\n\n\t\t\t\t}\n\n\t\t\t} else if ( blending === THREE.SubtractiveBlending ) {\n\n\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\n\n\t\t\t\t}\n\n\t\t\t} else if ( blending === THREE.MultiplyBlending ) {\n\n\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\n\t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tcurrentBlending = blending;\n\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t\t}\n\n\t\tif ( blending === THREE.CustomBlending ) {\n\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\t\tgl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );\n\n\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t\t}\n\n\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\t\tgl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );\n\n\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tcurrentBlendEquation = null;\n\t\t\tcurrentBlendSrc = null;\n\t\t\tcurrentBlendDst = null;\n\t\t\tcurrentBlendEquationAlpha = null;\n\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t}\n\n\t};\n\n\t// TODO Deprecate\n\n\tthis.setColorWrite = function ( colorWrite ) {\n\n\t\tthis.buffers.color.setMask( colorWrite );\n\n\t};\n\n\tthis.setDepthTest = function ( depthTest ) {\n\n\t\tthis.buffers.depth.setTest( depthTest );\n\n\t};\n\n\tthis.setDepthWrite = function ( depthWrite ) {\n\n\t\tthis.buffers.depth.setMask( depthWrite );\n\n\t};\n\n\tthis.setDepthFunc = function ( depthFunc ) {\n\n\t\tthis.buffers.depth.setFunc( depthFunc );\n\n\t};\n\n\tthis.setStencilTest = function ( stencilTest ) {\n\n\t\tthis.buffers.stencil.setTest( stencilTest );\n\n\t};\n\n\tthis.setStencilWrite = function ( stencilWrite ) {\n\n\t\tthis.buffers.stencil.setMask( stencilWrite );\n\n\t};\n\n\tthis.setStencilFunc = function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\tthis.buffers.stencil.setFunc( stencilFunc, stencilRef, stencilMask );\n\n\t};\n\n\tthis.setStencilOp = function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\tthis.buffers.stencil.setOp( stencilFail, stencilZFail, stencilZPass );\n\n\t};\n\n\t//\n\n\tthis.setFlipSided = function ( flipSided ) {\n\n\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\tif ( flipSided ) {\n\n\t\t\t\tgl.frontFace( gl.CW );\n\n\t\t\t} else {\n\n\t\t\t\tgl.frontFace( gl.CCW );\n\n\t\t\t}\n\n\t\t\tcurrentFlipSided = flipSided;\n\n\t\t}\n\n\t};\n\n\tthis.setCullFace = function ( cullFace ) {\n\n\t\tif ( cullFace !== THREE.CullFaceNone ) {\n\n\t\t\tthis.enable( gl.CULL_FACE );\n\n\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\tif ( cullFace === THREE.CullFaceBack ) {\n\n\t\t\t\t\tgl.cullFace( gl.BACK );\n\n\t\t\t\t} else if ( cullFace === THREE.CullFaceFront ) {\n\n\t\t\t\t\tgl.cullFace( gl.FRONT );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.disable( gl.CULL_FACE );\n\n\t\t}\n\n\t\tcurrentCullFace = cullFace;\n\n\t};\n\n\tthis.setLineWidth = function ( width ) {\n\n\t\tif ( width !== currentLineWidth ) {\n\n\t\t\tgl.lineWidth( width );\n\n\t\t\tcurrentLineWidth = width;\n\n\t\t}\n\n\t};\n\n\tthis.setPolygonOffset = function ( polygonOffset, factor, units ) {\n\n\t\tif ( polygonOffset ) {\n\n\t\t\tthis.enable( gl.POLYGON_OFFSET_FILL );\n\n\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.disable( gl.POLYGON_OFFSET_FILL );\n\n\t\t}\n\n\t};\n\n\tthis.getScissorTest = function () {\n\n\t\treturn currentScissorTest;\n\n\t};\n\n\tthis.setScissorTest = function ( scissorTest ) {\n\n\t\tcurrentScissorTest = scissorTest;\n\n\t\tif ( scissorTest ) {\n\n\t\t\tthis.enable( gl.SCISSOR_TEST );\n\n\t\t} else {\n\n\t\t\tthis.disable( gl.SCISSOR_TEST );\n\n\t\t}\n\n\t};\n\n\t// texture\n\n\tthis.activeTexture = function ( webglSlot ) {\n\n\t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\tgl.activeTexture( webglSlot );\n\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t}\n\n\t};\n\n\tthis.bindTexture = function ( webglType, webglTexture ) {\n\n\t\tif ( currentTextureSlot === null ) {\n\n\t\t\t_this.activeTexture();\n\n\t\t}\n\n\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\tif ( boundTexture === undefined ) {\n\n\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n\t\t}\n\n\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\tboundTexture.type = webglType;\n\t\t\tboundTexture.texture = webglTexture;\n\n\t\t}\n\n\t};\n\n\tthis.compressedTexImage2D = function () {\n\n\t\ttry {\n\n\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( error );\n\n\t\t}\n\n\t};\n\n\tthis.texImage2D = function () {\n\n\t\ttry {\n\n\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( error );\n\n\t\t}\n\n\t};\n\n\t// TODO Deprecate\n\n\tthis.clearColor = function ( r, g, b, a ) {\n\n\t\tthis.buffers.color.setClear( r, g, b, a );\n\n\t};\n\n\tthis.clearDepth = function ( depth ) {\n\n\t\tthis.buffers.depth.setClear( depth );\n\n\t};\n\n\tthis.clearStencil = function ( stencil ) {\n\n\t\tthis.buffers.stencil.setClear( stencil );\n\n\t};\n\n\t//\n\n\tthis.scissor = function ( scissor ) {\n\n\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\tcurrentScissor.copy( scissor );\n\n\t\t}\n\n\t};\n\n\tthis.viewport = function ( viewport ) {\n\n\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\tcurrentViewport.copy( viewport );\n\n\t\t}\n\n\t};\n\n\t//\n\n\tthis.reset = function () {\n\n\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\n\t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\n\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tcapabilities = {};\n\n\t\tcompressedTextureFormats = null;\n\n\t\tcurrentTextureSlot = null;\n\t\tcurrentBoundTextures = {};\n\n\t\tcurrentBlending = null;\n\n\t\tcurrentFlipSided = null;\n\t\tcurrentCullFace = null;\n\n\t\tthis.buffers.color.reset();\n\t\tthis.buffers.depth.reset();\n\t\tthis.buffers.stencil.reset();\n\n\t};\n\n};\n\nTHREE.WebGLColorBuffer = function ( gl, state ) {\n\n\tvar locked = false;\n\n\tvar color = new THREE.Vector4();\n\tvar currentColorMask = null;\n\tvar currentColorClear = new THREE.Vector4();\n\n\tthis.setMask = function ( colorMask ) {\n\n\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\tcurrentColorMask = colorMask;\n\n\t\t}\n\n\t};\n\n\tthis.setLocked = function ( lock ) {\n\n\t\tlocked = lock;\n\n\t};\n\n\tthis.setClear = function ( r, g, b, a ) {\n\n\t\tcolor.set( r, g, b, a );\n\n\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\tgl.clearColor( r, g, b, a );\n\t\t\tcurrentColorClear.copy( color );\n\n\t\t}\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tlocked = false;\n\n\t\tcurrentColorMask = null;\n\t\tcurrentColorClear = new THREE.Vector4();\n\n\t};\n\n};\n\nTHREE.WebGLDepthBuffer = function( gl, state ) {\n\n\tvar locked = false;\n\n\tvar currentDepthMask = null;\n\tvar currentDepthFunc = null;\n\tvar currentDepthClear = null;\n\n\tthis.setTest = function ( depthTest ) {\n\n\t\tif ( depthTest ) {\n\n\t\t\tstate.enable( gl.DEPTH_TEST );\n\n\t\t} else {\n\n\t\t\tstate.disable( gl.DEPTH_TEST );\n\n\t\t}\n\n\t};\n\n\tthis.setMask = function( depthMask ){\n\n\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\tgl.depthMask( depthMask );\n\t\t\tcurrentDepthMask = depthMask;\n\n\t\t}\n\n\t};\n\n\tthis.setFunc = function ( depthFunc ) {\n\n\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\tif ( depthFunc ) {\n\n\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\tcase THREE.NeverDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.AlwaysDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.LessDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.LESS );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.LessEqualDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.EqualDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.GreaterEqualDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.GreaterDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.NotEqualDepth:\n\n\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t}\n\n\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t}\n\n\t};\n\n\tthis.setLocked = function ( lock ) {\n\n\t\tlocked = lock;\n\n\t};\n\n\tthis.setClear = function ( depth ) {\n\n\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\tgl.clearDepth( depth );\n\t\t\tcurrentDepthClear = depth;\n\n\t\t}\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tlocked = false;\n\n\t\tcurrentDepthMask = null;\n\t\tcurrentDepthFunc = null;\n\t\tcurrentDepthClear = null;\n\n\t};\n\n};\n\nTHREE.WebGLStencilBuffer = function ( gl, state ) {\n\n\tvar locked = false;\n\n\tvar currentStencilMask = null;\n\tvar currentStencilFunc = null;\n\tvar currentStencilRef = null;\n\tvar currentStencilFuncMask = null;\n\tvar currentStencilFail  = null;\n\tvar currentStencilZFail = null;\n\tvar currentStencilZPass = null;\n\tvar currentStencilClear = null;\n\n\tthis.setTest = function ( stencilTest ) {\n\n\t\tif ( stencilTest ) {\n\n\t\t\tstate.enable( gl.STENCIL_TEST );\n\n\t\t} else {\n\n\t\t\tstate.disable( gl.STENCIL_TEST );\n\n\t\t}\n\n\t};\n\n\tthis.setMask = function ( stencilMask ) {\n\n\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\tgl.stencilMask( stencilMask );\n\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t}\n\n\t};\n\n\tthis.setFunc = function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t     currentStencilRef \t!== stencilRef \t||\n\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\tgl.stencilFunc( stencilFunc,  stencilRef, stencilMask );\n\n\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\tcurrentStencilRef  = stencilRef;\n\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t}\n\n\t};\n\n\tthis.setOp\t = function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\tif ( currentStencilFail\t !== stencilFail \t||\n\t\t     currentStencilZFail !== stencilZFail ||\n\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\tgl.stencilOp( stencilFail,  stencilZFail, stencilZPass );\n\n\t\t\tcurrentStencilFail  = stencilFail;\n\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t}\n\n\t};\n\n\tthis.setLocked = function ( lock ) {\n\n\t\tlocked = lock;\n\n\t};\n\n\tthis.setClear = function ( stencil ) {\n\n\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\tgl.clearStencil( stencil );\n\t\t\tcurrentStencilClear = stencil;\n\n\t\t}\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tlocked = false;\n\n\t\tcurrentStencilMask = null;\n\t\tcurrentStencilFunc = null;\n\t\tcurrentStencilRef = null;\n\t\tcurrentStencilFuncMask = null;\n\t\tcurrentStencilFail = null;\n\t\tcurrentStencilZFail = null;\n\t\tcurrentStencilZPass = null;\n\t\tcurrentStencilClear = null;\n\n\t};\n\n};\n\n// File:src/renderers/webgl/WebGLTextures.js\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nTHREE.WebGLTextures = function ( _gl, extensions, state, properties, capabilities, paramThreeToGL, info ) {\n\n\tvar _infoMemory = info.memory;\n\tvar _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext );\n\n\t//\n\n\tfunction clampToMaxSize ( image, maxSize ) {\n\n\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\t// Warning: Scaling through the canvas will only work with images that use\n\t\t\t// premultiplied alpha.\n\n\t\t\tvar scale = maxSize / Math.max( image.width, image.height );\n\n\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\tcanvas.width = Math.floor( image.width * scale );\n\t\t\tcanvas.height = Math.floor( image.height * scale );\n\n\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n\t\t\treturn canvas;\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\tfunction isPowerOfTwo( image ) {\n\n\t\treturn THREE.Math.isPowerOfTwo( image.width ) && THREE.Math.isPowerOfTwo( image.height );\n\n\t}\n\n\tfunction makePowerOfTwo( image ) {\n\n\t\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {\n\n\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\tcanvas.width = THREE.Math.nearestPowerOfTwo( image.width );\n\t\t\tcanvas.height = THREE.Math.nearestPowerOfTwo( image.height );\n\n\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\n\n\t\t\treturn canvas;\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\tif ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) return true;\n\t\tif ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) return true;\n\n\t\treturn false;\n\n\t}\n\n\t// Fallback filters for non-power-of-2 textures\n\n\tfunction filterFallback ( f ) {\n\n\t\tif ( f === THREE.NearestFilter || f === THREE.NearestMipMapNearestFilter || f === THREE.NearestMipMapLinearFilter ) {\n\n\t\t\treturn _gl.NEAREST;\n\n\t\t}\n\n\t\treturn _gl.LINEAR;\n\n\t}\n\n\t//\n\n\tfunction onTextureDispose( event ) {\n\n\t\tvar texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tdeallocateTexture( texture );\n\n\t\t_infoMemory.textures --;\n\n\n\t}\n\n\tfunction onRenderTargetDispose( event ) {\n\n\t\tvar renderTarget = event.target;\n\n\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tdeallocateRenderTarget( renderTarget );\n\n\t\t_infoMemory.textures --;\n\n\t}\n\n\t//\n\n\tfunction deallocateTexture( texture ) {\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\n\n\t\t\t// cube texture\n\n\t\t\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\n\n\t\t} else {\n\n\t\t\t// 2D texture\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t}\n\n\t\t// remove all webgl properties\n\t\tproperties.delete( texture );\n\n\t}\n\n\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\tif ( ! renderTarget ) return;\n\n\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t}\n\n\t\tif ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\n\t\t}\n\n\t\tproperties.delete( renderTarget.texture );\n\t\tproperties.delete( renderTarget );\n\n\t}\n\n\t//\n\n\n\n\tfunction setTexture2D( texture, slot ) {\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tvar image = texture.image;\n\n\t\t\tif ( image === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );\n\n\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );\n\n\t\t\t} else {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n\t}\n\n\tfunction setTextureCube ( texture, slot ) {\n\n\t\tvar textureProperties = properties.get( texture );\n\n\t\tif ( texture.image.length === 6 ) {\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tif ( ! textureProperties.__image__webglTextureCube ) {\n\n\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\n\n\t\t\t\t\t_infoMemory.textures ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n\t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\n\t\t\t\tvar isCompressed = texture instanceof THREE.CompressedTexture;\n\t\t\t\tvar isDataTexture = texture.image[ 0 ] instanceof THREE.DataTexture;\n\n\t\t\t\tvar cubeImage = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar image = cubeImage[ 0 ],\n\t\t\t\tisPowerOfTwoImage = isPowerOfTwo( image ),\n\t\t\t\tglFormat = paramThreeToGL( texture.format ),\n\t\t\t\tglType = paramThreeToGL( texture.type );\n\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( ! isCompressed ) {\n\n\t\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tmipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\tif ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {\n\n\t\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\" );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) {\n\n\t\t\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t\t} else {\n\n\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction setTextureCubeDynamic ( texture, slot ) {\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\n\n\t}\n\n\tfunction setTextureParameters ( textureType, texture, isPowerOfTwoImage ) {\n\n\t\tvar extension;\n\n\t\tif ( isPowerOfTwoImage ) {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );\n\n\t\t} else {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n\n\t\t\tif ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );\n\n\t\t\t}\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\n\n\t\t\tif ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );\n\n\t\t\t}\n\n\t\t}\n\n\t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\tif ( extension ) {\n\n\t\t\tif ( texture.type === THREE.FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\n\t\t\tif ( texture.type === THREE.HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;\n\n\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t_infoMemory.textures ++;\n\n\t\t}\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\n\t\tvar image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\n\n\t\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {\n\n\t\t\timage = makePowerOfTwo( image );\n\n\t\t}\n\n\t\tvar isPowerOfTwoImage = isPowerOfTwo( image ),\n\t\tglFormat = paramThreeToGL( texture.format ),\n\t\tglType = paramThreeToGL( texture.type );\n\n\t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );\n\n\t\tvar mipmap, mipmaps = texture.mipmaps;\n\n\t\tif ( texture instanceof THREE.DepthTexture ) {\n\n\t\t\t// populate depth texture with dummy data\n\n\t\t\tvar internalFormat = _gl.DEPTH_COMPONENT;\n\n\t\t\tif ( texture.type === THREE.FloatType ) {\n\n\t\t\t\tif ( !_isWebGL2 ) throw new Error('Float Depth Texture only supported in WebGL2.0');\n\t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT32F;\n\n\t\t\t} else if ( _isWebGL2 ) {\n\n\t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\n\t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT16;\n\n\t\t\t}\n\n\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t} else if ( texture instanceof THREE.DataTexture ) {\n\n\t\t\t// use manually created mipmaps if available\n\t\t\t// if there are no manual mipmaps\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\n\t\t\t}\n\n\t\t} else if ( texture instanceof THREE.CompressedTexture ) {\n\n\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\tif ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {\n\n\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\" );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t// use manually created mipmaps if available\n\t\t\t// if there are no manual mipmaps\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\n\t\ttextureProperties.__version = texture.version;\n\n\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t}\n\n\t// Render targets\n\n\t// Setup storage for target texture and bind it to correct framebuffer\n\tfunction setupFrameBufferTexture ( framebuffer, renderTarget, attachment, textureTarget ) {\n\n\t\tvar glFormat = paramThreeToGL( renderTarget.texture.format );\n\t\tvar glType = paramThreeToGL( renderTarget.texture.type );\n\t\tstate.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t}\n\n\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\tfunction setupRenderBufferStorage ( renderbuffer, renderTarget ) {\n\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\n\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t} else {\n\n\t\t\t// FIXME: We don't support !depth !stencil\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\n\n\t\t}\n\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\n\t}\n\n\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\tfunction setupDepthTexture ( framebuffer, renderTarget ) {\n\n\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\n\t\tif ( isCube ) throw new Error('Depth Texture with cube render targets is not supported!');\n\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\tif ( !( renderTarget.depthTexture instanceof THREE.DepthTexture ) ) {\n\n\t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n\n\t\t}\n\n\t\t// upload an empty depth texture with framebuffer size\n\t\tif ( !properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\t\t}\n\n\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t}\n\n\t// Setup GL resources for a non-texture depth buffer\n\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\n\n\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\tif ( isCube ) throw new Error('target.depthTexture not supported in Cube render targets');\n\n\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t} else {\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t}\n\n\t// Set up GL resources for the render target\n\tfunction setupRenderTarget( renderTarget ) {\n\n\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t_infoMemory.textures ++;\n\n\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\n\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\n\t\t// Setup framebuffer\n\n\t\tif ( isCube ) {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t}\n\n\t\t// Setup color buffer\n\n\t\tif ( isCube ) {\n\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\n\n\t\t} else {\n\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\n\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\n\n\t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\n\n\t\t}\n\n\t\t// Setup depth and stencil buffers\n\n\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t}\n\n\t}\n\n\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\tvar texture = renderTarget.texture;\n\n\t\tif ( texture.generateMipmaps && isPowerOfTwo( renderTarget ) &&\n\t\t\t\ttexture.minFilter !== THREE.NearestFilter &&\n\t\t\t\ttexture.minFilter !== THREE.LinearFilter ) {\n\n\t\t\tvar target = renderTarget instanceof THREE.WebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\t_gl.generateMipmap( target );\n\t\t\tstate.bindTexture( target, null );\n\n\t\t}\n\n\t}\n\n\tthis.setTexture2D = setTexture2D;\n\tthis.setTextureCube = setTextureCube;\n\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n\tthis.setupRenderTarget = setupRenderTarget;\n\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\n};\n\n// File:src/renderers/webgl/WebGLUniforms.js\n\n/**\n *\n * Uniforms of a program.\n * Those form a tree structure with a special top-level container for the root,\n * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.\n *\n *\n * Properties of inner nodes including the top-level container:\n *\n * .seq - array of nested uniforms\n * .map - nested uniforms by name\n *\n *\n * Methods of all nodes except the top-level container:\n *\n * .setValue( gl, value, [renderer] )\n *\n * \t\tuploads a uniform value(s)\n *  \tthe 'renderer' parameter is needed for sampler uniforms\n *\n *\n * Static methods of the top-level container (renderer factorizations):\n *\n * .upload( gl, seq, values, renderer )\n *\n * \t\tsets uniforms in 'seq' to 'values[id].value'\n *\n * .seqWithValue( seq, values ) : filteredSeq\n *\n * \t\tfilters 'seq' entries with corresponding entry in values\n *\n * .splitDynamic( seq, values ) : filteredSeq\n *\n * \t\tfilters 'seq' entries with dynamic entry and removes them from 'seq'\n *\n *\n * Methods of the top-level container (renderer factorizations):\n *\n * .setValue( gl, name, value )\n *\n * \t\tsets uniform with  name 'name' to 'value'\n *\n * .set( gl, obj, prop )\n *\n * \t\tsets uniform from object and property with same name than uniform\n *\n * .setOptional( gl, obj, prop )\n *\n * \t\tlike .set for an optional property of the object\n *\n *\n * @author tschw\n *\n */\n\nTHREE.WebGLUniforms = ( function() { // scope\n\n\tvar emptyTexture = new THREE.Texture();\n\tvar emptyCubeTexture = new THREE.CubeTexture();\n\n\t// --- Base for inner nodes (including the root) ---\n\n\tvar UniformContainer = function() {\n\n\t\t\tthis.seq = [];\n\t\t\tthis.map = {};\n\n\t\t},\n\n\t// --- Utilities ---\n\n\t// Array Caches (provide typed arrays for temporary by size)\n\n\t\tarrayCacheF32 = [],\n\t\tarrayCacheI32 = [],\n\n\t\tuncacheTemporaryArrays = function() {\n\n\t\t\tarrayCacheF32.length = 0;\n\t\t\tarrayCacheI32.length = 0;\n\n\t\t},\n\n\t// Flattening for arrays of vectors and matrices\n\n\t\tflatten = function( array, nBlocks, blockSize ) {\n\n\t\t\tvar firstElem = array[ 0 ];\n\n\t\t\tif ( firstElem <= 0 || firstElem > 0 ) return array;\n\t\t\t// unoptimized: ! isNaN( firstElem )\n\t\t\t// see http://jacksondunstan.com/articles/983\n\n\t\t\tvar n = nBlocks * blockSize,\n\t\t\t\tr = arrayCacheF32[ n ];\n\n\t\t\tif ( r === undefined ) {\n\n\t\t\t\tr = new Float32Array( n );\n\t\t\t\tarrayCacheF32[ n ] = r;\n\n\t\t\t}\n\n\t\t\tif ( nBlocks !== 0 ) {\n\n\t\t\t\tfirstElem.toArray( r, 0 );\n\n\t\t\t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\t\t\toffset += blockSize;\n\t\t\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn r;\n\n\t\t},\n\n\t// Texture unit allocation\n\n\t\tallocTexUnits = function( renderer, n ) {\n\n\t\t\tvar r = arrayCacheI32[ n ];\n\n\t\t\tif ( r === undefined ) {\n\n\t\t\t\tr = new Int32Array( n );\n\t\t\t\tarrayCacheI32[ n ] = r;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t\tr[ i ] = renderer.allocTextureUnit();\n\n\t\t\treturn r;\n\n\t\t},\n\n\t// --- Setters ---\n\n\t// Note: Defining these methods externally, because they come in a bunch\n\t// and this way their names minify.\n\n\t\t// Single scalar\n\n\t\tsetValue1f = function( gl, v ) { gl.uniform1f( this.addr, v ); },\n\t\tsetValue1i = function( gl, v ) { gl.uniform1i( this.addr, v ); },\n\n\t\t// Single float vector (from flat array or THREE.VectorN)\n\n\t\tsetValue2fv = function( gl, v ) {\n\n\t\t\tif ( v.x === undefined ) gl.uniform2fv( this.addr, v );\n\t\t\telse gl.uniform2f( this.addr, v.x, v.y );\n\n\t\t},\n\n\t\tsetValue3fv = function( gl, v ) {\n\n\t\t\tif ( v.x !== undefined )\n\t\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\t\t\telse if ( v.r !== undefined )\n\t\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\t\t\telse\n\t\t\t\tgl.uniform3fv( this.addr, v );\n\n\t\t},\n\n\t\tsetValue4fv = function( gl, v ) {\n\n\t\t\tif ( v.x === undefined ) gl.uniform4fv( this.addr, v );\n\t\t\telse gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t},\n\n\t\t// Single matrix (from flat array or MatrixN)\n\n\t\tsetValue2fm = function( gl, v ) {\n\n\t\t\tgl.uniformMatrix2fv( this.addr, false, v.elements || v );\n\n\t\t},\n\n\t\tsetValue3fm = function( gl, v ) {\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, v.elements || v );\n\n\t\t},\n\n\t\tsetValue4fm = function( gl, v ) {\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, v.elements || v );\n\n\t\t},\n\n\t\t// Single texture (2D / Cube)\n\n\t\tsetValueT1 = function( gl, v, renderer ) {\n\n\t\t\tvar unit = renderer.allocTextureUnit();\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\trenderer.setTexture2D( v || emptyTexture, unit );\n\n\t\t},\n\n\t\tsetValueT6 = function( gl, v, renderer ) {\n\n\t\t\tvar unit = renderer.allocTextureUnit();\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\trenderer.setTextureCube( v || emptyCubeTexture, unit );\n\n\t\t},\n\n\t\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n\t\tsetValue2iv = function( gl, v ) { gl.uniform2iv( this.addr, v ); },\n\t\tsetValue3iv = function( gl, v ) { gl.uniform3iv( this.addr, v ); },\n\t\tsetValue4iv = function( gl, v ) { gl.uniform4iv( this.addr, v ); },\n\n\t\t// Helper to pick the right setter for the singular case\n\n\t\tgetSingularSetter = function( type ) {\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 0x1406: return setValue1f; // FLOAT\n\t\t\t\tcase 0x8b50: return setValue2fv; // _VEC2\n\t\t\t\tcase 0x8b51: return setValue3fv; // _VEC3\n\t\t\t\tcase 0x8b52: return setValue4fv; // _VEC4\n\n\t\t\t\tcase 0x8b5a: return setValue2fm; // _MAT2\n\t\t\t\tcase 0x8b5b: return setValue3fm; // _MAT3\n\t\t\t\tcase 0x8b5c: return setValue4fm; // _MAT4\n\n\t\t\t\tcase 0x8b5e: return setValueT1; // SAMPLER_2D\n\t\t\t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\n\n\t\t\t\tcase 0x1404: case 0x8b56: return setValue1i; // INT, BOOL\n\t\t\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t\t\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t\t\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n\t\t\t}\n\n\t\t},\n\n\t\t// Array of scalars\n\n\t\tsetValue1fv = function( gl, v ) { gl.uniform1fv( this.addr, v ); },\n\t\tsetValue1iv = function( gl, v ) { gl.uniform1iv( this.addr, v ); },\n\n\t\t// Array of vectors (flat or from THREE classes)\n\n\t\tsetValueV2a = function( gl, v ) {\n\n\t\t\tgl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );\n\n\t\t},\n\n\t\tsetValueV3a = function( gl, v ) {\n\n\t\t\tgl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );\n\n\t\t},\n\n\t\tsetValueV4a = function( gl, v ) {\n\n\t\t\tgl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );\n\n\t\t},\n\n\t\t// Array of matrices (flat or from THREE clases)\n\n\t\tsetValueM2a = function( gl, v ) {\n\n\t\t\tgl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );\n\n\t\t},\n\n\t\tsetValueM3a = function( gl, v ) {\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );\n\n\t\t},\n\n\t\tsetValueM4a = function( gl, v ) {\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );\n\n\t\t},\n\n\t\t// Array of textures (2D / Cube)\n\n\t\tsetValueT1a = function( gl, v, renderer ) {\n\n\t\t\tvar n = v.length,\n\t\t\t\tunits = allocTexUnits( renderer, n );\n\n\t\t\tgl.uniform1iv( this.addr, units );\n\n\t\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\t\trenderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t\t\t}\n\n\t\t},\n\n\t\tsetValueT6a = function( gl, v, renderer ) {\n\n\t\t\tvar n = v.length,\n\t\t\t\tunits = allocTexUnits( renderer, n );\n\n\t\t\tgl.uniform1iv( this.addr, units );\n\n\t\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\t\trenderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t\t\t}\n\n\t\t},\n\n\n\t\t// Helper to pick the right setter for a pure (bottom-level) array\n\n\t\tgetPureArraySetter = function( type ) {\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 0x1406: return setValue1fv; // FLOAT\n\t\t\t\tcase 0x8b50: return setValueV2a; // _VEC2\n\t\t\t\tcase 0x8b51: return setValueV3a; // _VEC3\n\t\t\t\tcase 0x8b52: return setValueV4a; // _VEC4\n\n\t\t\t\tcase 0x8b5a: return setValueM2a; // _MAT2\n\t\t\t\tcase 0x8b5b: return setValueM3a; // _MAT3\n\t\t\t\tcase 0x8b5c: return setValueM4a; // _MAT4\n\n\t\t\t\tcase 0x8b5e: return setValueT1a; // SAMPLER_2D\n\t\t\t\tcase 0x8b60: return setValueT6a; // SAMPLER_CUBE\n\n\t\t\t\tcase 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL\n\t\t\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t\t\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t\t\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n\t\t\t}\n\n\t\t},\n\n\t// --- Uniform Classes ---\n\n\t\tSingleUniform = function SingleUniform( id, activeInfo, addr ) {\n\n\t\t\tthis.id = id;\n\t\t\tthis.addr = addr;\n\t\t\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t\t\t// this.path = activeInfo.name; // DEBUG\n\n\t\t},\n\n\t\tPureArrayUniform = function( id, activeInfo, addr ) {\n\n\t\t\tthis.id = id;\n\t\t\tthis.addr = addr;\n\t\t\tthis.size = activeInfo.size;\n\t\t\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t\t\t// this.path = activeInfo.name; // DEBUG\n\n\t\t},\n\n\t\tStructuredUniform = function( id ) {\n\n\t\t\tthis.id = id;\n\n\t\t\tUniformContainer.call( this ); // mix-in\n\n\t\t};\n\n\tStructuredUniform.prototype.setValue = function( gl, value ) {\n\n\t\t// Note: Don't need an extra 'renderer' parameter, since samplers\n\t\t// are not allowed in structured uniforms.\n\n\t\tvar seq = this.seq;\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tu.setValue( gl, value[ u.id ] );\n\n\t\t}\n\n\t};\n\n\t// --- Top-level ---\n\n\t// Parser - builds up the property tree from the path strings\n\n\tvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g,\n\t\t// extracts\n\t\t// \t- the identifier (member name or array index)\n\t\t//  - followed by an optional right bracket (found when array index)\n\t\t//  - followed by an optional left bracket or dot (type of subscript)\n\t\t//\n\t\t// Note: These portions can be read in a non-overlapping fashion and\n\t\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t\t// in the uniform names.\n\n\t\taddUniform = function( container, uniformObject ) {\n\n\t\t\tcontainer.seq.push( uniformObject );\n\t\t\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n\t\t},\n\n\t\tparseUniform = function( activeInfo, addr, container ) {\n\n\t\t\tvar path = activeInfo.name,\n\t\t\t\tpathLength = path.length;\n\n\t\t\t// reset RegExp object, because of the early exit of a previous run\n\t\t\tRePathPart.lastIndex = 0;\n\n\t\t\tfor (; ;) {\n\n\t\t\t\tvar match = RePathPart.exec( path ),\n\t\t\t\t\tmatchEnd = RePathPart.lastIndex,\n\n\t\t\t\t\tid = match[ 1 ],\n\t\t\t\t\tidIsIndex = match[ 2 ] === ']',\n\t\t\t\t\tsubscript = match[ 3 ];\n\n\t\t\t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\n\t\t\t\tif ( subscript === undefined ||\n\t\t\t\t\t\tsubscript === '[' && matchEnd + 2 === pathLength ) {\n\t\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t} else {\n\t\t\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\t\t\tvar map = container.map,\n\t\t\t\t\t\tnext = map[ id ];\n\n\t\t\t\t\tif ( next === undefined ) {\n\n\t\t\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\t\t\taddUniform( container, next );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcontainer = next;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t// Root Container\n\n\t\tWebGLUniforms = function WebGLUniforms( gl, program, renderer ) {\n\n\t\t\tUniformContainer.call( this );\n\n\t\t\tthis.renderer = renderer;\n\n\t\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\n\n\t\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\t\tvar info = gl.getActiveUniform( program, i ),\n\t\t\t\t\tpath = info.name,\n\t\t\t\t\taddr = gl.getUniformLocation( program, path );\n\n\t\t\t\tparseUniform( info, addr, this );\n\n\t\t\t}\n\n\t\t};\n\n\n\tWebGLUniforms.prototype.setValue = function( gl, name, value ) {\n\n\t\tvar u = this.map[ name ];\n\n\t\tif ( u !== undefined ) u.setValue( gl, value, this.renderer );\n\n\t};\n\n\tWebGLUniforms.prototype.set = function( gl, object, name ) {\n\n\t\tvar u = this.map[ name ];\n\n\t\tif ( u !== undefined ) u.setValue( gl, object[ name ], this.renderer );\n\n\t};\n\n\tWebGLUniforms.prototype.setOptional = function( gl, object, name ) {\n\n\t\tvar v = object[ name ];\n\n\t\tif ( v !== undefined ) this.setValue( gl, name, v );\n\n\t};\n\n\n\t// Static interface\n\n\tWebGLUniforms.upload = function( gl, seq, values, renderer ) {\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ],\n\t\t\t\tv = values[ u.id ];\n\n\t\t\tif ( v.needsUpdate !== false ) {\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\n\t\t\t\tu.setValue( gl, v.value, renderer );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tWebGLUniforms.seqWithValue = function( seq, values ) {\n\n\t\tvar r = [];\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tif ( u.id in values ) r.push( u );\n\n\t\t}\n\n\t\treturn r;\n\n\t};\n\n\tWebGLUniforms.splitDynamic = function( seq, values ) {\n\n\t\tvar r = null,\n\t\t\tn = seq.length,\n\t\t\tw = 0;\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ],\n\t\t\t\tv = values[ u.id ];\n\n\t\t\tif ( v && v.dynamic === true ) {\n\n\t\t\t\tif ( r === null ) r = [];\n\t\t\t\tr.push( u );\n\n\t\t\t} else {\n\n\t\t\t\t// in-place compact 'seq', removing the matches\n\t\t\t\tif ( w < i ) seq[ w ] = u;\n\t\t\t\t++ w;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( w < n ) seq.length = w;\n\n\t\treturn r;\n\n\t};\n\n\tWebGLUniforms.evalDynamic = function( seq, values, object, camera ) {\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar v = values[ seq[ i ].id ],\n\t\t\t\tf = v.onUpdateCallback;\n\n\t\t\tif ( f !== undefined ) f.call( v, object, camera );\n\n\t\t}\n\n\t};\n\n\treturn WebGLUniforms;\n\n} )();\n\n// File:src/renderers/webgl/plugins/LensFlarePlugin.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.LensFlarePlugin = function ( renderer, flares ) {\n\n\tvar gl = renderer.context;\n\tvar state = renderer.state;\n\n\tvar vertexBuffer, elementBuffer;\n\tvar shader, program, attributes, uniforms;\n\n\tvar tempTexture, occlusionTexture;\n\n\tfunction init() {\n\n\t\tvar vertices = new Float32Array( [\n\t\t\t- 1, - 1,  0, 0,\n\t\t\t 1, - 1,  1, 0,\n\t\t\t 1,  1,  1, 1,\n\t\t\t- 1,  1,  0, 1\n\t\t] );\n\n\t\tvar faces = new Uint16Array( [\n\t\t\t0, 1, 2,\n\t\t\t0, 2, 3\n\t\t] );\n\n\t\t// buffers\n\n\t\tvertexBuffer     = gl.createBuffer();\n\t\telementBuffer    = gl.createBuffer();\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n\t\t// textures\n\n\t\ttempTexture      = gl.createTexture();\n\t\tocclusionTexture = gl.createTexture();\n\n\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n\t\tshader = {\n\n\t\t\tvertexShader: [\n\n\t\t\t\t\"uniform lowp int renderType;\",\n\n\t\t\t\t\"uniform vec3 screenPosition;\",\n\t\t\t\t\"uniform vec2 scale;\",\n\t\t\t\t\"uniform float rotation;\",\n\n\t\t\t\t\"uniform sampler2D occlusionMap;\",\n\n\t\t\t\t\"attribute vec2 position;\",\n\t\t\t\t\"attribute vec2 uv;\",\n\n\t\t\t\t\"varying vec2 vUV;\",\n\t\t\t\t\"varying float vVisibility;\",\n\n\t\t\t\t\"void main() {\",\n\n\t\t\t\t\t\"vUV = uv;\",\n\n\t\t\t\t\t\"vec2 pos = position;\",\n\n\t\t\t\t\t\"if ( renderType == 2 ) {\",\n\n\t\t\t\t\t\t\"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\",\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\",\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\",\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\",\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\",\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\",\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\",\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\",\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\",\n\n\t\t\t\t\t\t\"vVisibility =        visibility.r / 9.0;\",\n\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.g / 9.0;\",\n\t\t\t\t\t\t\"vVisibility *=       visibility.b / 9.0;\",\n\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.a / 9.0;\",\n\n\t\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\n\t\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\n\n\t\t\t\t\t\"}\",\n\n\t\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\n\n\t\t\t\t\"}\"\n\n\t\t\t].join( \"\\n\" ),\n\n\t\t\tfragmentShader: [\n\n\t\t\t\t\"uniform lowp int renderType;\",\n\n\t\t\t\t\"uniform sampler2D map;\",\n\t\t\t\t\"uniform float opacity;\",\n\t\t\t\t\"uniform vec3 color;\",\n\n\t\t\t\t\"varying vec2 vUV;\",\n\t\t\t\t\"varying float vVisibility;\",\n\n\t\t\t\t\"void main() {\",\n\n\t\t\t\t\t// pink square\n\n\t\t\t\t\t\"if ( renderType == 0 ) {\",\n\n\t\t\t\t\t\t\"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\",\n\n\t\t\t\t\t// restore\n\n\t\t\t\t\t\"} else if ( renderType == 1 ) {\",\n\n\t\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\n\n\t\t\t\t\t// flare\n\n\t\t\t\t\t\"} else {\",\n\n\t\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\n\t\t\t\t\t\t\"texture.a *= opacity * vVisibility;\",\n\t\t\t\t\t\t\"gl_FragColor = texture;\",\n\t\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\n\n\t\t\t\t\t\"}\",\n\n\t\t\t\t\"}\"\n\n\t\t\t].join( \"\\n\" )\n\n\t\t};\n\n\t\tprogram = createProgram( shader );\n\n\t\tattributes = {\n\t\t\tvertex: gl.getAttribLocation ( program, \"position\" ),\n\t\t\tuv:     gl.getAttribLocation ( program, \"uv\" )\n\t\t};\n\n\t\tuniforms = {\n\t\t\trenderType:     gl.getUniformLocation( program, \"renderType\" ),\n\t\t\tmap:            gl.getUniformLocation( program, \"map\" ),\n\t\t\tocclusionMap:   gl.getUniformLocation( program, \"occlusionMap\" ),\n\t\t\topacity:        gl.getUniformLocation( program, \"opacity\" ),\n\t\t\tcolor:          gl.getUniformLocation( program, \"color\" ),\n\t\t\tscale:          gl.getUniformLocation( program, \"scale\" ),\n\t\t\trotation:       gl.getUniformLocation( program, \"rotation\" ),\n\t\t\tscreenPosition: gl.getUniformLocation( program, \"screenPosition\" )\n\t\t};\n\n\t}\n\n\t/*\n\t * Render lens flares\n\t * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\n\t *         reads these back and calculates occlusion.\n\t */\n\n\tthis.render = function ( scene, camera, viewport ) {\n\n\t\tif ( flares.length === 0 ) return;\n\n\t\tvar tempPosition = new THREE.Vector3();\n\n\t\tvar invAspect = viewport.w / viewport.z,\n\t\t\thalfViewportWidth = viewport.z * 0.5,\n\t\t\thalfViewportHeight = viewport.w * 0.5;\n\n\t\tvar size = 16 / viewport.w,\n\t\t\tscale = new THREE.Vector2( size * invAspect, size );\n\n\t\tvar screenPosition = new THREE.Vector3( 1, 1, 0 ),\n\t\t\tscreenPositionPixels = new THREE.Vector2( 1, 1 );\n\n\t\tvar validArea = new THREE.Box2();\n\n\t\tvalidArea.min.set( 0, 0 );\n\t\tvalidArea.max.set( viewport.z - 16, viewport.w - 16 );\n\n\t\tif ( program === undefined ) {\n\n\t\t\tinit();\n\n\t\t}\n\n\t\tgl.useProgram( program );\n\n\t\tstate.initAttributes();\n\t\tstate.enableAttribute( attributes.vertex );\n\t\tstate.enableAttribute( attributes.uv );\n\t\tstate.disableUnusedAttributes();\n\n\t\t// loop through all lens flares to update their occlusion and positions\n\t\t// setup gl and common used attribs/uniforms\n\n\t\tgl.uniform1i( uniforms.occlusionMap, 0 );\n\t\tgl.uniform1i( uniforms.map, 1 );\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\tgl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n\t\tstate.disable( gl.CULL_FACE );\n\t\tstate.setDepthWrite( false );\n\n\t\tfor ( var i = 0, l = flares.length; i < l; i ++ ) {\n\n\t\t\tsize = 16 / viewport.w;\n\t\t\tscale.set( size * invAspect, size );\n\n\t\t\t// calc object screen position\n\n\t\t\tvar flare = flares[ i ];\n\n\t\t\ttempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );\n\n\t\t\ttempPosition.applyMatrix4( camera.matrixWorldInverse );\n\t\t\ttempPosition.applyProjection( camera.projectionMatrix );\n\n\t\t\t// setup arrays for gl programs\n\n\t\t\tscreenPosition.copy( tempPosition );\n\n\t\t\t// horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\n\t\t\tscreenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;\n\t\t\tscreenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;\n\n\t\t\t// screen cull\n\n\t\t\tif ( validArea.containsPoint( screenPositionPixels ) === true ) {\n\n\t\t\t\t// save current RGB to temp texture\n\n\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, null );\n\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\n\n\t\t\t\t// render pink quad\n\n\t\t\t\tgl.uniform1i( uniforms.renderType, 0 );\n\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\n\t\t\t\tstate.disable( gl.BLEND );\n\t\t\t\tstate.enable( gl.DEPTH_TEST );\n\n\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n\t\t\t\t// copy result to occlusionMap\n\n\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\n\n\n\t\t\t\t// restore graphics\n\n\t\t\t\tgl.uniform1i( uniforms.renderType, 1 );\n\t\t\t\tstate.disable( gl.DEPTH_TEST );\n\n\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n\t\t\t\t// update object positions\n\n\t\t\t\tflare.positionScreen.copy( screenPosition );\n\n\t\t\t\tif ( flare.customUpdateCallback ) {\n\n\t\t\t\t\tflare.customUpdateCallback( flare );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tflare.updateLensFlares();\n\n\t\t\t\t}\n\n\t\t\t\t// render flares\n\n\t\t\t\tgl.uniform1i( uniforms.renderType, 2 );\n\t\t\t\tstate.enable( gl.BLEND );\n\n\t\t\t\tfor ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar sprite = flare.lensFlares[ j ];\n\n\t\t\t\t\tif ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\n\n\t\t\t\t\t\tscreenPosition.x = sprite.x;\n\t\t\t\t\t\tscreenPosition.y = sprite.y;\n\t\t\t\t\t\tscreenPosition.z = sprite.z;\n\n\t\t\t\t\t\tsize = sprite.size * sprite.scale / viewport.w;\n\n\t\t\t\t\t\tscale.x = size * invAspect;\n\t\t\t\t\t\tscale.y = size;\n\n\t\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\t\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t\t\t\t\t\tgl.uniform1f( uniforms.rotation, sprite.rotation );\n\n\t\t\t\t\t\tgl.uniform1f( uniforms.opacity, sprite.opacity );\n\t\t\t\t\t\tgl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\n\n\t\t\t\t\t\tstate.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\n\t\t\t\t\t\trenderer.setTexture2D( sprite.texture, 1 );\n\n\t\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// restore gl\n\n\t\tstate.enable( gl.CULL_FACE );\n\t\tstate.enable( gl.DEPTH_TEST );\n\t\tstate.setDepthWrite( true );\n\n\t\trenderer.resetGLState();\n\n\t};\n\n\tfunction createProgram ( shader ) {\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\n\t\tvar prefix = \"precision \" + renderer.getPrecision() + \" float;\\n\";\n\n\t\tgl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\n\t\tgl.shaderSource( vertexShader, prefix + shader.vertexShader );\n\n\t\tgl.compileShader( fragmentShader );\n\t\tgl.compileShader( vertexShader );\n\n\t\tgl.attachShader( program, fragmentShader );\n\t\tgl.attachShader( program, vertexShader );\n\n\t\tgl.linkProgram( program );\n\n\t\treturn program;\n\n\t}\n\n};\n\n// File:src/renderers/webgl/plugins/SpritePlugin.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.SpritePlugin = function ( renderer, sprites ) {\n\n\tvar gl = renderer.context;\n\tvar state = renderer.state;\n\n\tvar vertexBuffer, elementBuffer;\n\tvar program, attributes, uniforms;\n\n\tvar texture;\n\n\t// decompose matrixWorld\n\n\tvar spritePosition = new THREE.Vector3();\n\tvar spriteRotation = new THREE.Quaternion();\n\tvar spriteScale = new THREE.Vector3();\n\n\tfunction init() {\n\n\t\tvar vertices = new Float32Array( [\n\t\t\t- 0.5, - 0.5,  0, 0,\n\t\t\t  0.5, - 0.5,  1, 0,\n\t\t\t  0.5,   0.5,  1, 1,\n\t\t\t- 0.5,   0.5,  0, 1\n\t\t] );\n\n\t\tvar faces = new Uint16Array( [\n\t\t\t0, 1, 2,\n\t\t\t0, 2, 3\n\t\t] );\n\n\t\tvertexBuffer  = gl.createBuffer();\n\t\telementBuffer = gl.createBuffer();\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n\t\tprogram = createProgram();\n\n\t\tattributes = {\n\t\t\tposition:\t\t\tgl.getAttribLocation ( program, 'position' ),\n\t\t\tuv:\t\t\t\t\tgl.getAttribLocation ( program, 'uv' )\n\t\t};\n\n\t\tuniforms = {\n\t\t\tuvOffset:\t\t\tgl.getUniformLocation( program, 'uvOffset' ),\n\t\t\tuvScale:\t\t\tgl.getUniformLocation( program, 'uvScale' ),\n\n\t\t\trotation:\t\t\tgl.getUniformLocation( program, 'rotation' ),\n\t\t\tscale:\t\t\t\tgl.getUniformLocation( program, 'scale' ),\n\n\t\t\tcolor:\t\t\t\tgl.getUniformLocation( program, 'color' ),\n\t\t\tmap:\t\t\t\tgl.getUniformLocation( program, 'map' ),\n\t\t\topacity:\t\t\tgl.getUniformLocation( program, 'opacity' ),\n\n\t\t\tmodelViewMatrix: \tgl.getUniformLocation( program, 'modelViewMatrix' ),\n\t\t\tprojectionMatrix:\tgl.getUniformLocation( program, 'projectionMatrix' ),\n\n\t\t\tfogType:\t\t\tgl.getUniformLocation( program, 'fogType' ),\n\t\t\tfogDensity:\t\t\tgl.getUniformLocation( program, 'fogDensity' ),\n\t\t\tfogNear:\t\t\tgl.getUniformLocation( program, 'fogNear' ),\n\t\t\tfogFar:\t\t\t\tgl.getUniformLocation( program, 'fogFar' ),\n\t\t\tfogColor:\t\t\tgl.getUniformLocation( program, 'fogColor' ),\n\n\t\t\talphaTest:\t\t\tgl.getUniformLocation( program, 'alphaTest' )\n\t\t};\n\n\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\tcanvas.width = 8;\n\t\tcanvas.height = 8;\n\n\t\tvar context = canvas.getContext( '2d' );\n\t\tcontext.fillStyle = 'white';\n\t\tcontext.fillRect( 0, 0, 8, 8 );\n\n\t\ttexture = new THREE.Texture( canvas );\n\t\ttexture.needsUpdate = true;\n\n\t}\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tif ( sprites.length === 0 ) return;\n\n\t\t// setup gl\n\n\t\tif ( program === undefined ) {\n\n\t\t\tinit();\n\n\t\t}\n\n\t\tgl.useProgram( program );\n\n\t\tstate.initAttributes();\n\t\tstate.enableAttribute( attributes.position );\n\t\tstate.enableAttribute( attributes.uv );\n\t\tstate.disableUnusedAttributes();\n\n\t\tstate.disable( gl.CULL_FACE );\n\t\tstate.enable( gl.BLEND );\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\tgl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n\t\tgl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\n\n\t\tstate.activeTexture( gl.TEXTURE0 );\n\t\tgl.uniform1i( uniforms.map, 0 );\n\n\t\tvar oldFogType = 0;\n\t\tvar sceneFogType = 0;\n\t\tvar fog = scene.fog;\n\n\t\tif ( fog ) {\n\n\t\t\tgl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\n\n\t\t\tif ( fog instanceof THREE.Fog ) {\n\n\t\t\t\tgl.uniform1f( uniforms.fogNear, fog.near );\n\t\t\t\tgl.uniform1f( uniforms.fogFar, fog.far );\n\n\t\t\t\tgl.uniform1i( uniforms.fogType, 1 );\n\t\t\t\toldFogType = 1;\n\t\t\t\tsceneFogType = 1;\n\n\t\t\t} else if ( fog instanceof THREE.FogExp2 ) {\n\n\t\t\t\tgl.uniform1f( uniforms.fogDensity, fog.density );\n\n\t\t\t\tgl.uniform1i( uniforms.fogType, 2 );\n\t\t\t\toldFogType = 2;\n\t\t\t\tsceneFogType = 2;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl.uniform1i( uniforms.fogType, 0 );\n\t\t\toldFogType = 0;\n\t\t\tsceneFogType = 0;\n\n\t\t}\n\n\n\t\t// update positions and sort\n\n\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n\t\t\tvar sprite = sprites[ i ];\n\n\t\t\tsprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\n\t\t\tsprite.z = - sprite.modelViewMatrix.elements[ 14 ];\n\n\t\t}\n\n\t\tsprites.sort( painterSortStable );\n\n\t\t// render all sprites\n\n\t\tvar scale = [];\n\n\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n\t\t\tvar sprite = sprites[ i ];\n\t\t\tvar material = sprite.material;\n\n\t\t\tgl.uniform1f( uniforms.alphaTest, material.alphaTest );\n\t\t\tgl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );\n\n\t\t\tsprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );\n\n\t\t\tscale[ 0 ] = spriteScale.x;\n\t\t\tscale[ 1 ] = spriteScale.y;\n\n\t\t\tvar fogType = 0;\n\n\t\t\tif ( scene.fog && material.fog ) {\n\n\t\t\t\tfogType = sceneFogType;\n\n\t\t\t}\n\n\t\t\tif ( oldFogType !== fogType ) {\n\n\t\t\t\tgl.uniform1i( uniforms.fogType, fogType );\n\t\t\t\toldFogType = fogType;\n\n\t\t\t}\n\n\t\t\tif ( material.map !== null ) {\n\n\t\t\t\tgl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );\n\t\t\t\tgl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );\n\n\t\t\t} else {\n\n\t\t\t\tgl.uniform2f( uniforms.uvOffset, 0, 0 );\n\t\t\t\tgl.uniform2f( uniforms.uvScale, 1, 1 );\n\n\t\t\t}\n\n\t\t\tgl.uniform1f( uniforms.opacity, material.opacity );\n\t\t\tgl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\n\n\t\t\tgl.uniform1f( uniforms.rotation, material.rotation );\n\t\t\tgl.uniform2fv( uniforms.scale, scale );\n\n\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\n\t\t\tstate.setDepthTest( material.depthTest );\n\t\t\tstate.setDepthWrite( material.depthWrite );\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\trenderer.setTexture2D( material.map, 0 );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setTexture2D( texture, 0 );\n\n\t\t\t}\n\n\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\t\t}\n\n\t\t// restore gl\n\n\t\tstate.enable( gl.CULL_FACE );\n\n\t\trenderer.resetGLState();\n\n\t};\n\n\tfunction createProgram () {\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\n\t\tgl.shaderSource( vertexShader, [\n\n\t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\n\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t'uniform float rotation;',\n\t\t\t'uniform vec2 scale;',\n\t\t\t'uniform vec2 uvOffset;',\n\t\t\t'uniform vec2 uvScale;',\n\n\t\t\t'attribute vec2 position;',\n\t\t\t'attribute vec2 uv;',\n\n\t\t\t'varying vec2 vUV;',\n\n\t\t\t'void main() {',\n\n\t\t\t\t'vUV = uvOffset + uv * uvScale;',\n\n\t\t\t\t'vec2 alignedPosition = position * scale;',\n\n\t\t\t\t'vec2 rotatedPosition;',\n\t\t\t\t'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',\n\t\t\t\t'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',\n\n\t\t\t\t'vec4 finalPosition;',\n\n\t\t\t\t'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',\n\t\t\t\t'finalPosition.xy += rotatedPosition;',\n\t\t\t\t'finalPosition = projectionMatrix * finalPosition;',\n\n\t\t\t\t'gl_Position = finalPosition;',\n\n\t\t\t'}'\n\n\t\t].join( '\\n' ) );\n\n\t\tgl.shaderSource( fragmentShader, [\n\n\t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\n\t\t\t'uniform vec3 color;',\n\t\t\t'uniform sampler2D map;',\n\t\t\t'uniform float opacity;',\n\n\t\t\t'uniform int fogType;',\n\t\t\t'uniform vec3 fogColor;',\n\t\t\t'uniform float fogDensity;',\n\t\t\t'uniform float fogNear;',\n\t\t\t'uniform float fogFar;',\n\t\t\t'uniform float alphaTest;',\n\n\t\t\t'varying vec2 vUV;',\n\n\t\t\t'void main() {',\n\n\t\t\t\t'vec4 texture = texture2D( map, vUV );',\n\n\t\t\t\t'if ( texture.a < alphaTest ) discard;',\n\n\t\t\t\t'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',\n\n\t\t\t\t'if ( fogType > 0 ) {',\n\n\t\t\t\t\t'float depth = gl_FragCoord.z / gl_FragCoord.w;',\n\t\t\t\t\t'float fogFactor = 0.0;',\n\n\t\t\t\t\t'if ( fogType == 1 ) {',\n\n\t\t\t\t\t\t'fogFactor = smoothstep( fogNear, fogFar, depth );',\n\n\t\t\t\t\t'} else {',\n\n\t\t\t\t\t\t'const float LOG2 = 1.442695;',\n\t\t\t\t\t\t'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',\n\t\t\t\t\t\t'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',\n\n\t\t\t\t\t'}',\n\n\t\t\t\t\t'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',\n\n\t\t\t\t'}',\n\n\t\t\t'}'\n\n\t\t].join( '\\n' ) );\n\n\t\tgl.compileShader( vertexShader );\n\t\tgl.compileShader( fragmentShader );\n\n\t\tgl.attachShader( program, vertexShader );\n\t\tgl.attachShader( program, fragmentShader );\n\n\t\tgl.linkProgram( program );\n\n\t\treturn program;\n\n\t}\n\n\tfunction painterSortStable ( a, b ) {\n\t\t\n\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else {\n\n\t\t\treturn b.id - a.id;\n\n\t\t}\n\n\t}\n\n};\n\n// File:src/Three.Legacy.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nObject.assign( THREE, {\n\tFace4: function ( a, b, c, d, normal, color, materialIndex ) {\n\t\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n\t\treturn new THREE.Face3( a, b, c, normal, color, materialIndex );\n\t},\n\tLineStrip: 0,\n\tLinePieces: 1,\n\tMeshFaceMaterial: THREE.MultiMaterial,\n\tPointCloud: function ( geometry, material ) {\n\t\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\t\treturn new THREE.Points( geometry, material );\n\t},\n\tParticle: THREE.Sprite,\n\tParticleSystem: function ( geometry, material ) {\n\t\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\t\treturn new THREE.Points( geometry, material );\n\t},\n\tPointCloudMaterial: function ( parameters ) {\n\t\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new THREE.PointsMaterial( parameters );\n\t},\n\tParticleBasicMaterial: function ( parameters ) {\n\t\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new THREE.PointsMaterial( parameters );\n\t},\n\tParticleSystemMaterial: function ( parameters ) {\n\t\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new THREE.PointsMaterial( parameters );\n\t},\n\tVertex: function ( x, y, z ) {\n\t\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\t\treturn new THREE.Vector3( x, y, z );\n\t}\n} );\n\n//\n\nObject.assign( THREE.Box2.prototype, {\n\tempty: function () {\n\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\t\treturn this.isEmpty();\n\t},\n\tisIntersectionBox: function ( box ) {\n\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\treturn this.intersectsBox( box );\n\t}\n} );\n\nObject.assign( THREE.Box3.prototype, {\n\tempty: function () {\n\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\t\treturn this.isEmpty();\n\t},\n\tisIntersectionBox: function ( box ) {\n\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\treturn this.intersectsBox( box );\n\t},\n\tisIntersectionSphere: function ( sphere ) {\n\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\treturn this.intersectsSphere( sphere );\n\t}\n} );\n\nObject.assign( THREE.Matrix3.prototype, {\n\tmultiplyVector3: function ( vector ) {\n\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\t\treturn vector.applyMatrix3( this );\n\t},\n\tmultiplyVector3Array: function ( a ) {\n\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n\t\treturn this.applyToVector3Array( a );\n\t}\n} );\n\nObject.assign( THREE.Matrix4.prototype, {\n\textractPosition: function ( m ) {\n\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\t\treturn this.copyPosition( m );\n\t},\n\tsetRotationFromQuaternion: function ( q ) {\n\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\t\treturn this.makeRotationFromQuaternion( q );\n\t},\n\tmultiplyVector3: function ( vector ) {\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );\n\t\treturn vector.applyProjection( this );\n\t},\n\tmultiplyVector4: function ( vector ) {\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\treturn vector.applyMatrix4( this );\n\t},\n\tmultiplyVector3Array: function ( a ) {\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n\t\treturn this.applyToVector3Array( a );\n\t},\n\trotateAxis: function ( v ) {\n\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\t\tv.transformDirection( this );\n\t},\n\tcrossVector: function ( vector ) {\n\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\treturn vector.applyMatrix4( this );\n\t},\n\ttranslate: function ( v ) {\n\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\t},\n\trotateX: function ( angle ) {\n\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\t},\n\trotateY: function ( angle ) {\n\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\t},\n\trotateZ: function ( angle ) {\n\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\t},\n\trotateByAxis: function ( axis, angle ) {\n\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\t}\n} );\n\nObject.assign( THREE.Plane.prototype, {\n\tisIntersectionLine: function ( line ) {\n\t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\t\treturn this.intersectsLine( line );\n\t}\n} );\n\nObject.assign( THREE.Quaternion.prototype, {\n\tmultiplyVector3: function ( vector ) {\n\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\t\treturn vector.applyQuaternion( this );\n\t}\n} );\n\nObject.assign( THREE.Ray.prototype, {\n\tisIntersectionBox: function ( box ) {\n\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\treturn this.intersectsBox( box );\n\t},\n\tisIntersectionPlane: function ( plane ) {\n\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\t\treturn this.intersectsPlane( plane );\n\t},\n\tisIntersectionSphere: function ( sphere ) {\n\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\treturn this.intersectsSphere( sphere );\n\t}\n} );\n\nObject.assign( THREE.Vector3.prototype, {\n\tsetEulerFromRotationMatrix: function () {\n\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\t},\n\tsetEulerFromQuaternion: function () {\n\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\t},\n\tgetPositionFromMatrix: function ( m ) {\n\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\t\treturn this.setFromMatrixPosition( m );\n\t},\n\tgetScaleFromMatrix: function ( m ) {\n\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\t\treturn this.setFromMatrixScale( m );\n\t},\n\tgetColumnFromMatrix: function ( index, matrix ) {\n\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\t\treturn this.setFromMatrixColumn( matrix, index );\n\t}\n} );\n\n//\n\nObject.assign( THREE.Object3D.prototype, {\n\tgetChildByName: function ( name ) {\n\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\t\treturn this.getObjectByName( name );\n\t},\n\trenderDepth: function ( value ) {\n\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\t},\n\ttranslate: function ( distance, axis ) {\n\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\t\treturn this.translateOnAxis( axis, distance );\n\t}\n} );\n\nObject.defineProperties( THREE.Object3D.prototype, {\n\teulerOrder: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\treturn this.rotation.order;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\tthis.rotation.order = value;\n\t\t}\n\t},\n\tuseQuaternion: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\t\t}\n\t}\n} );\n\nObject.defineProperties( THREE.LOD.prototype, {\n\tobjects: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n\t\t\treturn this.levels;\n\t\t}\n\t}\n} );\n\n//\n\nTHREE.PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n\tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n\t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\n\tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\n\tthis.setFocalLength( focalLength );\n\n};\n\n//\n\nObject.defineProperties( THREE.Light.prototype, {\n\tonlyShadow: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\t\t}\n\t},\n\tshadowCameraFov: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t\t\tthis.shadow.camera.fov = value;\n\t\t}\n\t},\n\tshadowCameraLeft: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t\t\tthis.shadow.camera.left = value;\n\t\t}\n\t},\n\tshadowCameraRight: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t\t\tthis.shadow.camera.right = value;\n\t\t}\n\t},\n\tshadowCameraTop: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t\t\tthis.shadow.camera.top = value;\n\t\t}\n\t},\n\tshadowCameraBottom: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t\t\tthis.shadow.camera.bottom = value;\n\t\t}\n\t},\n\tshadowCameraNear: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t\t\tthis.shadow.camera.near = value;\n\t\t}\n\t},\n\tshadowCameraFar: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t\t\tthis.shadow.camera.far = value;\n\t\t}\n\t},\n\tshadowCameraVisible: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\t\t}\n\t},\n\tshadowBias: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t\t\tthis.shadow.bias = value;\n\t\t}\n\t},\n\tshadowDarkness: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\t\t}\n\t},\n\tshadowMapWidth: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t\t\tthis.shadow.mapSize.width = value;\n\t\t}\n\t},\n\tshadowMapHeight: {\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t\t\tthis.shadow.mapSize.height = value;\n\t\t}\n\t}\n} );\n\n//\n\nObject.defineProperties( THREE.BufferAttribute.prototype, {\n\tlength: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\n\t\t\treturn this.array.length;\n\t\t}\n\t}\n} );\n\nObject.assign( THREE.BufferGeometry.prototype, {\n\taddIndex: function ( index ) {\n\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\t\tthis.setIndex( index );\n\t},\n\taddDrawCall: function ( start, count, indexOffset ) {\n\t\tif ( indexOffset !== undefined ) {\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\t\t}\n\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\t\tthis.addGroup( start, count );\n\t},\n\tclearDrawCalls: function () {\n\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\t\tthis.clearGroups();\n\t},\n\tcomputeTangents: function () {\n\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n\t},\n\tcomputeOffsets: function () {\n\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\t}\n} );\n\nObject.defineProperties( THREE.BufferGeometry.prototype, {\n\tdrawcalls: {\n\t\tget: function () {\n\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t\t\treturn this.groups;\n\t\t}\n\t},\n\toffsets: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t\t\treturn this.groups;\n\t\t}\n\t}\n} );\n\n//\n\nObject.defineProperties( THREE.Material.prototype, {\n\twrapAround: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\n\t\t}\n\t},\n\twrapRGB: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );\n\t\t\treturn new THREE.Color();\n\t\t}\n\t}\n} );\n\nObject.defineProperties( THREE.MeshPhongMaterial.prototype, {\n\tmetal: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n\t\t\treturn false;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n\t\t}\n\t}\n} );\n\nObject.defineProperties( THREE.ShaderMaterial.prototype, {\n\tderivatives: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\treturn this.extensions.derivatives;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\tthis.extensions.derivatives = value;\n\t\t}\n\t}\n} );\n\n//\n\nTHREE.EventDispatcher.prototype = Object.assign( Object.create( {\n\n\t// Note: Extra base ensures these properties are not 'assign'ed.\n\n\tconstructor: THREE.EventDispatcher,\n\n\tapply: function ( target ) {\n\n\t\tconsole.warn( \"THREE.EventDispatcher: .apply is deprecated, \" +\n\t\t\t\t\"just inherit or Object.assign the prototype to mix-in.\" );\n\n\t\tObject.assign( target, this );\n\n\t}\n\n} ), THREE.EventDispatcher.prototype );\n\n//\n\nObject.assign( THREE.WebGLRenderer.prototype, {\n\tsupportsFloatTextures: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\t\treturn this.extensions.get( 'OES_texture_float' );\n\t},\n\tsupportsHalfFloatTextures: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\t\treturn this.extensions.get( 'OES_texture_half_float' );\n\t},\n\tsupportsStandardDerivatives: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\t\treturn this.extensions.get( 'OES_standard_derivatives' );\n\t},\n\tsupportsCompressedTextureS3TC: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\t},\n\tsupportsCompressedTexturePVRTC: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\t},\n\tsupportsBlendMinMax: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\t\treturn this.extensions.get( 'EXT_blend_minmax' );\n\t},\n\tsupportsVertexTextures: function () {\n\t\treturn this.capabilities.vertexTextures;\n\t},\n\tsupportsInstancedArrays: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\t},\n\tenableScissorTest: function ( boolean ) {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\t\tthis.setScissorTest( boolean );\n\t},\n\tinitMaterial: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\t},\n\taddPrePlugin: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\t},\n\taddPostPlugin: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\t},\n\tupdateShadowMap: function () {\n\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\t}\n} );\n\nObject.defineProperties( THREE.WebGLRenderer.prototype, {\n\tshadowMapEnabled: {\n\t\tget: function () {\n\t\t\treturn this.shadowMap.enabled;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t\t\tthis.shadowMap.enabled = value;\n\t\t}\n\t},\n\tshadowMapType: {\n\t\tget: function () {\n\t\t\treturn this.shadowMap.type;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t\t\tthis.shadowMap.type = value;\n\t\t}\n\t},\n\tshadowMapCullFace: {\n\t\tget: function () {\n\t\t\treturn this.shadowMap.cullFace;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );\n\t\t\tthis.shadowMap.cullFace = value;\n\t\t}\n\t}\n} );\n\nObject.defineProperties( THREE.WebGLShadowMap.prototype, {\n\tcullFace: {\n\t\tget: function () {\n\t\t\treturn this.renderReverseSided ? THREE.CullFaceFront : THREE.CullFaceBack;\n\t\t},\n\t\tset: function ( cullFace ) {\n\t\t\tvar value = ( cullFace !== THREE.CullFaceBack );\n\t\t\tconsole.warn( \"WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to \" + value + \".\" );\n\t\t\tthis.renderReverseSided = value;\n\t\t}\n\t}\n} );\n\n//\n\nObject.defineProperties( THREE.WebGLRenderTarget.prototype, {\n\twrapS: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\treturn this.texture.wrapS;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\tthis.texture.wrapS = value;\n\t\t}\n\t},\n\twrapT: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\treturn this.texture.wrapT;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\tthis.texture.wrapT = value;\n\t\t}\n\t},\n\tmagFilter: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\treturn this.texture.magFilter;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\tthis.texture.magFilter = value;\n\t\t}\n\t},\n\tminFilter: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\treturn this.texture.minFilter;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\tthis.texture.minFilter = value;\n\t\t}\n\t},\n\tanisotropy: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\treturn this.texture.anisotropy;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\tthis.texture.anisotropy = value;\n\t\t}\n\t},\n\toffset: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\treturn this.texture.offset;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\tthis.texture.offset = value;\n\t\t}\n\t},\n\trepeat: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\treturn this.texture.repeat;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\tthis.texture.repeat = value;\n\t\t}\n\t},\n\tformat: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\treturn this.texture.format;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\tthis.texture.format = value;\n\t\t}\n\t},\n\ttype: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\treturn this.texture.type;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\tthis.texture.type = value;\n\t\t}\n\t},\n\tgenerateMipmaps: {\n\t\tget: function () {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\treturn this.texture.generateMipmaps;\n\t\t},\n\t\tset: function ( value ) {\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\tthis.texture.generateMipmaps = value;\n\t\t}\n\t}\n} );\n\n//\n\nObject.assign( THREE.Audio.prototype, {\n\tload: function ( file ) {\n\t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.' );\n\t\tvar scope = this;\n\t\tvar audioLoader = new THREE.AudioLoader();\n\t\taudioLoader.load( file, function ( buffer ) {\n\t\t\tscope.setBuffer( buffer );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\nObject.assign( THREE.AudioAnalyser.prototype, {\n\tgetData: function ( file ) {\n\t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\t\treturn this.getFrequencyData();\n\t}\n} );\n\n//\n\nTHREE.GeometryUtils = {\n\n\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\n\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\n\t\tvar matrix;\n\n\t\tif ( geometry2 instanceof THREE.Mesh ) {\n\n\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\n\t\t\tmatrix = geometry2.matrix;\n\t\t\tgeometry2 = geometry2.geometry;\n\n\t\t}\n\n\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\n\t},\n\n\tcenter: function ( geometry ) {\n\n\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n\t\treturn geometry.center();\n\n\t}\n\n};\n\nTHREE.ImageUtils = {\n\n\tcrossOrigin: undefined,\n\n\tloadTexture: function ( url, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n\t\tvar loader = new THREE.TextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\n\t\tif ( mapping ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t},\n\n\tloadTextureCube: function ( urls, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n\t\tvar loader = new THREE.CubeTextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\n\t\tif ( mapping ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t},\n\n\tloadCompressedTexture: function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n\t},\n\n\tloadCompressedTextureCube: function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n\t}\n\n};\n\n//\n\nTHREE.Projector = function () {\n\n\tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\n\n\tthis.projectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\tvector.project( camera );\n\n\t};\n\n\tthis.unprojectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\tvector.unproject( camera );\n\n\t};\n\n\tthis.pickingRay = function ( vector, camera ) {\n\n\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\n\t};\n\n};\n\n//\n\nTHREE.CanvasRenderer = function () {\n\n\tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\n\n\tthis.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\tthis.clear = function () {};\n\tthis.render = function () {};\n\tthis.setClearColor = function () {};\n\tthis.setSize = function () {};\n\n};\n\n// File:src/extras/CurveUtils.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n */\n\nTHREE.CurveUtils = {\n\n\ttangentQuadraticBezier: function ( t, p0, p1, p2 ) {\n\n\t\treturn 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );\n\n\t},\n\n\t// Puay Bing, thanks for helping with this derivative!\n\n\ttangentCubicBezier: function ( t, p0, p1, p2, p3 ) {\n\n\t\treturn - 3 * p0 * ( 1 - t ) * ( 1 - t )  +\n\t\t\t3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +\n\t\t\t6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +\n\t\t\t3 * t * t * p3;\n\n\t},\n\n\ttangentSpline: function ( t, p0, p1, p2, p3 ) {\n\n\t\t// To check if my formulas are correct\n\n\t\tvar h00 = 6 * t * t - 6 * t; \t// derived from 2t^3 − 3t^2 + 1\n\t\tvar h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t\n\t\tvar h01 = - 6 * t * t + 6 * t; \t// − 2t3 + 3t2\n\t\tvar h11 = 3 * t * t - 2 * t;\t// t3 − t2\n\n\t\treturn h00 + h10 + h01 + h11;\n\n\t},\n\n\t// Catmull-Rom\n\n\tinterpolate: function( p0, p1, p2, p3, t ) {\n\n\t\tvar v0 = ( p2 - p0 ) * 0.5;\n\t\tvar v1 = ( p3 - p1 ) * 0.5;\n\t\tvar t2 = t * t;\n\t\tvar t3 = t * t2;\n\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n\t}\n\n};\n\n// File:src/extras/SceneUtils.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.SceneUtils = {\n\n\tcreateMultiMaterialObject: function ( geometry, materials ) {\n\n\t\tvar group = new THREE.Group();\n\n\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n\t\t\tgroup.add( new THREE.Mesh( geometry, materials[ i ] ) );\n\n\t\t}\n\n\t\treturn group;\n\n\t},\n\n\tdetach: function ( child, parent, scene ) {\n\n\t\tchild.applyMatrix( parent.matrixWorld );\n\t\tparent.remove( child );\n\t\tscene.add( child );\n\n\t},\n\n\tattach: function ( child, scene, parent ) {\n\n\t\tvar matrixWorldInverse = new THREE.Matrix4();\n\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\n\t\tchild.applyMatrix( matrixWorldInverse );\n\n\t\tscene.remove( child );\n\t\tparent.add( child );\n\n\t}\n\n};\n\n// File:src/extras/ShapeUtils.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n */\n\nTHREE.ShapeUtils = {\n\n\t// calculate area of the contour polygon\n\n\tarea: function ( contour ) {\n\n\t\tvar n = contour.length;\n\t\tvar a = 0.0;\n\n\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t}\n\n\t\treturn a * 0.5;\n\n\t},\n\n\ttriangulate: ( function () {\n\n\t\t/**\n\t\t * This code is a quick port of code written in C++ which was submitted to\n\t\t * flipcode.com by John W. Ratcliff  // July 22, 2000\n\t\t * See original code and more information here:\n\t\t * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\n\t\t *\n\t\t * ported to actionscript by Zevan Rosser\n\t\t * www.actionsnippet.com\n\t\t *\n\t\t * ported to javascript by Joshua Koo\n\t\t * http://www.lab4games.net/zz85/blog\n\t\t *\n\t\t */\n\n\t\tfunction snip( contour, u, v, w, n, verts ) {\n\n\t\t\tvar p;\n\t\t\tvar ax, ay, bx, by;\n\t\t\tvar cx, cy, px, py;\n\n\t\t\tax = contour[ verts[ u ] ].x;\n\t\t\tay = contour[ verts[ u ] ].y;\n\n\t\t\tbx = contour[ verts[ v ] ].x;\n\t\t\tby = contour[ verts[ v ] ].y;\n\n\t\t\tcx = contour[ verts[ w ] ].x;\n\t\t\tcy = contour[ verts[ w ] ].y;\n\n\t\t\tif ( Number.EPSILON > ( ( ( bx - ax ) * ( cy - ay ) ) - ( ( by - ay ) * ( cx - ax ) ) ) ) return false;\n\n\t\t\tvar aX, aY, bX, bY, cX, cY;\n\t\t\tvar apx, apy, bpx, bpy, cpx, cpy;\n\t\t\tvar cCROSSap, bCROSScp, aCROSSbp;\n\n\t\t\taX = cx - bx;  aY = cy - by;\n\t\t\tbX = ax - cx;  bY = ay - cy;\n\t\t\tcX = bx - ax;  cY = by - ay;\n\n\t\t\tfor ( p = 0; p < n; p ++ ) {\n\n\t\t\t\tpx = contour[ verts[ p ] ].x;\n\t\t\t\tpy = contour[ verts[ p ] ].y;\n\n\t\t\t\tif ( ( ( px === ax ) && ( py === ay ) ) ||\n\t\t\t\t\t ( ( px === bx ) && ( py === by ) ) ||\n\t\t\t\t\t ( ( px === cx ) && ( py === cy ) ) )\tcontinue;\n\n\t\t\t\tapx = px - ax;  apy = py - ay;\n\t\t\t\tbpx = px - bx;  bpy = py - by;\n\t\t\t\tcpx = px - cx;  cpy = py - cy;\n\n\t\t\t\t// see if p is inside triangle abc\n\n\t\t\t\taCROSSbp = aX * bpy - aY * bpx;\n\t\t\t\tcCROSSap = cX * apy - cY * apx;\n\t\t\t\tbCROSScp = bX * cpy - bY * cpx;\n\n\t\t\t\tif ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\t// takes in an contour array and returns\n\n\t\treturn function triangulate( contour, indices ) {\n\n\t\t\tvar n = contour.length;\n\n\t\t\tif ( n < 3 ) return null;\n\n\t\t\tvar result = [],\n\t\t\t\tverts = [],\n\t\t\t\tvertIndices = [];\n\n\t\t\t/* we want a counter-clockwise polygon in verts */\n\n\t\t\tvar u, v, w;\n\n\t\t\tif ( THREE.ShapeUtils.area( contour ) > 0.0 ) {\n\n\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = v;\n\n\t\t\t} else {\n\n\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;\n\n\t\t\t}\n\n\t\t\tvar nv = n;\n\n\t\t\t/*  remove nv - 2 vertices, creating 1 triangle every time */\n\n\t\t\tvar count = 2 * nv;   /* error detection */\n\n\t\t\tfor ( v = nv - 1; nv > 2; ) {\n\n\t\t\t\t/* if we loop, it is probably a non-simple polygon */\n\n\t\t\t\tif ( ( count -- ) <= 0 ) {\n\n\t\t\t\t\t//** Triangulate: ERROR - probable bad polygon!\n\n\t\t\t\t\t//throw ( \"Warning, unable to triangulate polygon!\" );\n\t\t\t\t\t//return null;\n\t\t\t\t\t// Sometimes warning is fine, especially polygons are triangulated in reverse.\n\t\t\t\t\tconsole.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );\n\n\t\t\t\t\tif ( indices ) return vertIndices;\n\t\t\t\t\treturn result;\n\n\t\t\t\t}\n\n\t\t\t\t/* three consecutive vertices in current polygon, <u,v,w> */\n\n\t\t\t\tu = v; \t \tif ( nv <= u ) u = 0;     /* previous */\n\t\t\t\tv = u + 1;  if ( nv <= v ) v = 0;     /* new v    */\n\t\t\t\tw = v + 1;  if ( nv <= w ) w = 0;     /* next     */\n\n\t\t\t\tif ( snip( contour, u, v, w, nv, verts ) ) {\n\n\t\t\t\t\tvar a, b, c, s, t;\n\n\t\t\t\t\t/* true names of the vertices */\n\n\t\t\t\t\ta = verts[ u ];\n\t\t\t\t\tb = verts[ v ];\n\t\t\t\t\tc = verts[ w ];\n\n\t\t\t\t\t/* output Triangle */\n\n\t\t\t\t\tresult.push( [ contour[ a ],\n\t\t\t\t\t\tcontour[ b ],\n\t\t\t\t\t\tcontour[ c ] ] );\n\n\n\t\t\t\t\tvertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );\n\n\t\t\t\t\t/* remove v from the remaining polygon */\n\n\t\t\t\t\tfor ( s = v, t = v + 1; t < nv; s ++, t ++ ) {\n\n\t\t\t\t\t\tverts[ s ] = verts[ t ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnv --;\n\n\t\t\t\t\t/* reset error detection counter */\n\n\t\t\t\t\tcount = 2 * nv;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( indices ) return vertIndices;\n\t\t\treturn result;\n\n\t\t}\n\n\t} )(),\n\n\ttriangulateShape: function ( contour, holes ) {\n\n\t\tfunction point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {\n\n\t\t\t// inOtherPt needs to be collinear to the inSegment\n\t\t\tif ( inSegPt1.x !== inSegPt2.x ) {\n\n\t\t\t\tif ( inSegPt1.x < inSegPt2.x ) {\n\n\t\t\t\t\treturn\t( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn\t( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( inSegPt1.y < inSegPt2.y ) {\n\n\t\t\t\t\treturn\t( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn\t( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {\n\n\t\t\tvar seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;\n\t\t\tvar seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;\n\n\t\t\tvar seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;\n\t\t\tvar seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;\n\n\t\t\tvar limit\t\t= seg1dy * seg2dx - seg1dx * seg2dy;\n\t\t\tvar perpSeg1\t= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;\n\n\t\t\tif ( Math.abs( limit ) > Number.EPSILON ) {\n\n\t\t\t\t// not parallel\n\n\t\t\t\tvar perpSeg2;\n\t\t\t\tif ( limit > 0 ) {\n\n\t\t\t\t\tif ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) \t\treturn [];\n\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t\t\t\t\tif ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) \t\treturn [];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) \t\treturn [];\n\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t\t\t\t\tif ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) \t\treturn [];\n\n\t\t\t\t}\n\n\t\t\t\t// i.e. to reduce rounding errors\n\t\t\t\t// intersection at endpoint of segment#1?\n\t\t\t\tif ( perpSeg2 === 0 ) {\n\n\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n\t\t\t\t\treturn [ inSeg1Pt1 ];\n\n\t\t\t\t}\n\t\t\t\tif ( perpSeg2 === limit ) {\n\n\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\n\t\t\t\t\treturn [ inSeg1Pt2 ];\n\n\t\t\t\t}\n\t\t\t\t// intersection at endpoint of segment#2?\n\t\t\t\tif ( perpSeg1 === 0 )\t\treturn [ inSeg2Pt1 ];\n\t\t\t\tif ( perpSeg1 === limit )\treturn [ inSeg2Pt2 ];\n\n\t\t\t\t// return real intersection point\n\t\t\t\tvar factorSeg1 = perpSeg2 / limit;\n\t\t\t\treturn\t[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,\n\t\t\t\t\t\t\ty: inSeg1Pt1.y + factorSeg1 * seg1dy } ];\n\n\t\t\t} else {\n\n\t\t\t\t// parallel or collinear\n\t\t\t\tif ( ( perpSeg1 !== 0 ) ||\n\t\t\t\t\t ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) \t\t\treturn [];\n\n\t\t\t\t// they are collinear or degenerate\n\t\t\t\tvar seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );\t// segment1 is just a point?\n\t\t\t\tvar seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );\t// segment2 is just a point?\n\t\t\t\t// both segments are points\n\t\t\t\tif ( seg1Pt && seg2Pt ) {\n\n\t\t\t\t\tif ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||\n\t\t\t\t\t\t ( inSeg1Pt1.y !== inSeg2Pt1.y ) )\t\treturn [];\t// they are distinct  points\n\t\t\t\t\treturn [ inSeg1Pt1 ];                 \t\t\t\t\t\t// they are the same point\n\n\t\t\t\t}\n\t\t\t\t// segment#1  is a single point\n\t\t\t\tif ( seg1Pt ) {\n\n\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )\t\treturn [];\t\t// but not in segment#2\n\t\t\t\t\treturn [ inSeg1Pt1 ];\n\n\t\t\t\t}\n\t\t\t\t// segment#2  is a single point\n\t\t\t\tif ( seg2Pt ) {\n\n\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )\t\treturn [];\t\t// but not in segment#1\n\t\t\t\t\treturn [ inSeg2Pt1 ];\n\n\t\t\t\t}\n\n\t\t\t\t// they are collinear segments, which might overlap\n\t\t\t\tvar seg1min, seg1max, seg1minVal, seg1maxVal;\n\t\t\t\tvar seg2min, seg2max, seg2minVal, seg2maxVal;\n\t\t\t\tif ( seg1dx !== 0 ) {\n\n\t\t\t\t\t// the segments are NOT on a vertical line\n\t\t\t\t\tif ( inSeg1Pt1.x < inSeg1Pt2.x ) {\n\n\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;\n\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;\n\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( inSeg2Pt1.x < inSeg2Pt2.x ) {\n\n\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;\n\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;\n\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// the segments are on a vertical line\n\t\t\t\t\tif ( inSeg1Pt1.y < inSeg1Pt2.y ) {\n\n\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;\n\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;\n\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( inSeg2Pt1.y < inSeg2Pt2.y ) {\n\n\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;\n\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;\n\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\tif ( seg1minVal <= seg2minVal ) {\n\n\t\t\t\t\tif ( seg1maxVal <  seg2minVal )\treturn [];\n\t\t\t\t\tif ( seg1maxVal === seg2minVal )\t{\n\n\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t\t\t\t\t\treturn [ seg2min ];\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg2min, seg1max ];\n\t\t\t\t\treturn\t[ seg2min, seg2max ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( seg1minVal >  seg2maxVal )\treturn [];\n\t\t\t\t\tif ( seg1minVal === seg2maxVal )\t{\n\n\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t\t\t\t\t\treturn [ seg1min ];\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg1min, seg1max ];\n\t\t\t\t\treturn\t[ seg1min, seg2max ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {\n\n\t\t\t// The order of legs is important\n\n\t\t\t// translation of all points, so that Vertex is at (0,0)\n\t\t\tvar legFromPtX\t= inLegFromPt.x - inVertex.x,  legFromPtY\t= inLegFromPt.y - inVertex.y;\n\t\t\tvar legToPtX\t= inLegToPt.x\t- inVertex.x,  legToPtY\t\t= inLegToPt.y\t- inVertex.y;\n\t\t\tvar otherPtX\t= inOtherPt.x\t- inVertex.x,  otherPtY\t\t= inOtherPt.y\t- inVertex.y;\n\n\t\t\t// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.\n\t\t\tvar from2toAngle\t= legFromPtX * legToPtY - legFromPtY * legToPtX;\n\t\t\tvar from2otherAngle\t= legFromPtX * otherPtY - legFromPtY * otherPtX;\n\n\t\t\tif ( Math.abs( from2toAngle ) > Number.EPSILON ) {\n\n\t\t\t\t// angle != 180 deg.\n\n\t\t\t\tvar other2toAngle\t\t= otherPtX * legToPtY - otherPtY * legToPtX;\n\t\t\t\t// console.log( \"from2to: \" + from2toAngle + \", from2other: \" + from2otherAngle + \", other2to: \" + other2toAngle );\n\n\t\t\t\tif ( from2toAngle > 0 ) {\n\n\t\t\t\t\t// main angle < 180 deg.\n\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// main angle > 180 deg.\n\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// angle == 180 deg.\n\t\t\t\t// console.log( \"from2to: 180 deg., from2other: \" + from2otherAngle  );\n\t\t\t\treturn\t( from2otherAngle > 0 );\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tfunction removeHoles( contour, holes ) {\n\n\t\t\tvar shape = contour.concat(); // work on this shape\n\t\t\tvar hole;\n\n\t\t\tfunction isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {\n\n\t\t\t\t// Check if hole point lies within angle around shape point\n\t\t\t\tvar lastShapeIdx = shape.length - 1;\n\n\t\t\t\tvar prevShapeIdx = inShapeIdx - 1;\n\t\t\t\tif ( prevShapeIdx < 0 )\t\t\tprevShapeIdx = lastShapeIdx;\n\n\t\t\t\tvar nextShapeIdx = inShapeIdx + 1;\n\t\t\t\tif ( nextShapeIdx > lastShapeIdx )\tnextShapeIdx = 0;\n\n\t\t\t\tvar insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );\n\t\t\t\tif ( ! insideAngle ) {\n\n\t\t\t\t\t// console.log( \"Vertex (Shape): \" + inShapeIdx + \", Point: \" + hole[inHoleIdx].x + \"/\" + hole[inHoleIdx].y );\n\t\t\t\t\treturn\tfalse;\n\n\t\t\t\t}\n\n\t\t\t\t// Check if shape point lies within angle around hole point\n\t\t\t\tvar lastHoleIdx = hole.length - 1;\n\n\t\t\t\tvar prevHoleIdx = inHoleIdx - 1;\n\t\t\t\tif ( prevHoleIdx < 0 )\t\t\tprevHoleIdx = lastHoleIdx;\n\n\t\t\t\tvar nextHoleIdx = inHoleIdx + 1;\n\t\t\t\tif ( nextHoleIdx > lastHoleIdx )\tnextHoleIdx = 0;\n\n\t\t\t\tinsideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );\n\t\t\t\tif ( ! insideAngle ) {\n\n\t\t\t\t\t// console.log( \"Vertex (Hole): \" + inHoleIdx + \", Point: \" + shape[inShapeIdx].x + \"/\" + shape[inShapeIdx].y );\n\t\t\t\t\treturn\tfalse;\n\n\t\t\t\t}\n\n\t\t\t\treturn\ttrue;\n\n\t\t\t}\n\n\t\t\tfunction intersectsShapeEdge( inShapePt, inHolePt ) {\n\n\t\t\t\t// checks for intersections with shape edges\n\t\t\t\tvar sIdx, nextIdx, intersection;\n\t\t\t\tfor ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {\n\n\t\t\t\t\tnextIdx = sIdx + 1; nextIdx %= shape.length;\n\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );\n\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\n\t\t\t\t}\n\n\t\t\t\treturn\tfalse;\n\n\t\t\t}\n\n\t\t\tvar indepHoles = [];\n\n\t\t\tfunction intersectsHoleEdge( inShapePt, inHolePt ) {\n\n\t\t\t\t// checks for intersections with hole edges\n\t\t\t\tvar ihIdx, chkHole,\n\t\t\t\t\thIdx, nextIdx, intersection;\n\t\t\t\tfor ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {\n\n\t\t\t\t\tchkHole = holes[ indepHoles[ ihIdx ]];\n\t\t\t\t\tfor ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {\n\n\t\t\t\t\t\tnextIdx = hIdx + 1; nextIdx %= chkHole.length;\n\t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );\n\t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\treturn\tfalse;\n\n\t\t\t}\n\n\t\t\tvar holeIndex, shapeIndex,\n\t\t\t\tshapePt, holePt,\n\t\t\t\tholeIdx, cutKey, failedCuts = [],\n\t\t\t\ttmpShape1, tmpShape2,\n\t\t\t\ttmpHole1, tmpHole2;\n\n\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tindepHoles.push( h );\n\n\t\t\t}\n\n\t\t\tvar minShapeIndex = 0;\n\t\t\tvar counter = indepHoles.length * 2;\n\t\t\twhile ( indepHoles.length > 0 ) {\n\n\t\t\t\tcounter --;\n\t\t\t\tif ( counter < 0 ) {\n\n\t\t\t\t\tconsole.log( \"Infinite Loop! Holes left:\" + indepHoles.length + \", Probably Hole outside Shape!\" );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\t// search for shape-vertex and hole-vertex,\n\t\t\t\t// which can be connected without intersections\n\t\t\t\tfor ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {\n\n\t\t\t\t\tshapePt = shape[ shapeIndex ];\n\t\t\t\t\tholeIndex\t= - 1;\n\n\t\t\t\t\t// search for hole which can be reached without intersections\n\t\t\t\t\tfor ( var h = 0; h < indepHoles.length; h ++ ) {\n\n\t\t\t\t\t\tholeIdx = indepHoles[ h ];\n\n\t\t\t\t\t\t// prevent multiple checks\n\t\t\t\t\t\tcutKey = shapePt.x + \":\" + shapePt.y + \":\" + holeIdx;\n\t\t\t\t\t\tif ( failedCuts[ cutKey ] !== undefined )\t\t\tcontinue;\n\n\t\t\t\t\t\thole = holes[ holeIdx ];\n\t\t\t\t\t\tfor ( var h2 = 0; h2 < hole.length; h2 ++ ) {\n\n\t\t\t\t\t\t\tholePt = hole[ h2 ];\n\t\t\t\t\t\t\tif ( ! isCutLineInsideAngles( shapeIndex, h2 ) )\t\tcontinue;\n\t\t\t\t\t\t\tif ( intersectsShapeEdge( shapePt, holePt ) )\t\tcontinue;\n\t\t\t\t\t\t\tif ( intersectsHoleEdge( shapePt, holePt ) )\t\tcontinue;\n\n\t\t\t\t\t\t\tholeIndex = h2;\n\t\t\t\t\t\t\tindepHoles.splice( h, 1 );\n\n\t\t\t\t\t\t\ttmpShape1 = shape.slice( 0, shapeIndex + 1 );\n\t\t\t\t\t\t\ttmpShape2 = shape.slice( shapeIndex );\n\t\t\t\t\t\t\ttmpHole1 = hole.slice( holeIndex );\n\t\t\t\t\t\t\ttmpHole2 = hole.slice( 0, holeIndex + 1 );\n\n\t\t\t\t\t\t\tshape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );\n\n\t\t\t\t\t\t\tminShapeIndex = shapeIndex;\n\n\t\t\t\t\t\t\t// Debug only, to show the selected cuts\n\t\t\t\t\t\t\t// glob_CutLines.push( [ shapePt, holePt ] );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\n\t\t\t\t\t\tfailedCuts[ cutKey ] = true;\t\t\t// remember failure\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn shape; \t\t\t/* shape with no holes */\n\n\t\t}\n\n\n\t\tvar i, il, f, face,\n\t\t\tkey, index,\n\t\t\tallPointsMap = {};\n\n\t\t// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\n\n\t\tvar allpoints = contour.concat();\n\n\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tArray.prototype.push.apply( allpoints, holes[ h ] );\n\n\t\t}\n\n\t\t//console.log( \"allpoints\",allpoints, allpoints.length );\n\n\t\t// prepare all points map\n\n\t\tfor ( i = 0, il = allpoints.length; i < il; i ++ ) {\n\n\t\t\tkey = allpoints[ i ].x + \":\" + allpoints[ i ].y;\n\n\t\t\tif ( allPointsMap[ key ] !== undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.Shape: Duplicate point\", key );\n\n\t\t\t}\n\n\t\t\tallPointsMap[ key ] = i;\n\n\t\t}\n\n\t\t// remove holes by cutting paths to holes and adding them to the shape\n\t\tvar shapeWithoutHoles = removeHoles( contour, holes );\n\n\t\tvar triangles = THREE.ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape\n\t\t//console.log( \"triangles\",triangles, triangles.length );\n\n\t\t// check all face vertices against all points map\n\n\t\tfor ( i = 0, il = triangles.length; i < il; i ++ ) {\n\n\t\t\tface = triangles[ i ];\n\n\t\t\tfor ( f = 0; f < 3; f ++ ) {\n\n\t\t\t\tkey = face[ f ].x + \":\" + face[ f ].y;\n\n\t\t\t\tindex = allPointsMap[ key ];\n\n\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\tface[ f ] = index;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn triangles.concat();\n\n\t},\n\n\tisClockWise: function ( pts ) {\n\n\t\treturn THREE.ShapeUtils.area( pts ) < 0;\n\n\t},\n\n\t// Bezier Curves formulas obtained from\n\t// http://en.wikipedia.org/wiki/B%C3%A9zier_curve\n\n\t// Quad Bezier Functions\n\n\tb2: ( function () {\n\n\t\tfunction b2p0( t, p ) {\n\n\t\t\tvar k = 1 - t;\n\t\t\treturn k * k * p;\n\n\t\t}\n\n\t\tfunction b2p1( t, p ) {\n\n\t\t\treturn 2 * ( 1 - t ) * t * p;\n\n\t\t}\n\n\t\tfunction b2p2( t, p ) {\n\n\t\t\treturn t * t * p;\n\n\t\t}\n\n\t\treturn function b2( t, p0, p1, p2 ) {\n\n\t\t\treturn b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );\n\n\t\t};\n\n\t} )(),\n\n\t// Cubic Bezier Functions\n\n\tb3: ( function () {\n\n\t\tfunction b3p0( t, p ) {\n\n\t\t\tvar k = 1 - t;\n\t\t\treturn k * k * k * p;\n\n\t\t}\n\n\t\tfunction b3p1( t, p ) {\n\n\t\t\tvar k = 1 - t;\n\t\t\treturn 3 * k * k * t * p;\n\n\t\t}\n\n\t\tfunction b3p2( t, p ) {\n\n\t\t\tvar k = 1 - t;\n\t\t\treturn 3 * k * t * t * p;\n\n\t\t}\n\n\t\tfunction b3p3( t, p ) {\n\n\t\t\treturn t * t * t * p;\n\n\t\t}\n\n\t\treturn function b3( t, p0, p1, p2, p3 ) {\n\n\t\t\treturn b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );\n\n\t\t};\n\n\t} )()\n\n};\n\n// File:src/extras/core/Curve.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Extensible curve object\n *\n * Some common of Curve methods\n * .getPoint(t), getTangent(t)\n * .getPointAt(u), getTagentAt(u)\n * .getPoints(), .getSpacedPoints()\n * .getLength()\n * .updateArcLengths()\n *\n * This following classes subclasses THREE.Curve:\n *\n * -- 2d classes --\n * THREE.LineCurve\n * THREE.QuadraticBezierCurve\n * THREE.CubicBezierCurve\n * THREE.SplineCurve\n * THREE.ArcCurve\n * THREE.EllipseCurve\n *\n * -- 3d classes --\n * THREE.LineCurve3\n * THREE.QuadraticBezierCurve3\n * THREE.CubicBezierCurve3\n * THREE.SplineCurve3\n *\n * A series of curves can be represented as a THREE.CurvePath\n *\n **/\n\n/**************************************************************\n *\tAbstract Curve base class\n **************************************************************/\n\nTHREE.Curve = function () {\n\n};\n\nTHREE.Curve.prototype = {\n\n\tconstructor: THREE.Curve,\n\n\t// Virtual base class method to overwrite and implement in subclasses\n\t//\t- t [0 .. 1]\n\n\tgetPoint: function ( t ) {\n\n\t\tconsole.warn( \"THREE.Curve: Warning, getPoint() not implemented!\" );\n\t\treturn null;\n\n\t},\n\n\t// Get point at relative position in curve according to arc length\n\t// - u [0 .. 1]\n\n\tgetPointAt: function ( u ) {\n\n\t\tvar t = this.getUtoTmapping( u );\n\t\treturn this.getPoint( t );\n\n\t},\n\n\t// Get sequence of points using getPoint( t )\n\n\tgetPoints: function ( divisions ) {\n\n\t\tif ( ! divisions ) divisions = 5;\n\n\t\tvar d, pts = [];\n\n\t\tfor ( d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpts.push( this.getPoint( d / divisions ) );\n\n\t\t}\n\n\t\treturn pts;\n\n\t},\n\n\t// Get sequence of points using getPointAt( u )\n\n\tgetSpacedPoints: function ( divisions ) {\n\n\t\tif ( ! divisions ) divisions = 5;\n\n\t\tvar d, pts = [];\n\n\t\tfor ( d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpts.push( this.getPointAt( d / divisions ) );\n\n\t\t}\n\n\t\treturn pts;\n\n\t},\n\n\t// Get total curve arc length\n\n\tgetLength: function () {\n\n\t\tvar lengths = this.getLengths();\n\t\treturn lengths[ lengths.length - 1 ];\n\n\t},\n\n\t// Get list of cumulative segment lengths\n\n\tgetLengths: function ( divisions ) {\n\n\t\tif ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;\n\n\t\tif ( this.cacheArcLengths\n\t\t\t&& ( this.cacheArcLengths.length === divisions + 1 )\n\t\t\t&& ! this.needsUpdate ) {\n\n\t\t\t//console.log( \"cached\", this.cacheArcLengths );\n\t\t\treturn this.cacheArcLengths;\n\n\t\t}\n\n\t\tthis.needsUpdate = false;\n\n\t\tvar cache = [];\n\t\tvar current, last = this.getPoint( 0 );\n\t\tvar p, sum = 0;\n\n\t\tcache.push( 0 );\n\n\t\tfor ( p = 1; p <= divisions; p ++ ) {\n\n\t\t\tcurrent = this.getPoint ( p / divisions );\n\t\t\tsum += current.distanceTo( last );\n\t\t\tcache.push( sum );\n\t\t\tlast = current;\n\n\t\t}\n\n\t\tthis.cacheArcLengths = cache;\n\n\t\treturn cache; // { sums: cache, sum:sum }; Sum is in the last element.\n\n\t},\n\n\tupdateArcLengths: function() {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.getLengths();\n\n\t},\n\n\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\tgetUtoTmapping: function ( u, distance ) {\n\n\t\tvar arcLengths = this.getLengths();\n\n\t\tvar i = 0, il = arcLengths.length;\n\n\t\tvar targetArcLength; // The targeted u distance value to get\n\n\t\tif ( distance ) {\n\n\t\t\ttargetArcLength = distance;\n\n\t\t} else {\n\n\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t}\n\n\t\t//var time = Date.now();\n\n\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\tvar low = 0, high = il - 1, comparison;\n\n\t\twhile ( low <= high ) {\n\n\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\tlow = i + 1;\n\n\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\thigh = i - 1;\n\n\t\t\t} else {\n\n\t\t\t\thigh = i;\n\t\t\t\tbreak;\n\n\t\t\t\t// DONE\n\n\t\t\t}\n\n\t\t}\n\n\t\ti = high;\n\n\t\t//console.log('b' , i, low, high, Date.now()- time);\n\n\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\tvar t = i / ( il - 1 );\n\t\t\treturn t;\n\n\t\t}\n\n\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\tvar lengthBefore = arcLengths[ i ];\n\t\tvar lengthAfter = arcLengths[ i + 1 ];\n\n\t\tvar segmentLength = lengthAfter - lengthBefore;\n\n\t\t// determine where we are between the 'before' and 'after' points\n\n\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t// add that fractional amount to t\n\n\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\treturn t;\n\n\t},\n\n\t// Returns a unit vector tangent at t\n\t// In case any sub curve does not implement its tangent derivation,\n\t// 2 points a small delta apart will be used to find its gradient\n\t// which seems to give a reasonable approximation\n\n\tgetTangent: function( t ) {\n\n\t\tvar delta = 0.0001;\n\t\tvar t1 = t - delta;\n\t\tvar t2 = t + delta;\n\n\t\t// Capping in case of danger\n\n\t\tif ( t1 < 0 ) t1 = 0;\n\t\tif ( t2 > 1 ) t2 = 1;\n\n\t\tvar pt1 = this.getPoint( t1 );\n\t\tvar pt2 = this.getPoint( t2 );\n\n\t\tvar vec = pt2.clone().sub( pt1 );\n\t\treturn vec.normalize();\n\n\t},\n\n\tgetTangentAt: function ( u ) {\n\n\t\tvar t = this.getUtoTmapping( u );\n\t\treturn this.getTangent( t );\n\n\t}\n\n};\n\n// TODO: Transformation for Curves?\n\n/**************************************************************\n *\t3D Curves\n **************************************************************/\n\n// A Factory method for creating new curve subclasses\n\nTHREE.Curve.create = function ( constructor, getPointFunc ) {\n\n\tconstructor.prototype = Object.create( THREE.Curve.prototype );\n\tconstructor.prototype.constructor = constructor;\n\tconstructor.prototype.getPoint = getPointFunc;\n\n\treturn constructor;\n\n};\n\n// File:src/extras/core/CurvePath.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n *\n **/\n\n/**************************************************************\n *\tCurved Path - a curve path is simply a array of connected\n *  curves, but retains the api of a curve\n **************************************************************/\n\nTHREE.CurvePath = function () {\n\n\tthis.curves = [];\n\n\tthis.autoClose = false; // Automatically closes the path\n\n};\n\nTHREE.CurvePath.prototype = Object.assign( Object.create( THREE.Curve.prototype ), {\n\n\tconstructor: THREE.CurvePath,\n\n\tadd: function ( curve ) {\n\n\t\tthis.curves.push( curve );\n\n\t},\n\n\tclosePath: function () {\n\n\t\t// TODO Test\n\t\t// and verify for vector3 (needs to implement equals)\n\t\t// Add a line curve if start and end of lines are not connected\n\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\tthis.curves.push( new THREE.LineCurve( endPoint, startPoint ) );\n\n\t\t}\n\n\t},\n\n\t// To get accurate point with reference to\n\t// entire path distance at time t,\n\t// following has to be done:\n\n\t// 1. Length of each sub path have to be known\n\t// 2. Locate and identify type of curve\n\t// 3. Get t for the curve\n\t// 4. Return curve.getPointAt(t')\n\n\tgetPoint: function ( t ) {\n\n\t\tvar d = t * this.getLength();\n\t\tvar curveLengths = this.getCurveLengths();\n\t\tvar i = 0;\n\n\t\t// To think about boundaries points.\n\n\t\twhile ( i < curveLengths.length ) {\n\n\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\tvar diff = curveLengths[ i ] - d;\n\t\t\t\tvar curve = this.curves[ i ];\n\n\t\t\t\tvar u = 1 - diff / curve.getLength();\n\n\t\t\t\treturn curve.getPointAt( u );\n\n\t\t\t}\n\n\t\t\ti ++;\n\n\t\t}\n\n\t\treturn null;\n\n\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t},\n\n\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t// getPoint() depends on getLength\n\n\tgetLength: function () {\n\n\t\tvar lens = this.getCurveLengths();\n\t\treturn lens[ lens.length - 1 ];\n\n\t},\n\n\t// cacheLengths must be recalculated.\n\tupdateArcLengths: function () {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.cacheLengths = null;\n\t\tthis.getLengths();\n\n\t},\n\n\t// Compute lengths and cache them\n\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\tgetCurveLengths: function () {\n\n\t\t// We use cache values if curves and cache array are same length\n\n\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\treturn this.cacheLengths;\n\n\t\t}\n\n\t\t// Get length of sub-curve\n\t\t// Push sums into cached array\n\n\t\tvar lengths = [], sums = 0;\n\n\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\tsums += this.curves[ i ].getLength();\n\t\t\tlengths.push( sums );\n\n\t\t}\n\n\t\tthis.cacheLengths = lengths;\n\n\t\treturn lengths;\n\n\t},\n\n\t/**************************************************************\n\t *\tCreate Geometries Helpers\n\t **************************************************************/\n\n\t/// Generate geometry from path points (for Line or Points objects)\n\n\tcreatePointsGeometry: function ( divisions ) {\n\n\t\tvar pts = this.getPoints( divisions );\n\t\treturn this.createGeometry( pts );\n\n\t},\n\n\t// Generate geometry from equidistant sampling along the path\n\n\tcreateSpacedPointsGeometry: function ( divisions ) {\n\n\t\tvar pts = this.getSpacedPoints( divisions );\n\t\treturn this.createGeometry( pts );\n\n\t},\n\n\tcreateGeometry: function ( points ) {\n\n\t\tvar geometry = new THREE.Geometry();\n\n\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tvar point = points[ i ];\n\t\t\tgeometry.vertices.push( new THREE.Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n} );\n\n// File:src/extras/core/Font.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Font = function ( data ) {\n\n\tthis.data = data;\n\n};\n\nObject.assign( THREE.Font.prototype, {\n\n\tgenerateShapes: function ( text, size, divisions ) {\n\n\t\tfunction createPaths( text ) {\n\n\t\t\tvar chars = String( text ).split( '' );\n\t\t\tvar scale = size / data.resolution;\n\t\t\tvar offset = 0;\n\n\t\t\tvar paths = [];\n\n\t\t\tfor ( var i = 0; i < chars.length; i ++ ) {\n\n\t\t\t\tvar ret = createPath( chars[ i ], scale, offset );\n\t\t\t\toffset += ret.offset;\n\n\t\t\t\tpaths.push( ret.path );\n\n\t\t\t}\n\n\t\t\treturn paths;\n\n\t\t}\n\n\t\tfunction createPath( c, scale, offset ) {\n\n\t\t\tvar glyph = data.glyphs[ c ] || data.glyphs[ '?' ];\n\n\t\t\tif ( ! glyph ) return;\n\n\t\t\tvar path = new THREE.Path();\n\n\t\t\tvar pts = [], b2 = THREE.ShapeUtils.b2, b3 = THREE.ShapeUtils.b3;\n\t\t\tvar x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;\n\n\t\t\tif ( glyph.o ) {\n\n\t\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\n\t\t\t\t\tvar action = outline[ i ++ ];\n\n\t\t\t\t\tswitch ( action ) {\n\n\t\t\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\n\t\t\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\n\n\t\t\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n\t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n\n\t\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\n\t\t\t\t\t\t\tif ( laste ) {\n\n\t\t\t\t\t\t\t\tcpx0 = laste.x;\n\t\t\t\t\t\t\t\tcpy0 = laste.y;\n\n\t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\n\t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n\t\t\t\t\t\t\t\t\tb2( t, cpx0, cpx1, cpx );\n\t\t\t\t\t\t\t\t\tb2( t, cpy0, cpy1, cpy );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\n\t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\n\t\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offset;\n\t\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale;\n\n\t\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\n\t\t\t\t\t\t\tif ( laste ) {\n\n\t\t\t\t\t\t\t\tcpx0 = laste.x;\n\t\t\t\t\t\t\t\tcpy0 = laste.y;\n\n\t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\n\n\t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\n\t\t\t\t\t\t\t\t\tb3( t, cpx0, cpx1, cpx2, cpx );\n\t\t\t\t\t\t\t\t\tb3( t, cpy0, cpy1, cpy2, cpy );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn { offset: glyph.ha * scale, path: path };\n\n\t\t}\n\n\t\t//\n\n\t\tif ( size === undefined ) size = 100;\n\t\tif ( divisions === undefined ) divisions = 4;\n\n\t\tvar data = this.data;\n\n\t\tvar paths = createPaths( text );\n\t\tvar shapes = [];\n\n\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n\t\t}\n\n\t\treturn shapes;\n\n\t}\n\n} );\n\n// File:src/extras/core/Path.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Creates free form 2d path using series of points, lines or curves.\n *\n **/\n\nTHREE.Path = function ( points ) {\n\n\tTHREE.CurvePath.call( this );\n\n\tthis.actions = [];\n\n\tif ( points ) {\n\n\t\tthis.fromPoints( points );\n\n\t}\n\n};\n\nTHREE.Path.prototype = Object.assign( Object.create( THREE.CurvePath.prototype ), {\n\n\tconstructor: THREE.Path,\n\n\t// TODO Clean up PATH API\n\n\t// Create path using straight lines to connect all points\n\t// - vectors: array of Vector2\n\n\tfromPoints: function ( vectors ) {\n\n\t\tthis.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );\n\n\t\tfor ( var i = 1, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tthis.lineTo( vectors[ i ].x, vectors[ i ].y );\n\n\t\t}\n\n\t},\n\n\tmoveTo: function ( x, y ) {\n\n\t\tthis.actions.push( { action: 'moveTo', args: [ x, y ] } );\n\n\t},\n\n\tlineTo: function ( x, y ) {\n\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\n\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\n\n\t\tvar curve = new THREE.LineCurve( new THREE.Vector2( x0, y0 ), new THREE.Vector2( x, y ) );\n\t\tthis.curves.push( curve );\n\n\t\tthis.actions.push( { action: 'lineTo', args: [ x, y ] } );\n\n\t},\n\n\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\n\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\n\n\t\tvar curve = new THREE.QuadraticBezierCurve(\n\t\t\tnew THREE.Vector2( x0, y0 ),\n\t\t\tnew THREE.Vector2( aCPx, aCPy ),\n\t\t\tnew THREE.Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.actions.push( { action: 'quadraticCurveTo', args: [ aCPx, aCPy, aX, aY ] } );\n\n\t},\n\n\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\n\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\n\n\t\tvar curve = new THREE.CubicBezierCurve(\n\t\t\tnew THREE.Vector2( x0, y0 ),\n\t\t\tnew THREE.Vector2( aCP1x, aCP1y ),\n\t\t\tnew THREE.Vector2( aCP2x, aCP2y ),\n\t\t\tnew THREE.Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.actions.push( { action: 'bezierCurveTo', args: [ aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ] } );\n\n\t},\n\n\tsplineThru: function ( pts /*Array of Vector*/ ) {\n\n\t\tvar args = Array.prototype.slice.call( arguments );\n\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\n\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\n\n\t\tvar npts = [ new THREE.Vector2( x0, y0 ) ];\n\t\tArray.prototype.push.apply( npts, pts );\n\n\t\tvar curve = new THREE.SplineCurve( npts );\n\t\tthis.curves.push( curve );\n\n\t\tvar lastPoint = pts[ pts.length - 1 ];\n\t\targs.push( lastPoint.x );\n\t\targs.push( lastPoint.y );\n\n\t\tthis.actions.push( { action: 'splineThru', args: args } );\n\n\t},\n\n\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\n\n\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t},\n\n\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t},\n\n\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\n\n\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t},\n\n\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tvar args = [\n\t\t\taX, aY,\n\t\t\txRadius, yRadius,\n\t\t\taStartAngle, aEndAngle,\n\t\t\taClockwise,\n\t\t\taRotation || 0 // aRotation is optional.\n\t\t];\n\n\t\tvar curve = new THREE.EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\t\tthis.curves.push( curve );\n\n\t\tvar lastPoint = curve.getPoint( 1 );\n\t\targs.push( lastPoint.x );\n\t\targs.push( lastPoint.y );\n\n\t\tthis.actions.push( { action: 'ellipse', args: args } );\n\n\t},\n\n\tgetSpacedPoints: function ( divisions ) {\n\n\t\tif ( ! divisions ) divisions = 40;\n\n\t\tvar points = [];\n\n\t\tfor ( var i = 0; i < divisions; i ++ ) {\n\n\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t\t//if ( !this.getPoint( i / divisions ) ) throw \"DIE\";\n\n\t\t}\n\n\t\tif ( this.autoClose ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t},\n\n\tgetPoints: function ( divisions ) {\n\n\t\tdivisions = divisions || 12;\n\n\t\tvar b2 = THREE.ShapeUtils.b2;\n\t\tvar b3 = THREE.ShapeUtils.b3;\n\n\t\tvar points = [];\n\n\t\tvar cpx, cpy, cpx2, cpy2, cpx1, cpy1, cpx0, cpy0,\n\t\t\tlaste, tx, ty;\n\n\t\tfor ( var i = 0, l = this.actions.length; i < l; i ++ ) {\n\n\t\t\tvar item = this.actions[ i ];\n\n\t\t\tvar action = item.action;\n\t\t\tvar args = item.args;\n\n\t\t\tswitch ( action ) {\n\n\t\t\tcase 'moveTo':\n\n\t\t\t\tpoints.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'lineTo':\n\n\t\t\t\tpoints.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'quadraticCurveTo':\n\n\t\t\t\tcpx  = args[ 2 ];\n\t\t\t\tcpy  = args[ 3 ];\n\n\t\t\t\tcpx1 = args[ 0 ];\n\t\t\t\tcpy1 = args[ 1 ];\n\n\t\t\t\tif ( points.length > 0 ) {\n\n\t\t\t\t\tlaste = points[ points.length - 1 ];\n\n\t\t\t\t\tcpx0 = laste.x;\n\t\t\t\t\tcpy0 = laste.y;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tlaste = this.actions[ i - 1 ].args;\n\n\t\t\t\t\tcpx0 = laste[ laste.length - 2 ];\n\t\t\t\t\tcpy0 = laste[ laste.length - 1 ];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 1; j <= divisions; j ++ ) {\n\n\t\t\t\t\tvar t = j / divisions;\n\n\t\t\t\t\ttx = b2( t, cpx0, cpx1, cpx );\n\t\t\t\t\tty = b2( t, cpy0, cpy1, cpy );\n\n\t\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'bezierCurveTo':\n\n\t\t\t\tcpx  = args[ 4 ];\n\t\t\t\tcpy  = args[ 5 ];\n\n\t\t\t\tcpx1 = args[ 0 ];\n\t\t\t\tcpy1 = args[ 1 ];\n\n\t\t\t\tcpx2 = args[ 2 ];\n\t\t\t\tcpy2 = args[ 3 ];\n\n\t\t\t\tif ( points.length > 0 ) {\n\n\t\t\t\t\tlaste = points[ points.length - 1 ];\n\n\t\t\t\t\tcpx0 = laste.x;\n\t\t\t\t\tcpy0 = laste.y;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tlaste = this.actions[ i - 1 ].args;\n\n\t\t\t\t\tcpx0 = laste[ laste.length - 2 ];\n\t\t\t\t\tcpy0 = laste[ laste.length - 1 ];\n\n\t\t\t\t}\n\n\n\t\t\t\tfor ( var j = 1; j <= divisions; j ++ ) {\n\n\t\t\t\t\tvar t = j / divisions;\n\n\t\t\t\t\ttx = b3( t, cpx0, cpx1, cpx2, cpx );\n\t\t\t\t\tty = b3( t, cpy0, cpy1, cpy2, cpy );\n\n\t\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'splineThru':\n\n\t\t\t\tlaste = this.actions[ i - 1 ].args;\n\n\t\t\t\tvar last = new THREE.Vector2( laste[ laste.length - 2 ], laste[ laste.length - 1 ] );\n\t\t\t\tvar spts = [ last ];\n\n\t\t\t\tvar n = divisions * args[ 0 ].length;\n\n\t\t\t\tspts = spts.concat( args[ 0 ] );\n\n\t\t\t\tvar spline = new THREE.SplineCurve( spts );\n\n\t\t\t\tfor ( var j = 1; j <= n; j ++ ) {\n\n\t\t\t\t\tpoints.push( spline.getPointAt( j / n ) );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'arc':\n\n\t\t\t\tvar aX = args[ 0 ], aY = args[ 1 ],\n\t\t\t\t\taRadius = args[ 2 ],\n\t\t\t\t\taStartAngle = args[ 3 ], aEndAngle = args[ 4 ],\n\t\t\t\t\taClockwise = !! args[ 5 ];\n\n\t\t\t\tvar deltaAngle = aEndAngle - aStartAngle;\n\t\t\t\tvar angle;\n\t\t\t\tvar tdivisions = divisions * 2;\n\n\t\t\t\tfor ( var j = 1; j <= tdivisions; j ++ ) {\n\n\t\t\t\t\tvar t = j / tdivisions;\n\n\t\t\t\t\tif ( ! aClockwise ) {\n\n\t\t\t\t\t\tt = 1 - t;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tangle = aStartAngle + t * deltaAngle;\n\n\t\t\t\t\ttx = aX + aRadius * Math.cos( angle );\n\t\t\t\t\tty = aY + aRadius * Math.sin( angle );\n\n\t\t\t\t\t//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);\n\n\t\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\n\n\t\t\t\t}\n\n\t\t\t\t//console.log(points);\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'ellipse':\n\n\t\t\t\tvar aX = args[ 0 ], aY = args[ 1 ],\n\t\t\t\t\txRadius = args[ 2 ],\n\t\t\t\t\tyRadius = args[ 3 ],\n\t\t\t\t\taStartAngle = args[ 4 ], aEndAngle = args[ 5 ],\n\t\t\t\t\taClockwise = !! args[ 6 ],\n\t\t\t\t\taRotation = args[ 7 ];\n\n\n\t\t\t\tvar deltaAngle = aEndAngle - aStartAngle;\n\t\t\t\tvar angle;\n\t\t\t\tvar tdivisions = divisions * 2;\n\n\t\t\t\tvar cos, sin;\n\t\t\t\tif ( aRotation !== 0 ) {\n\n\t\t\t\t\tcos = Math.cos( aRotation );\n\t\t\t\t\tsin = Math.sin( aRotation );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 1; j <= tdivisions; j ++ ) {\n\n\t\t\t\t\tvar t = j / tdivisions;\n\n\t\t\t\t\tif ( ! aClockwise ) {\n\n\t\t\t\t\t\tt = 1 - t;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tangle = aStartAngle + t * deltaAngle;\n\n\t\t\t\t\ttx = aX + xRadius * Math.cos( angle );\n\t\t\t\t\tty = aY + yRadius * Math.sin( angle );\n\n\t\t\t\t\tif ( aRotation !== 0 ) {\n\n\t\t\t\t\t\tvar x = tx, y = ty;\n\n\t\t\t\t\t\t// Rotate the point about the center of the ellipse.\n\t\t\t\t\t\ttx = ( x - aX ) * cos - ( y - aY ) * sin + aX;\n\t\t\t\t\t\tty = ( x - aX ) * sin + ( y - aY ) * cos + aY;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);\n\n\t\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\n\n\t\t\t\t}\n\n\t\t\t\t//console.log(points);\n\n\t\t\t\tbreak;\n\n\t\t\t} // end switch\n\n\t\t}\n\n\n\n\t\t// Normalize to remove the closing point by default.\n\t\tvar lastPoint = points[ points.length - 1 ];\n\t\tif ( Math.abs( lastPoint.x - points[ 0 ].x ) < Number.EPSILON &&\n\t\t\t\t Math.abs( lastPoint.y - points[ 0 ].y ) < Number.EPSILON )\n\t\t\tpoints.splice( points.length - 1, 1 );\n\n\t\tif ( this.autoClose ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t},\n\n\ttoShapes: function ( isCCW, noHoles ) {\n\n\t\tfunction extractSubpaths( inActions ) {\n\n\t\t\tvar subPaths = [], lastPath = new THREE.Path();\n\n\t\t\tfor ( var i = 0, l = inActions.length; i < l; i ++ ) {\n\n\t\t\t\tvar item = inActions[ i ];\n\n\t\t\t\tvar args = item.args;\n\t\t\t\tvar action = item.action;\n\n\t\t\t\tif ( action === 'moveTo' ) {\n\n\t\t\t\t\tif ( lastPath.actions.length !== 0 ) {\n\n\t\t\t\t\t\tsubPaths.push( lastPath );\n\t\t\t\t\t\tlastPath = new THREE.Path();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tlastPath[ action ].apply( lastPath, args );\n\n\t\t\t}\n\n\t\t\tif ( lastPath.actions.length !== 0 ) {\n\n\t\t\t\tsubPaths.push( lastPath );\n\n\t\t\t}\n\n\t\t\t// console.log(subPaths);\n\n\t\t\treturn\tsubPaths;\n\n\t\t}\n\n\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\tvar shapes = [];\n\n\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\tvar tmpPath = inSubpaths[ i ];\n\n\t\t\t\tvar tmpShape = new THREE.Shape();\n\t\t\t\ttmpShape.actions = tmpPath.actions;\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t}\n\n\t\t\t//console.log(\"shape\", shapes);\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\tvar polyLen = inPolygon.length;\n\n\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\tvar inside = false;\n\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\tvar edgeLowPt  = inPolygon[ p ];\n\t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\n\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not parallel\n\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\tedgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\n\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// parallel or collinear\n\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n\t\t\t\t\t// continue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn\tinside;\n\n\t\t}\n\n\t\tvar isClockWise = THREE.ShapeUtils.isClockWise;\n\n\t\tvar subPaths = extractSubpaths( this.actions );\n\t\tif ( subPaths.length === 0 ) return [];\n\n\t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\tvar solid, tmpPath, tmpShape, shapes = [];\n\n\t\tif ( subPaths.length === 1 ) {\n\n\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\ttmpShape = new THREE.Shape();\n\t\t\ttmpShape.actions = tmpPath.actions;\n\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\tshapes.push( tmpShape );\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\tvar betterShapeHoles = [];\n\t\tvar newShapes = [];\n\t\tvar newShapeHoles = [];\n\t\tvar mainIdx = 0;\n\t\tvar tmpPoints;\n\n\t\tnewShapes[ mainIdx ] = undefined;\n\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\ttmpPath = subPaths[ i ];\n\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\tif ( solid ) {\n\n\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\n\t\t\t\tnewShapes[ mainIdx ] = { s: new THREE.Shape(), p: tmpPoints };\n\t\t\t\tnewShapes[ mainIdx ].s.actions = tmpPath.actions;\n\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\tif ( holesFirst )\tmainIdx ++;\n\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t//console.log('cw', i);\n\n\t\t\t} else {\n\n\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t//console.log('ccw', i);\n\n\t\t\t}\n\n\t\t}\n\n\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\tif ( newShapes.length > 1 ) {\n\n\t\t\tvar ambiguous = false;\n\t\t\tvar toChange = [];\n\n\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t}\n\n\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tvar sho = newShapeHoles[ sIdx ];\n\n\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\tvar ho = sho[ hIdx ];\n\t\t\t\t\tvar hole_unassigned = true;\n\n\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\n\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t// console.log(\"ambiguous: \", ambiguous);\n\t\t\tif ( toChange.length > 0 ) {\n\n\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar tmpHoles;\n\n\t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\n\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\tshapes.push( tmpShape );\n\t\t\ttmpHoles = newShapeHoles[ i ];\n\n\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//console.log(\"shape\", shapes);\n\n\t\treturn shapes;\n\n\t}\n\n} );\n\n// File:src/extras/core/Shape.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Defines a 2d shape plane using paths.\n **/\n\n// STEP 1 Create a path.\n// STEP 2 Turn path into shape.\n// STEP 3 ExtrudeGeometry takes in Shape/Shapes\n// STEP 3a - Extract points from each shape, turn to vertices\n// STEP 3b - Triangulate each shape, add faces.\n\nTHREE.Shape = function () {\n\n\tTHREE.Path.apply( this, arguments );\n\n\tthis.holes = [];\n\n};\n\nTHREE.Shape.prototype = Object.assign( Object.create( THREE.Path.prototype ), {\n\n\tconstructor: THREE.Shape,\n\n\t// Convenience method to return ExtrudeGeometry\n\n\textrude: function ( options ) {\n\n\t\treturn new THREE.ExtrudeGeometry( this, options );\n\n\t},\n\n\t// Convenience method to return ShapeGeometry\n\n\tmakeGeometry: function ( options ) {\n\n\t\treturn new THREE.ShapeGeometry( this, options );\n\n\t},\n\n\tgetPointsHoles: function ( divisions ) {\n\n\t\tvar holesPts = [];\n\n\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t}\n\n\t\treturn holesPts;\n\n\t},\n\n\t// Get points of shape and holes (keypoints based on segments parameter)\n\n\textractAllPoints: function ( divisions ) {\n\n\t\treturn {\n\n\t\t\tshape: this.getPoints( divisions ),\n\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t};\n\n\t},\n\n\textractPoints: function ( divisions ) {\n\n\t\treturn this.extractAllPoints( divisions );\n\n\t}\n\n} );\n\n// File:src/extras/curves/LineCurve.js\n\n/**************************************************************\n *\tLine\n **************************************************************/\n\nTHREE.LineCurve = function ( v1, v2 ) {\n\n\tthis.v1 = v1;\n\tthis.v2 = v2;\n\n};\n\nTHREE.LineCurve.prototype = Object.create( THREE.Curve.prototype );\nTHREE.LineCurve.prototype.constructor = THREE.LineCurve;\n\nTHREE.LineCurve.prototype.getPoint = function ( t ) {\n\n\tvar point = this.v2.clone().sub( this.v1 );\n\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\treturn point;\n\n};\n\n// Line curve is linear, so we can overwrite default getPointAt\n\nTHREE.LineCurve.prototype.getPointAt = function ( u ) {\n\n\treturn this.getPoint( u );\n\n};\n\nTHREE.LineCurve.prototype.getTangent = function( t ) {\n\n\tvar tangent = this.v2.clone().sub( this.v1 );\n\n\treturn tangent.normalize();\n\n};\n\n// File:src/extras/curves/QuadraticBezierCurve.js\n\n/**************************************************************\n *\tQuadratic Bezier curve\n **************************************************************/\n\n\nTHREE.QuadraticBezierCurve = function ( v0, v1, v2 ) {\n\n\tthis.v0 = v0;\n\tthis.v1 = v1;\n\tthis.v2 = v2;\n\n};\n\nTHREE.QuadraticBezierCurve.prototype = Object.create( THREE.Curve.prototype );\nTHREE.QuadraticBezierCurve.prototype.constructor = THREE.QuadraticBezierCurve;\n\n\nTHREE.QuadraticBezierCurve.prototype.getPoint = function ( t ) {\n\n\tvar b2 = THREE.ShapeUtils.b2;\n\n\treturn new THREE.Vector2(\n\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n\t\tb2( t, this.v0.y, this.v1.y, this.v2.y )\n\t);\n\n};\n\n\nTHREE.QuadraticBezierCurve.prototype.getTangent = function( t ) {\n\n\tvar tangentQuadraticBezier = THREE.CurveUtils.tangentQuadraticBezier;\n\n\treturn new THREE.Vector2(\n\t\ttangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),\n\t\ttangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )\n\t).normalize();\n\n};\n\n// File:src/extras/curves/CubicBezierCurve.js\n\n/**************************************************************\n *\tCubic Bezier curve\n **************************************************************/\n\nTHREE.CubicBezierCurve = function ( v0, v1, v2, v3 ) {\n\n\tthis.v0 = v0;\n\tthis.v1 = v1;\n\tthis.v2 = v2;\n\tthis.v3 = v3;\n\n};\n\nTHREE.CubicBezierCurve.prototype = Object.create( THREE.Curve.prototype );\nTHREE.CubicBezierCurve.prototype.constructor = THREE.CubicBezierCurve;\n\nTHREE.CubicBezierCurve.prototype.getPoint = function ( t ) {\n\n\tvar b3 = THREE.ShapeUtils.b3;\n\n\treturn new THREE.Vector2( \n\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n\t);\n\n};\n\nTHREE.CubicBezierCurve.prototype.getTangent = function( t ) {\n\n\tvar tangentCubicBezier = THREE.CurveUtils.tangentCubicBezier;\n\n\treturn new THREE.Vector2( \n\t\ttangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t\ttangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\n\t).normalize();\n\n};\n\n// File:src/extras/curves/SplineCurve.js\n\n/**************************************************************\n *\tSpline curve\n **************************************************************/\n\nTHREE.SplineCurve = function ( points /* array of Vector2 */ ) {\n\n\tthis.points = ( points == undefined ) ? [] : points;\n\n};\n\nTHREE.SplineCurve.prototype = Object.create( THREE.Curve.prototype );\nTHREE.SplineCurve.prototype.constructor = THREE.SplineCurve;\n\nTHREE.SplineCurve.prototype.getPoint = function ( t ) {\n\n\tvar points = this.points;\n\tvar point = ( points.length - 1 ) * t;\n\n\tvar intPoint = Math.floor( point );\n\tvar weight = point - intPoint;\n\n\tvar point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\tvar point1 = points[ intPoint ];\n\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\tvar interpolate = THREE.CurveUtils.interpolate;\n\n\treturn new THREE.Vector2(\n\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight )\n\t);\n\n};\n\n// File:src/extras/curves/EllipseCurve.js\n\n/**************************************************************\n *\tEllipse curve\n **************************************************************/\n\nTHREE.EllipseCurve = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\tthis.aX = aX;\n\tthis.aY = aY;\n\n\tthis.xRadius = xRadius;\n\tthis.yRadius = yRadius;\n\n\tthis.aStartAngle = aStartAngle;\n\tthis.aEndAngle = aEndAngle;\n\n\tthis.aClockwise = aClockwise;\n\t\n\tthis.aRotation = aRotation || 0;\n\n};\n\nTHREE.EllipseCurve.prototype = Object.create( THREE.Curve.prototype );\nTHREE.EllipseCurve.prototype.constructor = THREE.EllipseCurve;\n\nTHREE.EllipseCurve.prototype.getPoint = function ( t ) {\n\n\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\n\tif ( deltaAngle < 0 ) deltaAngle += Math.PI * 2;\n\tif ( deltaAngle > Math.PI * 2 ) deltaAngle -= Math.PI * 2;\n\n\tvar angle;\n\n\tif ( this.aClockwise === true ) {\n\n\t\tangle = this.aEndAngle + ( 1 - t ) * ( Math.PI * 2 - deltaAngle );\n\n\t} else {\n\n\t\tangle = this.aStartAngle + t * deltaAngle;\n\n\t}\n\t\n\tvar x = this.aX + this.xRadius * Math.cos( angle );\n\tvar y = this.aY + this.yRadius * Math.sin( angle );\n\n\tif ( this.aRotation !== 0 ) {\n\n\t\tvar cos = Math.cos( this.aRotation );\n\t\tvar sin = Math.sin( this.aRotation );\n\n\t\tvar tx = x, ty = y;\n\n\t\t// Rotate the point about the center of the ellipse.\n\t\tx = ( tx - this.aX ) * cos - ( ty - this.aY ) * sin + this.aX;\n\t\ty = ( tx - this.aX ) * sin + ( ty - this.aY ) * cos + this.aY;\n\n\t}\n\n\treturn new THREE.Vector2( x, y );\n\n};\n\n// File:src/extras/curves/ArcCurve.js\n\n/**************************************************************\n *\tArc curve\n **************************************************************/\n\nTHREE.ArcCurve = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\tTHREE.EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n};\n\nTHREE.ArcCurve.prototype = Object.create( THREE.EllipseCurve.prototype );\nTHREE.ArcCurve.prototype.constructor = THREE.ArcCurve;\n\n// File:src/extras/curves/LineCurve3.js\n\n/**************************************************************\n *\tLine3D\n **************************************************************/\n\nTHREE.LineCurve3 = THREE.Curve.create(\n\n\tfunction ( v1, v2 ) {\n\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t},\n\n\tfunction ( t ) {\n\n\t\tvar vector = new THREE.Vector3();\n\n\t\tvector.subVectors( this.v2, this.v1 ); // diff\n\t\tvector.multiplyScalar( t );\n\t\tvector.add( this.v1 );\n\n\t\treturn vector;\n\n\t}\n\n);\n\n// File:src/extras/curves/QuadraticBezierCurve3.js\n\n/**************************************************************\n *\tQuadratic Bezier 3D curve\n **************************************************************/\n\nTHREE.QuadraticBezierCurve3 = THREE.Curve.create(\n\n\tfunction ( v0, v1, v2 ) {\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t},\n\n\tfunction ( t ) {\n\n\t\tvar b2 = THREE.ShapeUtils.b2;\t\t\n\n\t\treturn new THREE.Vector3(\n\t\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\n\t\t\tb2( t, this.v0.y, this.v1.y, this.v2.y ),\n\t\t\tb2( t, this.v0.z, this.v1.z, this.v2.z )\n\t\t);\n\n\t}\n\n);\n\n// File:src/extras/curves/CubicBezierCurve3.js\n\n/**************************************************************\n *\tCubic Bezier 3D curve\n **************************************************************/\n\nTHREE.CubicBezierCurve3 = THREE.Curve.create(\n\n\tfunction ( v0, v1, v2, v3 ) {\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\n\t},\n\n\tfunction ( t ) {\n\n\t\tvar b3 = THREE.ShapeUtils.b3;\n\n\t\treturn new THREE.Vector3(\n\t\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\n\t\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),\n\t\t\tb3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )\n\t\t);\n\n\t}\n\n);\n\n// File:src/extras/curves/SplineCurve3.js\n\n/**************************************************************\n *\tSpline 3D curve\n **************************************************************/\n\n\nTHREE.SplineCurve3 = THREE.Curve.create(\n\n\tfunction ( points /* array of Vector3 */ ) {\n\n\t\tconsole.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );\n\t\tthis.points = ( points == undefined ) ? [] : points;\n\n\t},\n\n\tfunction ( t ) {\n\n\t\tvar points = this.points;\n\t\tvar point = ( points.length - 1 ) * t;\n\n\t\tvar intPoint = Math.floor( point );\n\t\tvar weight = point - intPoint;\n\n\t\tvar point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];\n\t\tvar point1 = points[ intPoint ];\n\t\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\tvar interpolate = THREE.CurveUtils.interpolate;\n\n\t\treturn new THREE.Vector3(\n\t\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\n\t\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight ),\n\t\t\tinterpolate( point0.z, point1.z, point2.z, point3.z, weight )\n\t\t);\n\n\t}\n\n);\n\n// File:src/extras/curves/CatmullRomCurve3.js\n\n/**\n * @author zz85 https://github.com/zz85\n *\n * Centripetal CatmullRom Curve - which is useful for avoiding\n * cusps and self-intersections in non-uniform catmull rom curves.\n * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n *\n * curve.type accepts centripetal(default), chordal and catmullrom\n * curve.tension is used for catmullrom which defaults to 0.5\n */\n\nTHREE.CatmullRomCurve3 = ( function() {\n\n\tvar\n\t\ttmp = new THREE.Vector3(),\n\t\tpx = new CubicPoly(),\n\t\tpy = new CubicPoly(),\n\t\tpz = new CubicPoly();\n\n\t/*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tfunction CubicPoly() {\n\n\t}\n\n\t/*\n\t * Compute coefficients for a cubic polynomial\n\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t * such that\n\t *   p(0) = x0, p(1) = x1\n\t *  and\n\t *   p'(0) = t0, p'(1) = t1.\n\t */\n\tCubicPoly.prototype.init = function( x0, x1, t0, t1 ) {\n\n\t\tthis.c0 = x0;\n\t\tthis.c1 = t0;\n\t\tthis.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\tthis.c3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t};\n\n\tCubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t// compute tangents when parameterized in [t1,t2]\n\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t// rescale tangents for parametrization in [0,1]\n\t\tt1 *= dt1;\n\t\tt2 *= dt1;\n\n\t\t// initCubicPoly\n\t\tthis.init( x1, x2, t1, t2 );\n\n\t};\n\n\t// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4\n\tCubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {\n\n\t\tthis.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t};\n\n\tCubicPoly.prototype.calc = function( t ) {\n\n\t\tvar t2 = t * t;\n\t\tvar t3 = t2 * t;\n\t\treturn this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;\n\n\t};\n\n\t// Subclass Three.js curve\n\treturn THREE.Curve.create(\n\n\t\tfunction ( p /* array of Vector3 */ ) {\n\n\t\t\tthis.points = p || [];\n\t\t\tthis.closed = false;\n\n\t\t},\n\n\t\tfunction ( t ) {\n\n\t\t\tvar points = this.points,\n\t\t\t\tpoint, intPoint, weight, l;\n\n\t\t\tl = points.length;\n\n\t\t\tif ( l < 2 ) console.log( 'duh, you need at least 2 points' );\n\n\t\t\tpoint = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\t\tintPoint = Math.floor( point );\n\t\t\tweight = point - intPoint;\n\n\t\t\tif ( this.closed ) {\n\n\t\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\n\n\t\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\t\tintPoint = l - 2;\n\t\t\t\tweight = 1;\n\n\t\t\t}\n\n\t\t\tvar p0, p1, p2, p3; // 4 points\n\n\t\t\tif ( this.closed || intPoint > 0 ) {\n\n\t\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t\t\t} else {\n\n\t\t\t\t// extrapolate first point\n\t\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\t\tp0 = tmp;\n\n\t\t\t}\n\n\t\t\tp1 = points[ intPoint % l ];\n\t\t\tp2 = points[ ( intPoint + 1 ) % l ];\n\n\t\t\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t\t\t} else {\n\n\t\t\t\t// extrapolate last point\n\t\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\t\tp3 = tmp;\n\n\t\t\t}\n\n\t\t\tif ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {\n\n\t\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\t\tvar pow = this.type === 'chordal' ? 0.5 : 0.25;\n\t\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t\t// safety check for repeated points\n\t\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n\t\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t\t} else if ( this.type === 'catmullrom' ) {\n\n\t\t\t\tvar tension = this.tension !== undefined ? this.tension : 0.5;\n\t\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );\n\t\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );\n\t\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );\n\n\t\t\t}\n\n\t\t\tvar v = new THREE.Vector3(\n\t\t\t\tpx.calc( weight ),\n\t\t\t\tpy.calc( weight ),\n\t\t\t\tpz.calc( weight )\n\t\t\t);\n\n\t\t\treturn v;\n\n\t\t}\n\n\t);\n\n} )();\n\n// File:src/extras/curves/ClosedSplineCurve3.js\n\n/**************************************************************\n *\tClosed Spline 3D curve\n **************************************************************/\n\n\nTHREE.ClosedSplineCurve3 = function ( points ) {\n\n\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.' );\n\n\tTHREE.CatmullRomCurve3.call( this, points );\n\tthis.type = 'catmullrom';\n\tthis.closed = true;\n\n};\n\nTHREE.ClosedSplineCurve3.prototype = Object.create( THREE.CatmullRomCurve3.prototype );\n\n// File:src/extras/geometries/BoxGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as\n */\n\nTHREE.BoxGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'BoxGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\tdepth: depth,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tdepthSegments: depthSegments\n\t};\n\n\tthis.fromBufferGeometry( new THREE.BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n\tthis.mergeVertices();\n\n};\n\nTHREE.BoxGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.BoxGeometry.prototype.constructor = THREE.BoxGeometry;\n\nTHREE.CubeGeometry = THREE.BoxGeometry;\n\n// File:src/extras/geometries/BoxBufferGeometry.js\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nTHREE.BoxBufferGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'BoxBufferGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\tdepth: depth,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tdepthSegments: depthSegments\n\t};\n\n\tvar scope = this;\n\n\t// segments\n\twidthSegments = Math.floor( widthSegments ) || 1;\n\theightSegments = Math.floor( heightSegments ) || 1;\n\tdepthSegments = Math.floor( depthSegments ) || 1;\n\n\t// these are used to calculate buffer length\n\tvar vertexCount = calculateVertexCount( widthSegments, heightSegments, depthSegments );\n\tvar indexCount = calculateIndexCount( widthSegments, heightSegments, depthSegments );\n\n\t// buffers\n\tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n\tvar vertices = new Float32Array( vertexCount * 3 );\n\tvar normals = new Float32Array( vertexCount * 3 );\n\tvar uvs = new Float32Array( vertexCount * 2 );\n\n\t// offset variables\n\tvar vertexBufferOffset = 0;\n\tvar uvBufferOffset = 0;\n\tvar indexBufferOffset = 0;\n\tvar numberOfVertices = 0;\n\n\t// group variables\n\tvar groupStart = 0;\n\n\t// build each side of the box geometry\n\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height,   width,  depthSegments, heightSegments, 0 ); // px\n\tbuildPlane( 'z', 'y', 'x',   1, - 1, depth, height, - width,  depthSegments, heightSegments, 1 ); // nx\n\tbuildPlane( 'x', 'z', 'y',   1,   1, width, depth,    height, widthSegments, depthSegments,  2 ); // py\n\tbuildPlane( 'x', 'z', 'y',   1, - 1, width, depth,  - height, widthSegments, depthSegments,  3 ); // ny\n\tbuildPlane( 'x', 'y', 'z',   1, - 1, width, height,   depth,  widthSegments, heightSegments, 4 ); // pz\n\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth,  widthSegments, heightSegments, 5 ); // nz\n\n\t// build geometry\n\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\n\t// helper functions\n\n\tfunction calculateVertexCount ( w, h, d ) {\n\n\t\tvar vertices = 0;\n\n\t\t// calculate the amount of vertices for each side (plane)\n\t\tvertices += (w + 1) * (h + 1) * 2; // xy\n\t\tvertices += (w + 1) * (d + 1) * 2; // xz\n\t\tvertices += (d + 1) * (h + 1) * 2; // zy\n\n\t\treturn vertices;\n\n\t}\n\n\tfunction calculateIndexCount ( w, h, d ) {\n\n\t\tvar index = 0;\n\n\t\t// calculate the amount of squares for each side\n\t\tindex += w * h * 2; // xy\n\t\tindex += w * d * 2; // xz\n\t\tindex += d * h * 2; // zy\n\n\t\treturn index * 6; // two triangles per square => six vertices per square\n\n\t}\n\n\tfunction buildPlane ( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\tvar segmentWidth\t= width / gridX;\n\t\tvar segmentHeight = height / gridY;\n\n\t\tvar widthHalf = width / 2;\n\t\tvar heightHalf = height / 2;\n\t\tvar depthHalf = depth / 2;\n\n\t\tvar gridX1 = gridX + 1;\n\t\tvar gridY1 = gridY + 1;\n\n\t\tvar vertexCounter = 0;\n\t\tvar groupCount = 0;\n\n\t\tvar vector = new THREE.Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tvar y = iy * segmentHeight - heightHalf;\n\n\t\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t// set values to correct vector component\n\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t// now apply vector to vertex buffer\n\t\t\t\tvertices[ vertexBufferOffset ] = vector.x;\n\t\t\t\tvertices[ vertexBufferOffset + 1 ] = vector.y;\n\t\t\t\tvertices[ vertexBufferOffset + 2 ] = vector.z;\n\n\t\t\t\t// set values to correct vector component\n\t\t\t\tvector[ u ] = 0;\n\t\t\t\tvector[ v ] = 0;\n\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t// now apply vector to normal buffer\n\t\t\t\tnormals[ vertexBufferOffset ] = vector.x;\n\t\t\t\tnormals[ vertexBufferOffset + 1 ] = vector.y;\n\t\t\t\tnormals[ vertexBufferOffset + 2 ] = vector.z;\n\n\t\t\t\t// uvs\n\t\t\t\tuvs[ uvBufferOffset ] = ix / gridX;\n\t\t\t\tuvs[ uvBufferOffset + 1 ] = 1 - ( iy / gridY );\n\n\t\t\t\t// update offsets and counters\n\t\t\t\tvertexBufferOffset += 3;\n\t\t\t\tuvBufferOffset += 2;\n\t\t\t\tvertexCounter += 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// 1. you need three indices to draw a single face\n\t\t// 2. a single segment consists of two faces\n\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\t// indices\n\t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t// face one\n\t\t\t\tindices[ indexBufferOffset ] = a;\n\t\t\t\tindices[ indexBufferOffset + 1 ] = b;\n\t\t\t\tindices[ indexBufferOffset + 2 ] = d;\n\n\t\t\t\t// face two\n\t\t\t\tindices[ indexBufferOffset + 3 ] = b;\n\t\t\t\tindices[ indexBufferOffset + 4 ] = c;\n\t\t\t\tindices[ indexBufferOffset + 5 ] = d;\n\n\t\t\t\t// update offsets and counters\n\t\t\t\tindexBufferOffset += 6;\n\t\t\t\tgroupCount += 6;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// add a group to the geometry. this will ensure multi material support\n\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t// calculate new start value for groups\n\t\tgroupStart += groupCount;\n\n\t\t// update total number of vertices\n\t\tnumberOfVertices += vertexCounter;\n\n\t}\n\n};\n\nTHREE.BoxBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.BoxBufferGeometry.prototype.constructor = THREE.BoxBufferGeometry;\n\n// File:src/extras/geometries/CircleGeometry.js\n\n/**\n * @author hughes\n */\n\nTHREE.CircleGeometry = function ( radius, segments, thetaStart, thetaLength ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'CircleGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tsegments: segments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new THREE.CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\n};\n\nTHREE.CircleGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.CircleGeometry.prototype.constructor = THREE.CircleGeometry;\n\n// File:src/extras/geometries/CircleBufferGeometry.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\n\nTHREE.CircleBufferGeometry = function ( radius, segments, thetaStart, thetaLength ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'CircleBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tsegments: segments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tradius = radius || 50;\n\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\tvar vertices = segments + 2;\n\n\tvar positions = new Float32Array( vertices * 3 );\n\tvar normals = new Float32Array( vertices * 3 );\n\tvar uvs = new Float32Array( vertices * 2 );\n\n\t// center data is already zero, but need to set a few extras\n\tnormals[ 2 ] = 1.0;\n\tuvs[ 0 ] = 0.5;\n\tuvs[ 1 ] = 0.5;\n\n\tfor ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {\n\n\t\tvar segment = thetaStart + s / segments * thetaLength;\n\n\t\tpositions[ i ] = radius * Math.cos( segment );\n\t\tpositions[ i + 1 ] = radius * Math.sin( segment );\n\n\t\tnormals[ i + 2 ] = 1; // normal z\n\n\t\tuvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;\n\t\tuvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;\n\n\t}\n\n\tvar indices = [];\n\n\tfor ( var i = 1; i <= segments; i ++ ) {\n\n\t\tindices.push( i, i + 1, 0 );\n\n\t}\n\n\tthis.setIndex( new THREE.BufferAttribute( new Uint16Array( indices ), 1 ) );\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\n\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\n\n};\n\nTHREE.CircleBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.CircleBufferGeometry.prototype.constructor = THREE.CircleBufferGeometry;\n\n// File:src/extras/geometries/CylinderBufferGeometry.js\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nTHREE.CylinderBufferGeometry = function( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'CylinderBufferGeometry';\n\n\tthis.parameters = {\n\t\tradiusTop: radiusTop,\n\t\tradiusBottom: radiusBottom,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\topenEnded: openEnded,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tvar scope = this;\n\n\tradiusTop = radiusTop !== undefined ? radiusTop : 20;\n\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 20;\n\theight = height !== undefined ? height : 100;\n\n\tradialSegments = Math.floor( radialSegments ) || 8;\n\theightSegments = Math.floor( heightSegments ) || 1;\n\n\topenEnded = openEnded !== undefined ? openEnded : false;\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI;\n\n\t// used to calculate buffer length\n\n\tvar nbCap = 0;\n\n\tif ( openEnded === false ) {\n\n\t\tif ( radiusTop > 0 ) nbCap ++;\n\t\tif ( radiusBottom > 0 ) nbCap ++;\n\n\t}\n\n\tvar vertexCount = calculateVertexCount();\n\tvar indexCount = calculateIndexCount();\n\n\t// buffers\n\n\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ), 1 );\n\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n\t// helper variables\n\n\tvar index = 0,\n\t    indexOffset = 0,\n\t    indexArray = [],\n\t    halfHeight = height / 2;\n\n\t// group variables\n\tvar groupStart = 0;\n\n\t// generate geometry\n\n\tgenerateTorso();\n\n\tif ( openEnded === false ) {\n\n\t\tif ( radiusTop > 0 ) generateCap( true );\n\t\tif ( radiusBottom > 0 ) generateCap( false );\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', vertices );\n\tthis.addAttribute( 'normal', normals );\n\tthis.addAttribute( 'uv', uvs );\n\n\t// helper functions\n\n\tfunction calculateVertexCount() {\n\n\t\tvar count = ( radialSegments + 1 ) * ( heightSegments + 1 );\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tcount += ( ( radialSegments + 1 ) * nbCap ) + ( radialSegments * nbCap );\n\n\t\t}\n\n\t\treturn count;\n\n\t}\n\n\tfunction calculateIndexCount() {\n\n\t\tvar count = radialSegments * heightSegments * 2 * 3;\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tcount += radialSegments * nbCap * 3;\n\n\t\t}\n\n\t\treturn count;\n\n\t}\n\n\tfunction generateTorso() {\n\n\t\tvar x, y;\n\t\tvar normal = new THREE.Vector3();\n\t\tvar vertex = new THREE.Vector3();\n\n\t\tvar groupCount = 0;\n\n\t\t// this will be used to calculate the normal\n\t\tvar tanTheta = ( radiusBottom - radiusTop ) / height;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\tvar indexRow = [];\n\n\t\t\tvar v = y / heightSegments;\n\n\t\t\t// calculate the radius of the current row\n\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\tvar u = x / radialSegments;\n\n\t\t\t\t// vertex\n\t\t\t\tvertex.x = radius * Math.sin( u * thetaLength + thetaStart );\n\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\tvertex.z = radius * Math.cos( u * thetaLength + thetaStart );\n\t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\t\t\t\tnormal.copy( vertex );\n\n\t\t\t\t// handle special case if radiusTop/radiusBottom is zero\n\n\t\t\t\tif ( ( radiusTop === 0 && y === 0 ) || ( radiusBottom === 0 && y === heightSegments ) ) {\n\n\t\t\t\t\tnormal.x = Math.sin( u * thetaLength + thetaStart );\n\t\t\t\t\tnormal.z = Math.cos( u * thetaLength + thetaStart );\n\n\t\t\t\t}\n\n\t\t\t\tnormal.setY( Math.sqrt( normal.x * normal.x + normal.z * normal.z ) * tanTheta ).normalize();\n\t\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\t\t\t\tuvs.setXY( index, u, 1 - v );\n\n\t\t\t\t// save index of vertex in respective row\n\t\t\t\tindexRow.push( index );\n\n\t\t\t\t// increase index\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// now save vertices of the row in our index array\n\t\t\tindexArray.push( indexRow );\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\n\t\t\t\t// we use the index array to access the correct indices\n\t\t\t\tvar i1 = indexArray[ y ][ x ];\n\t\t\t\tvar i2 = indexArray[ y + 1 ][ x ];\n\t\t\t\tvar i3 = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\tvar i4 = indexArray[ y ][ x + 1 ];\n\n\t\t\t\t// face one\n\t\t\t\tindices.setX( indexOffset, i1 ); indexOffset ++;\n\t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n\t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\n\t\t\t\t// face two\n\t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\n\t\t\t\tindices.setX( indexOffset, i3 ); indexOffset ++;\n\t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\n\n\t\t\t\t// update counters\n\t\t\t\tgroupCount += 6;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// add a group to the geometry. this will ensure multi material support\n\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t// calculate new start value for groups\n\t\tgroupStart += groupCount;\n\n\t}\n\n\tfunction generateCap( top ) {\n\n\t\tvar x, centerIndexStart, centerIndexEnd;\n\n\t\tvar uv = new THREE.Vector2();\n\t\tvar vertex = new THREE.Vector3();\n\n\t\tvar groupCount = 0;\n\n\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\tvar sign = ( top === true ) ? 1 : - 1;\n\n\t\t// save the index of the first center vertex\n\t\tcenterIndexStart = index;\n\n\t\t// first we generate the center vertex data of the cap.\n\t\t// because the geometry needs one set of uvs per face,\n\t\t// we must generate a center vertex per face/segment\n\n\t\tfor ( x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t// vertex\n\t\t\tvertices.setXYZ( index, 0, halfHeight * sign, 0 );\n\n\t\t\t// normal\n\t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\n\t\t\t// uv\n\t\t\tuv.x = 0.5;\n\t\t\tuv.y = 0.5;\n\n\t\t\tuvs.setXY( index, uv.x, uv.y );\n\n\t\t\t// increase index\n\t\t\tindex ++;\n\n\t\t}\n\n\t\t// save the index of the last center vertex\n\t\tcenterIndexEnd = index;\n\n\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\tvar u = x / radialSegments;\n\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\tvar cosTheta = Math.cos( theta );\n\t\t\tvar sinTheta = Math.sin( theta );\n\n\t\t\t// vertex\n\t\t\tvertex.x = radius * sinTheta;\n\t\t\tvertex.y = halfHeight * sign;\n\t\t\tvertex.z = radius * cosTheta;\n\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\t\t\tnormals.setXYZ( index, 0, sign, 0 );\n\n\t\t\t// uv\n\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\tuvs.setXY( index, uv.x, uv.y );\n\n\t\t\t// increase index\n\t\t\tindex ++;\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\tvar c = centerIndexStart + x;\n\t\t\tvar i = centerIndexEnd + x;\n\n\t\t\tif ( top === true ) {\n\n\t\t\t\t// face top\n\t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n\t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n\t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\n\t\t\t} else {\n\n\t\t\t\t// face bottom\n\t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\n\t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\n\t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\n\n\t\t\t}\n\n\t\t\t// update counters\n\t\t\tgroupCount += 3;\n\n\t\t}\n\n\t\t// add a group to the geometry. this will ensure multi material support\n\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t// calculate new start value for groups\n\t\tgroupStart += groupCount;\n\n\t}\n\n};\n\nTHREE.CylinderBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.CylinderBufferGeometry.prototype.constructor = THREE.CylinderBufferGeometry;\n\n// File:src/extras/geometries/CylinderGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.CylinderGeometry = function ( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'CylinderGeometry';\n\n\tthis.parameters = {\n\t\tradiusTop: radiusTop,\n\t\tradiusBottom: radiusBottom,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\topenEnded: openEnded,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new THREE.CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n\tthis.mergeVertices();\n\n};\n\nTHREE.CylinderGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.CylinderGeometry.prototype.constructor = THREE.CylinderGeometry;\n\n// File:src/extras/geometries/ConeBufferGeometry.js\n\n/*\n * @author: abelnation / http://github.com/abelnation\n */\n\nTHREE.ConeBufferGeometry = function (\n\tradius, height,\n\tradialSegments, heightSegments,\n\topenEnded, thetaStart, thetaLength ) {\n\n\tTHREE.CylinderBufferGeometry.call( this,\n\t\t0, radius, height,\n\t\tradialSegments, heightSegments,\n\t\topenEnded, thetaStart, thetaLength );\n\n\tthis.type = 'ConeBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n};\n\nTHREE.ConeBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.ConeBufferGeometry.prototype.constructor = THREE.ConeBufferGeometry;\n\n// File:src/extras/geometries/ConeGeometry.js\n\n/**\n * @author abelnation / http://github.com/abelnation\n */\n\nTHREE.ConeGeometry = function (\n\tradius, height,\n\tradialSegments, heightSegments,\n\topenEnded, thetaStart, thetaLength ) {\n\n\tTHREE.CylinderGeometry.call( this,\n\t\t0, radius, height,\n\t\tradialSegments, heightSegments,\n\t\topenEnded, thetaStart, thetaLength );\n\n\tthis.type = 'ConeGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\topenEnded: openEnded,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n};\n\nTHREE.ConeGeometry.prototype = Object.create( THREE.CylinderGeometry.prototype );\nTHREE.ConeGeometry.prototype.constructor = THREE.ConeGeometry;\n\n// File:src/extras/geometries/EdgesGeometry.js\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.EdgesGeometry = function ( geometry, thresholdAngle ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\n\tvar thresholdDot = Math.cos( THREE.Math.DEG2RAD * thresholdAngle );\n\n\tvar edge = [ 0, 0 ], hash = {};\n\n\tfunction sortFunction( a, b ) {\n\n\t\treturn a - b;\n\n\t}\n\n\tvar keys = [ 'a', 'b', 'c' ];\n\n\tvar geometry2;\n\n\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\tgeometry2 = new THREE.Geometry();\n\t\tgeometry2.fromBufferGeometry( geometry );\n\n\t} else {\n\n\t\tgeometry2 = geometry.clone();\n\n\t}\n\n\tgeometry2.mergeVertices();\n\tgeometry2.computeFaceNormals();\n\n\tvar vertices = geometry2.vertices;\n\tvar faces = geometry2.faces;\n\n\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\tvar face = faces[ i ];\n\n\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\tedge[ 0 ] = face[ keys[ j ] ];\n\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\tedge.sort( sortFunction );\n\n\t\t\tvar key = edge.toString();\n\n\t\t\tif ( hash[ key ] === undefined ) {\n\n\t\t\t\thash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };\n\n\t\t\t} else {\n\n\t\t\t\thash[ key ].face2 = i;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tvar coords = [];\n\n\tfor ( var key in hash ) {\n\n\t\tvar h = hash[ key ];\n\n\t\tif ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {\n\n\t\t\tvar vertex = vertices[ h.vert1 ];\n\t\t\tcoords.push( vertex.x );\n\t\t\tcoords.push( vertex.y );\n\t\t\tcoords.push( vertex.z );\n\n\t\t\tvertex = vertices[ h.vert2 ];\n\t\t\tcoords.push( vertex.x );\n\t\t\tcoords.push( vertex.y );\n\t\t\tcoords.push( vertex.z );\n\n\t\t}\n\n\t}\n\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( coords ), 3 ) );\n\n};\n\nTHREE.EdgesGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.EdgesGeometry.prototype.constructor = THREE.EdgesGeometry;\n\n// File:src/extras/geometries/ExtrudeGeometry.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n *\n * Creates extruded geometry from a path shape.\n *\n * parameters = {\n *\n *  curveSegments: <int>, // number of points on the curves\n *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n *  amount: <int>, // Depth to extrude the shape\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into the original shape bevel goes\n *  bevelSize: <float>, // how far from shape outline is bevel\n *  bevelSegments: <int>, // number of bevel layers\n *\n *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)\n *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals\n *\n *  uvGenerator: <Object> // object that provides UV generator functions\n *\n * }\n **/\n\nTHREE.ExtrudeGeometry = function ( shapes, options ) {\n\n\tif ( typeof( shapes ) === \"undefined\" ) {\n\n\t\tshapes = [];\n\t\treturn;\n\n\t}\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'ExtrudeGeometry';\n\n\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\tthis.addShapeList( shapes, options );\n\n\tthis.computeFaceNormals();\n\n\t// can't really use automatic vertex normals\n\t// as then front and back sides get smoothed too\n\t// should do separate smoothing just for sides\n\n\t//this.computeVertexNormals();\n\n\t//console.log( \"took\", ( Date.now() - startTime ) );\n\n};\n\nTHREE.ExtrudeGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.ExtrudeGeometry.prototype.constructor = THREE.ExtrudeGeometry;\n\nTHREE.ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\n\tvar sl = shapes.length;\n\n\tfor ( var s = 0; s < sl; s ++ ) {\n\n\t\tvar shape = shapes[ s ];\n\t\tthis.addShape( shape, options );\n\n\t}\n\n};\n\nTHREE.ExtrudeGeometry.prototype.addShape = function ( shape, options ) {\n\n\tvar amount = options.amount !== undefined ? options.amount : 100;\n\n\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\n\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\n\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\n\n\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\n\tvar steps = options.steps !== undefined ? options.steps : 1;\n\n\tvar extrudePath = options.extrudePath;\n\tvar extrudePts, extrudeByPath = false;\n\n\t// Use default WorldUVGenerator if no UV generators are specified.\n\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator;\n\n\tvar splineTube, binormal, normal, position2;\n\tif ( extrudePath ) {\n\n\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\textrudeByPath = true;\n\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t// SETUP TNB variables\n\n\t\t// Reuse TNB from TubeGeomtry for now.\n\t\t// TODO1 - have a .isClosed in spline?\n\n\t\tsplineTube = options.frames !== undefined ? options.frames : new THREE.TubeGeometry.FrenetFrames( extrudePath, steps, false );\n\n\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\tbinormal = new THREE.Vector3();\n\t\tnormal = new THREE.Vector3();\n\t\tposition2 = new THREE.Vector3();\n\n\t}\n\n\t// Safeguards if bevels are not enabled\n\n\tif ( ! bevelEnabled ) {\n\n\t\tbevelSegments = 0;\n\t\tbevelThickness = 0;\n\t\tbevelSize = 0;\n\n\t}\n\n\t// Variables initialization\n\n\tvar ahole, h, hl; // looping of holes\n\tvar scope = this;\n\n\tvar shapesOffset = this.vertices.length;\n\n\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\tvar vertices = shapePoints.shape;\n\tvar holes = shapePoints.holes;\n\n\tvar reverse = ! THREE.ShapeUtils.isClockWise( vertices );\n\n\tif ( reverse ) {\n\n\t\tvertices = vertices.reverse();\n\n\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\n\t\t\tif ( THREE.ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t}\n\n\t\t}\n\n\t\treverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!\n\n\t}\n\n\n\tvar faces = THREE.ShapeUtils.triangulateShape( vertices, holes );\n\n\t/* Vertices */\n\n\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\tahole = holes[ h ];\n\n\t\tvertices = vertices.concat( ahole );\n\n\t}\n\n\n\tfunction scalePt2 ( pt, vec, size ) {\n\n\t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\n\n\t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n\t}\n\n\tvar b, bs, t, z,\n\t\tvert, vlen = vertices.length,\n\t\tface, flen = faces.length;\n\n\n\t// Find directions for point movement\n\n\n\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t//\n\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\tvar v_trans_x, v_trans_y, shrink_by = 1;\t\t// resulting translation vector for inPt\n\n\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\tvar v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;\n\t\tvar v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;\n\n\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t// check for collinear edges\n\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t// not collinear\n\n\t\t\t// length of vectors for normalizing\n\n\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\tvar sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /\n\t\t\t\t\t  ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t// vector from inPt to intersection point\n\n\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t//  but prevent crazy spikes\n\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\treturn\tnew THREE.Vector2( v_trans_x, v_trans_y );\n\n\t\t\t} else {\n\n\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// handle special case of collinear edges\n\n\t\t\tvar direction_eq = false;\t\t// assumes: opposite\n\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( direction_eq ) {\n\n\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\tv_trans_y =  v_prev_x;\n\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t} else {\n\n\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn\tnew THREE.Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t}\n\n\n\tvar contourMovements = [];\n\n\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\tif ( j === il ) j = 0;\n\t\tif ( k === il ) k = 0;\n\n\t\t//  (j)---(i)---(k)\n\t\t// console.log('i,j,k', i, j , k)\n\n\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t}\n\n\tvar holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();\n\n\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\tahole = holes[ h ];\n\n\t\toneHoleMovements = [];\n\n\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\tif ( j === il ) j = 0;\n\t\t\tif ( k === il ) k = 0;\n\n\t\t\t//  (j)---(i)---(k)\n\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t}\n\n\t\tholesMovements.push( oneHoleMovements );\n\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t}\n\n\n\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\tfor ( b = 0; b < bevelSegments; b ++ ) {\n\n\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\tt = b / bevelSegments;\n\t\tz = bevelThickness * ( 1 - t );\n\n\t\t//z = bevelThickness * t;\n\t\tbs = bevelSize * ( Math.sin ( t * Math.PI / 2 ) ); // curved\n\t\t//bs = bevelSize * t; // linear\n\n\t\t// contract shape\n\n\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\tv( vert.x, vert.y,  - z );\n\n\t\t}\n\n\t\t// expand holes\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\tv( vert.x, vert.y,  - z );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tbs = bevelSize;\n\n\t// Back facing vertices\n\n\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\tif ( ! extrudeByPath ) {\n\n\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t} else {\n\n\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t}\n\n\t}\n\n\t// Add stepped vertices...\n\t// Including front facing vertices\n\n\tvar s;\n\n\tfor ( s = 1; s <= steps; s ++ ) {\n\n\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\tv( vert.x, vert.y, amount / steps * s );\n\n\t\t\t} else {\n\n\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\t// Add bevel segments planes\n\n\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\tt = b / bevelSegments;\n\t\tz = bevelThickness * ( 1 - t );\n\t\t//bs = bevelSize * ( 1-Math.sin ( ( 1 - t ) * Math.PI/2 ) );\n\t\tbs = bevelSize * Math.sin ( t * Math.PI / 2 );\n\n\t\t// contract shape\n\n\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\tv( vert.x, vert.y,  amount + z );\n\n\t\t}\n\n\t\t// expand holes\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y,  amount + z );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/* Faces */\n\n\t// Top and bottom faces\n\n\tbuildLidFaces();\n\n\t// Sides faces\n\n\tbuildSideFaces();\n\n\n\t/////  Internal functions\n\n\tfunction buildLidFaces() {\n\n\t\tif ( bevelEnabled ) {\n\n\t\t\tvar layer = 0; // steps + 1\n\t\t\tvar offset = vlen * layer;\n\n\t\t\t// Bottom faces\n\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\tface = faces[ i ];\n\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t}\n\n\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\toffset = vlen * layer;\n\n\t\t\t// Top faces\n\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\tface = faces[ i ];\n\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Bottom faces\n\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\tface = faces[ i ];\n\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t}\n\n\t\t\t// Top faces\n\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\tface = faces[ i ];\n\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// Create faces for the z-sides of the shape\n\n\tfunction buildSideFaces() {\n\n\t\tvar layeroffset = 0;\n\t\tsidewalls( contour, layeroffset );\n\t\tlayeroffset += contour.length;\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t//, true\n\t\t\tlayeroffset += ahole.length;\n\n\t\t}\n\n\t}\n\n\tfunction sidewalls( contour, layeroffset ) {\n\n\t\tvar j, k;\n\t\ti = contour.length;\n\n\t\twhile ( -- i >= 0 ) {\n\n\t\t\tj = i;\n\t\t\tk = i - 1;\n\t\t\tif ( k < 0 ) k = contour.length - 1;\n\n\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\tvar s = 0, sl = steps  + bevelSegments * 2;\n\n\t\t\tfor ( s = 0; s < sl; s ++ ) {\n\n\t\t\t\tvar slen1 = vlen * s;\n\t\t\t\tvar slen2 = vlen * ( s + 1 );\n\n\t\t\t\tvar a = layeroffset + j + slen1,\n\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\tf4( a, b, c, d, contour, s, sl, j, k );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\tfunction v( x, y, z ) {\n\n\t\tscope.vertices.push( new THREE.Vector3( x, y, z ) );\n\n\t}\n\n\tfunction f3( a, b, c ) {\n\n\t\ta += shapesOffset;\n\t\tb += shapesOffset;\n\t\tc += shapesOffset;\n\n\t\tscope.faces.push( new THREE.Face3( a, b, c, null, null, 0 ) );\n\n\t\tvar uvs = uvgen.generateTopUV( scope, a, b, c );\n\n\t\tscope.faceVertexUvs[ 0 ].push( uvs );\n\n\t}\n\n\tfunction f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {\n\n\t\ta += shapesOffset;\n\t\tb += shapesOffset;\n\t\tc += shapesOffset;\n\t\td += shapesOffset;\n\n\t\tscope.faces.push( new THREE.Face3( a, b, d, null, null, 1 ) );\n\t\tscope.faces.push( new THREE.Face3( b, c, d, null, null, 1 ) );\n\n\t\tvar uvs = uvgen.generateSideWallUV( scope, a, b, c, d );\n\n\t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );\n\t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );\n\n\t}\n\n};\n\nTHREE.ExtrudeGeometry.WorldUVGenerator = {\n\n\tgenerateTopUV: function ( geometry, indexA, indexB, indexC ) {\n\n\t\tvar vertices = geometry.vertices;\n\n\t\tvar a = vertices[ indexA ];\n\t\tvar b = vertices[ indexB ];\n\t\tvar c = vertices[ indexC ];\n\n\t\treturn [\n\t\t\tnew THREE.Vector2( a.x, a.y ),\n\t\t\tnew THREE.Vector2( b.x, b.y ),\n\t\t\tnew THREE.Vector2( c.x, c.y )\n\t\t];\n\n\t},\n\n\tgenerateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {\n\n\t\tvar vertices = geometry.vertices;\n\n\t\tvar a = vertices[ indexA ];\n\t\tvar b = vertices[ indexB ];\n\t\tvar c = vertices[ indexC ];\n\t\tvar d = vertices[ indexD ];\n\n\t\tif ( Math.abs( a.y - b.y ) < 0.01 ) {\n\n\t\t\treturn [\n\t\t\t\tnew THREE.Vector2( a.x, 1 - a.z ),\n\t\t\t\tnew THREE.Vector2( b.x, 1 - b.z ),\n\t\t\t\tnew THREE.Vector2( c.x, 1 - c.z ),\n\t\t\t\tnew THREE.Vector2( d.x, 1 - d.z )\n\t\t\t];\n\n\t\t} else {\n\n\t\t\treturn [\n\t\t\t\tnew THREE.Vector2( a.y, 1 - a.z ),\n\t\t\t\tnew THREE.Vector2( b.y, 1 - b.z ),\n\t\t\t\tnew THREE.Vector2( c.y, 1 - c.z ),\n\t\t\t\tnew THREE.Vector2( d.y, 1 - d.z )\n\t\t\t];\n\n\t\t}\n\n\t}\n};\n\n// File:src/extras/geometries/ShapeGeometry.js\n\n/**\n * @author jonobr1 / http://jonobr1.com\n *\n * Creates a one-sided polygonal geometry from a path shape. Similar to\n * ExtrudeGeometry.\n *\n * parameters = {\n *\n *\tcurveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.\n *\n *\tmaterial: <int> // material index for front and back faces\n *\tuvGenerator: <Object> // object that provides UV generator functions\n *\n * }\n **/\n\nTHREE.ShapeGeometry = function ( shapes, options ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'ShapeGeometry';\n\n\tif ( Array.isArray( shapes ) === false ) shapes = [ shapes ];\n\n\tthis.addShapeList( shapes, options );\n\n\tthis.computeFaceNormals();\n\n};\n\nTHREE.ShapeGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.ShapeGeometry.prototype.constructor = THREE.ShapeGeometry;\n\n/**\n * Add an array of shapes to THREE.ShapeGeometry.\n */\nTHREE.ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\n\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\tthis.addShape( shapes[ i ], options );\n\n\t}\n\n\treturn this;\n\n};\n\n/**\n * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.\n */\nTHREE.ShapeGeometry.prototype.addShape = function ( shape, options ) {\n\n\tif ( options === undefined ) options = {};\n\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\n\tvar material = options.material;\n\tvar uvgen = options.UVGenerator === undefined ? THREE.ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;\n\n\t//\n\n\tvar i, l, hole;\n\n\tvar shapesOffset = this.vertices.length;\n\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\tvar vertices = shapePoints.shape;\n\tvar holes = shapePoints.holes;\n\n\tvar reverse = ! THREE.ShapeUtils.isClockWise( vertices );\n\n\tif ( reverse ) {\n\n\t\tvertices = vertices.reverse();\n\n\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe...\n\n\t\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\n\t\t\thole = holes[ i ];\n\n\t\t\tif ( THREE.ShapeUtils.isClockWise( hole ) ) {\n\n\t\t\t\tholes[ i ] = hole.reverse();\n\n\t\t\t}\n\n\t\t}\n\n\t\treverse = false;\n\n\t}\n\n\tvar faces = THREE.ShapeUtils.triangulateShape( vertices, holes );\n\n\t// Vertices\n\n\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\n\t\thole = holes[ i ];\n\t\tvertices = vertices.concat( hole );\n\n\t}\n\n\t//\n\n\tvar vert, vlen = vertices.length;\n\tvar face, flen = faces.length;\n\n\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\tvert = vertices[ i ];\n\n\t\tthis.vertices.push( new THREE.Vector3( vert.x, vert.y, 0 ) );\n\n\t}\n\n\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\tface = faces[ i ];\n\n\t\tvar a = face[ 0 ] + shapesOffset;\n\t\tvar b = face[ 1 ] + shapesOffset;\n\t\tvar c = face[ 2 ] + shapesOffset;\n\n\t\tthis.faces.push( new THREE.Face3( a, b, c, null, null, material ) );\n\t\tthis.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );\n\n\t}\n\n};\n\n// File:src/extras/geometries/LatheBufferGeometry.js\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n // points - to create a closed torus, one must use a set of points\n //    like so: [ a, b, c, d, a ], see first is the same as last.\n // segments - the number of circumference segments to create\n // phiStart - the starting radian\n // phiLength - the radian (0 to 2PI) range of the lathed section\n //    2PI is a closed lathe, less than 2PI is a portion.\n\nTHREE.LatheBufferGeometry = function ( points, segments, phiStart, phiLength ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'LatheBufferGeometry';\n\n\tthis.parameters = {\n\t\tpoints: points,\n\t\tsegments: segments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength\n\t};\n\n\tsegments = Math.floor( segments ) || 12;\n\tphiStart = phiStart || 0;\n\tphiLength = phiLength || Math.PI * 2;\n\n\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\tphiLength = THREE.Math.clamp( phiLength, 0, Math.PI * 2 );\n\n\t// these are used to calculate buffer length\n\tvar vertexCount = ( segments + 1 ) * points.length;\n\tvar indexCount = segments * points.length * 2 * 3;\n\n\t// buffers\n\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n\t// helper variables\n\tvar index = 0, indexOffset = 0, base;\n\tvar inversePointLength = 1.0 / ( points.length - 1 );\n\tvar inverseSegments = 1.0 / segments;\n\tvar vertex = new THREE.Vector3();\n\tvar uv = new THREE.Vector2();\n\tvar i, j;\n\n\t// generate vertices and uvs\n\n\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\n\t\tvar sin = Math.sin( phi );\n\t\tvar cos = Math.cos( phi );\n\n\t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t// vertex\n\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\tvertex.y = points[ j ].y;\n\t\t\tvertex.z = points[ j ].x * cos;\n\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n\t\t\t// uv\n\t\t\tuv.x = i / segments;\n\t\t\tuv.y = j / ( points.length - 1 );\n\t\t\tuvs.setXY( index, uv.x, uv.y );\n\n\t\t\t// increase index\n\t\t\tindex ++;\n\n\t\t}\n\n\t}\n\n\t// generate indices\n\n\tfor ( i = 0; i < segments; i ++ ) {\n\n\t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\n\n\t\t\tbase = j + i * points.length;\n\n\t\t\t// indices\n\t\t\tvar a = base;\n\t\t\tvar b = base + points.length;\n\t\t\tvar c = base + points.length + 1;\n\t\t\tvar d = base + 1;\n\n\t\t\t// face one\n\t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n\t\t\t// face two\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', vertices );\n\tthis.addAttribute( 'uv', uvs );\n\n\t// generate normals\n\n\tthis.computeVertexNormals();\n\n\t// if the geometry is closed, we need to average the normals along the seam.\n\t// because the corresponding vertices are identical (but still have different UVs).\n\n\tif( phiLength === Math.PI * 2 ) {\n\n\t\tvar normals = this.attributes.normal.array;\n\t\tvar n1 = new THREE.Vector3();\n\t\tvar n2 = new THREE.Vector3();\n\t\tvar n = new THREE.Vector3();\n\n\t\t// this is the buffer offset for the last line of vertices\n\t\tbase = segments * points.length * 3;\n\n\t\tfor( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\n\t\t\t// select the normal of the vertex in the first line\n\t\t\tn1.x = normals[ j + 0 ];\n\t\t\tn1.y = normals[ j + 1 ];\n\t\t\tn1.z = normals[ j + 2 ];\n\n\t\t\t// select the normal of the vertex in the last line\n\t\t\tn2.x = normals[ base + j + 0 ];\n\t\t\tn2.y = normals[ base + j + 1 ];\n\t\t\tn2.z = normals[ base + j + 2 ];\n\n\t\t\t// average normals\n\t\t\tn.addVectors( n1, n2 ).normalize();\n\n\t\t\t// assign the new values to both normals\n\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\n\t\t} // next row\n\n\t}\n\n};\n\nTHREE.LatheBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.LatheBufferGeometry.prototype.constructor = THREE.LatheBufferGeometry;\n\n// File:src/extras/geometries/LatheGeometry.js\n\n/**\n * @author astrodud / http://astrodud.isgreat.org/\n * @author zz85 / https://github.com/zz85\n * @author bhouston / http://clara.io\n */\n\n// points - to create a closed torus, one must use a set of points\n//    like so: [ a, b, c, d, a ], see first is the same as last.\n// segments - the number of circumference segments to create\n// phiStart - the starting radian\n// phiLength - the radian (0 to 2PI) range of the lathed section\n//    2PI is a closed lathe, less than 2PI is a portion.\n\nTHREE.LatheGeometry = function ( points, segments, phiStart, phiLength ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'LatheGeometry';\n\n\tthis.parameters = {\n\t\tpoints: points,\n\t\tsegments: segments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength\n\t};\n\n\tthis.fromBufferGeometry( new THREE.LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n\tthis.mergeVertices();\n\n};\n\nTHREE.LatheGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.LatheGeometry.prototype.constructor = THREE.LatheGeometry;\n\n// File:src/extras/geometries/PlaneGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n */\n\nTHREE.PlaneGeometry = function ( width, height, widthSegments, heightSegments ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'PlaneGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments\n\t};\n\n\tthis.fromBufferGeometry( new THREE.PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\n};\n\nTHREE.PlaneGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.PlaneGeometry.prototype.constructor = THREE.PlaneGeometry;\n\n// File:src/extras/geometries/PlaneBufferGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n */\n\nTHREE.PlaneBufferGeometry = function ( width, height, widthSegments, heightSegments ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'PlaneBufferGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments\n\t};\n\n\tvar width_half = width / 2;\n\tvar height_half = height / 2;\n\n\tvar gridX = Math.floor( widthSegments ) || 1;\n\tvar gridY = Math.floor( heightSegments ) || 1;\n\n\tvar gridX1 = gridX + 1;\n\tvar gridY1 = gridY + 1;\n\n\tvar segment_width = width / gridX;\n\tvar segment_height = height / gridY;\n\n\tvar vertices = new Float32Array( gridX1 * gridY1 * 3 );\n\tvar normals = new Float32Array( gridX1 * gridY1 * 3 );\n\tvar uvs = new Float32Array( gridX1 * gridY1 * 2 );\n\n\tvar offset = 0;\n\tvar offset2 = 0;\n\n\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\n\t\tvar y = iy * segment_height - height_half;\n\n\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\tvar x = ix * segment_width - width_half;\n\n\t\t\tvertices[ offset ] = x;\n\t\t\tvertices[ offset + 1 ] = - y;\n\n\t\t\tnormals[ offset + 2 ] = 1;\n\n\t\t\tuvs[ offset2 ] = ix / gridX;\n\t\t\tuvs[ offset2 + 1 ] = 1 - ( iy / gridY );\n\n\t\t\toffset += 3;\n\t\t\toffset2 += 2;\n\n\t\t}\n\n\t}\n\n\toffset = 0;\n\n\tvar indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );\n\n\tfor ( var iy = 0; iy < gridY; iy ++ ) {\n\n\t\tfor ( var ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\tvar a = ix + gridX1 * iy;\n\t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\tindices[ offset ] = a;\n\t\t\tindices[ offset + 1 ] = b;\n\t\t\tindices[ offset + 2 ] = d;\n\n\t\t\tindices[ offset + 3 ] = b;\n\t\t\tindices[ offset + 4 ] = c;\n\t\t\tindices[ offset + 5 ] = d;\n\n\t\t\toffset += 6;\n\n\t\t}\n\n\t}\n\n\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\n};\n\nTHREE.PlaneBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.PlaneBufferGeometry.prototype.constructor = THREE.PlaneBufferGeometry;\n\n// File:src/extras/geometries/RingBufferGeometry.js\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nTHREE.RingBufferGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'RingBufferGeometry';\n\n\tthis.parameters = {\n\t\tinnerRadius: innerRadius,\n\t\touterRadius: outerRadius,\n\t\tthetaSegments: thetaSegments,\n\t\tphiSegments: phiSegments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tinnerRadius = innerRadius || 20;\n\touterRadius = outerRadius || 50;\n\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\n\t// these are used to calculate buffer length\n\tvar vertexCount = ( thetaSegments + 1 ) * ( phiSegments + 1 );\n\tvar indexCount = thetaSegments * phiSegments * 2 * 3;\n\n\t// buffers\n\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n\t// some helper variables\n\tvar index = 0, indexOffset = 0, segment;\n\tvar radius = innerRadius;\n\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\tvar vertex = new THREE.Vector3();\n\tvar uv = new THREE.Vector2();\n\tvar j, i;\n\n\t// generate vertices, normals and uvs\n\n\t// values are generate from the inside of the ring to the outside\n\n\tfor ( j = 0; j <= phiSegments; j ++ ) {\n\n\t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t// vertex\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\t\t\tnormals.setXYZ( index, 0, 0, 1 );\n\n\t\t\t// uv\n\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\t\t\tuvs.setXY( index, uv.x, uv.y );\n\n\t\t\t// increase index\n\t\t\tindex++;\n\n\t\t}\n\n\t\t// increase the radius for next row of vertices\n\t\tradius += radiusStep;\n\n\t}\n\n\t// generate indices\n\n\tfor ( j = 0; j < phiSegments; j ++ ) {\n\n\t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\tsegment = i + thetaSegmentLevel;\n\n\t\t\t// indices\n\t\t\tvar a = segment;\n\t\t\tvar b = segment + thetaSegments + 1;\n\t\t\tvar c = segment + thetaSegments + 2;\n\t\t\tvar d = segment + 1;\n\n\t\t\t// face one\n\t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\n\t\t\t// face two\n\t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', vertices );\n\tthis.addAttribute( 'normal', normals );\n\tthis.addAttribute( 'uv', uvs );\n\n};\n\nTHREE.RingBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.RingBufferGeometry.prototype.constructor = THREE.RingBufferGeometry;\n\n// File:src/extras/geometries/RingGeometry.js\n\n/**\n * @author Kaleb Murphy\n */\n\nTHREE.RingGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'RingGeometry';\n\n\tthis.parameters = {\n\t\tinnerRadius: innerRadius,\n\t\touterRadius: outerRadius,\n\t\tthetaSegments: thetaSegments,\n\t\tphiSegments: phiSegments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new THREE.RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\n};\n\nTHREE.RingGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.RingGeometry.prototype.constructor = THREE.RingGeometry;\n\n// File:src/extras/geometries/SphereGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.SphereGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'SphereGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tthis.fromBufferGeometry( new THREE.SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\n};\n\nTHREE.SphereGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.SphereGeometry.prototype.constructor = THREE.SphereGeometry;\n\n// File:src/extras/geometries/SphereBufferGeometry.js\n\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n * based on THREE.SphereGeometry\n */\n\nTHREE.SphereBufferGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'SphereBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tradius = radius || 50;\n\n\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n\tphiStart = phiStart !== undefined ? phiStart : 0;\n\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n\tvar thetaEnd = thetaStart + thetaLength;\n\n\tvar vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );\n\n\tvar positions = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n\tvar index = 0, vertices = [], normal = new THREE.Vector3();\n\n\tfor ( var y = 0; y <= heightSegments; y ++ ) {\n\n\t\tvar verticesRow = [];\n\n\t\tvar v = y / heightSegments;\n\n\t\tfor ( var x = 0; x <= widthSegments; x ++ ) {\n\n\t\t\tvar u = x / widthSegments;\n\n\t\t\tvar px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\tvar py = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\tvar pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\tnormal.set( px, py, pz ).normalize();\n\n\t\t\tpositions.setXYZ( index, px, py, pz );\n\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\t\t\tuvs.setXY( index, u, 1 - v );\n\n\t\t\tverticesRow.push( index );\n\n\t\t\tindex ++;\n\n\t\t}\n\n\t\tvertices.push( verticesRow );\n\n\t}\n\n\tvar indices = [];\n\n\tfor ( var y = 0; y < heightSegments; y ++ ) {\n\n\t\tfor ( var x = 0; x < widthSegments; x ++ ) {\n\n\t\t\tvar v1 = vertices[ y ][ x + 1 ];\n\t\t\tvar v2 = vertices[ y ][ x ];\n\t\t\tvar v3 = vertices[ y + 1 ][ x ];\n\t\t\tvar v4 = vertices[ y + 1 ][ x + 1 ];\n\n\t\t\tif ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );\n\t\t\tif ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );\n\n\t\t}\n\n\t}\n\n\tthis.setIndex( new ( positions.count > 65535 ? THREE.Uint32Attribute : THREE.Uint16Attribute )( indices, 1 ) );\n\tthis.addAttribute( 'position', positions );\n\tthis.addAttribute( 'normal', normals );\n\tthis.addAttribute( 'uv', uvs );\n\n\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\n\n};\n\nTHREE.SphereBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.SphereBufferGeometry.prototype.constructor = THREE.SphereBufferGeometry;\n\n// File:src/extras/geometries/TextGeometry.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author alteredq / http://alteredqualia.com/\n *\n * Text = 3D Text\n *\n * parameters = {\n *  font: <THREE.Font>, // font\n *\n *  size: <float>, // size of the text\n *  height: <float>, // thickness to extrude text\n *  curveSegments: <int>, // number of points on the curves\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into text bevel goes\n *  bevelSize: <float> // how far from text outline is bevel\n * }\n */\n\nTHREE.TextGeometry = function ( text, parameters ) {\n\n\tparameters = parameters || {};\n\n\tvar font = parameters.font;\n\n\tif ( font instanceof THREE.Font === false ) {\n\n\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n\t\treturn new THREE.Geometry();\n\n\t}\n\n\tvar shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );\n\n\t// translate parameters to ExtrudeGeometry API\n\n\tparameters.amount = parameters.height !== undefined ? parameters.height : 50;\n\n\t// defaults\n\n\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n\tTHREE.ExtrudeGeometry.call( this, shapes, parameters );\n\n\tthis.type = 'TextGeometry';\n\n};\n\nTHREE.TextGeometry.prototype = Object.create( THREE.ExtrudeGeometry.prototype );\nTHREE.TextGeometry.prototype.constructor = THREE.TextGeometry;\n\n// File:src/extras/geometries/TorusBufferGeometry.js\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nTHREE.TorusBufferGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'TorusBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\tradialSegments: radialSegments,\n\t\ttubularSegments: tubularSegments,\n\t\tarc: arc\n\t};\n\n\tradius = radius || 100;\n\ttube = tube || 40;\n\tradialSegments = Math.floor( radialSegments ) || 8;\n\ttubularSegments = Math.floor( tubularSegments ) || 6;\n\tarc = arc || Math.PI * 2;\n\n\t// used to calculate buffer length\n\tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n\tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\n\t// buffers\n\tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\n\tvar vertices = new Float32Array( vertexCount * 3 );\n\tvar normals = new Float32Array( vertexCount * 3 );\n\tvar uvs = new Float32Array( vertexCount * 2 );\n\n\t// offset variables\n\tvar vertexBufferOffset = 0;\n\tvar uvBufferOffset = 0;\n\tvar indexBufferOffset = 0;\n\n\t// helper variables\n\tvar center = new THREE.Vector3();\n\tvar vertex = new THREE.Vector3();\n\tvar normal = new THREE.Vector3();\n\n\tvar j, i;\n\n\t// generate vertices, normals and uvs\n\n\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\tvar u = i / tubularSegments * arc;\n\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t// vertex\n\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\tvertices[ vertexBufferOffset ] = vertex.x;\n\t\t\tvertices[ vertexBufferOffset + 1 ] = vertex.y;\n\t\t\tvertices[ vertexBufferOffset + 2 ] = vertex.z;\n\n\t\t\t// this vector is used to calculate the normal\n\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\tcenter.y = radius * Math.sin( u );\n\n\t\t\t// normal\n\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\tnormals[ vertexBufferOffset ] = normal.x;\n\t\t\tnormals[ vertexBufferOffset + 1 ] = normal.y;\n\t\t\tnormals[ vertexBufferOffset + 2 ] = normal.z;\n\n\t\t\t// uv\n\t\t\tuvs[ uvBufferOffset ] = i / tubularSegments;\n\t\t\tuvs[ uvBufferOffset + 1 ] = j / radialSegments;\n\n\t\t\t// update offsets\n\t\t\tvertexBufferOffset += 3;\n\t\t\tuvBufferOffset += 2;\n\n\t\t}\n\n\t}\n\n\t// generate indices\n\n\tfor ( j = 1; j <= radialSegments; j ++ ) {\n\n\t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t// indices\n\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t// face one\n\t\t\tindices[ indexBufferOffset ] = a;\n\t\t\tindices[ indexBufferOffset + 1 ] = b;\n\t\t\tindices[ indexBufferOffset + 2 ] = d;\n\n\t\t\t// face two\n\t\t\tindices[ indexBufferOffset + 3 ] = b;\n\t\t\tindices[ indexBufferOffset + 4 ] = c;\n\t\t\tindices[ indexBufferOffset + 5 ] = d;\n\n\t\t\t// update offset\n\t\t\tindexBufferOffset += 6;\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\n};\n\nTHREE.TorusBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.TorusBufferGeometry.prototype.constructor = THREE.TorusBufferGeometry;\n\n// File:src/extras/geometries/TorusGeometry.js\n\n/**\n * @author oosmoxiecode\n * @author mrdoob / http://mrdoob.com/\n * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888\n */\n\nTHREE.TorusGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'TorusGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\tradialSegments: radialSegments,\n\t\ttubularSegments: tubularSegments,\n\t\tarc: arc\n\t};\n\n\tthis.fromBufferGeometry( new THREE.TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\n};\n\nTHREE.TorusGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.TorusGeometry.prototype.constructor = THREE.TorusGeometry;\n\n// File:src/extras/geometries/TorusKnotBufferGeometry.js\n\n/**\n * @author Mugen87 / https://github.com/Mugen87\n *\n * see: http://www.blackpawn.com/texts/pqtorus/\n */\nTHREE.TorusKnotBufferGeometry = function ( radius, tube, tubularSegments, radialSegments, p, q ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'TorusKnotBufferGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\ttubularSegments: tubularSegments,\n\t\tradialSegments: radialSegments,\n\t\tp: p,\n\t\tq: q\n\t};\n\n\tradius = radius || 100;\n\ttube = tube || 40;\n\ttubularSegments = Math.floor( tubularSegments ) || 64;\n\tradialSegments = Math.floor( radialSegments ) || 8;\n\tp = p || 2;\n\tq = q || 3;\n\n\t// used to calculate buffer length\n\tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\n\tvar indexCount = radialSegments * tubularSegments * 2 * 3;\n\n\t// buffers\n\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\n\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\n\n\t// helper variables\n\tvar i, j, index = 0, indexOffset = 0;\n\n\tvar vertex = new THREE.Vector3();\n\tvar normal = new THREE.Vector3();\n\tvar uv = new THREE.Vector2();\n\n\tvar P1 = new THREE.Vector3();\n\tvar P2 = new THREE.Vector3();\n\n\tvar B = new THREE.Vector3();\n\tvar T = new THREE.Vector3();\n\tvar N = new THREE.Vector3();\n\n\t// generate vertices, normals and uvs\n\n\tfor ( i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\n\t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t// calculate orthonormal basis\n\n\t\tT.subVectors( P2, P1 );\n\t\tN.addVectors( P2, P1 );\n\t\tB.crossVectors( T, N );\n\t\tN.crossVectors( B, T );\n\n\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\tB.normalize();\n\t\tN.normalize();\n\n\t\tfor ( j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\tvar cx = - tube * Math.cos( v );\n\t\t\tvar cy = tube * Math.sin( v );\n\n\t\t\t// now calculate the final vertex position.\n\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\t// vertex\n\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\n\n\t\t\t// uv\n\t\t\tuv.x = i / tubularSegments;\n\t\t\tuv.y = j / radialSegments;\n\t\t\tuvs.setXY( index, uv.x, uv.y );\n\n\t\t\t// increase index\n\t\t\tindex ++;\n\n\t\t}\n\n\t}\n\n\t// generate indices\n\n\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t// indices\n\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t// face one\n\t\t\tindices.setX( indexOffset, a ); indexOffset++;\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n\t\t\t// face two\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\n\t\t\tindices.setX( indexOffset, c ); indexOffset++;\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\n\n\t\t}\n\n\t}\n\n\t// build geometry\n\n\tthis.setIndex( indices );\n\tthis.addAttribute( 'position', vertices );\n\tthis.addAttribute( 'normal', normals );\n\tthis.addAttribute( 'uv', uvs );\n\n\t// this function calculates the current position on the torus curve\n\n\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\tvar cu = Math.cos( u );\n\t\tvar su = Math.sin( u );\n\t\tvar quOverP = q / p * u;\n\t\tvar cs = Math.cos( quOverP );\n\n\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t}\n\n};\n\nTHREE.TorusKnotBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.TorusKnotBufferGeometry.prototype.constructor = THREE.TorusKnotBufferGeometry;\n\n// File:src/extras/geometries/TorusKnotGeometry.js\n\n/**\n * @author oosmoxiecode\n */\n\nTHREE.TorusKnotGeometry = function ( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'TorusKnotGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\ttubularSegments: tubularSegments,\n\t\tradialSegments: radialSegments,\n\t\tp: p,\n\t\tq: q\n\t};\n\n\tif( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );\n\n\tthis.fromBufferGeometry( new THREE.TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n\tthis.mergeVertices();\n\n};\n\nTHREE.TorusKnotGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.TorusKnotGeometry.prototype.constructor = THREE.TorusKnotGeometry;\n\n// File:src/extras/geometries/TubeGeometry.js\n\n/**\n * @author WestLangley / https://github.com/WestLangley\n * @author zz85 / https://github.com/zz85\n * @author miningold / https://github.com/miningold\n * @author jonobr1 / https://github.com/jonobr1\n *\n * Modified from the TorusKnotGeometry by @oosmoxiecode\n *\n * Creates a tube which extrudes along a 3d spline\n *\n * Uses parallel transport frames as described in\n * http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n */\n\nTHREE.TubeGeometry = function ( path, segments, radius, radialSegments, closed, taper ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'TubeGeometry';\n\n\tthis.parameters = {\n\t\tpath: path,\n\t\tsegments: segments,\n\t\tradius: radius,\n\t\tradialSegments: radialSegments,\n\t\tclosed: closed,\n\t\ttaper: taper\n\t};\n\n\tsegments = segments || 64;\n\tradius = radius || 1;\n\tradialSegments = radialSegments || 8;\n\tclosed = closed || false;\n\ttaper = taper || THREE.TubeGeometry.NoTaper;\n\n\tvar grid = [];\n\n\tvar scope = this,\n\n\t\ttangent,\n\t\tnormal,\n\t\tbinormal,\n\n\t\tnumpoints = segments + 1,\n\n\t\tu, v, r,\n\n\t\tcx, cy,\n\t\tpos, pos2 = new THREE.Vector3(),\n\t\ti, j,\n\t\tip, jp,\n\t\ta, b, c, d,\n\t\tuva, uvb, uvc, uvd;\n\n\tvar frames = new THREE.TubeGeometry.FrenetFrames( path, segments, closed ),\n\t\ttangents = frames.tangents,\n\t\tnormals = frames.normals,\n\t\tbinormals = frames.binormals;\n\n\t// proxy internals\n\tthis.tangents = tangents;\n\tthis.normals = normals;\n\tthis.binormals = binormals;\n\n\tfunction vert( x, y, z ) {\n\n\t\treturn scope.vertices.push( new THREE.Vector3( x, y, z ) ) - 1;\n\n\t}\n\n\t// construct the grid\n\n\tfor ( i = 0; i < numpoints; i ++ ) {\n\n\t\tgrid[ i ] = [];\n\n\t\tu = i / ( numpoints - 1 );\n\n\t\tpos = path.getPointAt( u );\n\n\t\ttangent = tangents[ i ];\n\t\tnormal = normals[ i ];\n\t\tbinormal = binormals[ i ];\n\n\t\tr = radius * taper( u );\n\n\t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\n\t\t\tv = j / radialSegments * 2 * Math.PI;\n\n\t\t\tcx = - r * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\n\t\t\tcy = r * Math.sin( v );\n\n\t\t\tpos2.copy( pos );\n\t\t\tpos2.x += cx * normal.x + cy * binormal.x;\n\t\t\tpos2.y += cx * normal.y + cy * binormal.y;\n\t\t\tpos2.z += cx * normal.z + cy * binormal.z;\n\n\t\t\tgrid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );\n\n\t\t}\n\n\t}\n\n\n\t// construct the mesh\n\n\tfor ( i = 0; i < segments; i ++ ) {\n\n\t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\n\t\t\tip = ( closed ) ? ( i + 1 ) % segments : i + 1;\n\t\t\tjp = ( j + 1 ) % radialSegments;\n\n\t\t\ta = grid[ i ][ j ];\t\t// *** NOT NECESSARILY PLANAR ! ***\n\t\t\tb = grid[ ip ][ j ];\n\t\t\tc = grid[ ip ][ jp ];\n\t\t\td = grid[ i ][ jp ];\n\n\t\t\tuva = new THREE.Vector2( i / segments, j / radialSegments );\n\t\t\tuvb = new THREE.Vector2( ( i + 1 ) / segments, j / radialSegments );\n\t\t\tuvc = new THREE.Vector2( ( i + 1 ) / segments, ( j + 1 ) / radialSegments );\n\t\t\tuvd = new THREE.Vector2( i / segments, ( j + 1 ) / radialSegments );\n\n\t\t\tthis.faces.push( new THREE.Face3( a, b, d ) );\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\n\n\t\t\tthis.faces.push( new THREE.Face3( b, c, d ) );\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\n\n\t\t}\n\n\t}\n\n\tthis.computeFaceNormals();\n\tthis.computeVertexNormals();\n\n};\n\nTHREE.TubeGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.TubeGeometry.prototype.constructor = THREE.TubeGeometry;\n\nTHREE.TubeGeometry.NoTaper = function ( u ) {\n\n\treturn 1;\n\n};\n\nTHREE.TubeGeometry.SinusoidalTaper = function ( u ) {\n\n\treturn Math.sin( Math.PI * u );\n\n};\n\n// For computing of Frenet frames, exposing the tangents, normals and binormals the spline\nTHREE.TubeGeometry.FrenetFrames = function ( path, segments, closed ) {\n\n\tvar\tnormal = new THREE.Vector3(),\n\n\t\ttangents = [],\n\t\tnormals = [],\n\t\tbinormals = [],\n\n\t\tvec = new THREE.Vector3(),\n\t\tmat = new THREE.Matrix4(),\n\n\t\tnumpoints = segments + 1,\n\t\ttheta,\n\t\tsmallest,\n\n\t\ttx, ty, tz,\n\t\ti, u;\n\n\n\t// expose internals\n\tthis.tangents = tangents;\n\tthis.normals = normals;\n\tthis.binormals = binormals;\n\n\t// compute the tangent vectors for each segment on the path\n\n\tfor ( i = 0; i < numpoints; i ++ ) {\n\n\t\tu = i / ( numpoints - 1 );\n\n\t\ttangents[ i ] = path.getTangentAt( u );\n\t\ttangents[ i ].normalize();\n\n\t}\n\n\tinitialNormal3();\n\n\t/*\n\tfunction initialNormal1(lastBinormal) {\n\t\t// fixed start binormal. Has dangers of 0 vectors\n\t\tnormals[ 0 ] = new THREE.Vector3();\n\t\tbinormals[ 0 ] = new THREE.Vector3();\n\t\tif (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );\n\t\tnormals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n\t}\n\n\tfunction initialNormal2() {\n\n\t\t// This uses the Frenet-Serret formula for deriving binormal\n\t\tvar t2 = path.getTangentAt( epsilon );\n\n\t\tnormals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();\n\t\tbinormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\t\tnormals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n\n\t}\n\t*/\n\n\tfunction initialNormal3() {\n\n\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t// and in the direction of the smallest tangent xyz component\n\n\t\tnormals[ 0 ] = new THREE.Vector3();\n\t\tbinormals[ 0 ] = new THREE.Vector3();\n\t\tsmallest = Number.MAX_VALUE;\n\t\ttx = Math.abs( tangents[ 0 ].x );\n\t\tty = Math.abs( tangents[ 0 ].y );\n\t\ttz = Math.abs( tangents[ 0 ].z );\n\n\t\tif ( tx <= smallest ) {\n\n\t\t\tsmallest = tx;\n\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t}\n\n\t\tif ( ty <= smallest ) {\n\n\t\t\tsmallest = ty;\n\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t}\n\n\t\tif ( tz <= smallest ) {\n\n\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t}\n\n\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\t}\n\n\n\t// compute the slowly-varying normal and binormal vectors for each segment on the path\n\n\tfor ( i = 1; i < numpoints; i ++ ) {\n\n\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\tvec.normalize();\n\n\t\t\ttheta = Math.acos( THREE.Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t}\n\n\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t}\n\n\n\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\tif ( closed ) {\n\n\t\ttheta = Math.acos( THREE.Math.clamp( normals[ 0 ].dot( normals[ numpoints - 1 ] ), - 1, 1 ) );\n\t\ttheta /= ( numpoints - 1 );\n\n\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints - 1 ] ) ) > 0 ) {\n\n\t\t\ttheta = - theta;\n\n\t\t}\n\n\t\tfor ( i = 1; i < numpoints; i ++ ) {\n\n\t\t\t// twist a little...\n\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t}\n\n\t}\n\n};\n\n// File:src/extras/geometries/PolyhedronGeometry.js\n\n/**\n * @author clockworkgeek / https://github.com/clockworkgeek\n * @author timothypratley / https://github.com/timothypratley\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nTHREE.PolyhedronGeometry = function ( vertices, indices, radius, detail ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'PolyhedronGeometry';\n\n\tthis.parameters = {\n\t\tvertices: vertices,\n\t\tindices: indices,\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n\tradius = radius || 1;\n\tdetail = detail || 0;\n\n\tvar that = this;\n\n\tfor ( var i = 0, l = vertices.length; i < l; i += 3 ) {\n\n\t\tprepare( new THREE.Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );\n\n\t}\n\n\tvar p = this.vertices;\n\n\tvar faces = [];\n\n\tfor ( var i = 0, j = 0, l = indices.length; i < l; i += 3, j ++ ) {\n\n\t\tvar v1 = p[ indices[ i ] ];\n\t\tvar v2 = p[ indices[ i + 1 ] ];\n\t\tvar v3 = p[ indices[ i + 2 ] ];\n\n\t\tfaces[ j ] = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n\n\t}\n\n\tvar centroid = new THREE.Vector3();\n\n\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\tsubdivide( faces[ i ], detail );\n\n\t}\n\n\n\t// Handle case when face straddles the seam\n\n\tfor ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {\n\n\t\tvar uvs = this.faceVertexUvs[ 0 ][ i ];\n\n\t\tvar x0 = uvs[ 0 ].x;\n\t\tvar x1 = uvs[ 1 ].x;\n\t\tvar x2 = uvs[ 2 ].x;\n\n\t\tvar max = Math.max( x0, x1, x2 );\n\t\tvar min = Math.min( x0, x1, x2 );\n\n\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\tif ( x0 < 0.2 ) uvs[ 0 ].x += 1;\n\t\t\tif ( x1 < 0.2 ) uvs[ 1 ].x += 1;\n\t\t\tif ( x2 < 0.2 ) uvs[ 2 ].x += 1;\n\n\t\t}\n\n\t}\n\n\n\t// Apply radius\n\n\tfor ( var i = 0, l = this.vertices.length; i < l; i ++ ) {\n\n\t\tthis.vertices[ i ].multiplyScalar( radius );\n\n\t}\n\n\n\t// Merge vertices\n\n\tthis.mergeVertices();\n\n\tthis.computeFaceNormals();\n\n\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\n\n\n\t// Project vector onto sphere's surface\n\n\tfunction prepare( vector ) {\n\n\t\tvar vertex = vector.normalize().clone();\n\t\tvertex.index = that.vertices.push( vertex ) - 1;\n\n\t\t// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.\n\n\t\tvar u = azimuth( vector ) / 2 / Math.PI + 0.5;\n\t\tvar v = inclination( vector ) / Math.PI + 0.5;\n\t\tvertex.uv = new THREE.Vector2( u, 1 - v );\n\n\t\treturn vertex;\n\n\t}\n\n\n\t// Approximate a curved face with recursively sub-divided triangles.\n\n\tfunction make( v1, v2, v3 ) {\n\n\t\tvar face = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n\t\tthat.faces.push( face );\n\n\t\tcentroid.copy( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );\n\n\t\tvar azi = azimuth( centroid );\n\n\t\tthat.faceVertexUvs[ 0 ].push( [\n\t\t\tcorrectUV( v1.uv, v1, azi ),\n\t\t\tcorrectUV( v2.uv, v2, azi ),\n\t\t\tcorrectUV( v3.uv, v3, azi )\n\t\t] );\n\n\t}\n\n\n\t// Analytically subdivide a face to the required detail level.\n\n\tfunction subdivide( face, detail ) {\n\n\t\tvar cols = Math.pow( 2, detail );\n\t\tvar a = prepare( that.vertices[ face.a ] );\n\t\tvar b = prepare( that.vertices[ face.b ] );\n\t\tvar c = prepare( that.vertices[ face.c ] );\n\t\tvar v = [];\n\n\t\t// Construct all of the vertices for this subdivision.\n\n\t\tfor ( var i = 0 ; i <= cols; i ++ ) {\n\n\t\t\tv[ i ] = [];\n\n\t\t\tvar aj = prepare( a.clone().lerp( c, i / cols ) );\n\t\t\tvar bj = prepare( b.clone().lerp( c, i / cols ) );\n\t\t\tvar rows = cols - i;\n\n\t\t\tfor ( var j = 0; j <= rows; j ++ ) {\n\n\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Construct all of the faces.\n\n\t\tfor ( var i = 0; i < cols ; i ++ ) {\n\n\t\t\tfor ( var j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n\t\t\t\tvar k = Math.floor( j / 2 );\n\n\t\t\t\tif ( j % 2 === 0 ) {\n\n\t\t\t\t\tmake(\n\t\t\t\t\t\tv[ i ][ k + 1 ],\n\t\t\t\t\t\tv[ i + 1 ][ k ],\n\t\t\t\t\t\tv[ i ][ k ]\n\t\t\t\t\t);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmake(\n\t\t\t\t\t\tv[ i ][ k + 1 ],\n\t\t\t\t\t\tv[ i + 1 ][ k + 1 ],\n\t\t\t\t\t\tv[ i + 1 ][ k ]\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\tfunction azimuth( vector ) {\n\n\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t}\n\n\n\t// Angle above the XZ plane.\n\n\tfunction inclination( vector ) {\n\n\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t}\n\n\n\t// Texture fixing helper. Spheres have some odd behaviours.\n\n\tfunction correctUV( uv, vector, azimuth ) {\n\n\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new THREE.Vector2( uv.x - 1, uv.y );\n\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new THREE.Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );\n\t\treturn uv.clone();\n\n\t}\n\n\n};\n\nTHREE.PolyhedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.PolyhedronGeometry.prototype.constructor = THREE.PolyhedronGeometry;\n\n// File:src/extras/geometries/DodecahedronGeometry.js\n\n/**\n * @author Abe Pazos / https://hamoid.com\n */\n\nTHREE.DodecahedronGeometry = function ( radius, detail ) {\n\n\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\tvar r = 1 / t;\n\n\tvar vertices = [\n\n\t\t// (±1, ±1, ±1)\n\t\t- 1, - 1, - 1,    - 1, - 1,  1,\n\t\t- 1,  1, - 1,    - 1,  1,  1,\n\t\t 1, - 1, - 1,     1, - 1,  1,\n\t\t 1,  1, - 1,     1,  1,  1,\n\n\t\t// (0, ±1/φ, ±φ)\n\t\t 0, - r, - t,     0, - r,  t,\n\t\t 0,  r, - t,     0,  r,  t,\n\n\t\t// (±1/φ, ±φ, 0)\n\t\t- r, - t,  0,    - r,  t,  0,\n\t\t r, - t,  0,     r,  t,  0,\n\n\t\t// (±φ, 0, ±1/φ)\n\t\t- t,  0, - r,     t,  0, - r,\n\t\t- t,  0,  r,     t,  0,  r\n\t];\n\n\tvar indices = [\n\t\t 3, 11,  7,      3,  7, 15,      3, 15, 13,\n\t\t 7, 19, 17,      7, 17,  6,      7,  6, 15,\n\t\t17,  4,  8,     17,  8, 10,     17, 10,  6,\n\t\t 8,  0, 16,      8, 16,  2,      8,  2, 10,\n\t\t 0, 12,  1,      0,  1, 18,      0, 18, 16,\n\t\t 6, 10,  2,      6,  2, 13,      6, 13, 15,\n\t\t 2, 16, 18,      2, 18,  3,      2,  3, 13,\n\t\t18,  1,  9,     18,  9, 11,     18, 11,  3,\n\t\t 4, 14, 12,      4, 12,  0,      4,  0,  8,\n\t\t11,  9,  5,     11,  5, 19,     11, 19,  7,\n\t\t19,  5, 14,     19, 14,  4,     19,  4, 17,\n\t\t 1, 12, 14,      1, 14,  5,      1,  5,  9\n\t];\n\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'DodecahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n};\n\nTHREE.DodecahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\nTHREE.DodecahedronGeometry.prototype.constructor = THREE.DodecahedronGeometry;\n\n// File:src/extras/geometries/IcosahedronGeometry.js\n\n/**\n * @author timothypratley / https://github.com/timothypratley\n */\n\nTHREE.IcosahedronGeometry = function ( radius, detail ) {\n\n\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\tvar vertices = [\n\t\t- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,\n\t\t 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,\n\t\t t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1\n\t];\n\n\tvar indices = [\n\t\t 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,\n\t\t 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,\n\t\t 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,\n\t\t 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1\n\t];\n\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'IcosahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n};\n\nTHREE.IcosahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\nTHREE.IcosahedronGeometry.prototype.constructor = THREE.IcosahedronGeometry;\n\n// File:src/extras/geometries/OctahedronGeometry.js\n\n/**\n * @author timothypratley / https://github.com/timothypratley\n */\n\nTHREE.OctahedronGeometry = function ( radius, detail ) {\n\n\tvar vertices = [\n\t\t1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1\n\t];\n\n\tvar indices = [\n\t\t0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2\n\t];\n\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'OctahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n};\n\nTHREE.OctahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\nTHREE.OctahedronGeometry.prototype.constructor = THREE.OctahedronGeometry;\n\n// File:src/extras/geometries/TetrahedronGeometry.js\n\n/**\n * @author timothypratley / https://github.com/timothypratley\n */\n\nTHREE.TetrahedronGeometry = function ( radius, detail ) {\n\n\tvar vertices = [\n\t\t 1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1\n\t];\n\n\tvar indices = [\n\t\t 2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1\n\t];\n\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'TetrahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n};\n\nTHREE.TetrahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\nTHREE.TetrahedronGeometry.prototype.constructor = THREE.TetrahedronGeometry;\n\n// File:src/extras/geometries/ParametricGeometry.js\n\n/**\n * @author zz85 / https://github.com/zz85\n * Parametric Surfaces Geometry\n * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n *\n * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );\n *\n */\n\nTHREE.ParametricGeometry = function ( func, slices, stacks ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'ParametricGeometry';\n\n\tthis.parameters = {\n\t\tfunc: func,\n\t\tslices: slices,\n\t\tstacks: stacks\n\t};\n\n\tvar verts = this.vertices;\n\tvar faces = this.faces;\n\tvar uvs = this.faceVertexUvs[ 0 ];\n\n\tvar i, j, p;\n\tvar u, v;\n\n\tvar sliceCount = slices + 1;\n\n\tfor ( i = 0; i <= stacks; i ++ ) {\n\n\t\tv = i / stacks;\n\n\t\tfor ( j = 0; j <= slices; j ++ ) {\n\n\t\t\tu = j / slices;\n\n\t\t\tp = func( u, v );\n\t\t\tverts.push( p );\n\n\t\t}\n\n\t}\n\n\tvar a, b, c, d;\n\tvar uva, uvb, uvc, uvd;\n\n\tfor ( i = 0; i < stacks; i ++ ) {\n\n\t\tfor ( j = 0; j < slices; j ++ ) {\n\n\t\t\ta = i * sliceCount + j;\n\t\t\tb = i * sliceCount + j + 1;\n\t\t\tc = ( i + 1 ) * sliceCount + j + 1;\n\t\t\td = ( i + 1 ) * sliceCount + j;\n\n\t\t\tuva = new THREE.Vector2( j / slices, i / stacks );\n\t\t\tuvb = new THREE.Vector2( ( j + 1 ) / slices, i / stacks );\n\t\t\tuvc = new THREE.Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );\n\t\t\tuvd = new THREE.Vector2( j / slices, ( i + 1 ) / stacks );\n\n\t\t\tfaces.push( new THREE.Face3( a, b, d ) );\n\t\t\tuvs.push( [ uva, uvb, uvd ] );\n\n\t\t\tfaces.push( new THREE.Face3( b, c, d ) );\n\t\t\tuvs.push( [ uvb.clone(), uvc, uvd.clone() ] );\n\n\t\t}\n\n\t}\n\n\t// console.log(this);\n\n\t// magic bullet\n\t// var diff = this.mergeVertices();\n\t// console.log('removed ', diff, ' vertices by merging');\n\n\tthis.computeFaceNormals();\n\tthis.computeVertexNormals();\n\n};\n\nTHREE.ParametricGeometry.prototype = Object.create( THREE.Geometry.prototype );\nTHREE.ParametricGeometry.prototype.constructor = THREE.ParametricGeometry;\n\n// File:src/extras/geometries/WireframeGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.WireframeGeometry = function ( geometry ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tvar edge = [ 0, 0 ], hash = {};\n\n\tfunction sortFunction( a, b ) {\n\n\t\treturn a - b;\n\n\t}\n\n\tvar keys = [ 'a', 'b', 'c' ];\n\n\tif ( geometry instanceof THREE.Geometry ) {\n\n\t\tvar vertices = geometry.vertices;\n\t\tvar faces = geometry.faces;\n\t\tvar numEdges = 0;\n\n\t\t// allocate maximal size\n\t\tvar edges = new Uint32Array( 6 * faces.length );\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\tedge[ 0 ] = face[ keys[ j ] ];\n\t\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\tedge.sort( sortFunction );\n\n\t\t\t\tvar key = edge.toString();\n\n\t\t\t\tif ( hash[ key ] === undefined ) {\n\n\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n\t\t\t\t\thash[ key ] = true;\n\t\t\t\t\tnumEdges ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\n\t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\n\t\t\t\tvar vertex = vertices[ edges [ 2 * i + j ] ];\n\n\t\t\t\tvar index = 6 * i + 3 * j;\n\t\t\t\tcoords[ index + 0 ] = vertex.x;\n\t\t\t\tcoords[ index + 1 ] = vertex.y;\n\t\t\t\tcoords[ index + 2 ] = vertex.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\n\n\t} else if ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\tif ( geometry.index !== null ) {\n\n\t\t\t// Indexed BufferGeometry\n\n\t\t\tvar indices = geometry.index.array;\n\t\t\tvar vertices = geometry.attributes.position;\n\t\t\tvar groups = geometry.groups;\n\t\t\tvar numEdges = 0;\n\n\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\tgeometry.addGroup( 0, indices.length );\n\n\t\t\t}\n\n\t\t\t// allocate maximal size\n\t\t\tvar edges = new Uint32Array( 2 * indices.length );\n\n\t\t\tfor ( var o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\tvar group = groups[ o ];\n\n\t\t\t\tvar start = group.start;\n\t\t\t\tvar count = group.count;\n\n\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n\t\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\tedge[ 0 ] = indices[ i + j ];\n\t\t\t\t\t\tedge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];\n\t\t\t\t\t\tedge.sort( sortFunction );\n\n\t\t\t\t\t\tvar key = edge.toString();\n\n\t\t\t\t\t\tif ( hash[ key ] === undefined ) {\n\n\t\t\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n\t\t\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n\t\t\t\t\t\t\thash[ key ] = true;\n\t\t\t\t\t\t\tnumEdges ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n\t\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\n\t\t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\n\t\t\t\t\tvar index = 6 * i + 3 * j;\n\t\t\t\t\tvar index2 = edges[ 2 * i + j ];\n\n\t\t\t\t\tcoords[ index + 0 ] = vertices.getX( index2 );\n\t\t\t\t\tcoords[ index + 1 ] = vertices.getY( index2 );\n\t\t\t\t\tcoords[ index + 2 ] = vertices.getZ( index2 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\n\n\t\t} else {\n\n\t\t\t// non-indexed BufferGeometry\n\n\t\t\tvar vertices = geometry.attributes.position.array;\n\t\t\tvar numEdges = vertices.length / 3;\n\t\t\tvar numTris = numEdges / 3;\n\n\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n\t\t\tfor ( var i = 0, l = numTris; i < l; i ++ ) {\n\n\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\tvar index = 18 * i + 6 * j;\n\n\t\t\t\t\tvar index1 = 9 * i + 3 * j;\n\t\t\t\t\tcoords[ index + 0 ] = vertices[ index1 ];\n\t\t\t\t\tcoords[ index + 1 ] = vertices[ index1 + 1 ];\n\t\t\t\t\tcoords[ index + 2 ] = vertices[ index1 + 2 ];\n\n\t\t\t\t\tvar index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );\n\t\t\t\t\tcoords[ index + 3 ] = vertices[ index2 ];\n\t\t\t\t\tcoords[ index + 4 ] = vertices[ index2 + 1 ];\n\t\t\t\t\tcoords[ index + 5 ] = vertices[ index2 + 2 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\n\n\t\t}\n\n\t}\n\n};\n\nTHREE.WireframeGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\nTHREE.WireframeGeometry.prototype.constructor = THREE.WireframeGeometry;\n\n// File:src/extras/helpers/AxisHelper.js\n\n/**\n * @author sroucheray / http://sroucheray.org/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.AxisHelper = function ( size ) {\n\n\tsize = size || 1;\n\n\tvar vertices = new Float32Array( [\n\t\t0, 0, 0,  size, 0, 0,\n\t\t0, 0, 0,  0, size, 0,\n\t\t0, 0, 0,  0, 0, size\n\t] );\n\n\tvar colors = new Float32Array( [\n\t\t1, 0, 0,  1, 0.6, 0,\n\t\t0, 1, 0,  0.6, 1, 0,\n\t\t0, 0, 1,  0, 0.6, 1\n\t] );\n\n\tvar geometry = new THREE.BufferGeometry();\n\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\tgeometry.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ) );\n\n\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\n\n\tTHREE.LineSegments.call( this, geometry, material );\n\n};\n\nTHREE.AxisHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.AxisHelper.prototype.constructor = THREE.AxisHelper;\n\n// File:src/extras/helpers/ArrowHelper.js\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n * @author zz85 / http://github.com/zz85\n * @author bhouston / http://clara.io\n *\n * Creates an arrow for visualizing directions\n *\n * Parameters:\n *  dir - Vector3\n *  origin - Vector3\n *  length - Number\n *  color - color in hex value\n *  headLength - Number\n *  headWidth - Number\n */\n\nTHREE.ArrowHelper = ( function () {\n\n\tvar lineGeometry = new THREE.BufferGeometry();\n\tlineGeometry.addAttribute( 'position', new THREE.Float32Attribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\tvar coneGeometry = new THREE.CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n\tconeGeometry.translate( 0, - 0.5, 0 );\n\n\treturn function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tTHREE.Object3D.call( this );\n\n\t\tif ( color === undefined ) color = 0xffff00;\n\t\tif ( length === undefined ) length = 1;\n\t\tif ( headLength === undefined ) headLength = 0.2 * length;\n\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\t\tthis.position.copy( origin );\n\n\t\tthis.line = new THREE.Line( lineGeometry, new THREE.LineBasicMaterial( { color: color } ) );\n\t\tthis.line.matrixAutoUpdate = false;\n\t\tthis.add( this.line );\n\n\t\tthis.cone = new THREE.Mesh( coneGeometry, new THREE.MeshBasicMaterial( { color: color } ) );\n\t\tthis.cone.matrixAutoUpdate = false;\n\t\tthis.add( this.cone );\n\n\t\tthis.setDirection( dir );\n\t\tthis.setLength( length, headLength, headWidth );\n\n\t};\n\n}() );\n\nTHREE.ArrowHelper.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.ArrowHelper.prototype.constructor = THREE.ArrowHelper;\n\nTHREE.ArrowHelper.prototype.setDirection = ( function () {\n\n\tvar axis = new THREE.Vector3();\n\tvar radians;\n\n\treturn function setDirection( dir ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t} else if ( dir.y < - 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t} else {\n\n\t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\tradians = Math.acos( dir.y );\n\n\t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\n\n\t\t}\n\n\t};\n\n}() );\n\nTHREE.ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\n\tif ( headLength === undefined ) headLength = 0.2 * length;\n\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\tthis.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );\n\tthis.line.updateMatrix();\n\n\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\tthis.cone.position.y = length;\n\tthis.cone.updateMatrix();\n\n};\n\nTHREE.ArrowHelper.prototype.setColor = function ( color ) {\n\n\tthis.line.material.color.copy( color );\n\tthis.cone.material.color.copy( color );\n\n};\n\n// File:src/extras/helpers/BoxHelper.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.BoxHelper = function ( object, color ) {\n\t\n\tif ( color === undefined ) color = 0xffff00;\n\n\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\tvar positions = new Float32Array( 8 * 3 );\n\n\tvar geometry = new THREE.BufferGeometry();\n\tgeometry.setIndex( new THREE.BufferAttribute( indices, 1 ) );\n\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\n\n\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color } ) );\n\n\tif ( object !== undefined ) {\n\n\t\tthis.update( object );\n\n\t}\n\n};\n\nTHREE.BoxHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.BoxHelper.prototype.constructor = THREE.BoxHelper;\n\nTHREE.BoxHelper.prototype.update = ( function () {\n\n\tvar box = new THREE.Box3();\n\n\treturn function update( object ) {\n\n\t\tif ( object instanceof THREE.Box3 ) {\n\n\t\t\tbox.copy( object );\n\n\t\t} else {\n\n\t\t\tbox.setFromObject( object );\n\n\t\t}\n\n\t\tif ( box.isEmpty() ) return;\n\n\t\tvar min = box.min;\n\t\tvar max = box.max;\n\n\t\t/*\n\t\t  5____4\n\t\t1/___0/|\n\t\t| 6__|_7\n\t\t2/___3/\n\n\t\t0: max.x, max.y, max.z\n\t\t1: min.x, max.y, max.z\n\t\t2: min.x, min.y, max.z\n\t\t3: max.x, min.y, max.z\n\t\t4: max.x, max.y, min.z\n\t\t5: min.x, max.y, min.z\n\t\t6: min.x, min.y, min.z\n\t\t7: max.x, min.y, min.z\n\t\t*/\n\n\t\tvar position = this.geometry.attributes.position;\n\t\tvar array = position.array;\n\n\t\tarray[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;\n\t\tarray[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;\n\t\tarray[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;\n\t\tarray[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\tposition.needsUpdate = true;\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t};\n\n} )();\n\n// File:src/extras/helpers/BoundingBoxHelper.js\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n */\n\n// a helper to show the world-axis-aligned bounding box for an object\n\nTHREE.BoundingBoxHelper = function ( object, hex ) {\n\n\tvar color = ( hex !== undefined ) ? hex : 0x888888;\n\n\tthis.object = object;\n\n\tthis.box = new THREE.Box3();\n\n\tTHREE.Mesh.call( this, new THREE.BoxGeometry( 1, 1, 1 ), new THREE.MeshBasicMaterial( { color: color, wireframe: true } ) );\n\n};\n\nTHREE.BoundingBoxHelper.prototype = Object.create( THREE.Mesh.prototype );\nTHREE.BoundingBoxHelper.prototype.constructor = THREE.BoundingBoxHelper;\n\nTHREE.BoundingBoxHelper.prototype.update = function () {\n\n\tthis.box.setFromObject( this.object );\n\n\tthis.box.size( this.scale );\n\n\tthis.box.center( this.position );\n\n};\n\n// File:src/extras/helpers/CameraHelper.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n *\t- shows frustum, line of sight and up of the camera\n *\t- suitable for fast updates\n * \t- based on frustum visualization in lightgl.js shadowmap example\n *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n */\n\nTHREE.CameraHelper = function ( camera ) {\n\n\tvar geometry = new THREE.Geometry();\n\tvar material = new THREE.LineBasicMaterial( { color: 0xffffff, vertexColors: THREE.FaceColors } );\n\n\tvar pointMap = {};\n\n\t// colors\n\n\tvar hexFrustum = 0xffaa00;\n\tvar hexCone = 0xff0000;\n\tvar hexUp = 0x00aaff;\n\tvar hexTarget = 0xffffff;\n\tvar hexCross = 0x333333;\n\n\t// near\n\n\taddLine( \"n1\", \"n2\", hexFrustum );\n\taddLine( \"n2\", \"n4\", hexFrustum );\n\taddLine( \"n4\", \"n3\", hexFrustum );\n\taddLine( \"n3\", \"n1\", hexFrustum );\n\n\t// far\n\n\taddLine( \"f1\", \"f2\", hexFrustum );\n\taddLine( \"f2\", \"f4\", hexFrustum );\n\taddLine( \"f4\", \"f3\", hexFrustum );\n\taddLine( \"f3\", \"f1\", hexFrustum );\n\n\t// sides\n\n\taddLine( \"n1\", \"f1\", hexFrustum );\n\taddLine( \"n2\", \"f2\", hexFrustum );\n\taddLine( \"n3\", \"f3\", hexFrustum );\n\taddLine( \"n4\", \"f4\", hexFrustum );\n\n\t// cone\n\n\taddLine( \"p\", \"n1\", hexCone );\n\taddLine( \"p\", \"n2\", hexCone );\n\taddLine( \"p\", \"n3\", hexCone );\n\taddLine( \"p\", \"n4\", hexCone );\n\n\t// up\n\n\taddLine( \"u1\", \"u2\", hexUp );\n\taddLine( \"u2\", \"u3\", hexUp );\n\taddLine( \"u3\", \"u1\", hexUp );\n\n\t// target\n\n\taddLine( \"c\", \"t\", hexTarget );\n\taddLine( \"p\", \"c\", hexCross );\n\n\t// cross\n\n\taddLine( \"cn1\", \"cn2\", hexCross );\n\taddLine( \"cn3\", \"cn4\", hexCross );\n\n\taddLine( \"cf1\", \"cf2\", hexCross );\n\taddLine( \"cf3\", \"cf4\", hexCross );\n\n\tfunction addLine( a, b, hex ) {\n\n\t\taddPoint( a, hex );\n\t\taddPoint( b, hex );\n\n\t}\n\n\tfunction addPoint( id, hex ) {\n\n\t\tgeometry.vertices.push( new THREE.Vector3() );\n\t\tgeometry.colors.push( new THREE.Color( hex ) );\n\n\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\tpointMap[ id ] = [];\n\n\t\t}\n\n\t\tpointMap[ id ].push( geometry.vertices.length - 1 );\n\n\t}\n\n\tTHREE.LineSegments.call( this, geometry, material );\n\n\tthis.camera = camera;\n\tif( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\n\tthis.matrix = camera.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.pointMap = pointMap;\n\n\tthis.update();\n\n};\n\nTHREE.CameraHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.CameraHelper.prototype.constructor = THREE.CameraHelper;\n\nTHREE.CameraHelper.prototype.update = function () {\n\n\tvar geometry, pointMap;\n\n\tvar vector = new THREE.Vector3();\n\tvar camera = new THREE.Camera();\n\n\tfunction setPoint( point, x, y, z ) {\n\n\t\tvector.set( x, y, z ).unproject( camera );\n\n\t\tvar points = pointMap[ point ];\n\n\t\tif ( points !== undefined ) {\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tgeometry.vertices[ points[ i ] ].copy( vector );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn function update() {\n\n\t\tgeometry = this.geometry;\n\t\tpointMap = this.pointMap;\n\n\t\tvar w = 1, h = 1;\n\n\t\t// we need just camera projection matrix\n\t\t// world matrix must be identity\n\n\t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\n\n\t\t// center / target\n\n\t\tsetPoint( \"c\", 0, 0, - 1 );\n\t\tsetPoint( \"t\", 0, 0,  1 );\n\n\t\t// near\n\n\t\tsetPoint( \"n1\", - w, - h, - 1 );\n\t\tsetPoint( \"n2\",   w, - h, - 1 );\n\t\tsetPoint( \"n3\", - w,   h, - 1 );\n\t\tsetPoint( \"n4\",   w,   h, - 1 );\n\n\t\t// far\n\n\t\tsetPoint( \"f1\", - w, - h, 1 );\n\t\tsetPoint( \"f2\",   w, - h, 1 );\n\t\tsetPoint( \"f3\", - w,   h, 1 );\n\t\tsetPoint( \"f4\",   w,   h, 1 );\n\n\t\t// up\n\n\t\tsetPoint( \"u1\",   w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( \"u2\", - w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( \"u3\",         0, h * 2,   - 1 );\n\n\t\t// cross\n\n\t\tsetPoint( \"cf1\", - w,   0, 1 );\n\t\tsetPoint( \"cf2\",   w,   0, 1 );\n\t\tsetPoint( \"cf3\",   0, - h, 1 );\n\t\tsetPoint( \"cf4\",   0,   h, 1 );\n\n\t\tsetPoint( \"cn1\", - w,   0, - 1 );\n\t\tsetPoint( \"cn2\",   w,   0, - 1 );\n\t\tsetPoint( \"cn3\",   0, - h, - 1 );\n\t\tsetPoint( \"cn4\",   0,   h, - 1 );\n\n\t\tgeometry.verticesNeedUpdate = true;\n\n\t};\n\n}();\n\n// File:src/extras/helpers/DirectionalLightHelper.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.DirectionalLightHelper = function ( light, size ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tif ( size === undefined ) size = 1;\n\n\tvar geometry = new THREE.BufferGeometry();\n\tgeometry.addAttribute( 'position', new THREE.Float32Attribute( [\n\t\t- size,   size, 0,\n\t\t  size,   size, 0,\n\t\t  size, - size, 0,\n\t\t- size, - size, 0,\n\t\t- size,   size, 0\n\t], 3 ) );\n\n\tvar material = new THREE.LineBasicMaterial( { fog: false } );\n\n\tthis.add( new THREE.Line( geometry, material ) );\n\n\tgeometry = new THREE.BufferGeometry();\n\tgeometry.addAttribute( 'position', new THREE.Float32Attribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\tthis.add( new THREE.Line( geometry, material ));\n\n\tthis.update();\n\n};\n\nTHREE.DirectionalLightHelper.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.DirectionalLightHelper.prototype.constructor = THREE.DirectionalLightHelper;\n\nTHREE.DirectionalLightHelper.prototype.dispose = function () {\n\n\tvar lightPlane = this.children[ 0 ];\n\tvar targetLine = this.children[ 1 ];\n\n\tlightPlane.geometry.dispose();\n\tlightPlane.material.dispose();\n\ttargetLine.geometry.dispose();\n\ttargetLine.material.dispose();\n\n};\n\nTHREE.DirectionalLightHelper.prototype.update = function () {\n\n\tvar v1 = new THREE.Vector3();\n\tvar v2 = new THREE.Vector3();\n\tvar v3 = new THREE.Vector3();\n\n\treturn function update() {\n\n\t\tv1.setFromMatrixPosition( this.light.matrixWorld );\n\t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\tv3.subVectors( v2, v1 );\n\n\t\tvar lightPlane = this.children[ 0 ];\n\t\tvar targetLine = this.children[ 1 ];\n\n\t\tlightPlane.lookAt( v3 );\n\t\tlightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\t\ttargetLine.lookAt( v3 );\n\t\ttargetLine.scale.z = v3.length();\n\n\t};\n\n}();\n\n// File:src/extras/helpers/EdgesHelper.js\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n * @param object THREE.Mesh whose geometry will be used\n * @param hex line color\n * @param thresholdAngle the minimum angle (in degrees),\n * between the face normals of adjacent faces,\n * that is required to render an edge. A value of 10 means\n * an edge is only rendered if the angle is at least 10 degrees.\n */\n\nTHREE.EdgesHelper = function ( object, hex, thresholdAngle ) {\n\n\tvar color = ( hex !== undefined ) ? hex : 0xffffff;\n\n\tTHREE.LineSegments.call( this, new THREE.EdgesGeometry( object.geometry, thresholdAngle ), new THREE.LineBasicMaterial( { color: color } ) );\n\n\tthis.matrix = object.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n};\n\nTHREE.EdgesHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.EdgesHelper.prototype.constructor = THREE.EdgesHelper;\n\n// File:src/extras/helpers/FaceNormalsHelper.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nTHREE.FaceNormalsHelper = function ( object, size, hex, linewidth ) {\n\n\t// FaceNormalsHelper only supports THREE.Geometry\n\n\tthis.object = object;\n\n\tthis.size = ( size !== undefined ) ? size : 1;\n\n\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t//\n\n\tvar nNormals = 0;\n\n\tvar objGeometry = this.object.geometry;\n\n\tif ( objGeometry instanceof THREE.Geometry ) {\n\n\t\tnNormals = objGeometry.faces.length;\n\n\t} else {\n\n\t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\n\n\t}\n\n\t//\n\n\tvar geometry = new THREE.BufferGeometry();\n\n\tvar positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );\n\n\tgeometry.addAttribute( 'position', positions );\n\n\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t//\n\n\tthis.matrixAutoUpdate = false;\n\tthis.update();\n\n};\n\nTHREE.FaceNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.FaceNormalsHelper.prototype.constructor = THREE.FaceNormalsHelper;\n\nTHREE.FaceNormalsHelper.prototype.update = ( function () {\n\n\tvar v1 = new THREE.Vector3();\n\tvar v2 = new THREE.Vector3();\n\tvar normalMatrix = new THREE.Matrix3();\n\n\treturn function update() {\n\n\t\tthis.object.updateMatrixWorld( true );\n\n\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\tvar position = this.geometry.attributes.position;\n\n\t\t//\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tvar vertices = objGeometry.vertices;\n\n\t\tvar faces = objGeometry.faces;\n\n\t\tvar idx = 0;\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tvar normal = face.normal;\n\n\t\t\tv1.copy( vertices[ face.a ] )\n\t\t\t\t.add( vertices[ face.b ] )\n\t\t\t\t.add( vertices[ face.c ] )\n\t\t\t\t.divideScalar( 3 )\n\t\t\t\t.applyMatrix4( matrixWorld );\n\n\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\tidx = idx + 1;\n\n\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\tidx = idx + 1;\n\n\t\t}\n\n\t\tposition.needsUpdate = true;\n\n\t\treturn this;\n\n\t};\n\n}() );\n\n// File:src/extras/helpers/GridHelper.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.GridHelper = function ( size, step, color1, color2 ) {\n\n\tcolor1 = new THREE.Color( color1 !== undefined ? color1 : 0x444444 );\n\tcolor2 = new THREE.Color( color2 !== undefined ? color2 : 0x888888 );\n\n\tvar vertices = [];\n\tvar colors = [];\n\n\tfor ( var i = - size, j = 0; i <= size; i += step ) {\n\n\t\tvertices.push( - size, 0, i, size, 0, i );\n\t\tvertices.push( i, 0, - size, i, 0, size );\n\n\t\tvar color = i === 0 ? color1 : color2;\n\n\t\tcolor.toArray( colors, j ); j += 3;\n\t\tcolor.toArray( colors, j ); j += 3;\n\t\tcolor.toArray( colors, j ); j += 3;\n\t\tcolor.toArray( colors, j ); j += 3;\n\n\t}\n\n\tvar geometry = new THREE.BufferGeometry();\n\tgeometry.addAttribute( 'position', new THREE.Float32Attribute( vertices, 3 ) );\n\tgeometry.addAttribute( 'color', new THREE.Float32Attribute( colors, 3 ) );\n\n\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\n\n\tTHREE.LineSegments.call( this, geometry, material );\n\n};\n\nTHREE.GridHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.GridHelper.prototype.constructor = THREE.GridHelper;\n\nTHREE.GridHelper.prototype.setColors = function () {\n\n\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\n};\n\n// File:src/extras/helpers/HemisphereLightHelper.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.HemisphereLightHelper = function ( light, sphereSize ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.colors = [ new THREE.Color(), new THREE.Color() ];\n\n\tvar geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );\n\tgeometry.rotateX( - Math.PI / 2 );\n\n\tfor ( var i = 0, il = 8; i < il; i ++ ) {\n\n\t\tgeometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];\n\n\t}\n\n\tvar material = new THREE.MeshBasicMaterial( { vertexColors: THREE.FaceColors, wireframe: true } );\n\n\tthis.lightSphere = new THREE.Mesh( geometry, material );\n\tthis.add( this.lightSphere );\n\n\tthis.update();\n\n};\n\nTHREE.HemisphereLightHelper.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.HemisphereLightHelper.prototype.constructor = THREE.HemisphereLightHelper;\n\nTHREE.HemisphereLightHelper.prototype.dispose = function () {\n\n\tthis.lightSphere.geometry.dispose();\n\tthis.lightSphere.material.dispose();\n\n};\n\nTHREE.HemisphereLightHelper.prototype.update = function () {\n\n\tvar vector = new THREE.Vector3();\n\n\treturn function update() {\n\n\t\tthis.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\tthis.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );\n\n\t\tthis.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\t\tthis.lightSphere.geometry.colorsNeedUpdate = true;\n\n\t};\n\n}();\n\n// File:src/extras/helpers/PointLightHelper.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.PointLightHelper = function ( light, sphereSize ) {\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tvar geometry = new THREE.SphereBufferGeometry( sphereSize, 4, 2 );\n\tvar material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );\n\tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\tTHREE.Mesh.call( this, geometry, material );\n\n\tthis.matrix = this.light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\t/*\n\tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\tvar d = light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\n\tthis.add( this.lightDistance );\n\t*/\n\n};\n\nTHREE.PointLightHelper.prototype = Object.create( THREE.Mesh.prototype );\nTHREE.PointLightHelper.prototype.constructor = THREE.PointLightHelper;\n\nTHREE.PointLightHelper.prototype.dispose = function () {\n\n\tthis.geometry.dispose();\n\tthis.material.dispose();\n\n};\n\nTHREE.PointLightHelper.prototype.update = function () {\n\n\tthis.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\t/*\n\tvar d = this.light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.visible = true;\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\t*/\n\n};\n\n// File:src/extras/helpers/SkeletonHelper.js\n\n/**\n * @author Sean Griffin / http://twitter.com/sgrif\n * @author Michael Guerrero / http://realitymeltdown.com\n * @author mrdoob / http://mrdoob.com/\n * @author ikerr / http://verold.com\n */\n\nTHREE.SkeletonHelper = function ( object ) {\n\n\tthis.bones = this.getBoneList( object );\n\n\tvar geometry = new THREE.Geometry();\n\n\tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\n\t\tvar bone = this.bones[ i ];\n\n\t\tif ( bone.parent instanceof THREE.Bone ) {\n\n\t\t\tgeometry.vertices.push( new THREE.Vector3() );\n\t\t\tgeometry.vertices.push( new THREE.Vector3() );\n\t\t\tgeometry.colors.push( new THREE.Color( 0, 0, 1 ) );\n\t\t\tgeometry.colors.push( new THREE.Color( 0, 1, 0 ) );\n\n\t\t}\n\n\t}\n\n\tgeometry.dynamic = true;\n\n\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors, depthTest: false, depthWrite: false, transparent: true } );\n\n\tTHREE.LineSegments.call( this, geometry, material );\n\n\tthis.root = object;\n\n\tthis.matrix = object.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.update();\n\n};\n\n\nTHREE.SkeletonHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.SkeletonHelper.prototype.constructor = THREE.SkeletonHelper;\n\nTHREE.SkeletonHelper.prototype.getBoneList = function( object ) {\n\n\tvar boneList = [];\n\n\tif ( object instanceof THREE.Bone ) {\n\n\t\tboneList.push( object );\n\n\t}\n\n\tfor ( var i = 0; i < object.children.length; i ++ ) {\n\n\t\tboneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );\n\n\t}\n\n\treturn boneList;\n\n};\n\nTHREE.SkeletonHelper.prototype.update = function () {\n\n\tvar geometry = this.geometry;\n\n\tvar matrixWorldInv = new THREE.Matrix4().getInverse( this.root.matrixWorld );\n\n\tvar boneMatrix = new THREE.Matrix4();\n\n\tvar j = 0;\n\n\tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\n\t\tvar bone = this.bones[ i ];\n\n\t\tif ( bone.parent instanceof THREE.Bone ) {\n\n\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\n\t\t\tgeometry.vertices[ j ].setFromMatrixPosition( boneMatrix );\n\n\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\n\t\t\tgeometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );\n\n\t\t\tj += 2;\n\n\t\t}\n\n\t}\n\n\tgeometry.verticesNeedUpdate = true;\n\n\tgeometry.computeBoundingSphere();\n\n};\n\n// File:src/extras/helpers/SpotLightHelper.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nTHREE.SpotLightHelper = function ( light ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tvar geometry = new THREE.BufferGeometry();\n\n\tvar positions = [\n\t\t0, 0, 0,   0,   0,   1,\n\t\t0, 0, 0,   1,   0,   1,\n\t\t0, 0, 0, - 1,   0,   1,\n\t\t0, 0, 0,   0,   1,   1,\n\t\t0, 0, 0,   0, - 1,   1\n\t];\n\n\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\tvar p1 = ( i / l ) * Math.PI * 2;\n\t\tvar p2 = ( j / l ) * Math.PI * 2;\n\n\t\tpositions.push(\n\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t);\n\n\t}\n\n\tgeometry.addAttribute( 'position', new THREE.Float32Attribute( positions, 3 ) );\n\n\tvar material = new THREE.LineBasicMaterial( { fog: false } );\n\n\tthis.cone = new THREE.LineSegments( geometry, material );\n\tthis.add( this.cone );\n\n\tthis.update();\n\n};\n\nTHREE.SpotLightHelper.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.SpotLightHelper.prototype.constructor = THREE.SpotLightHelper;\n\nTHREE.SpotLightHelper.prototype.dispose = function () {\n\n\tthis.cone.geometry.dispose();\n\tthis.cone.material.dispose();\n\n};\n\nTHREE.SpotLightHelper.prototype.update = function () {\n\n\tvar vector = new THREE.Vector3();\n\tvar vector2 = new THREE.Vector3();\n\n\treturn function update() {\n\n\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\tvector.setFromMatrixPosition( this.light.matrixWorld );\n\t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\tthis.cone.lookAt( vector2.sub( vector ) );\n\n\t\tthis.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\t};\n\n}();\n\n// File:src/extras/helpers/VertexNormalsHelper.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nTHREE.VertexNormalsHelper = function ( object, size, hex, linewidth ) {\n\n\tthis.object = object;\n\n\tthis.size = ( size !== undefined ) ? size : 1;\n\n\tvar color = ( hex !== undefined ) ? hex : 0xff0000;\n\n\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t//\n\n\tvar nNormals = 0;\n\n\tvar objGeometry = this.object.geometry;\n\n\tif ( objGeometry instanceof THREE.Geometry ) {\n\n\t\tnNormals = objGeometry.faces.length * 3;\n\n\t} else if ( objGeometry instanceof THREE.BufferGeometry ) {\n\n\t\tnNormals = objGeometry.attributes.normal.count;\n\n\t}\n\n\t//\n\n\tvar geometry = new THREE.BufferGeometry();\n\n\tvar positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );\n\n\tgeometry.addAttribute( 'position', positions );\n\n\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t//\n\n\tthis.matrixAutoUpdate = false;\n\n\tthis.update();\n\n};\n\nTHREE.VertexNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.VertexNormalsHelper.prototype.constructor = THREE.VertexNormalsHelper;\n\nTHREE.VertexNormalsHelper.prototype.update = ( function () {\n\n\tvar v1 = new THREE.Vector3();\n\tvar v2 = new THREE.Vector3();\n\tvar normalMatrix = new THREE.Matrix3();\n\n\treturn function update() {\n\n\t\tvar keys = [ 'a', 'b', 'c' ];\n\n\t\tthis.object.updateMatrixWorld( true );\n\n\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\tvar position = this.geometry.attributes.position;\n\n\t\t//\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tif ( objGeometry instanceof THREE.Geometry ) {\n\n\t\t\tvar vertices = objGeometry.vertices;\n\n\t\t\tvar faces = objGeometry.faces;\n\n\t\t\tvar idx = 0;\n\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar vertex = vertices[ face[ keys[ j ] ] ];\n\n\t\t\t\t\tvar normal = face.vertexNormals[ j ];\n\n\t\t\t\t\tv1.copy( vertex ).applyMatrix4( matrixWorld );\n\n\t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( objGeometry instanceof THREE.BufferGeometry ) {\n\n\t\t\tvar objPos = objGeometry.attributes.position;\n\n\t\t\tvar objNorm = objGeometry.attributes.normal;\n\n\t\t\tvar idx = 0;\n\n\t\t\t// for simplicity, ignore index and drawcalls, and render every normal\n\n\t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\n\n\t\t\t\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\n\n\t\t\t\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\n\n\t\t\t\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tposition.needsUpdate = true;\n\n\t\treturn this;\n\n\t};\n\n}() );\n\n// File:src/extras/helpers/WireframeHelper.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.WireframeHelper = function ( object, hex ) {\n\n\tvar color = ( hex !== undefined ) ? hex : 0xffffff;\n\n\tTHREE.LineSegments.call( this, new THREE.WireframeGeometry( object.geometry ), new THREE.LineBasicMaterial( { color: color } ) );\n\n\tthis.matrix = object.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n};\n\nTHREE.WireframeHelper.prototype = Object.create( THREE.LineSegments.prototype );\nTHREE.WireframeHelper.prototype.constructor = THREE.WireframeHelper;\n\n// File:src/extras/objects/ImmediateRenderObject.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.ImmediateRenderObject = function ( material ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.material = material;\n\tthis.render = function ( renderCallback ) {};\n\n};\n\nTHREE.ImmediateRenderObject.prototype = Object.create( THREE.Object3D.prototype );\nTHREE.ImmediateRenderObject.prototype.constructor = THREE.ImmediateRenderObject;\n\n// File:src/extras/objects/MorphBlendMesh.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.MorphBlendMesh = function( geometry, material ) {\n\n\tTHREE.Mesh.call( this, geometry, material );\n\n\tthis.animationsMap = {};\n\tthis.animationsList = [];\n\n\t// prepare default animation\n\t// (all frames played together in 1 second)\n\n\tvar numFrames = this.geometry.morphTargets.length;\n\n\tvar name = \"__default\";\n\n\tvar startFrame = 0;\n\tvar endFrame = numFrames - 1;\n\n\tvar fps = numFrames / 1;\n\n\tthis.createAnimation( name, startFrame, endFrame, fps );\n\tthis.setAnimationWeight( name, 1 );\n\n};\n\nTHREE.MorphBlendMesh.prototype = Object.create( THREE.Mesh.prototype );\nTHREE.MorphBlendMesh.prototype.constructor = THREE.MorphBlendMesh;\n\nTHREE.MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {\n\n\tvar animation = {\n\n\t\tstart: start,\n\t\tend: end,\n\n\t\tlength: end - start + 1,\n\n\t\tfps: fps,\n\t\tduration: ( end - start ) / fps,\n\n\t\tlastFrame: 0,\n\t\tcurrentFrame: 0,\n\n\t\tactive: false,\n\n\t\ttime: 0,\n\t\tdirection: 1,\n\t\tweight: 1,\n\n\t\tdirectionBackwards: false,\n\t\tmirroredLoop: false\n\n\t};\n\n\tthis.animationsMap[ name ] = animation;\n\tthis.animationsList.push( animation );\n\n};\n\nTHREE.MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {\n\n\tvar pattern = /([a-z]+)_?(\\d+)/i;\n\n\tvar firstAnimation, frameRanges = {};\n\n\tvar geometry = this.geometry;\n\n\tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\n\n\t\tvar morph = geometry.morphTargets[ i ];\n\t\tvar chunks = morph.name.match( pattern );\n\n\t\tif ( chunks && chunks.length > 1 ) {\n\n\t\t\tvar name = chunks[ 1 ];\n\n\t\t\tif ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };\n\n\t\t\tvar range = frameRanges[ name ];\n\n\t\t\tif ( i < range.start ) range.start = i;\n\t\t\tif ( i > range.end ) range.end = i;\n\n\t\t\tif ( ! firstAnimation ) firstAnimation = name;\n\n\t\t}\n\n\t}\n\n\tfor ( var name in frameRanges ) {\n\n\t\tvar range = frameRanges[ name ];\n\t\tthis.createAnimation( name, range.start, range.end, fps );\n\n\t}\n\n\tthis.firstAnimation = firstAnimation;\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.direction = 1;\n\t\tanimation.directionBackwards = false;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.direction = - 1;\n\t\tanimation.directionBackwards = true;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.fps = fps;\n\t\tanimation.duration = ( animation.end - animation.start ) / animation.fps;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.duration = duration;\n\t\tanimation.fps = ( animation.end - animation.start ) / animation.duration;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.weight = weight;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.time = time;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.getAnimationTime = function ( name ) {\n\n\tvar time = 0;\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\ttime = animation.time;\n\n\t}\n\n\treturn time;\n\n};\n\nTHREE.MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {\n\n\tvar duration = - 1;\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tduration = animation.duration;\n\n\t}\n\n\treturn duration;\n\n};\n\nTHREE.MorphBlendMesh.prototype.playAnimation = function ( name ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.time = 0;\n\t\tanimation.active = true;\n\n\t} else {\n\n\t\tconsole.warn( \"THREE.MorphBlendMesh: animation[\" + name + \"] undefined in .playAnimation()\" );\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.stopAnimation = function ( name ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.active = false;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.update = function ( delta ) {\n\n\tfor ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {\n\n\t\tvar animation = this.animationsList[ i ];\n\n\t\tif ( ! animation.active ) continue;\n\n\t\tvar frameTime = animation.duration / animation.length;\n\n\t\tanimation.time += animation.direction * delta;\n\n\t\tif ( animation.mirroredLoop ) {\n\n\t\t\tif ( animation.time > animation.duration || animation.time < 0 ) {\n\n\t\t\t\tanimation.direction *= - 1;\n\n\t\t\t\tif ( animation.time > animation.duration ) {\n\n\t\t\t\t\tanimation.time = animation.duration;\n\t\t\t\t\tanimation.directionBackwards = true;\n\n\t\t\t\t}\n\n\t\t\t\tif ( animation.time < 0 ) {\n\n\t\t\t\t\tanimation.time = 0;\n\t\t\t\t\tanimation.directionBackwards = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tanimation.time = animation.time % animation.duration;\n\n\t\t\tif ( animation.time < 0 ) animation.time += animation.duration;\n\n\t\t}\n\n\t\tvar keyframe = animation.start + THREE.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );\n\t\tvar weight = animation.weight;\n\n\t\tif ( keyframe !== animation.currentFrame ) {\n\n\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = 0;\n\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;\n\n\t\t\tthis.morphTargetInfluences[ keyframe ] = 0;\n\n\t\t\tanimation.lastFrame = animation.currentFrame;\n\t\t\tanimation.currentFrame = keyframe;\n\n\t\t}\n\n\t\tvar mix = ( animation.time % frameTime ) / frameTime;\n\n\t\tif ( animation.directionBackwards ) mix = 1 - mix;\n\n\t\tif ( animation.currentFrame !== animation.lastFrame ) {\n\n\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = mix * weight;\n\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;\n\n\t\t} else {\n\n\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = weight;\n\n\t\t}\n\n\t}\n\n};\n\n"],"sourceRoot":"/source/"}